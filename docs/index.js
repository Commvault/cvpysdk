URLS=[
"cvpysdk/index.html",
"cvpysdk/activate.html",
"cvpysdk/activateapps/index.html",
"cvpysdk/activateapps/compliance_utils.html",
"cvpysdk/activateapps/constants.html",
"cvpysdk/activateapps/ediscovery_utils.html",
"cvpysdk/activateapps/entity_manager.html",
"cvpysdk/activateapps/file_storage_optimization.html",
"cvpysdk/activateapps/inventory_manager.html",
"cvpysdk/activateapps/request_manager.html",
"cvpysdk/activateapps/sensitive_data_governance.html",
"cvpysdk/activitycontrol.html",
"cvpysdk/agent.html",
"cvpysdk/agents/index.html",
"cvpysdk/agents/exchange_database_agent.html",
"cvpysdk/alert.html",
"cvpysdk/array_management.html",
"cvpysdk/backupset.html",
"cvpysdk/backupsets/index.html",
"cvpysdk/backupsets/aadbackupset.html",
"cvpysdk/backupsets/adbackupset.html",
"cvpysdk/backupsets/cabackupset.html",
"cvpysdk/backupsets/cloudapps/index.html",
"cvpysdk/backupsets/cloudapps/salesforce_backupset.html",
"cvpysdk/backupsets/db2backupset.html",
"cvpysdk/backupsets/fsbackupset.html",
"cvpysdk/backupsets/hanabackupset.html",
"cvpysdk/backupsets/nasbackupset.html",
"cvpysdk/backupsets/postgresbackupset.html",
"cvpysdk/backupsets/sharepointbackupset.html",
"cvpysdk/backupsets/vsbackupset.html",
"cvpysdk/backup_network_pairs.html",
"cvpysdk/certificates.html",
"cvpysdk/cleanroom/index.html",
"cvpysdk/cleanroom/cs_recovery.html",
"cvpysdk/cleanroom/recovery_groups.html",
"cvpysdk/cleanroom/target.html",
"cvpysdk/client.html",
"cvpysdk/clientgroup.html",
"cvpysdk/clients/index.html",
"cvpysdk/clients/onedrive_client.html",
"cvpysdk/clients/vmclient.html",
"cvpysdk/commcell.html",
"cvpysdk/commcell_migration.html",
"cvpysdk/constants.html",
"cvpysdk/content_analyzer.html",
"cvpysdk/credential_manager.html",
"cvpysdk/cvpysdk.html",
"cvpysdk/datacube/index.html",
"cvpysdk/datacube/constants.html",
"cvpysdk/datacube/datacube.html",
"cvpysdk/datacube/datasource.html",
"cvpysdk/datacube/handler.html",
"cvpysdk/datacube/sedstype.html",
"cvpysdk/deduplication_engines.html",
"cvpysdk/deployment/index.html",
"cvpysdk/deployment/cache_config.html",
"cvpysdk/deployment/deploymentconstants.html",
"cvpysdk/deployment/download.html",
"cvpysdk/deployment/install.html",
"cvpysdk/deployment/uninstall.html",
"cvpysdk/dev_test_group.html",
"cvpysdk/disasterrecovery.html",
"cvpysdk/domains.html",
"cvpysdk/download_center.html",
"cvpysdk/drorchestration/index.html",
"cvpysdk/drorchestration/blr_pairs.html",
"cvpysdk/drorchestration/drjob.html",
"cvpysdk/job.html",
"cvpysdk/drorchestration/drorchestrationoperations.html",
"cvpysdk/drorchestration/dr_orchestration_job_phase.html",
"cvpysdk/drorchestration/failovergroups.html",
"cvpysdk/drorchestration/replicationmonitor.html",
"cvpysdk/drorchestration/replication_groups.html",
"cvpysdk/drorchestration/replication_pairs.html",
"cvpysdk/subclients/virtualserver/livesync/vsa_live_sync.html",
"cvpysdk/eventviewer.html",
"cvpysdk/exception.html",
"cvpysdk/globalfilter.html",
"cvpysdk/hac_clusters.html",
"cvpysdk/identity_management.html",
"cvpysdk/index_pools.html",
"cvpysdk/index_server.html",
"cvpysdk/instance.html",
"cvpysdk/instances/index.html",
"cvpysdk/instances/aadinstance.html",
"cvpysdk/instances/bigdataappsinstance.html",
"cvpysdk/instances/cainstance.html",
"cvpysdk/instances/cloudapps/index.html",
"cvpysdk/instances/cloudapps/amazon_instance.html",
"cvpysdk/instances/cloudapps/cloud_database_instance.html",
"cvpysdk/instances/cloudapps/cloud_storage_instance.html",
"cvpysdk/instances/cloudapps/dynamics365_instance.html",
"cvpysdk/instances/cloudapps/google_instance.html",
"cvpysdk/instances/cloudapps/onedrive_instance.html",
"cvpysdk/instances/cloudapps/salesforce_instance.html",
"cvpysdk/instances/cloudapps/spanner_instance.html",
"cvpysdk/instances/cloudapps/teams_instance.html",
"cvpysdk/instances/db2instance.html",
"cvpysdk/instances/dbinstance.html",
"cvpysdk/instances/hanainstance.html",
"cvpysdk/instances/informixinstance.html",
"cvpysdk/instances/lndbinstance.html",
"cvpysdk/instances/lotusnotes/index.html",
"cvpysdk/instances/lotusnotes/lndbinstance.html",
"cvpysdk/instances/lotusnotes/lndminstance.html",
"cvpysdk/instances/lotusnotes/lndocinstance.html",
"cvpysdk/instances/lotusnotes/lninstance.html",
"cvpysdk/instances/mysqlinstance.html",
"cvpysdk/instances/oracleinstance.html",
"cvpysdk/instances/postgresinstance.html",
"cvpysdk/instances/saporacleinstance.html",
"cvpysdk/instances/sharepointinstance.html",
"cvpysdk/instances/splunkinstance.html",
"cvpysdk/instances/sqlinstance.html",
"cvpysdk/instances/sybaseinstance.html",
"cvpysdk/instances/virtualserver/index.html",
"cvpysdk/instances/virtualserver/alibaba_cloud.html",
"cvpysdk/instances/vsinstance.html",
"cvpysdk/instances/virtualserver/amazon_web_services.html",
"cvpysdk/instances/virtualserver/azure.html",
"cvpysdk/instances/virtualserver/azure_resource_manager.html",
"cvpysdk/instances/virtualserver/azure_stack.html",
"cvpysdk/instances/virtualserver/fusioncompute.html",
"cvpysdk/instances/virtualserver/google_cloud_platform.html",
"cvpysdk/instances/virtualserver/hyperv.html",
"cvpysdk/instances/virtualserver/kubernetes.html",
"cvpysdk/instances/virtualserver/null.html",
"cvpysdk/instances/virtualserver/nutanix_ahv.html",
"cvpysdk/instances/virtualserver/openstack.html",
"cvpysdk/instances/virtualserver/oraclevm.html",
"cvpysdk/instances/virtualserver/oracle_cloud.html",
"cvpysdk/instances/virtualserver/oracle_cloud_infrastructure.html",
"cvpysdk/instances/virtualserver/red_hat_virtualization.html",
"cvpysdk/instances/virtualserver/vcloud_director.html",
"cvpysdk/instances/virtualserver/vmware.html",
"cvpysdk/instances/virtualserver/xen.html",
"cvpysdk/instances/vminstance.html",
"cvpysdk/internetoptions.html",
"cvpysdk/key_management_server.html",
"cvpysdk/license.html",
"cvpysdk/metallic.html",
"cvpysdk/metricsreport.html",
"cvpysdk/monitoring.html",
"cvpysdk/name_change.html",
"cvpysdk/network.html",
"cvpysdk/network_throttle.html",
"cvpysdk/network_topology.html",
"cvpysdk/operation_window.html",
"cvpysdk/organization.html",
"cvpysdk/plan.html",
"cvpysdk/policies/index.html",
"cvpysdk/policies/configuration_policies.html",
"cvpysdk/policies/schedule_options.html",
"cvpysdk/policies/schedule_policies.html",
"cvpysdk/policies/storage_policies.html",
"cvpysdk/policy.html",
"cvpysdk/recovery_targets.html",
"cvpysdk/regions.html",
"cvpysdk/reports/index.html",
"cvpysdk/reports/report.html",
"cvpysdk/schedules.html",
"cvpysdk/security/index.html",
"cvpysdk/security/role.html",
"cvpysdk/security/security_association.html",
"cvpysdk/security/two_factor_authentication.html",
"cvpysdk/security/user.html",
"cvpysdk/security/usergroup.html",
"cvpysdk/services.html",
"cvpysdk/storage.html",
"cvpysdk/storage_pool.html",
"cvpysdk/subclient.html",
"cvpysdk/subclients/index.html",
"cvpysdk/subclients/aadsubclient.html",
"cvpysdk/subclients/adsubclient.html",
"cvpysdk/subclients/bigdataappssubclient.html",
"cvpysdk/subclients/fssubclient.html",
"cvpysdk/subclients/casesubclient.html",
"cvpysdk/subclients/casubclient.html",
"cvpysdk/subclients/cloudapps/index.html",
"cvpysdk/subclients/cloudapps/cloud_database_subclient.html",
"cvpysdk/subclients/cloudapps/cloud_storage_subclient.html",
"cvpysdk/subclients/cloudapps/dynamics365_subclient.html",
"cvpysdk/subclients/o365apps_subclient.html",
"cvpysdk/subclients/cloudapps/google_subclient.html",
"cvpysdk/subclients/cloudapps/salesforce_subclient.html",
"cvpysdk/subclients/cloudapps/spanner_subclient.html",
"cvpysdk/subclients/cloudapps/teams_constants.html",
"cvpysdk/subclients/cloudapps/teams_subclient.html",
"cvpysdk/subclients/db2subclient.html",
"cvpysdk/subclients/dbsubclient.html",
"cvpysdk/subclients/exchange/index.html",
"cvpysdk/subclients/exchange/contentstoremailbox_subclient.html",
"cvpysdk/subclients/exchsubclient.html",
"cvpysdk/subclients/exchange/exchange_database_subclient.html",
"cvpysdk/subclients/exchange/journalmailbox_subclient.html",
"cvpysdk/subclients/exchange/usermailbox_subclient.html",
"cvpysdk/subclients/hanasubclient.html",
"cvpysdk/subclients/index_server_subclient.html",
"cvpysdk/subclients/informixsubclient.html",
"cvpysdk/subclients/lndbsubclient.html",
"cvpysdk/subclients/lotusnotes/index.html",
"cvpysdk/subclients/lotusnotes/lndbsubclient.html",
"cvpysdk/subclients/lotusnotes/lnsubclient.html",
"cvpysdk/subclients/lotusnotes/lndmsubclient.html",
"cvpysdk/subclients/lotusnotes/lndocsubclient.html",
"cvpysdk/subclients/mysqlsubclient.html",
"cvpysdk/subclients/nassubclient.html",
"cvpysdk/subclients/oraclesubclient.html",
"cvpysdk/subclients/postgressubclient.html",
"cvpysdk/subclients/saporaclesubclient.html",
"cvpysdk/subclients/sharepointsubclient.html",
"cvpysdk/subclients/splunksubclient.html",
"cvpysdk/subclients/sqlsubclient.html",
"cvpysdk/subclients/sybasesubclient.html",
"cvpysdk/subclients/virtualserver/index.html",
"cvpysdk/subclients/virtualserver/alibaba_cloud.html",
"cvpysdk/subclients/vssubclient.html",
"cvpysdk/subclients/virtualserver/amazon_web_services.html",
"cvpysdk/subclients/virtualserver/azure.html",
"cvpysdk/subclients/virtualserver/azure_resource_manager.html",
"cvpysdk/subclients/virtualserver/azure_stack.html",
"cvpysdk/subclients/virtualserver/fusioncompute.html",
"cvpysdk/subclients/virtualserver/google_cloud_platform.html",
"cvpysdk/subclients/virtualserver/hyperv.html",
"cvpysdk/subclients/virtualserver/kubernetes.html",
"cvpysdk/subclients/virtualserver/livesync/index.html",
"cvpysdk/subclients/virtualserver/livesync/amazon_live_sync.html",
"cvpysdk/subclients/virtualserver/livesync/azure_live_sync.html",
"cvpysdk/subclients/virtualserver/livesync/hyperv_live_sync.html",
"cvpysdk/subclients/virtualserver/livesync/vmware_live_sync.html",
"cvpysdk/subclients/virtualserver/null.html",
"cvpysdk/subclients/virtualserver/nutanix_ahv.html",
"cvpysdk/subclients/virtualserver/openstack.html",
"cvpysdk/subclients/virtualserver/oraclevm.html",
"cvpysdk/subclients/virtualserver/oracle_cloud.html",
"cvpysdk/subclients/virtualserver/oracle_cloud_infrastructure.html",
"cvpysdk/subclients/virtualserver/red_hat_openshift.html",
"cvpysdk/subclients/virtualserver/red_hat_virtualization.html",
"cvpysdk/subclients/virtualserver/vcloud_director.html",
"cvpysdk/subclients/virtualserver/vmware.html",
"cvpysdk/subclients/virtualserver/xen.html",
"cvpysdk/subclients/vminstancesubclient.html",
"cvpysdk/system.html",
"cvpysdk/virtualmachinepolicies.html",
"cvpysdk/workflow.html"
];
INDEX=[
{
"ref":"cvpysdk",
"url":0,
"doc":"CVPySDK (Developer SDK - Python) is a Python Package for Commvault Software. CVPySDK uses Commvault REST API to perform operations on a Commcell. CVPySDK is available on GitHub (https: github.com/Commvault/cvpysdk). CVPySDK is compatible with Python 3 CVPySDK requires the following Python packages to run: -  requests -  xmltodict And Commvault Software v11 SP7 or later release with WebConsole installed"
},
{
"ref":"cvpysdk.activate",
"url":1,
"doc":"Main file for performing operations on Activate apps. Activate : Base class for all activate apps __init__()  initialize instance of the Activate class __del__()  destructor class for deleting referenced apps instances Activate instance Attributes                entity_manager  returns object of entity_manager class based on entity type specified  inventory_manager  returns object of Inventories class  file_storage_optimization  returns object of file_storage_optimization based on FSO type  sensitive_data_governance  returns object of sensitive data governance app  request_manager  returns object of Requests class"
},
{
"ref":"cvpysdk.activate.Activate",
"url":1,
"doc":"Class for representing activate apps in the commcell. Initializes an instance of the Activate class. Args: commcell_object (object)  instance of the commcell class Returns: object - instance of the Activate class"
},
{
"ref":"cvpysdk.activate.Activate.compliance_search",
"url":1,
"doc":"Returns the Compliance Search utility class object from activate apps",
"func":1
},
{
"ref":"cvpysdk.activate.Activate.inventory_manager",
"url":1,
"doc":"Returns the Inventories class object from inventory manager app from activate apps",
"func":1
},
{
"ref":"cvpysdk.activate.Activate.request_manager",
"url":1,
"doc":"Returns the Requests class object from request manager app from activate apps",
"func":1
},
{
"ref":"cvpysdk.activate.Activate.file_storage_optimization",
"url":1,
"doc":"returns object of FsoServers/FsoServerGroups/Projects based on FSO type Args: fso_type (enum)  FsoTypes enum (Default : FsoServers) Returns: obj  Instance of FsoServers/FsoServerGroups/Projects based on type Raises: SDKException: if input data is not valid if entity type is not supported",
"func":1
},
{
"ref":"cvpysdk.activate.Activate.sensitive_data_governance",
"url":1,
"doc":"returns object of Sensitive data governance - Projects class Args: None Returns: obj  Instance of Projects class from sensitive data governance Raises: None",
"func":1
},
{
"ref":"cvpysdk.activate.Activate.entity_manager",
"url":1,
"doc":"Returns the ActivateEntities or Classifiers or Tagsets object in entity manager based on input type Args: entity_type (enum)  EntityManagerTypes enum Default : ENTITIES Returns: object  Instance of ActivateEntities or Classifiers or Tags class based on entity_type Raises: SDKException: if input data is not valid if entity type is not supported",
"func":1
},
{
"ref":"cvpysdk.activateapps",
"url":2,
"doc":"Initialize Activate Apps for the SDK."
},
{
"ref":"cvpysdk.activateapps.compliance_utils",
"url":3,
"doc":"Utilities class for Activate application : Compliance Search ComplianceSearchUtils: Class for compliance search related operations support ExportSets: Class for representing all the export sets associated with the commcell ExportSet: Class for an instance of a single Export set of the commcell Export: Class for an instance of a single Export of the commcell ComplianceSearchUtils       __init__()  Initializes the Compliance search utility class _response_not_success()  Helper method to raise exception when response is not 200 (ok) do_compliance_search()  Method to run a compliance search with the search text provided ExportSets       __init__()  Initializes the ExportSets class _response_not_success()  Helper method to raise exception when response is not 200 (ok) _get_export_sets()  Method to call the API and fetch all the export sets from the commcell environment refresh()  Method to refresh all the properties of the class ExportSets add()  Method to create an export set to the commcell environment has()  Method to check if the export set exists or not get()  Method to get the export set delete()  Method to delete the export set ExportSet       __init__()  Initializes the ExportSet class _response_not_success()  Helper method to raise exception when response is not 200 (ok) refresh()  Method to refresh all the properties of the class ExportSet _get_all_exports()  Method to fetch all the exports for the export set share()  Method to share the export set with the user or user group has()  Method to check if the export exists or not get()  Method to get the export delete()  Method to delete the export export_items_to_set()  Method to export items/documents to the export set select()  Static Method to randomly pick user input amount of items from the search result items ExportSet Attributes            -  properties  return all the properties of the export set  export_set_full_name  return the export set full name  export_set_name  return the export set name  export_set_comment  return the export set comment  export_set_id  return the export set ID  export_set_guid  return the export set GUID  export_set_owner_info  return the export set owner info Export       __init__()  Initializes the Export class _response_not_success()  Helper method to raise exception when response is not 200 (ok) refresh()  Method to refresh all the properties of the class Export download_export()  Method to download the exported items to a zip file"
},
{
"ref":"cvpysdk.activateapps.compliance_utils.ComplianceSearchUtils",
"url":3,
"doc":"Class for compliance search related operations support Initializes the Compliance search utility class"
},
{
"ref":"cvpysdk.activateapps.compliance_utils.ComplianceSearchUtils.do_compliance_search",
"url":3,
"doc":"Method to run a compliance search with the search text provided Args: search_text (str) - Search text to be searched on the Compliance search index_server_name (str) - Index server name on which the search has to be executed Returns: List of all the search result items with the metadata and SOLR fields Raises: SDKException: Response was not success",
"func":1
},
{
"ref":"cvpysdk.activateapps.compliance_utils.ExportSets",
"url":3,
"doc":"Class for representing all the export sets associated with the commcell Initializes the ExportSets class"
},
{
"ref":"cvpysdk.activateapps.compliance_utils.ExportSets.refresh",
"url":3,
"doc":"Method to refresh all the properties of the class ExportSets",
"func":1
},
{
"ref":"cvpysdk.activateapps.compliance_utils.ExportSets.add",
"url":3,
"doc":"Method to create an export set to the commcell environment Args: export_set_name (str) - Export set name for the newly created export set comment (str) - Export set description fot the newly created export set Returns: ExportSet instance for the newly created export set",
"func":1
},
{
"ref":"cvpysdk.activateapps.compliance_utils.ExportSets.has",
"url":3,
"doc":"Method to check if the export set exists or not Args: export_set_name (str) - Export set name to be checked Returns: Returns True if export set exists in the environment or False otherwise",
"func":1
},
{
"ref":"cvpysdk.activateapps.compliance_utils.ExportSets.get",
"url":3,
"doc":"Method to get the export set Args: export_set_name (str) - Export set name to get Returns: ExportSet instance for the export set with the given name if found else raises Exception",
"func":1
},
{
"ref":"cvpysdk.activateapps.compliance_utils.ExportSets.delete",
"url":3,
"doc":"Method to delete the export set Args: export_set_name (str) - Export set name to be deleted Returns: Returns None if delete successfully else raises error Raises: SDKException: Response was not success",
"func":1
},
{
"ref":"cvpysdk.activateapps.compliance_utils.ExportSet",
"url":3,
"doc":"Class for an instance of a single Export set of the commcell Initializes the ExportSet class"
},
{
"ref":"cvpysdk.activateapps.compliance_utils.ExportSet.refresh",
"url":3,
"doc":"Method to refresh the properties of the class ExportSet",
"func":1
},
{
"ref":"cvpysdk.activateapps.compliance_utils.ExportSet.share",
"url":3,
"doc":"Method to share the export set with the user or user group provided Args: user_or_user_group_name (str) - User or user group with which export set has to be shared permissions (list/str) - List or comma separated permissions that need to be set to the user/ user group mode (int) - to add (2), remove (3) or overwrite (1) the permissions Default : Add (2) Returns: Returns None if share worked fine else raises an Exception",
"func":1
},
{
"ref":"cvpysdk.activateapps.compliance_utils.ExportSet.has",
"url":3,
"doc":"Method to check if the export exists or not Args: export_name (str) - Export name to be checked Returns: Returns True if export exists in the environment or False otherwise",
"func":1
},
{
"ref":"cvpysdk.activateapps.compliance_utils.ExportSet.get",
"url":3,
"doc":"Method to get the export Args: export_name (str) - Export name to get Returns: Export class instance for the export with the given name if found else returns None",
"func":1
},
{
"ref":"cvpysdk.activateapps.compliance_utils.ExportSet.delete",
"url":3,
"doc":"Method to delete the export Args: export_name (str) - Export name to be deleted Returns: Returns None if delete successfully else raises error Raises: SDKException: Response was not success",
"func":1
},
{
"ref":"cvpysdk.activateapps.compliance_utils.ExportSet.export_items_to_set",
"url":3,
"doc":"Method to export items/documents to the export set Args: export_name (str) - Export name for the exported items export_items (list) - List of search result items which needs to be export Returns: Returns the restore job ID for the export operation Raises: SDKException: Response was not success",
"func":1
},
{
"ref":"cvpysdk.activateapps.compliance_utils.ExportSet.select",
"url":3,
"doc":"Static Method to randomly pick user input amount of items from the search result items Args: result_items (list) - List of all the search result items no_of_files (int) - Number of items to be selected export_all (bool) - if all the items needs to be selected or not Returns: List of randomly selected (no_of_files) items from the (result_items)",
"func":1
},
{
"ref":"cvpysdk.activateapps.compliance_utils.ExportSet.properties",
"url":3,
"doc":"Method to return all the properties of the export set Returns: Dict of the properties of the export set as received from the API (rawdata)"
},
{
"ref":"cvpysdk.activateapps.compliance_utils.ExportSet.export_set_full_name",
"url":3,
"doc":"Method to return the export set full name Returns: (str) export set full name"
},
{
"ref":"cvpysdk.activateapps.compliance_utils.ExportSet.export_set_name",
"url":3,
"doc":"Method to return the export set name Returns: (str) export set name"
},
{
"ref":"cvpysdk.activateapps.compliance_utils.ExportSet.export_set_comment",
"url":3,
"doc":"Method to return the export set comment Returns: (str) export set comment"
},
{
"ref":"cvpysdk.activateapps.compliance_utils.ExportSet.export_set_id",
"url":3,
"doc":"Method to return the export set ID Returns: (int) export set ID"
},
{
"ref":"cvpysdk.activateapps.compliance_utils.ExportSet.export_set_guid",
"url":3,
"doc":"Method to return the export set Guid Returns: (str) export set Guid"
},
{
"ref":"cvpysdk.activateapps.compliance_utils.ExportSet.export_set_owner_info",
"url":3,
"doc":"Method to return the export set Owner info Returns: (str) export set Owner info"
},
{
"ref":"cvpysdk.activateapps.compliance_utils.Export",
"url":3,
"doc":"Class for an instance of a single Export of the export set Initializes the Export class instance"
},
{
"ref":"cvpysdk.activateapps.compliance_utils.Export.refresh",
"url":3,
"doc":"Method to refresh the properties of the class Export",
"func":1
},
{
"ref":"cvpysdk.activateapps.compliance_utils.Export.download_export",
"url":3,
"doc":"Method to download the exported items to a zip file Args: download_folder (str) - Path of the folder in which exported items zip file should be saved Returns: (str) path of the downloaded zip file Raises: SDKException: Response was not success",
"func":1
},
{
"ref":"cvpysdk.activateapps.constants",
"url":4,
"doc":"Helper file to maintain all the constants for Activate Apps ActivateEntityConstants - Maintains constants for Regex custom entity TagConstants - Maintains constants for Tags ClassifierConstants - Maintains constants for Classifiers TrainingStatus - Enum class for classifier training status TargetApps - Enum class for Activate App types PlanConstants - Maintains constants for Plan operations InventoryConstants - Maintains constants for Inventory Manager apps EdiscoveryConstants - Maintains constants for Ediscovery clients in activate RequestConstants - Maintains constants for request manager in Activate ComplianceConstants - Maintains constants for Compliance Search in Activate"
},
{
"ref":"cvpysdk.activateapps.constants.RequestConstants",
"url":4,
"doc":"class to maintain constants for request manager"
},
{
"ref":"cvpysdk.activateapps.constants.RequestConstants.PROPERTY_REVIEW_CRIERIA",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.RequestConstants.PROPERTY_ENTITIES",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.RequestConstants.PROPERTY_REQUEST_HANDLER_ID",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.RequestConstants.PROPERTY_REQUEST_HANDLER_NAME",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.RequestConstants.PROPERTY_REVIEW_SET_ID",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.RequestConstants.SEARCH_QUERY_SELECTION_SET",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.RequestConstants.FACET_REVIEWED",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.RequestConstants.FACET_NOT_REVIEWED",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.RequestConstants.FACET_ACCEPTED",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.RequestConstants.FACET_DECLINED",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.RequestConstants.FACET_REDACTED",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.RequestConstants.FACET_NOT_REDACTED",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.RequestConstants.FACET_COUNT",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.RequestConstants.REQUEST_FEDERATED_FACET_SEARCH_QUERY",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.RequestConstants.FIELD_DOC_COUNT",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.RequestConstants.FIELD_REVIEWED",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.RequestConstants.FIELD_NOT_REVIEWED",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.RequestConstants.FIELD_ACCEPTED",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.RequestConstants.FIELD_DECLINED",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.RequestConstants.FIELD_REDACTED",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.RequestConstants.FIELD_NOT_REDACTED",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.RequestConstants.RequestStatus",
"url":4,
"doc":"enum to specify different request status"
},
{
"ref":"cvpysdk.activateapps.constants.RequestConstants.RequestType",
"url":4,
"doc":"enum to maintain different request type"
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants",
"url":4,
"doc":"class to maintain constants for ediscovery clients"
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.CrawlType",
"url":4,
"doc":"Crawl type for SDG/FSO jobs"
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.SourceType",
"url":4,
"doc":"Source type of data for FSO/SDG app"
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.ReviewActions",
"url":4,
"doc":"Review actions for documents on SDG/FSO app"
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.RiskTypes",
"url":4,
"doc":"Different risk types for documents on SDG/FSO app"
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.FSO_SERVERS",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.FSO_SERVER_GROUPS",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.SERVER_LEVEL_SCHEDULE_JSON",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.REVIEW_ACTION_FSO_SUPPORTED",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.REVIEW_ACTION_SDG_SUPPORTED",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.CREATE_CLIENT_REQ_JSON",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.REVIEW_ACTION_DELETE_REQ_JSON",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.REVIEW_ACTION_MOVE_REQ_JSON",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.REVIEW_ACTION_SET_RETENTION_REQ_JSON",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.REVIEW_ACTION_IGNORE_FILES_REQ_JSON",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.REVIEW_ACTION_TAG_REQ_JSON",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.REVIEW_ACTION_BULK_SEARCH_REQ",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.REVIEW_ACTION_SEARCH_FL_SET",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.REVIEW_ACTION_IDA_SELECT_SET",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.FS_SERVER_HANDLER_NAME",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.ADD_FS_REQ_JSON",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.FS_DEFAULT_EXPORT_FIELDS",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.EXPORT_DOWNLOAD_REQ",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.DATA_SOURCE_TYPES",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.VIEW_CATEGORY_PERMISSION",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.EDIT_CATEGORY_PERMISSION",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.SHARE_REQUEST_JSON",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.DS_FILE",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.DS_CLOUD_STORAGE",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.FIELD_DATA_SOURCE_DISPLAY_NAME",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.FIELD_DISPLAY_NAME",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.FIELD_DATA_SOURCE_NAME",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.FIELD_DATA_SOURCE_ID_NON_SEA",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.FIELD_DOCUMENT_COUNT",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.FIELD_DATA_SOURCE_TYPE",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.FIELD_DATA_SOURCE_ID",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.FIELD_PLAN_ID",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.FIELD_DC_PLAN_ID",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.FIELD_PSEDUCO_CLIENT_ID",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.FIELD_SUBCLIENT_ID",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.FIELD_CRAWL_TYPE",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.FIELD_DATA_SOURCE_NAME_SEA",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.FIELD_CONTENT_ID",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.FIELD_IS_FILE",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.DYNAMIC_FEDERATED_SEARCH_PARAMS",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.CRITERIA_EXTRACTED_DOCS",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.TAGGING_ITEMS_REQUEST",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.TAGGING_ITEMS_REVIEW_REQUEST",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.EdiscoveryConstants.START_CRAWL_SERVER_REQUEST_JSON",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.InventoryConstants",
"url":4,
"doc":"Class to maintain constants for inventory manager"
},
{
"ref":"cvpysdk.activateapps.constants.InventoryConstants.CRAWL_JOB_FAILED_STATE",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.InventoryConstants.CRAWL_JOB_COMPLETE_STATE",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.InventoryConstants.CRAWL_JOB_COMPLETE_ERROR_STATE",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.InventoryConstants.INVENTORY_ADD_REQUEST_JSON",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.InventoryConstants.FIELD_PROPERTY_NAME",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.InventoryConstants.FIELD_PROPERTY_DNSHOST",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.InventoryConstants.FIELD_PROPERTY_OS",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.InventoryConstants.FIELD_PROPERTY_IP",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.InventoryConstants.FIELD_PROPERTY_COUNTRYCODE",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.InventoryConstants.KWARGS_NAME",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.InventoryConstants.KWARGS_IP",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.InventoryConstants.KWARGS_OS",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.InventoryConstants.KWARGS_FQDN",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.InventoryConstants.KWARGS_COUNTRY_CODE",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.InventoryConstants.FIELD_PROPS_MAPPING",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.InventoryConstants.ASSET_FILE_SERVER_PROPERTY",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.InventoryConstants.IDENTITY_SERVER_ASSET_ADD_TO_INVENTORY_JSON",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.InventoryConstants.VIEW_CATEGORY_PERMISSION",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.InventoryConstants.EDIT_CATEGORY_PERMISSION",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.InventoryConstants.INVENTORY_SHARE_REQUEST_JSON",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.InventoryConstants.AssetType",
"url":4,
"doc":"Asset type for inventory"
},
{
"ref":"cvpysdk.activateapps.constants.PlanConstants",
"url":4,
"doc":"Class to maintain constants related to DC plan activate operations"
},
{
"ref":"cvpysdk.activateapps.constants.PlanConstants.INDEXING_ONLY_METADATA",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.PlanConstants.INDEXING_METADATA_AND_CONTENT",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.PlanConstants.DEFAULT_INCLUDE_DOC_TYPES",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.PlanConstants.DEFAULT_EXCLUDE_LIST",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.PlanConstants.DEFAULT_MIN_DOC_SIZE",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.PlanConstants.DEFAULT_MAX_DOC_SIZE",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.PlanConstants.PLAN_UPDATE_REQUEST_JSON",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.PlanConstants.PLAN_SCHEDULE_REQUEST_JSON",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.PlanConstants.PLAN_SHARE_REQUEST_JSON",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.TargetApps",
"url":4,
"doc":"Class to maintain supported apps types in Activate"
},
{
"ref":"cvpysdk.activateapps.constants.TargetApps.SDG",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.TargetApps.FSO",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.TargetApps.CASE_MGR",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.TargetApps.FS",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.TrainingStatus",
"url":4,
"doc":"Class to maintain training status for classifier"
},
{
"ref":"cvpysdk.activateapps.constants.TrainingStatus.NOT_APPLICABLE",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.TrainingStatus.CREATED",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.TrainingStatus.RUNNING",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.TrainingStatus.FAILED",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.TrainingStatus.COMPLETED",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.TrainingStatus.CANCELLED",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.TrainingStatus.NOT_USABLE",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.ClassifierConstants",
"url":4,
"doc":"Class to maintain all the Classsifier related constants"
},
{
"ref":"cvpysdk.activateapps.constants.ClassifierConstants.CREATE_REQUEST_JSON",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.ActivateEntityConstants",
"url":4,
"doc":"Class to maintain all the Activate entity related constants"
},
{
"ref":"cvpysdk.activateapps.constants.ActivateEntityConstants.REQUEST_JSON",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.TagConstants",
"url":4,
"doc":"class to maintain all the Tags related constants"
},
{
"ref":"cvpysdk.activateapps.constants.TagConstants.TAG_SET_ADD_REQUEST_JSON",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.TagConstants.TAG_SET_MODIFY_REQUEST_JSON",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.TagConstants.TAG_SET_DELETE_REQUEST_JSON",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.TagConstants.TAG_ADD_REQUEST_JSON",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.TagConstants.TAG_MODIFY_REQUEST_JSON",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.TagConstants.VIEW_PERMISSION",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.TagConstants.ADD_PERMISSION",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.TagConstants.TAG_SET_SHARE_REQUEST_JSON",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.ComplianceConstants",
"url":4,
"doc":"Class to maintain all the Compliance search related constants"
},
{
"ref":"cvpysdk.activateapps.constants.ComplianceConstants.VIEW_PERMISSION",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.ComplianceConstants.ADD_PERMISSION",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.ComplianceConstants.DOWNLOAD_PERMISSION",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.ComplianceConstants.DELETE_PERMISSION",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.ComplianceConstants.PERMISSIONS",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.constants.ComplianceConstants.EXPORT_SET_SHARE_REQUEST_JSON",
"url":4,
"doc":""
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils",
"url":5,
"doc":"Main file for performing operations on ediscovery clients & ediscovery data sources. 'EdiscoveryClients','EdiscoveryClientOperations' ,'EdiscoveryDataSources' , 'EdiscoveryDataSource' are the 4 classes defined in this file EdiscoveryClients: Class for getting ediscovery clients details for different apps in activate EdiscoveryClientOperations : Class for performing operations on Ediscovery client EdiscoveryDataSources: Class to represent all datasources associated with ediscovery client EdiscoveryDataSource: Class to represent single data source associated with edisocvery client EdiscoveryClients: __init__()  initialise object of the EdiscoveryClients class _response_not_success()  parses through the exception response, and raises SDKException get_ediscovery_clients()  returns the ediscovery clients details get_ediscovery_client_group_details() - returns the ediscovery client group details get_ediscovery_projects()  returns the ediscovery projects details add()  Adds ediscovery client delete()  deletes ediscovery client EdiscoveryClientOperations: __init__()  initialise object of the EdiscoveryClientOperations class _response_not_success()  parses through the exception response, and raises SDKException _get_associations()  returns the associations blob for this client _do_stream_download()  does stream download of exported csv file to local machine form_search_params()  returns the search params dict for searching/exporting refresh()  refresh the ediscovery client properties share()  shares client with given user name or group name export()  do export to CSV on data start_job()  starts collection job on ediscovery client get_job_status()  returns the job status of ediscovery client job get_job_history()  returns the job history details of this ediscovery client wait_for_collection_job()  waits for collection job to finish wait_for_export()  waits for export to csv operation to finish get_ediscovery_client_details()  returns the ediscovery client details get_ediscovery_project_details()  returns the ediscovery project properties search()  returns the search response containing document details get_handler_id()  returns the handler id for this Ediscovery client schedule()  Creates or modifies the schedule associated with ediscovery client do_document_task()  does document related tasks like consent/comment configure_task()  does task configuration for this edisocvery client task_workflow_operation()  calls workflow operation for task EdiscoveryClientOperations Attributes:                     associations  returns the blob of associated entities for this client EdiscoveryDataSources: __init__()  initialise object of the EdiscoveryDataSources class _response_not_success()  parses through the exception response, and raises SDKException _get_data_sources_details()  returns the data sources details associated with ediscovery client _get_data_source_names()  returns separate list of data source display names & data source names associated with client _parse_client_response_for_data_source  returns list of values for field names for data sources from client response _get_data_source_properties()  parses client response and returns deta sources properties has_data_source()  checks whether given data source exists in this client or not get()  returns the EdiscoveryDataSource class object for given data source name delete()  deletes the given data source associated with client add_fs_data_source()  adds file system data source refresh()  refresh the data sources details associated with client get_datasource_document_count()  returns the document count for specified data source EdiscoveryDataSources Attributes:                   data_sources  returns the list of data sources names associated with this client  ediscovery_client_props  returns the Ediscovery client properties response for associated client  total_documents  returns the total documents count from all data sources  client_id  returns associated client id for all these data sources  client_targetapp  returns the source details of client (FSO/SDG) EdiscoveryDataSource: __init__()  initialise object of the EdiscoveryDataSource class _response_not_success()  parses through the exception response, and raises SDKException _get_data_source_properties()  returns the properties of data source _get_property_value()  returns the value for the property name _form_files_list()  returns list of dict containing files details _form_request_options()  returns the options for review request refresh()  refresh the datasource properties get_job_history()  returns the job history for this data source get_active_jobs()  returns the active jobs for this data source search()  returns the search response containing document details export()  do export to CSV on data wait_for_export()  waits for export to csv operation to finish tag_items()  applies tag to the documents review_action()  do review action for documents start_collection()  starts collection job on this data source EdiscoveryDataSource Attributes:                 -  crawl_type_name  returns the crawl type enum name for this data source  crawl_type  returns the crawl type for this data source  core_id  returns the data source core id attribute  computed_core_name  returns the computed core name of this datasource  core_name  returns the core name attribute of this data source  cloud_id  returns the index server cloud id associated with this data source  data_source_props  returns dict containing data source properties  data_source_id  returns the id of data source  data_source_type  returns the type of data source  data_source_name  returns the display name of data source  plan_id  returns the associated DC plan id  data_source_type_id  returns the data source type id value  client_id  returns the client id to which data source belongs too  total_documents  returns the total document count on this data source  sensitive_files_count  returns the total sensitive files count  name  returns the actual name for this data source  index_server_node_client_id  returns the associated Index server node client id on which the collection exists"
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryClients",
"url":5,
"doc":"Class for getting ediscovery clients details for different apps in activate Initializes an instance of the EdiscoveryClients class. Args: commcell_object (object)  instance of the commcell class class_object (object)  instance of FsoServers/FsoServerGroups/FsoServerGroup class Returns: object - instance of the EdiscoveryClients class"
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryClients.delete",
"url":5,
"doc":"Deletes the ediscovery client Args: client_id (int)  Client id Returns: None Raises: SDKException: if input is not valid if failed to delete client if response is empty or not success",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryClients.add",
"url":5,
"doc":"Adds ediscovery client Args: client_name (str)  Name of the client inventory_name (str)  Name of inventory plan_name (str)  Plan name to associate with this client Returns: int  client id Raises: SDKException: if input is not valid if failed to create client if response is empty or not success",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryClients.get_ediscovery_client_group_details",
"url":5,
"doc":"returns the ediscovery client group details for the app Args: None Returns: dict  Containing client group details Raises; SDKException: if failed to get client group details if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryClients.get_ediscovery_clients",
"url":5,
"doc":"returns the ediscovery clients details for the app Args: None Returns: dict  Containing client details Raises; SDKException: if failed to get client details if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryClients.get_ediscovery_projects",
"url":5,
"doc":"returns the ediscovery projects details for the app Args: None Returns: dict  Containing project details Raises; SDKException: if failed to get project details if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryClientOperations",
"url":5,
"doc":"Class for performing operations on ediscovery client. Initializes an instance of the EdiscoveryClientOperations class. Args: commcell_object (object)  instance of the commcell class class_object (object)  instance of Inventory/Asset/FsoServer /EdiscoveryDataSource/EdiscoveryDataSources/FsoServerGroup class Returns: object - instance of the EdiscoveryClientOperations class"
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryClientOperations.refresh",
"url":5,
"doc":"refresh ediscovery client properties",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryClientOperations.schedule",
"url":5,
"doc":"Creates or modifies the schedule associated with ediscovery client Args: schedule_name (str)  Schedule name pattern_json (dict)  Schedule pattern dict (Refer to Create_schedule_pattern in schedule.py) ops_type (int)  Operation type Default : 2 (Add) Supported : 2 (Add/Modify) Raises: SDKException: if input is not valid if failed to create/modify schedule",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryClientOperations.form_search_params",
"url":5,
"doc":"returns the search params dict based on input Args: criteria (str)  containing criteria for query Example : Size:[10 TO 1024] FileName:09_23 attr_list (set)  Column names to be returned in results. Acts as 'fl' in query params (dict)  Any other params which needs to be passed Example : { \"start\" : \"0\" } query (str)  query to be performed (acts as q param in query) default:None (Means  : ) key (str)  key name to be used in request (default:key) is_separate_attr (bool)  specifies whether attribute list needs to formed as separate key-value Returns: dict  Containing searchparams details Example : { \"searchParams\": [ { \"key\": \"wt\", \"value\": \"json\" }, { \"key\": \"defType\", \"value\": \"edismax\" }, { \"key\": \"q\", \"value\": \" : \" }, { \"key\": \"fq\", \"value\": \"(contentid:949c3b53ce4dd72a82b8e67039eeddef)\" }, { \"key\": \"fl\", \"value\": \"contentid,CreatedTime,Url,ClientId\" } ] }",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryClientOperations.get_handler_id",
"url":5,
"doc":"returns the id of given handler name Args: handler_name (str)  Handler name(Default: default) Returns: int  Handler id Raises: SDKException: if failed to find handler if response is empty",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryClientOperations.export",
"url":5,
"doc":"do export to CSV on data Args: criteria (str)  containing criteria for query (Default : None - Exports all docs) Example : 1) Size filter  > Size:[10 TO 1024] 2) File name filter  > FileName_idx:09_23 attr_list (set)  Column names to be returned in results. Acts as 'fl' in query params (dict)  Any other params which needs to be passed Example : { \"start\" : \"0\" } Returns: str  export operation token Raises: SDKException: if failed to perform export",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryClientOperations.search",
"url":5,
"doc":"do searches on data source and returns document details Args: criteria (str)  containing criteria for query (Default : None - returns all docs) Example : 1) Size filter  > Size:[10 TO 1024] 2) File name filter  > FileName_idx:09_23 attr_list (set)  Column names to be returned in results. Acts as 'fl' in query params (dict)  Any other params which needs to be passed Example : { \"start\" : \"0\" } Returns: int,list(dict),dict  Containing document count, document details & facet details(if any) Raises: SDKException: if failed to perform search",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryClientOperations.share",
"url":5,
"doc":"Shares ediscovery client with given user or user group in commcell Args: user_or_group_name (str)  Name of user or group is_user (bool)  Denotes whether this is user or group name default : True(User) allow_edit_permission (bool)  whether to give edit permission or not to user or group ops_type (int)  Operation type Default : 1 (Add) Supported : 1 (Add) 3 (Delete) Returns: None Raises: SDKException: if unable to update security associations if response is empty or not success",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryClientOperations.get_ediscovery_project_details",
"url":5,
"doc":"returns the ediscovery project details Args: None Returns: dict  Containing project details Raises; SDKException: if failed to get project details if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryClientOperations.get_ediscovery_client_details",
"url":5,
"doc":"returns the ediscovery client details for this client Args: None Returns: dict  Containing client details Raises; SDKException: if failed to get client details if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryClientOperations.start_job",
"url":5,
"doc":"Starts job on ediscovery client Args: wait_for_job (bool)  specifies whether to wait for job to complete or not wait_time (int)  time interval to wait for job completion in Mins Default : 60Mins is_incr (bool)  Specifies whether this is incremental or full crawl job Return: None Raises: SDKException: if failed to start collection job",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryClientOperations.wait_for_export",
"url":5,
"doc":"Waits for Export to CSV to finish Args: wait_time (int)  time interval to wait for job completion in Mins Default : 60Mins token (str)  Export to CSV token GUID download (bool)  specify whether to download exported file or not download_location (str)  Path where to download exported csv file Default: Current working dir Return: str  Download GUID for exported CSV file if download=false File path containing exported csv file if download=true Raises: SDKException: if Export status check fails if timeout happens",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryClientOperations.wait_for_collection_job",
"url":5,
"doc":"Waits for collection job to finish Args: wait_time (int)  time interval to wait for job completion in Mins Default : 60Mins Return: None Raises: SDKException: if collection job fails if timeout happens",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryClientOperations.get_job_history",
"url":5,
"doc":"Returns the job history details of ediscovery client Args: None Returns: list(dict)  containing job history details Raises: SDKException: if failed to get job history",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryClientOperations.get_job_status",
"url":5,
"doc":"Returns the job status details of this asset Args: None Returns: dict  containing job status details Raises: SDKException: if failed to get job status",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryClientOperations.do_document_task",
"url":5,
"doc":"does document update for consent/comment Args: doc_id (str)  Document id (Mandatory in case of SDG) comment (str)  User comment ds_id (int)  Data SourceId (Mandatory in case of SDG) consent (bool)  Accept or Decline (Default:True) redact (bool)  Redact ON or OFF (only in case of export) (Default:False) Returns: None Raises: SDKException: if failed to update document if input is not valid",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryClientOperations.task_workflow_operation",
"url":5,
"doc":"calls workflow operation for task Args: None Returns: str  Workflow job id Raises: SDKException: if failed to call task workflow",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryClientOperations.configure_task",
"url":5,
"doc":"configures task for this edsicovery client Args: task_props list(dict)  Task properties Returns: None Raises: SDKException: if input is not valid if failed to configure task",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryClientOperations.associations",
"url":5,
"doc":"returns association blob for this client Returns: dict  containing security association blob details"
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDataSources",
"url":5,
"doc":"Class to represent all datasources associated with ediscovery client Initializes an instance of the EdiscoveryDataSources class. Args: commcell_object (object)  instance of the commcell class class_object (object)  instance of FsoServer/FsoServers/FsoServerGroups class Returns: object - instance of the EdiscoveryDataSources class"
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDataSources.refresh",
"url":5,
"doc":"Refresh the data sources associated with edisocvery client",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDataSources.add_fs_data_source",
"url":5,
"doc":"Adds file system data source to server Args: server_name (str)  Server name which needs to be added data_source_name (str)  Name for data source inventory_name (str)  Inventory name which needs to be associated plan_name (str)  Plan name which needs to be associated with this data source source_type (enum)  Source type for crawl (Live source or Backedup) Refer EdiscoveryConstants.SourceType Kwargs Arguments: scan_type (str)  Specifies scan type when source type is for backed up data Supported values : quick | full crawl_path (list)  File path which needs to be crawl if source type is Live source access_node (str)  server name which needs to be used as access node in case if server to be added is not a commvault client country_name (str)  country name where server is located (default: USA) country_code (str)  Country code (ISO 3166 2-letter code) user_name (str)  User name who has access to UNC path password (str)  base64 encoded password to access unc path enable_monitoring (str)  specifies whether to enable file monitoring or not for this Returns: obj  Instance of EdiscoveryDataSource class None  if it is called to create FSO server group Raises: SDKException: if plan/inventory/index server doesn't exists if failed to add FSO server data source",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDataSources.delete",
"url":5,
"doc":"Deletes the given data source from client Args: data_source_name (str)  Datasource name Returns: None Raises: SDKException: if failed to find given data source in this client if failed to delete the data source",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDataSources.has_data_source",
"url":5,
"doc":"Checks whether given data source exists in this client or not Args: data_source_name (str)  Datasource name Returns: bool  True if exists else false Raises: SDKException: if failed to find given data source in this client",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDataSources.get",
"url":5,
"doc":"returns EdiscoveryDataSource class object for given data source name Args: data_source_name (str)  Datasource name Returns: obj  Instance of EdiscoveryDataSource class Raises: SDKException: if failed to find given data source in this client if input is not valid",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDataSources.get_datasource_document_count",
"url":5,
"doc":"Returns the document count for given data source Args: data_source (str)  Name of the data source Returns: int  Document count Raises: SDKException: if data source doesn't exists if failed to get document count",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDataSources.data_sources",
"url":5,
"doc":"returns the list of data sources display name associated with this client Returns: list  Name of data sources"
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDataSources.client_id",
"url":5,
"doc":"returns the associated client id Returns: int  client id"
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDataSources.client_targetapp",
"url":5,
"doc":"returns the source client targetapp Returns: str  Target app for this data sources"
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDataSources.ediscovery_client_props",
"url":5,
"doc":"Returns the associated client properties Returns: dict  containing client properties"
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDataSources.total_documents",
"url":5,
"doc":"returns the total document counts of all data sources associated with this client Returns: int  Total crawled documents from all of these data sources"
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDatasource",
"url":5,
"doc":"Class to represent single datasource associated with ediscovery client Initializes an instance of the EdiscoveryDataSource class. Args: commcell_object (object)  instance of the commcell class data_source_id (int)  Data source id data_source_type (int/str)  Data Source type (Example : 5 for file) Refer to EdiscoveryConstants class in activateapps\\constants.py client_id (int)  client id where this data source belongs to app_type (enum)  Specifies which app type these data sources belongs too Default:FSO Returns: object - instance of the EdiscoveryDataSource class"
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDatasource.refresh",
"url":5,
"doc":"refresh the data source properties",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDatasource.tag_items",
"url":5,
"doc":"Applies given tag to documents Args: tags (list)  list of tags names which needs to be applied Format : Tagset\\TagName Example : DiscoveryEntity\\American document_ids (list)  list of document content id's which needs to be tagged ops_type (int)  Denotes operation type for tagging (1-Add or 2-Delete) Default : 1(Add) create_review (bool)  Specifies whether to create review request for this tagging or not Default:False reviewers (list)  List of review users approvers (list)  List of approver users req_name (str)  Request name Returns: None if it is tagging with review request jobid (str)  if it is bulk operation of tagging all items without review request Raises: SDKException: if tag name doesn't exists in commcell if failed to apply tag if response is empty if data source doesn't belongs to FSO app",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDatasource.get_job_history",
"url":5,
"doc":"returns the job history details for this data source Args: limit (int)  No of jobs to return (default: 50 rows) lookup_time (int)  list of jobs to be retrieved which are specified hours older default: 2160 hours (last 90 days)",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDatasource.get_active_jobs",
"url":5,
"doc":"returns the active jobs details for this data source Args: limit (int)  No of jobs to return (default: 50 rows) lookup_time (int)  list of jobs to be retrieved which are started within specified hours older default: 2160 hours (last 90 days) Returns: dict - dictionary consisting of the job IDs matching the given criteria as the key, and their details as its value",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDatasource.wait_for_export",
"url":5,
"doc":"Waits for Export to CSV to finish Args: wait_time (int)  time interval to wait for job completion in Mins Default : 60Mins token (str)  Export to CSV token GUID download (bool)  specify whether to download exported file or not download_location (str)  Path where to download exported csv file Default: Current working dir Return: str  Download GUID for exported CSV file if download=false File path containing exported csv file if download=true Raises: SDKException: if Export job fails if timeout happens",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDatasource.export",
"url":5,
"doc":"do export to CSV on data Args: criteria (str)  containing criteria for query (Default : None - Exports all docs) Example : 1) Size filter  > Size:[10 TO 1024] 2) File name filter  > FileName_idx:09_23 attr_list (set)  Column names to be returned in results. Acts as 'fl' in query params (dict)  Any other params which needs to be passed Example : { \"start\" : \"0\" } Returns: str  export operation token Raises: SDKException: if failed to perform export",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDatasource.search",
"url":5,
"doc":"do searches on data source and returns document details Args: criteria (str)  containing criteria for query (Default : None - returns all docs) Example : 1) Size filter  > Size:[10 TO 1024] 2) File name filter  > FileName_idx:09_23 attr_list (set)  Column names to be returned in results. Acts as 'fl' in query params (dict)  Any other params which needs to be passed Example : { \"start\" : \"0\" } Returns: list(dict),dict  Containing document details & facet details(if any) Raises: SDKException: if failed to perform search",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDatasource.review_action",
"url":5,
"doc":"do review action on documents Args: action_type (enum)  Type of action to be taken Refer to EdiscoveryConstants.ReviewActions document_ids (list)  list of document id's Default:None (means all docs) reviewers (list)  List of review users approvers (list)  List of approver users req_name (str)  Request name kwargs arguments: backup_delete (bool)  Specifies whether to delete document from backup or not destination (str)  Destination UNC path for move operation user_name (str)  Username to access share path password (str)  Password for user in base64 encoded create_review (bool)  speicifies whether to create review or not for this action (For Delete & Move, it is TRUE always) retain_month (int)  no of months to set as retention ignore_all_risks (bool)  specifies whether it has to be ignore risk fully or not ignore_risk_type (list)  list of risks which needs to be ignored Refer to EDiscoveryConstants.RiskTypes Returns: None  if create_review is true job id  if create_review is false Raises: SDKException: if action type is not valid if failed to do review action on documents if document id's not found",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDatasource.start_collection",
"url":5,
"doc":"Starts collection job on this data source Args: is_incr (bool)  Specifies whether to invoke incremental or full crawl job Default:True (Incremental job) Return: None Raises: SDKException: if failed to start collection job",
"func":1
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDatasource.data_source_name",
"url":5,
"doc":"returns the data source name Returns: str  Name of data source"
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDatasource.data_source_type",
"url":5,
"doc":"returns the data source type Returns: str  Type of data source"
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDatasource.data_source_type_id",
"url":5,
"doc":"returns the data source type id Returns: int  data source type"
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDatasource.data_source_id",
"url":5,
"doc":"returns the data source id Returns: int  data source id"
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDatasource.data_source_props",
"url":5,
"doc":"returns the data source properties Returns: dict  data source properties"
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDatasource.cloud_id",
"url":5,
"doc":"returns the index server cloudid associated with this data source Returns: int  index server cloud id"
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDatasource.core_name",
"url":5,
"doc":"returns the core name for this data source Returns: str  core name for this data source"
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDatasource.computed_core_name",
"url":5,
"doc":"returns the computed core name for this data source Returns: str  Index server core name for this data source"
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDatasource.core_id",
"url":5,
"doc":"returns the core id for this data source Returns: int  core id"
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDatasource.crawl_type_name",
"url":5,
"doc":"returns the crawl type enum name for this data source Returns: str  crawl type"
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDatasource.crawl_type",
"url":5,
"doc":"returns the crawl type for this data source Returns: int  crawl type"
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDatasource.plan_id",
"url":5,
"doc":"returns the DC plan id associated Returns: int  Data classification plan id"
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDatasource.client_id",
"url":5,
"doc":"returns the client id associated Returns: int  client id"
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDatasource.total_documents",
"url":5,
"doc":"returns the total document from this data source Returns: int  Total document count"
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDatasource.sensitive_files_count",
"url":5,
"doc":"returns the total sensitive files count on this data source Returns: int  Sensitive files count"
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDatasource.name",
"url":5,
"doc":"returns the actual name for this data source Returns: str  Actual name of the datasource"
},
{
"ref":"cvpysdk.activateapps.ediscovery_utils.EdiscoveryDatasource.index_server_node_client_id",
"url":5,
"doc":"returns the associated Index server node client id on which the collection exists Returns: str  Index server node client id on which the collection exists"
},
{
"ref":"cvpysdk.activateapps.entity_manager",
"url":6,
"doc":"Main file for performing operations on entity manager app under Activate. 'Classifiers', 'Classifier', 'Tags' , 'TagSet', 'Tag', 'EntityManagerTypes' ,  ActivateEntities , and  ActivateEntity are 8 classes defined in this file. ActivateEntities: Class for representing all the regex entities in the commcell. ActivateEntity: Class for representing a single regex entity in the commcell. EntityManagerTypes: Class to represent different entity types in entity manager Tags: Class to represent TagSets in the commcell TagSet: Class to represent single Tagset entity in the commcell Tag: Class to represent tag inside a TagSet Classifiers: Class to represent Classifiers entities in the commcell Classifier: Class to represent a single classifier entity in the commcell Tags: __init__()  initialise object of the Tags class _response_not_success()  parses through the exception response, and raises SDKException refresh()  refresh the TagSet associated with the commcell _get_tag_sets_from_collections()  gets all the TagSet details from collection response _get_all_tag_sets()  Returns dict consisting all TagSets associated with commcell get_properties()  Returns the properties for the given TagSet name has_tag_set()  Checks whether tagset with given name exists in commcell or not add()  Creates new TagSet in the commcell delete()  Deletes the Tagset in the commcell get()  Returns the TagSet object for given tagset name TagSet: __init__()  initialize an object of TagSet Class with the given tagset name and id _response_not_success()  parses through the exception response, and raises SDKException refresh()  refresh the properties of the TagSet modify()  Modifies the tagset in the commcell share()  Shares tagset with user or group in the commcell add_tag()  Creates new tag inside this tagset container in commcell get()  Returns the Tag class object for given tag name has_tag()  checks whether given tag exists in tagset or not get_tag_id()  Returns the tag id for given tag name _get_tag_set_id()  Gets tag set container id for the given Tagset name _get_tag_set_properties()  Gets all the details of associated Tagset TagSet Attributes         -  guid  returns container GUID of this tagset  full_name  returns the full name of tagset container  comment  returns the comment for this tagset  owner  returns the owner user name for this tagset  owner_alias_name - returns the owner alias name for this tagset  tags  returns the tags present in this tagset  tag_set_id  returns the tagset id Tag: __init__()  Initialise object of the Tag class _response_not_success()  parses through the exception response, and raises SDKException _get_tag_id()  Returns the tag id of the given tag name _get_tag_properties()  Returns the properties of Tag refresh()  refresh the tag details modify()  modifies the name of the tag Tag Attributes         -  guid  returns tag GUID of this tag  full_name  returns the full name of this tag  tag_id  returns the id of the tag ActivateEntities: __init__(commcell_object)  initialise object of the ActivateEntities class _response_not_success()  parses through the exception response, and raises SDKException refresh()  refresh the regex entities associated with the commcell get()  Returns an instance of ActivateEntity class for the given regex entity name get_entity_ids()  Returns an list of entity ids for the given regex entity name list get_entity_keys()  Returns an list of entity keys for the given regex entity name list get_properties()  Returns the properties for the given regex entity name _get_all_activate_entities()  Returns dict consisting all regex entities associated with commcell _get_regex_entity_from_collections() gets all the regex entity details from collection response has_entity()  Checks whether given regex entity exists in commcell or not add()  adds the regex entity in the commcell delete()  deletes the regex entity in the commcell for given entity name _process_entity_containers()  returns the container details for the entity ActivateEntity: __init__( commcell_object, entity_name, entity_id=None)  initialize an object of ActivateEntity Class with the given regex entity name and id _response_not_success()  parses through the exception response, and raises SDKException refresh()  refresh the properties of the regex entity _get_entity_id()  Gets entity id for the given regex entity name _get_entity_properties()  Gets all the details of associated regex entity modify()  Modifies the entity properties for the associated regex entity ActivateEntity Attributes         -  entity_id  returns the id of the regex entity  entity_key  returns the key of the regex entity  category_name  returns the category name of the regex entity  is_enabled  returns the enabled flag of the regex entity  display_name  returns the display name of the regex entity  entity_type  returns the type of entity (1- NER 2-RER 3-Derived 4-Classifier)  entity_xml  returns the entity xml associated with this entity  container_details  returns the container details for this entity Classifiers: __init__(commcell_object)  initialise object of the Classifiers class _response_not_success()  parses through the exception response, and raises SDKException refresh()  refresh the classifiers associated with the commcell get()  Returns an instance of Classifier class for the given classifier name get_entity_ids()  Returns an list of entity ids for the given classifier name list get_entity_keys()  Returns an list of entity keys for the given classifier name list get_properties()  Returns the properties for the given classifier name _get_all_classifier_entities()  Returns dict consisting all classifier associated with commcell _get_classifier_entity_from_collections() gets all the classifier details from collection response has_classifier()  Checks whether given classifier exists in commcell or not add()  adds the classifier in the commcell delete()  deletes the classifier in the commcell Classifier: __init__( commcell_object, classifier_name, entity_id=None)  initialize an object of Classifier Class with the given classifier name and id _response_not_success()  parses through the exception response, and raises SDKException refresh()  refresh the properties of the classifier _get_entity_id()  Gets entity id for the given classifier name _get_entity_properties()  Gets all the properties of associated classifier _get_upload_request_id()  returns the request id for uploading model data _get_upload_api()  returns the upload API url _validate_upload_response()  Validates the upload api response for given chunk size _get_upload_flag_bit()  Returns the 7-byte flag used in upload API call modify()  Modifies the properties for the associated classifier upload_data()  Uploads the training model data for this classifier start_training()  Starts training for this classifier monitor_training()  Monitors training status for this classifier cancel_training()  Cancels training for this classifier Classifier Attributes         -  entity_id  returns the id of the classifier  entity_key  returns the key of the classifier  category_name  returns the category name of the classifier  is_enabled  returns the enabled flag of the classifier  display_name  returns the display name of the classifier  entity_type  returns the type of entity (4-Classifier)  entity_xml  returns the entity xml associated with this classifier  trained_ca_cloud_id  returns the cloud id of the trained content analyzer  training_status  returns the training status for this classifier  sycn_ca_client_id  returns the list of synced CA client id for this classifier  last_training_time  returns the last training time for this classifier  training_accuracy  returns the training accuracy for this classifier  sample_details  returns dict containing model sample count details used for this classifier training"
},
{
"ref":"cvpysdk.activateapps.entity_manager.EntityManagerTypes",
"url":6,
"doc":"Class to represent different entity types in entity manager"
},
{
"ref":"cvpysdk.activateapps.entity_manager.EntityManagerTypes.ENTITIES",
"url":6,
"doc":""
},
{
"ref":"cvpysdk.activateapps.entity_manager.EntityManagerTypes.CLASSIFIERS",
"url":6,
"doc":""
},
{
"ref":"cvpysdk.activateapps.entity_manager.EntityManagerTypes.TAGS",
"url":6,
"doc":""
},
{
"ref":"cvpysdk.activateapps.entity_manager.ActivateEntities",
"url":6,
"doc":"Class for representing all the regex entities in the commcell. Initializes an instance of the ActivateEntities class. Args: commcell_object (object)  instance of the commcell class Returns: object - instance of the ActivateEntities class"
},
{
"ref":"cvpysdk.activateapps.entity_manager.ActivateEntities.add",
"url":6,
"doc":"Adds the specified regex entity name in the commcell Args: entity_name (str)  name of the regex entity entity_regex (str)  Regex for the entity entity_keywords (str)  Keywords for the entity entity_flag (int)  Sensitivity flag value for entity 5-Highly sensitive 3-Moderate sensitive 1-Low sensitive is_derived (bool)  represents whether it is derived entity or not parent_entity(int)  entity id of the parent entity in case of derived entity Returns: None Raises: SDKException: if response is empty if response is not success if unable to add regex entity in commcell if entity_flag is not in proper allowed values [1,3,5] if input data type is not valid",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.ActivateEntities.delete",
"url":6,
"doc":"deletes the specified regex entity name in the commcell Args: entity_name (str)  name of the regex entity Returns: None Raises: SDKException: if response is empty if response is not success if unable to delete regex entity in commcell if unable to find entity name in the commcell if data type of entity_name is invalid",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.ActivateEntities.get_properties",
"url":6,
"doc":"Returns a properties of the specified regex entity name. Args: entity_name (str)  name of the regex entity Returns: dict - properties for the given regex entity name",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.ActivateEntities.refresh",
"url":6,
"doc":"Refresh the activate regex entities associated with the commcell.",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.ActivateEntities.get",
"url":6,
"doc":"Returns a ActivateEntity object for the given regex entity name. Args: entity_name (str)  name of the regex entity Returns: obj  Object of ActivateEntity class Raises: SDKException: if response is empty if response is not success if entity_name is not of type string",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.ActivateEntities.get_entity_ids",
"url":6,
"doc":"Returns a list of entity id for the given regex entity name list. Args: entity_name (list)  names of the regex entity Returns: list  entity id's for the given entity names",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.ActivateEntities.get_entity_keys",
"url":6,
"doc":"Returns a list of entity keys for the given regex entity name list. Args: entity_name (list)  names of the regex entity Returns: list  entity keys for the given entity names",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.ActivateEntities.has_entity",
"url":6,
"doc":"Checks if a regex entity exists in the commcell with the input name. Args: entity_name (str)  name of the regex entity Returns: bool - boolean output whether the regex entity exists in the commcell or not Raises: SDKException: if type of the regex entity name argument is not string",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.ActivateEntity",
"url":6,
"doc":"Class for performing operations on a single regex entity Initialize an object of the ActivateEntity class. Args: commcell_object (object)  instance of the commcell class entity_name (str)  name of the regex entity entity_id (str)  id of the regex entity default: None Returns: object - instance of the ActivateEntity class"
},
{
"ref":"cvpysdk.activateapps.entity_manager.ActivateEntity.modify",
"url":6,
"doc":"Modifies the specified regex entity details Args: entity_regex (str)  Regex for the entity entity_keywords (str)  Keywords for the entity entity_flag (int)  Sensitivity flag value for entity 5-Highly sensitive 3-Moderate sensitive 1-Low sensitive is_derived (bool)  represents whether it is derived entity or not parent_entity(int)  entity id of the parent entity in case of derived entity Returns: None Raises: SDKException: if response is empty if response is not success if unable to modify regex entity in commcell if input entity_keywords & entity_regex is not string if entity_flag value is not in allowed values[1,3,5]",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.ActivateEntity.container_details",
"url":6,
"doc":"Returns the container details for this entity"
},
{
"ref":"cvpysdk.activateapps.entity_manager.ActivateEntity.entity_id",
"url":6,
"doc":"Returns the value of the regex entity id attribute."
},
{
"ref":"cvpysdk.activateapps.entity_manager.ActivateEntity.entity_type",
"url":6,
"doc":"Returns the entity type attribute."
},
{
"ref":"cvpysdk.activateapps.entity_manager.ActivateEntity.category_name",
"url":6,
"doc":"Returns the entity category name attribute."
},
{
"ref":"cvpysdk.activateapps.entity_manager.ActivateEntity.display_name",
"url":6,
"doc":"Returns the entity display name attribute."
},
{
"ref":"cvpysdk.activateapps.entity_manager.ActivateEntity.is_enabled",
"url":6,
"doc":"Returns the entity isenabled attribute."
},
{
"ref":"cvpysdk.activateapps.entity_manager.ActivateEntity.entity_key",
"url":6,
"doc":"Returns the entity key attribute."
},
{
"ref":"cvpysdk.activateapps.entity_manager.ActivateEntity.entity_xml",
"url":6,
"doc":"Returns the entity xml attribute."
},
{
"ref":"cvpysdk.activateapps.entity_manager.ActivateEntity.refresh",
"url":6,
"doc":"Refresh the regex entity details for associated object",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.Tags",
"url":6,
"doc":"Class for representing all the Tagsets in the commcell. Initializes an instance of the Tags class. Args: commcell_object (object)  instance of the commcell class Returns: object - instance of the Tags class"
},
{
"ref":"cvpysdk.activateapps.entity_manager.Tags.get",
"url":6,
"doc":"Returns a TagSet object for the given Tagset name. Args: tag_set_name (str)  name of the TagSet Returns: obj  Object of TagSet class Raises: SDKException: if response is empty if response is not success if tag_set_name is not of type string",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.Tags.has_tag_set",
"url":6,
"doc":"Checks if a tagset exists in the commcell with the input name or not Args: tag_set_name (str)  name of the TagSet Returns: bool - boolean output whether the TagSet exists in the commcell or not Raises: SDKException: if type of the TagSet name argument is not string",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.Tags.get_properties",
"url":6,
"doc":"Returns a properties of the specified TagSet name. Args: tag_set_name (str)  name of the TagSet Returns: dict - properties for the given TagSet name Example : { \"containerName\": \"cvpysdk1\", \"containerFullName\": \"cvpysdk1\", \"containerId\": 65931, \"containerGuid\": \"6B870271-543A-4B76-955D-CDEB3807D68E\", \"comment\": \"Created from CvPySDK\", \"owneruserName\": \"xxx\", \"owneruserGuid\": \"C31C1194-AA5C-47C3-B5B0-9087EF429B6B\", \"owneraliasName\": \"xx\", \"tags\": [ \"p10\" ], \"tagsIds\": [ 15865 ], \"tagsDetails\": { \"p10\": { \"tagOwnerType\": 1, \"tagId\": 15865, \"name\": \"p10\", \"flags\": 0, \"fullName\": \"cvpysdk1\\p10\", \"description\":  , \"id\": \"C9E229D0-B895-4653-9DA7-C9C6BD999121\", \"attribute\": {} } } }",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.Tags.delete",
"url":6,
"doc":"Deletes the specified tagset from the commcell Args: tag_set_name (str)  Name of the Tagset Returns: None Raises: SDKException: if response is empty if response is not success if unable to delete TagSet entity in commcell if input data type is not valid if unable to find TagSet entity in commcell",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.Tags.add",
"url":6,
"doc":"Adds the specified TagSet name in the commcell Args: tag_set_name (str)  name of the TagSet comment (str)  Comment for this TagSet Returns: object  Object of TagSet class Raises: SDKException: if response is empty if response is not success if unable to add TagSet entity in commcell if input data type is not valid",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.Tags.refresh",
"url":6,
"doc":"Refresh the TagSet entities associated with the commcell.",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.TagSet",
"url":6,
"doc":"Class for performing operations on a TagSet Initialize an object of the TagSet class. Args: commcell_object (object)  instance of the commcell class tag_set_name (str)  name of the TagSet tag_set_id (str)  Container id of the TagSet default: None Returns: object - instance of the Tagset class"
},
{
"ref":"cvpysdk.activateapps.entity_manager.TagSet.has_tag",
"url":6,
"doc":"Returns whether tag exists with given name or not in tagset Args: tag_name (str)  name of the Tag Returns: bool  True if it exists or else false Raises: SDKException: if tag_name is not of type string",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.TagSet.get",
"url":6,
"doc":"Returns a Tag object for the given Tag name. Args: tag_name (str)  name of the Tag Returns: obj  Object of Tag class Raises: SDKException: if unable to create Tag object if tag_name is not of type string",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.TagSet.get_tag_id",
"url":6,
"doc":"Returns the tag id for the given tag name Args: tag_name (str)  Name of the tag Returns: int  Tag id Raises: SDKExeption: if input tag name is not found in this tagset",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.TagSet.add_tag",
"url":6,
"doc":"Adds the specified tag name in the tagset container in commcell Args: tag_name (str)  name of the Tag Returns: object  Object of Tag class Raises: SDKException: if response is empty if response is not success if unable to add Tag inside Tagset in commcell if input data type is not valid",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.TagSet.share",
"url":6,
"doc":"Shares tagset with given user or group in commcell Args: user_or_group_name (str)  Name of user or group is_user (bool)  Denotes whether this is user or group name default : True(User) allow_edit_permission (bool)  whether to give edit permission or not to user or group ops_type (int)  Operation type Default : 1 (Add) Supported : 1 (Add) 2 (Modify) 3 (Delete) Returns: None Raises: SDKException: if unable to update security associations if response is empty or not success",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.TagSet.modify",
"url":6,
"doc":"Modifies the specified tagset in the commcell Args: new_name (str)  New name for Tagset comment (str)  New comment which needs to be added for Tagset Returns: None Raises: SDKException: if response is empty if response is not success if unable to modify TagSet entity in commcell if input is not a valid data type of string",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.TagSet.refresh",
"url":6,
"doc":"Refresh the TagSet details for associated object",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.TagSet.guid",
"url":6,
"doc":"Returns the container guid of this Tagset"
},
{
"ref":"cvpysdk.activateapps.entity_manager.TagSet.full_name",
"url":6,
"doc":"Returns the full name of this Tagset"
},
{
"ref":"cvpysdk.activateapps.entity_manager.TagSet.comment",
"url":6,
"doc":"Returns the comment provided for this Tagset"
},
{
"ref":"cvpysdk.activateapps.entity_manager.TagSet.owner",
"url":6,
"doc":"Returns the owner username for this Tagset"
},
{
"ref":"cvpysdk.activateapps.entity_manager.TagSet.owner_alias_name",
"url":6,
"doc":"Returns the owner alias name for this Tagset"
},
{
"ref":"cvpysdk.activateapps.entity_manager.TagSet.tags",
"url":6,
"doc":"Returns the tags present in this tagset"
},
{
"ref":"cvpysdk.activateapps.entity_manager.TagSet.tag_set_id",
"url":6,
"doc":"returns the container id for this tagset"
},
{
"ref":"cvpysdk.activateapps.entity_manager.Tag",
"url":6,
"doc":"Class for performing operations on a single Tag Initialize an object of the Tag class. Args: commcell_object (object)  instance of the commcell class tag_set_name (str)  name of the TagSet tag_name (str)  Name of tag inside TagSet container tag_id (str)  id for tag default: None Returns: object - instance of the Tag class"
},
{
"ref":"cvpysdk.activateapps.entity_manager.Tag.modify",
"url":6,
"doc":"Modifies the tag name in the tagset Args: new_name (str)  New name for Tag Returns: None Raises: SDKException: if response is empty if response is not success if unable to modify Tag name if input data type is not valid",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.Tag.refresh",
"url":6,
"doc":"Refresh the TagSet details for associated object",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.Tag.full_name",
"url":6,
"doc":"Returns the full name of the tag inside tagset"
},
{
"ref":"cvpysdk.activateapps.entity_manager.Tag.guid",
"url":6,
"doc":"Returns the tag guid value"
},
{
"ref":"cvpysdk.activateapps.entity_manager.Tag.tag_id",
"url":6,
"doc":"Returns the id of the tag"
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifiers",
"url":6,
"doc":"Class for representing all the Classifier entities in the commcell. Initializes an instance of the Classifiers class. Args: commcell_object (object)  instance of the commcell class Returns: object - instance of the Classifiers class"
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifiers.get_properties",
"url":6,
"doc":"Returns a properties of the specified classifier name. Args: classifier_name (str)  name of the classifier Returns: dict - properties for the given classifier name",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifiers.refresh",
"url":6,
"doc":"Refresh the classifier associated with the commcell.",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifiers.delete",
"url":6,
"doc":"deletes the specified classifier in the commcell Args: classifier_name (str)  name of the classifier Returns: None Raises: SDKException: if response is empty if response is not success if unable to delete classifier in commcell if unable to find classifier in the commcell if data type of input is invalid",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifiers.add",
"url":6,
"doc":"Creates new classifier with given name in the commcell Args: classifier_name (str)  Name of the classifier content_analyzer (str)  Content Analyzer cloud name description (str)  Description for classifier training_zip_data_file (str)  Zip file path containing training data files Returns: object  returns object of Classifier class Raises: SDKException: if input data type is not valid if response is empty or not success if failed to create classifier if failed to find content analyzer cloud details",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifiers.get",
"url":6,
"doc":"Returns a Classifier object for the given classifier name. Args: classifier_name (str)  name of the classifier Returns: obj  Object of Classifier class Raises: SDKException: if unable to find classifier info in commcell if classifier_name is not of type string",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifiers.get_entity_ids",
"url":6,
"doc":"Returns a list of entity id for the given classifier name list. Args: classifier_name (list)  names of the classifier Returns: list  entity id's for the given classifier names Raises: SDKException: if classifier_name is not of type list if unable to find entity id for classifier",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifiers.get_entity_keys",
"url":6,
"doc":"Returns a list of entity keys for the given classifier name list. Args: classifier_name (list)  names of the classifier Returns: list  entity keys for the given classifier names Raises: SDKException: if classifier_name is not of type list if unable to find entity key for classifier",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifiers.has_classifier",
"url":6,
"doc":"Checks if a classifier entity exists in the commcell with the input name. Args: classifier_name (str)  name of the classifier Returns: bool - boolean output to denote whether classifier exists in the commcell or not Raises: SDKException: if type of the classifier name argument is not string",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifier",
"url":6,
"doc":"Class for performing operations on a single classifier entity Initialize an object of the Classifier class. Args: commcell_object (object)  instance of the commcell class classifier_name (str)  name of the classifier entity_id (str)  id of the classifier default: None Returns: object - instance of the Classifier class"
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifier.monitor_training",
"url":6,
"doc":"Monitor the training status on this classifier Args: timeout (int)  minutes after which the training will not be monitored, default: 30 Returns: bool  to denote whether training got completed or not.",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifier.start_training",
"url":6,
"doc":"Starts training on this classifier Args: wait_for (bool)  Specifies whether we need to wait or not for training completion Returns: None Raises: SDKException: if failed to start training",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifier.cancel_training",
"url":6,
"doc":"Cancels training on this classifier Args: None Returns: None Raises: SDKException: if failed to Cancel training",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifier.modify",
"url":6,
"doc":"Modifies the classifier entity Args: classifier_new_name (str)  New name for classifier description (str)  Description string for classifier enabled (bool)  flag to denote whether classifier is enabled or disabled Returns: None Raises: SDKException: if failed to modify the classifier",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifier.upload_data",
"url":6,
"doc":"Uploads the model training data set zip file to content analyzer machine Args: zip_file (str)  Zip file path start_training (bool)  Denotes whether to start training on classifier or not Returns: None Raises SDKException: if failed to upload the file",
"func":1
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifier.entity_id",
"url":6,
"doc":"Returns the value of the entity id attribute."
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifier.entity_type",
"url":6,
"doc":"Returns the entity type attribute."
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifier.category_name",
"url":6,
"doc":"Returns the entity category name attribute."
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifier.display_name",
"url":6,
"doc":"Returns the entity display name attribute."
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifier.is_enabled",
"url":6,
"doc":"Returns the entity isenabled attribute."
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifier.entity_key",
"url":6,
"doc":"Returns the entity key attribute."
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifier.entity_xml",
"url":6,
"doc":"Returns the entity xml attribute."
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifier.trained_ca_cloud_id",
"url":6,
"doc":"Returns the cloudid attribute for trained CA"
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifier.training_status",
"url":6,
"doc":"Returns the training status attribute"
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifier.training_accuracy",
"url":6,
"doc":"Returns the training accuracy attribute"
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifier.last_training_time",
"url":6,
"doc":"Returns the last training time attribute"
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifier.sycn_ca_client_id",
"url":6,
"doc":"Returns list of Model synced CA client id attribute"
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifier.sample_details",
"url":6,
"doc":"Returns dict containing model sample count details used for this classifier training"
},
{
"ref":"cvpysdk.activateapps.entity_manager.Classifier.refresh",
"url":6,
"doc":"Refresh the classifier details for associated object",
"func":1
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization",
"url":7,
"doc":"Main file for performing operations on file storage optimization(FSO) app under Activate. 'FsoTypes', 'FsoServers' , 'FsoServer', 'FsoServerGroups', 'FsoServerGroup' are 5 classes defined in this file FsoTypes: Class to represent different FSO types(Server/ServerGroup/Project) FsoServers: Class to represent all FSO servers in the commcell FsoServer: Class to represent single FSO server in the commcell FsoServerGroups: Class to represent all FSO server groups in the commcell FsoServerGroup: Class to represent single FSO server group in the commcell FsoServers: __init__()  initialise object of the FsoServers class _response_not_success()  parses through the exception response, and raises SDKException _get_all_fso_servers()  gets all the fso servers from the commcell refresh()  refresh the FSO Servers associated with the commcell has_server()  checks whether given server name exists in FSO or not add_file_server()  adds file server to the FSO get()  returns the FsoServer object for given server name FsoServer: __init__()  initialise object of the FsoServer class _response_not_success()  parses through the exception response, and raises SDKException _get_server_properties()  gets FSO server details from the commcell _get_schedule_object()  returns the schedule object for associated schedule refresh()  refresh the FSO Server details start_collection()  starts collection job on all data sources in this server share()  shares server with given user name or group name search()  returns the search response containing document details add_schedule()  creates schedule for this fso server delete_schedule()  deletes schedule for this fso server FsoServer Attributes           -  server_id  returns the client id of the server  server_details  returns the server details  data_sources  returns the EdiscoveryDataSources object  data_sources_name  returns the list of data sources display name associated with this server  total_data_sources  returns the total number of data sources associated with this server  total_doc_count  returns the total document count from all data sources associated with this server  schedule  returns the schedule object for associated schedule with this server FsoServerGroups: __init__()  initialise object of the FsoServerGroups class _response_not_success()  parses through the exception response, and raises SDKException _get_all_fso_server_groups()  gets all the fso server groups from the commcell refresh()  refresh the FSO Server groups associated with the commcell has()  checks whether given server group name exists in FSO or not get()  returns object of FsoServerGroup class add_server_group()  adds server group to FSO FsoServerGroup: __init__()  initialise object of the FsoServerGroup class _response_not_success()  parses through the exception response, and raises SDKException _get_server_group_properties()  gets FSO server group details from the commcell refresh()  refresh the FSO Server group details has_server()  returns whether server name exists as part of server group or not get()  returns the object of FsoServer class start_collection()  starts collection job on all servers associated with this server group search()  returns the search response containing document details FsoServerGroup Attributes:              -  server_group_id  returns the server group id  server_group_props  returns the properties of server group  server_list  returns the list of servers associated with this server group  total_documents  returns the total crawled document count for this server group"
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoTypes",
"url":7,
"doc":"Class to represent different FSO types(Server/ServerGroup/Project)"
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoTypes.SERVERS",
"url":7,
"doc":""
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoTypes.SERVER_GROUPS",
"url":7,
"doc":""
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoTypes.PROJECTS",
"url":7,
"doc":""
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServers",
"url":7,
"doc":"Class for representing all FSO servers in the commcell. Initializes an instance of the FsoServers class. Args: commcell_object (object)  instance of the commcell class Returns: object - instance of the FsoServers class"
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServers.get",
"url":7,
"doc":"returns the FsoServer object for given server name Args: server_name (str)  Name of the server Returns: obj  Instance of FsoServer Class Raises: SDKException: if failed to find server in FSO App if input is not valid",
"func":1
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServers.refresh",
"url":7,
"doc":"Refresh the FSO Servers associated with the commcell.",
"func":1
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServers.add_file_server",
"url":7,
"doc":"Adds file system FSO server Args: server_name (str)  Server name which needs to be added data_source_name (str)  Name for data source inventory_name (str)  Inventory name which needs to be associated plan_name (str)  Plan name which needs to be associated with this data source source_type (enum)  Source type for crawl (Live source or Backedup) Refer EdiscoveryConstants.SourceType Kwargs Arguments: scan_type (str)  Specifies scan type when source type is for backed up data Supported values : quick | full crawl_path (list)  File path which needs to be crawl if source type is Live source access_node (str)  server name which needs to be used as access node in case if server to be added is not a commvault client country_name (str)  country name where server is located (default : USA) country_code (str)  Country code (ISO 3166 2-letter code) user_name (str)  User name who has access to UNC path password (str)  base64 encoded password to access unc path enable_monitoring (str)  specifies whether to enable file monitoring or not for this Returns: obj  Instance of FSOServer class Raises: SDKException: if plan/inventory/index server doesn't exists if failed to add FSO server data source",
"func":1
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServers.has_server",
"url":7,
"doc":"Checks if a server exists in the commcell with the input name for FSO or not Args: server_name (str)  name of the server Returns: bool - boolean output whether the FSO Server exists in the commcell or not Raises: SDKException: if type of the server name argument is not string",
"func":1
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServer",
"url":7,
"doc":"Class to represent single FSO Server in the commcell Initializes an instance of the FsoServer class. Args: commcell_object (object)  instance of the commcell class server_name (str)  Name of the server server_id (int)  server client id Returns: object - instance of the FsoServer class"
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServer.start_collection",
"url":7,
"doc":"Starts collection job on all data sources associated with this server Args: None Return: list  List of jobid's Raises: SDKException: if failed to start collection job",
"func":1
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServer.search",
"url":7,
"doc":"do searches on data source and returns document details Args: criteria (str)  containing criteria for query (Default : None - returns all docs) Example : Size:[10 TO 1024] FileName:09_23 attr_list (set)  Column names to be returned in results. Acts as 'fl' in query params (dict)  Any other params which needs to be passed Example : { \"start\" : \"0\" } Returns: int,list(dict),dict  Containing document count, document details & facet details(if any) Raises: SDKException: if failed to perform search",
"func":1
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServer.add_schedule",
"url":7,
"doc":"Creates the schedule and associate it with server Args: schedule_name (str)  Schedule name pattern_json (dict)  Schedule pattern dict (Refer to Create_schedule_pattern in schedule.py) Raises: SDKException: if input is not valid if failed to create schedule",
"func":1
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServer.delete_schedule",
"url":7,
"doc":"Deletes the schedule associated with server Args: None Raises: SDKException: if failed to Delete schedule",
"func":1
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServer.share",
"url":7,
"doc":"Shares Fso server with given user or user group in commcell Args: user_or_group_name (str)  Name of user or group is_user (bool)  Denotes whether this is user or group name default : True(User) allow_edit_permission (bool)  whether to give edit permission or not to user or group ops_type (int)  Operation type Default : 1 (Add) Supported : 1 (Add) 3 (Delete) Returns: None Raises: SDKException: if unable to update security associations if response is empty or not success",
"func":1
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServer.refresh",
"url":7,
"doc":"Refresh the FSO Server details",
"func":1
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServer.schedule",
"url":7,
"doc":"returns the schedule object for associated schedule Returns: obj  Instance of Schedule Class if schedule exists None  If no schedule exists"
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServer.server_id",
"url":7,
"doc":"returns the server id Returns: int  Server id"
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServer.server_details",
"url":7,
"doc":"returns the server details Returns: dict  Server details"
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServer.data_sources_name",
"url":7,
"doc":"returns the associated data sources to this FSO server Returns: list  names of data sources"
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServer.data_sources",
"url":7,
"doc":"returns the EdiscoveryDataSources object associated to this server Returns: obj  Instance of EdiscoveryDataSources Object"
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServer.total_data_sources",
"url":7,
"doc":"returns the total number of data sources associated with this server Returns: int  total number of data sources"
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServer.total_doc_count",
"url":7,
"doc":"returns the total document count of all data sources for this server Returns: int  Total crawled document count"
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServerGroups",
"url":7,
"doc":"Class for representing all FSO server groups in the commcell. Initializes an instance of the FsoServerGroups class. Args: commcell_object (object)  instance of the commcell class Returns: object - instance of the FsoServerGroups class"
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServerGroups.refresh",
"url":7,
"doc":"Refresh the FSO Server groups associated with the commcell.",
"func":1
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServerGroups.add_server_group",
"url":7,
"doc":"adds server group to FSO Args: server_group_name (str)  Server group name inventory_name (str)  Inventory name which needs to be associated plan_name (str)  Plan name which needs to be associated with this data source Kwargs Arguments: country_name (str)  country name where server is located (default: USA) country_code (str)  Country code (ISO 3166 2-letter code) Returns: obj  Instance of FSOServerGroup class Raises: SDKException: if plan/inventory/index server doesn't exists if failed to add FSO server group",
"func":1
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServerGroups.has",
"url":7,
"doc":"Checks if a server group exists in the commcell with the input name for FSO or not Args: server_group_name (str)  name of the server group Returns: bool - boolean output whether the FSO Server group exists in the commcell or not Raises: SDKException: if type of the server group name argument is not string",
"func":1
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServerGroups.get",
"url":7,
"doc":"returns the FsoServerGroup object for given server group name Args: server_grp_name (str)  Name of the server group Returns: obj  Instance of FsoServerGroup Class Raises: SDKException: if failed to find server group in FSO App if input is not valid",
"func":1
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServerGroup",
"url":7,
"doc":"Class to represent single FSO Server group in the commcell Initializes an instance of the FsoServerGroup class. Args: commcell_object (object)  instance of the commcell class Returns: object - instance of the FsoServerGroup class"
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServerGroup.has_server",
"url":7,
"doc":"Checks if a server exists in the FSO Server group with the input name or not Args: server_name (str)  name of the server Returns: bool - boolean output whether the FSO Server exists in the server group or not Raises: SDKException: if type of the server name argument is not string",
"func":1
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServerGroup.start_collection",
"url":7,
"doc":"Starts collection job on all servers associated with this server group Args: None Return: list  List of jobid's Raises: SDKException: if failed to start collection job",
"func":1
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServerGroup.search",
"url":7,
"doc":"do searches on client group data and returns document details Args: criteria (str)  containing criteria for query (Default : None - returns all docs) Example : Size:[10 TO 1024] FileName:09_23 attr_list (set)  Column names to be returned in results. Acts as 'fl' in query params (dict)  Any other params which needs to be passed Example : { \"start\" : \"0\" } Returns: int,list(dict),dict  Containing document count, document details & facet details(if any) Raises: SDKException: if failed to perform search",
"func":1
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServerGroup.get",
"url":7,
"doc":"returns the FsoServer object for given server name Args: server_name (str)  Name of the server Returns: obj  Instance of FsoServer Class Raises: SDKException: if failed to find server in FSO server group if input is not valid",
"func":1
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServerGroup.refresh",
"url":7,
"doc":"Refresh the FSO Server group details",
"func":1
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServerGroup.server_group_id",
"url":7,
"doc":"returns the client group id Returns: int  Server group id"
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServerGroup.server_group_props",
"url":7,
"doc":"returns the server group properties Returns: dict  Server group details"
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServerGroup.server_list",
"url":7,
"doc":"returns the list of server which is part of this server group Returns: list  Server names"
},
{
"ref":"cvpysdk.activateapps.file_storage_optimization.FsoServerGroup.total_documents",
"url":7,
"doc":"returns the total documents count for this server group Returns: int  Total document count for this server group"
},
{
"ref":"cvpysdk.activateapps.inventory_manager",
"url":8,
"doc":"Main file for performing operations on inventory manager app under Activate. Inventories, Inventory, Assets & Asset are the four classes defined in this file Inventories: class for representing all inventories in the commcell Inventory: class for representing a single inventory in the commcell Assets: class for representing all assets in an inventory Asset: class to represent single asset in an inventory Inventories: __init__()  initialise object of the Inventories class _get_inventories()  Gets all inventories in the commcell _response_not_success()  parses through the exception response, and raises SDKException refresh()  refresh the Inventories from the commcell get_properties()  returns the properties for given inventory name has_inventory()  Checks if a given inventory name exists in the commcell or not get()  returns the Inventory class object for given inventory name add()  add inventory to the commcell delete()  delete inventory from the commcell Inventory: __init__()  initialise object of the Inventory class _response_not_success()  parses through the exception response, and raises SDKException _get_inventory_properties()  Gets all the properties of this inventory _get_schedule_object()  returns the schedule class object associated to this inventory _get_data_source_handler_object()  returns the datasource and default handler object for this inventory _get_permission()  returns the security associations for this inventory refresh()  refresh the properties of the inventory get_assets()  returns the Assets class object for this inventory share()  shares inventory with other user or user group start_collection()  starts collection job on this inventory get_inventory_data()  returns data from inventory Inventory Attributes         -  properties  returns properties of the inventory  index_server_name  returns the index server name associated with this inventory  _index_server_cloud_id  returns the index server cloudid associated with this inventory  inventory_name  returns the inventory name  inventory_id  returns the inventory id  security_associations  returns the security associations blob of this inventory  schedule  returns the schedule object associated with this inventory  data_source  returns the DataSource object associated with this inventory  handler  returns the default handler object for this inventory Assets: __init__()  initialise object of the Assets class refresh()  refresh the assets associated with inventory add()  adds asset to the inventory get()  returns the instance of Asset class based on given asset name has_asset()  returns whether given asset exists or not in inventory delete()  deletes the asset from the inventory _get_assets_properties()  returns the assets properties _response_not_success()  parses through the exception response, and raises SDKException Assets Attributes:          assets  returns the assets details as json Asset: __init__()  initialise object of the Asset class _get_properties()  returns the properties of the asset _response_not_success()  parses through the exception response, and raises SDKException refresh()  refresh the asset associated with inventory get_job_history()  returns the job history details of this asset get_job_status()  returns the latest job status details of this asset get_asset_prop()  returns the asset property value for the given property name Asset Attributes:         -  asset_id  returns the id of asset  asset_name  returns the name of asset  asset_type  returns the type of asset  crawl_start_time  returns the last crawl start time of asset  asset_props  returns the properties(name/value pair) of asset  asset_status  returns the status of asset  inventory_id  returns the inventory id of this asset"
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Inventories",
"url":8,
"doc":"Class for representing all inventories in the commcell. Initializes an instance of the Inventories class. Args: commcell_object (object)  instance of the commcell class Returns: object - instance of the Inventories class"
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Inventories.add",
"url":8,
"doc":"Adds inventory to the commcell with given inputs Args: inventory_name (str)  Name of the inventory index_server (str)  Index server name name_server (list)  Name server assets which needs to be added to inventory Returns: object  Instance of Inventory Class Raises: SDKException: if input data type is not valid if failed to add inventory if Index Server doesn't exists in commcell",
"func":1
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Inventories.delete",
"url":8,
"doc":"Deletes the inventory from the commcell Args: inventory_name (str)  Inventory name to be deleted Returns: None Raises: SDKException: if unable to find inventory if failed to delete inventory if input type is not valid",
"func":1
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Inventories.refresh",
"url":8,
"doc":"Refresh the inventories associated with the commcell.",
"func":1
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Inventories.get_properties",
"url":8,
"doc":"Returns a properties of the specified Inventory Args: inventory_name (str)  name of the inventory Returns: dict - properties for the given inventory name",
"func":1
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Inventories.has_inventory",
"url":8,
"doc":"Checks if a inventory exists in the commcell with the input name. Args: inventory_name (str)  name of the inventory Returns: bool - boolean output to specify whether the inventory exists in the commcell or not Raises: SDKException: if type of the inventory name argument is not string",
"func":1
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Inventories.get",
"url":8,
"doc":"Returns a Inventory object for the given inventory name. Args: inventory_name (str)  name of the inventory Returns: obj  Object of Inventory class Raises: SDKException: if inventory doesn't exists in commcell if inventory_name is not of type string",
"func":1
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Inventory",
"url":8,
"doc":"Class for performing operations on a single inventory Initialize an object of the Inventory class. Args: commcell_object (object)  instance of the commcell class inventory_name (str)  name of the Inventory inventory_id (str)  id of Inventory default: None Returns: object - instance of the Inventory class"
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Inventory.refresh",
"url":8,
"doc":"Refresh the inventory details for associated object",
"func":1
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Inventory.get_assets",
"url":8,
"doc":"Returns the Assets class instance for this inventory Args: None Returns: object  Instance of Assets class",
"func":1
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Inventory.start_collection",
"url":8,
"doc":"Starts collection job on this inventory Args: None Return: None Raises: SDKException: if failed to start collection job",
"func":1
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Inventory.share",
"url":8,
"doc":"Shares inventory with given user or user group in commcell Args: user_or_group_name (str)  Name of user or group is_user (bool)  Denotes whether this is user or group name default : True(User) allow_edit_permission (bool)  whether to give edit permission or not to user or group ops_type (int)  Operation type Default : 1 (Add) Supported : 1 (Add) 3 (Delete) Returns: None Raises: SDKException: if unable to update security associations if response is empty or not success",
"func":1
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Inventory.get_inventory_data",
"url":8,
"doc":"Executes handler for fetching data from inventory Args: handler_filter (str)  Filter which needs to applied for handler execution Returns: dict  Dictionary of values fetched from handler execution Raises: SDKExpception: if error in fetching handler data if input is not valid",
"func":1
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Inventory.properties",
"url":8,
"doc":"Returns the properties of this inventory as dict"
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Inventory.index_server_name",
"url":8,
"doc":"Returns the index server name associated with this inventory"
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Inventory.index_server_cloud_id",
"url":8,
"doc":"Returns the index server id associated with this inventory"
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Inventory.inventory_id",
"url":8,
"doc":"Returns the inventory id associated with this inventory"
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Inventory.inventory_name",
"url":8,
"doc":"Returns the inventory name associated with this inventory"
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Inventory.security_associations",
"url":8,
"doc":"Returns the security blob associated with this inventory"
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Inventory.schedule",
"url":8,
"doc":"Returns the schedule class object for schedule associated with this inventory"
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Inventory.data_source",
"url":8,
"doc":"Returns the DataSource class object for datasource associated with this inventory"
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Inventory.handler",
"url":8,
"doc":"Returns the Handler class object for default handler associated with this inventory"
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Assets",
"url":8,
"doc":"Class to represent all assets in an inventory Initialize an object of the Assets class. Args: commcell_object (object)  instance of the commcell class inventory_name (str)  name of the Inventory inventory_id (str)  id of Inventory default: None Returns: object - instance of the Assets class"
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Assets.refresh",
"url":8,
"doc":"Refresh the assets details associated with this inventory",
"func":1
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Assets.has_asset",
"url":8,
"doc":"Checks whether given asset exists in inventory or not Args: asset_name (str)  Name of the asset Returns: bool  true if asset exists else false",
"func":1
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Assets.get",
"url":8,
"doc":"Returns the asset object Args: asset_name (str)  Name of the asset Returns: object  Instance of Asset class Raises: SDKException: if input is not valid if asset doesn't exists in inventory",
"func":1
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Assets.add",
"url":8,
"doc":"Adds asset to the inventory Args: asset_name (str)  Name of the asset asset_type (Enum)  type of asset (Refer to InventoryConstants.AssetType class) kwargs for FILE SERVER type Asset: fqdn  File server FQDN os  File Server OS type (Default:Windows) ip  File server IP country_code  Country code (ISO 3166 2-letter code) Returns: object  Instance of Asset class Raises: SDKException: if input is not valid if failed to add asset to inventory",
"func":1
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Assets.delete",
"url":8,
"doc":"Delete the asset from the inventory Args: asset_name (str)  Name of the asset Returns: None Raises: SDKException: if input is not valid if failed to delete the asset if unable to find this asset in inventory",
"func":1
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Assets.assets",
"url":8,
"doc":"Returns the assets details associated with this inventory"
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Asset",
"url":8,
"doc":"Class to represent single asset in an inventory Initialize an object of the Asset class. Args: commcell_object (object)  instance of the commcell class inventory_name (str)  name of the Inventory asset_name (str)  Name of the asset inventory_id (str)  id of Inventory default: None Returns: object - instance of the Asset class"
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Asset.refresh",
"url":8,
"doc":"Refresh the asset details associated with this",
"func":1
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Asset.get_job_history",
"url":8,
"doc":"Returns the job history details of this asset Args: None Returns: list(dict)  containing job history details Raises: SDKException: if failed to get job history if asset is not supported for this operation",
"func":1
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Asset.get_job_status",
"url":8,
"doc":"Returns the latest job status details of this asset Args: None Returns: str  last job status (Eg:- RUNNING / IDLE) Raises: SDKException: if failed to get job status if asset is not supported for this operation",
"func":1
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Asset.get_asset_prop",
"url":8,
"doc":"returns the property value for given property name for this asset Args: prop_name (str)  Name of the property Returns: str  Value of the property",
"func":1
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Asset.asset_id",
"url":8,
"doc":"Returns the asset id with this asset"
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Asset.asset_name",
"url":8,
"doc":"Returns the asset name with this asset"
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Asset.crawl_start_time",
"url":8,
"doc":"Returns the crawl start time with this asset"
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Asset.asset_type",
"url":8,
"doc":"Returns the asset type for this asset"
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Asset.asset_status",
"url":8,
"doc":"Returns the asset status for this asset"
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Asset.asset_props",
"url":8,
"doc":"Returns the property values for this asset"
},
{
"ref":"cvpysdk.activateapps.inventory_manager.Asset.inventory_id",
"url":8,
"doc":"Returns the inventory id for this asset"
},
{
"ref":"cvpysdk.activateapps.request_manager",
"url":9,
"doc":"Main file for performing operations on request manager App under Activate. 'Requests' & 'Request' are 2 classes defined in this file Requests: Class to represent all requests in the commcell Request: Class to represent single request in the commcell Requests: __init__()  initialise object of the Requests class _response_not_success()  parses through the exception response, and raises SDKException _get_all_requests()  gets all the requests from the commcell refresh()  refresh the requests with the commcell has_request()  checks whether request with given name exists or not get()  returns Request object for given request name delete()  deletes the request add()  Add request Request: __init__()  initialise object of the Request class _response_not_success()  parses through the exception response, and raises SDKException _get_request_properties()  returns the properties of the request _get_property_value()  returns the property value for given property name in request _get_valid_projects()  returns valid projects for this request refresh()  refresh the request details configure()  configures created request with details provided review_stats()  returns the stats of the review request review_document()  marks review for the document get_document_details()  returns the document details for this request mark_review_complete()  marks request as review complete request_approval()  Request approval for this review request give_approval()  Approves the review request Request Attributes:            request_id  returns the id of the request  review_set_id  returns the request's review set id  request_app  returns the app type for this request  request_name  returns the name of the request  owner  returns owner name of the request  request_props  returns the request properties  reviewers  returns the reviewers list  approvers  returns the approvers list  criteria  returns the review request criteria  status  returns the request status  requestor  returns the requestor mail id who requested this review  request_type  returns the type of request"
},
{
"ref":"cvpysdk.activateapps.request_manager.Requests",
"url":9,
"doc":"Class for representing all requests in the commcell. Initializes an instance of the Requests class. Args: commcell_object (object)  instance of the commcell class Returns: object - instance of the Requests class"
},
{
"ref":"cvpysdk.activateapps.request_manager.Requests.refresh",
"url":9,
"doc":"Refresh the requests with the commcell.",
"func":1
},
{
"ref":"cvpysdk.activateapps.request_manager.Requests.has_request",
"url":9,
"doc":"Checks if a request exists in the commcell with the input name or not Args: req_name (str)  name of the request Returns: bool - boolean output to specify whether the request exists in the commcell or not Raises: SDKException: if type of the request name argument is not string",
"func":1
},
{
"ref":"cvpysdk.activateapps.request_manager.Requests.get",
"url":9,
"doc":"Returns the Instance of Request class for given request name Args: req_name (str)  name of the request Returns: obj  Instance of Request class Raises: SDKException: if type of the request name argument is not string if failed to find request",
"func":1
},
{
"ref":"cvpysdk.activateapps.request_manager.Requests.delete",
"url":9,
"doc":"deletes the request for given request name Args: req_name (str)  name of the request Returns: None Raises: SDKException: if type of the request name argument is not string if failed to find request if failed to delete request",
"func":1
},
{
"ref":"cvpysdk.activateapps.request_manager.Requests.add",
"url":9,
"doc":"adds request to request manager app Args: req_name (str)  Name of request req_type (enum)  Request type enum(Refer to RequestManagerConstants.RequestType) requestor (str)  Mail id of requestor criteria (dict)  containing criteria for request Example : {'entity_email': [xxx@yy.com]} Kwargs Arguement: redaction (bool)  Enable redaction for export type request Default:False chaining (bool)  Enable document chaining for export type request Default:False delete_backup (bool)  Specifies whether to delete data from backup or not for delete type request Default:False Returns: obj  Instance of Request class Raises: SDKException: if input is not valid if failed to create request",
"func":1
},
{
"ref":"cvpysdk.activateapps.request_manager.Request",
"url":9,
"doc":"Class to represent single request in the commcell Initializes an instance of the Request class. Args: commcell_object (object)  instance of the commcell class req_name (str)  Name of the request req_id (int)  request id Returns: object - instance of the Request class"
},
{
"ref":"cvpysdk.activateapps.request_manager.Request.configure",
"url":9,
"doc":"configure created request with provided details Args: projects (list)  list of project names to associate reviewers (list)  list of reviewers user names approvers (list)  list of approvers user names Returns: None Raises: SDKException: if failed to configure request if input is not valid if reviewers/approvers doesn't exists",
"func":1
},
{
"ref":"cvpysdk.activateapps.request_manager.Request.get_document_details",
"url":9,
"doc":"Returns the document details for this request Args: criteria (str)  containing criteria for query Example : Size:[10 TO 1024] FileName:09_23 attr_list (set)  Column names to be returned in results. Acts as 'fl' in query start (int)  Specifies start index for fetching documents rows (int)  No of document details to fetch query (str)  query to be performed (acts as q param in query) default:None (Means  : ) Returns: int,dict  Containing document count & document details Raises: SDKException: if failed to perform search",
"func":1
},
{
"ref":"cvpysdk.activateapps.request_manager.Request.review_stats",
"url":9,
"doc":"returns review statistics for this request Args: None Returns: dict  Containing review stats Example : { 'TotalDocuments': 5, 'ReviewedDocuments': 5, 'Non-ReviewedDocuments': 0, 'AcceptedDocuments': 5, 'DeclinedDocuments': 0, 'RedactedDocuments': 0, 'Non-RedactedDocuments': 0 } Raises: SDKException: if failed to get stats info",
"func":1
},
{
"ref":"cvpysdk.activateapps.request_manager.Request.refresh",
"url":9,
"doc":"Refresh the request details from the commcell.",
"func":1
},
{
"ref":"cvpysdk.activateapps.request_manager.Request.mark_review_complete",
"url":9,
"doc":"Marks review request as review complete Args: None Returns: None Raises: SDKException: if failed to mark review complete",
"func":1
},
{
"ref":"cvpysdk.activateapps.request_manager.Request.request_approval",
"url":9,
"doc":"Invokes workflow job requesting approval for this request Args: None Returns: str  Workflow job id Raises: SDKException: if failed to invoke workflow",
"func":1
},
{
"ref":"cvpysdk.activateapps.request_manager.Request.review_document",
"url":9,
"doc":"does document review update for consent/comment on this request Args: doc_id (str)  Document id (Mandatory in case of SDG) comment (str)  User comment ds_id (int)  Data SourceId (Mandatory in case of SDG) consent (bool)  Accept or Decline (Default:True) redact (bool)  Redact ON or OFF (only in case of export) (Default:False) Returns: None Raises: SDKException: if failed to update document if input is not valid",
"func":1
},
{
"ref":"cvpysdk.activateapps.request_manager.Request.give_approval",
"url":9,
"doc":"Gives approval for the review request Args: action (str)  Approval action status Default : Approve Supported Values : [Approve,Deny] workflow_job_id (int)  Workflow job id Returns: None Raises: SDKException: if failed to give approval if failed to find workflow job",
"func":1
},
{
"ref":"cvpysdk.activateapps.request_manager.Request.request_id",
"url":9,
"doc":"returns the id of the request Returns: int  Request id"
},
{
"ref":"cvpysdk.activateapps.request_manager.Request.review_set_id",
"url":9,
"doc":"returns the id of the request's reviewset Returns: int  Request review set id"
},
{
"ref":"cvpysdk.activateapps.request_manager.Request.request_name",
"url":9,
"doc":"returns the name of the request Returns: str  Request name"
},
{
"ref":"cvpysdk.activateapps.request_manager.Request.owner",
"url":9,
"doc":"returns the name of the request owner Returns: str  Request owner's name"
},
{
"ref":"cvpysdk.activateapps.request_manager.Request.request_props",
"url":9,
"doc":"returns the properties of the request Returns: list(dict)  Request properties"
},
{
"ref":"cvpysdk.activateapps.request_manager.Request.reviewers",
"url":9,
"doc":"returns the reviewers for this request Returns: list(dict)  Reviewer user details"
},
{
"ref":"cvpysdk.activateapps.request_manager.Request.approvers",
"url":9,
"doc":"returns the approvers for this request Returns: list(dict)  Approver user details"
},
{
"ref":"cvpysdk.activateapps.request_manager.Request.criteria",
"url":9,
"doc":"returns the criteria value for this request Returns: str  Request criteria"
},
{
"ref":"cvpysdk.activateapps.request_manager.Request.status",
"url":9,
"doc":"returns the status for this request Returns: str  Request status"
},
{
"ref":"cvpysdk.activateapps.request_manager.Request.request_app",
"url":9,
"doc":"returns the app used for this request Returns: str  Activate app name"
},
{
"ref":"cvpysdk.activateapps.request_manager.Request.request_type",
"url":9,
"doc":"returns the type for this request Returns: str  Request type"
},
{
"ref":"cvpysdk.activateapps.request_manager.Request.requestor",
"url":9,
"doc":"returns the requestor mail id for this request Returns: str  Requestor mail id"
},
{
"ref":"cvpysdk.activateapps.sensitive_data_governance",
"url":10,
"doc":"Main file for performing operations on Sensitive data governance(SDG) app under Activate. 'Projects' & 'Project' are 2 classes defined in this file Projects: Class to represent all SDG projects in the commcell Project: Class to represent single SDG project in the commcell Projects: __init__()  initialise object of the Projects class _response_not_success()  parses through the exception response, and raises SDKException _get_all_projects()  gets all the Projects from the SDG refresh()  refresh the projects associated with the SDG has_project()  checks whether given project name exists in SDG or not get()  returns the Project class object for given project name add()  adds project to the SDG delete()  deletes project from the SDG Project: __init__()  initialise object of the Project class _response_not_success()  parses through the exception response, and raises SDKException _get_project_details()  returns the project properties _get_schedule_object()  returns the schedule object for associated project schedule refresh()  refresh the project details add_fs_data_source()  adds file system data source to project delete_schedule()  deletes schedule for this project add_schedule()  creates schedule for this project share()  shares project with given user name or group name search()  returns the search response containing document details from project Project Attributes            project_id  returns the id of the project  project_details  returns the project properties  data_sources_name  returns the list of data sources associated with this project  data_sources  returns the EdiscoveryDataSources object for this project  total_data_sources  returns total no of data sources associated with this project  project_name  returns the name of the project  schedule  returns the schedule object for associated project schedule  sensitive_files_count  returns the total sensitive files count"
},
{
"ref":"cvpysdk.activateapps.sensitive_data_governance.Projects",
"url":10,
"doc":"Class for representing all SDG Projects in the commcell. Initializes an instance of the Projects class. Args: commcell_object (object)  instance of the commcell class Returns: object - instance of the Projects class"
},
{
"ref":"cvpysdk.activateapps.sensitive_data_governance.Projects.refresh",
"url":10,
"doc":"Refresh the SDG Projects associated with the commcell.",
"func":1
},
{
"ref":"cvpysdk.activateapps.sensitive_data_governance.Projects.delete",
"url":10,
"doc":"Deletes project from SDG Args: project_name (str)  Name of the project Returns: None Raises: SDKException: if input is not valid if failed to delete project if response is empty or not success",
"func":1
},
{
"ref":"cvpysdk.activateapps.sensitive_data_governance.Projects.add",
"url":10,
"doc":"Adds project to the SDG Args: project_name (str)  Name of the project inventory_name (str)  Name of inventory plan_name (str)  Plan name to associate with this project Returns: obj  Instance of Project class Raises: SDKException: if input is not valid if failed to create project if response is empty or not success",
"func":1
},
{
"ref":"cvpysdk.activateapps.sensitive_data_governance.Projects.has_project",
"url":10,
"doc":"Checks if a project exists in the commcell with the input name for SDG or not Args: project_name (str)  name of the project Returns: bool - boolean output whether the SDG Project exists in the commcell or not Raises: SDKException: if type of the project name argument is not string",
"func":1
},
{
"ref":"cvpysdk.activateapps.sensitive_data_governance.Projects.get",
"url":10,
"doc":"returns the Project object for given project name Args: project_name (str)  Name of the project Returns: obj  Instance of Project Class Raises: SDKException: if failed to find Project in SDG if input is not valid",
"func":1
},
{
"ref":"cvpysdk.activateapps.sensitive_data_governance.Project",
"url":10,
"doc":"Class to represent single SDG Project in the commcell Initializes an instance of the Project class. Args: commcell_object (object)  instance of the commcell class project_name (str)  name of the project project_id (int)  project's pseudoclient id Returns: object - instance of the Project class"
},
{
"ref":"cvpysdk.activateapps.sensitive_data_governance.Project.refresh",
"url":10,
"doc":"Refresh the SDG project details",
"func":1
},
{
"ref":"cvpysdk.activateapps.sensitive_data_governance.Project.add_schedule",
"url":10,
"doc":"Creates the schedule and associate it with project Args: schedule_name (str)  Schedule name pattern_json (dict)  Schedule pattern dict (Refer to Create_schedule_pattern in schedule.py) Raises: SDKException: if input is not valid if failed to create schedule",
"func":1
},
{
"ref":"cvpysdk.activateapps.sensitive_data_governance.Project.delete_schedule",
"url":10,
"doc":"Deletes the schedule associated with project Args: None Raises: SDKException: if failed to Delete schedule",
"func":1
},
{
"ref":"cvpysdk.activateapps.sensitive_data_governance.Project.search",
"url":10,
"doc":"do searches on entire project and returns document details Args: criteria (str)  containing criteria for query (Default : None - returns all docs) Example : Size:[10 TO 1024] FileName:09_23 attr_list (set)  Column names to be returned in results. Acts as 'fl' in query params (dict)  Any other params which needs to be passed Example : { \"start\" : \"0\" } Returns: int,list(dict),dict  Containing document count, document details & facet details(if any) Raises: SDKException: if failed to perform search",
"func":1
},
{
"ref":"cvpysdk.activateapps.sensitive_data_governance.Project.share",
"url":10,
"doc":"Shares project with given user or user group in commcell Args: user_or_group_name (str)  Name of user or group is_user (bool)  Denotes whether this is user or group name default : True(User) allow_edit_permission (bool)  whether to give edit permission or not to user or group ops_type (int)  Operation type Default : 1 (Add) Supported : 1 (Add) 3 (Delete) Returns: None Raises: SDKException: if unable to update security associations if response is empty or not success",
"func":1
},
{
"ref":"cvpysdk.activateapps.sensitive_data_governance.Project.add_fs_data_source",
"url":10,
"doc":"Adds file system data source to project Args: server_name (str)  Server name which needs to be added data_source_name (str)  Name for data source source_type (enum)  Source type for crawl (Live source or Backedup) Refer EdiscoveryConstants.SourceType Kwargs Arguments: crawl_path (list)  File path which needs to be crawl if source type is Live source access_node (str)  server name which needs to be used as access node in case if server to be added is not a commvault client country_name (str)  country name where server is located (default: USA) country_code (str)  Country code (ISO 3166 2-letter code) user_name (str)  User name who has access to UNC path password (str)  base64 encoded password to access unc path enable_monitoring (str)  specifies whether to enable file monitoring or not for this Returns: obj  Instance of EdiscoveryDataSource class Raises: SDKException: if plan/inventory/index server doesn't exists if failed to add FS data source",
"func":1
},
{
"ref":"cvpysdk.activateapps.sensitive_data_governance.Project.project_id",
"url":10,
"doc":"returns the project psuedoclient id Returns: int  Pseudoclient id associated with this project"
},
{
"ref":"cvpysdk.activateapps.sensitive_data_governance.Project.project_name",
"url":10,
"doc":"returns the project name Returns: str  project name"
},
{
"ref":"cvpysdk.activateapps.sensitive_data_governance.Project.project_details",
"url":10,
"doc":"returns the project properties Returns: dict  Containing project properties"
},
{
"ref":"cvpysdk.activateapps.sensitive_data_governance.Project.data_sources_name",
"url":10,
"doc":"returns the associated data sources to this project Returns: list  names of data sources"
},
{
"ref":"cvpysdk.activateapps.sensitive_data_governance.Project.total_data_sources",
"url":10,
"doc":"returns the total number of data sources associated with this project Returns: int  total number of data sources"
},
{
"ref":"cvpysdk.activateapps.sensitive_data_governance.Project.data_sources",
"url":10,
"doc":"returns the EdiscoveryDataSources object associated to this project Returns: obj  Instance of EdiscoveryDataSources Object"
},
{
"ref":"cvpysdk.activateapps.sensitive_data_governance.Project.schedule",
"url":10,
"doc":"returns the schedule object for associated schedule Returns: obj  Instance of Schedule Class if schedule exists None  If no schedule exists"
},
{
"ref":"cvpysdk.activateapps.sensitive_data_governance.Project.sensitive_files_count",
"url":10,
"doc":"returns the total sensitive files count on this project Returns: int  Sensitive files count"
},
{
"ref":"cvpysdk.activitycontrol",
"url":11,
"doc":"Main file for performing activity control operations Activity Control is the only class defined in this file. ActivityControl: Class for managing Activity Control enable/disable for various entities within the comcell. ActivityControl: __init__(commcell_object)  initialise object of Class associated to the commcell __repr__()  String representation of the instance of this class. set()  method to set activity control. enable_after_delay()  method to disable activity control and set a delay time. _get_activity_control_status()  method to get activity control status is_enabled()  boolean specifying if a given activity is enabled or not  reEnableTime  returns the Enable back time  reEnableTimeZone  returns the Enable back time zone"
},
{
"ref":"cvpysdk.activitycontrol.ActivityControl",
"url":11,
"doc":"Class for performing activity control operations. Initialise the Activity control class instance. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the ActivityControl class"
},
{
"ref":"cvpysdk.activitycontrol.ActivityControl.set",
"url":11,
"doc":"Sets activity control on Commcell. Args: activity_type (str)  Activity Type to be Enabled or Disabled Values: \"ALL ACTIVITY\", \"DATA MANAGEMENT\", \"DATA RECOVERY\", \"DATA AGING\", \"AUX COPY\", \"DATA VERIFICATION\", \"DDB ACTIVITY\", \"SCHEDULER\", \"OFFLINE CONTENT INDEXING\", action (str)  Enable or Disable Values: Enable Disable Raises: SDKException: if failed to set if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.activitycontrol.ActivityControl.enable_after_delay",
"url":11,
"doc":"Disables activity if not already disabled and enables at the time specified. Args: activity_type (str)  Activity Type to be Enabled or Disabled Values: \"ALL ACTIVITY\", \"DATA MANAGEMENT\", \"DATA RECOVERY\", \"DATA AGING\", \"AUX COPY\", \"DATA VERIFICATION\", \"DDB ACTIVITY\", \"SCHEDULER\", \"OFFLINE CONTENT INDEXING\", enable_time (str) Unix Timestamp in UTC timezone Raises: SDKException: if failed to enable activity control after a time if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.activitycontrol.ActivityControl.is_enabled",
"url":11,
"doc":"Returns True/False based on the enabled flag and also sets other relevant properties for a given activity type. Args: activity_type (str)  Activity Type to be Enabled or Disabled Values: \"ALL ACTIVITY\", \"DATA MANAGEMENT\", \"DATA RECOVERY\", \"DATA AGING\", \"AUX COPY\", \"DATA VERIFICATION\", \"DDB ACTIVITY\", \"SCHEDULER\", \"OFFLINE CONTENT INDEXING\",",
"func":1
},
{
"ref":"cvpysdk.activitycontrol.ActivityControl.reEnableTime",
"url":11,
"doc":"Treats the reEnableTime as a read-only attribute."
},
{
"ref":"cvpysdk.activitycontrol.ActivityControl.reEnableTimeZone",
"url":11,
"doc":"Treats the reEnableTimeZone as a read-only attribute."
},
{
"ref":"cvpysdk.agent",
"url":12,
"doc":"Main file for performing agent specific operations. Agents and Agent are 2 classes defined in this file. Agents: Class for representing all the agents associated with a specific client Agent: Class for a single agent selected for a client, and to perform operations on that agent Agents: __init__(client_object)  initialize object of Agents class associated with the specified client __str__()  returns all the agents associated with the client __repr__()  returns the string for the instance of the Agents class __len__()  returns the number of agents licensed for the selected Client __getitem__()  returns the name of the agent for the given agent Id or the details for the given agent name _get_agents()  gets all the agents associated with the client specified all_agents()  returns the dict of all the agents installed on client has_agent(agent_name)  checks if an agent exists with the given name get(agent_name)  returns the Agent class object of the input agent name refresh()  refresh the agents installed on the client _process_add_response()  processes add agent request response add_database_agent()  adds database agent Agent: __init__(client_object, agent_name, agent_id=None)  initialize object of Agent with the specified agent name and id, and associated to the specified client __repr__()  return the agent name, the instance is associated with _get_agent_id()  method to get the agent id _get_agent_properties()  get the properties of this agent _process_update_request()  to process the request using API call update_properties()  to update the agent properties enable_backup()  enables the backup for the agent enable_backup_at_time()  enables the backup for the agent at the input time specified disble_backup()  disbles the backup for the agent enable_restore()  enables the restore for the agent enable_restore_at_time()  enables the restore for the agent at the input time specified disble_restore()  disbles the restore for the agent is_backup_enabled()  returns boolean specifying whether backup is enabled or not is_restore_enabled()  returns boolean specifying whether restore is enabled or not refresh()  refresh the object properties"
},
{
"ref":"cvpysdk.agent.Agents",
"url":12,
"doc":"Class for getting all the agents associated with a client. Initialize object of the Agents class. Args: client_object (object)  instance of the Client class Returns: object - instance of the Agents class"
},
{
"ref":"cvpysdk.agent.Agents.all_agents",
"url":12,
"doc":"Returns dict of all the agents installed on client. dict - consists of all agents in the client { \"agent1_name\": agent1_id, \"agent2_name\": agent2_id }"
},
{
"ref":"cvpysdk.agent.Agents.has_agent",
"url":12,
"doc":"Checks if an agent is installed for the client with the input agent name. Args: agent_name (str)  name of the agent Returns: bool - boolean output whether the agent is installed for the client or not Raises: SDKException: if type of the agent name argument is not string",
"func":1
},
{
"ref":"cvpysdk.agent.Agents.get",
"url":12,
"doc":"Returns a agent object of the specified client. Args: agent_name (str)  name of the agent Returns: object - instance of the Agent class for the given agent name Raises: SDKException: if type of the agent name argument is not string if no agent exists with the given name",
"func":1
},
{
"ref":"cvpysdk.agent.Agents.refresh",
"url":12,
"doc":"Refresh the agents installed on the Client.",
"func":1
},
{
"ref":"cvpysdk.agent.Agents.add_database_agent",
"url":12,
"doc":"Adds database agent to cloud client Args: agent_name (str)  agent name access_node (str)  access node name  kwargs (dict)  dict of keyword arguments as follows install_dir (str)  database client install directory version (str)  database version Returns: object - instance of the Agent class Raises: SDKException: if agent with given name already exists if failed to add the agent if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.agent.Agent",
"url":12,
"doc":"Class for performing agent operations of an agent for a specific client. Initialize the instance of the Agent class. Args: client_object (object)  instance of the Client class agent_name (str)  name of the agent (File System, Virtual Server, etc.) agent_id (str)  id of the agent default: None Returns: object - instance of the Agent class"
},
{
"ref":"cvpysdk.agent.Agent.update_properties",
"url":12,
"doc":"Updates the agent properties Args: properties_dict (dict)  agent property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.agent.Agent.properties",
"url":12,
"doc":"Returns the agent properties"
},
{
"ref":"cvpysdk.agent.Agent.name",
"url":12,
"doc":"Returns the Agent display name"
},
{
"ref":"cvpysdk.agent.Agent.description",
"url":12,
"doc":"Returns the description of the Agent"
},
{
"ref":"cvpysdk.agent.Agent.agent_id",
"url":12,
"doc":"Returns the id of the Agent."
},
{
"ref":"cvpysdk.agent.Agent.agent_name",
"url":12,
"doc":"Returns the name of the Agent."
},
{
"ref":"cvpysdk.agent.Agent.is_backup_enabled",
"url":12,
"doc":"Returns boolean specifying whether backup is enabled for this agent or not."
},
{
"ref":"cvpysdk.agent.Agent.is_restore_enabled",
"url":12,
"doc":"Returns boolean specifying whether restore is enabled for this agent or not."
},
{
"ref":"cvpysdk.agent.Agent.instances",
"url":12,
"doc":"Returns the instance of the Instances class representing the list of Instances installed / configured on the Client for the selected Agent."
},
{
"ref":"cvpysdk.agent.Agent.backupsets",
"url":12,
"doc":"Returns the instance of the Backupsets class representing the list of Backupsets installed / configured on the Client for the selected Agent."
},
{
"ref":"cvpysdk.agent.Agent.schedules",
"url":12,
"doc":"Returns the instance of the Schedules class representing the list of Schedules installed / configured on the Client for the selected Agent."
},
{
"ref":"cvpysdk.agent.Agent.enable_backup",
"url":12,
"doc":"Enable Backup for this Agent. Raises: SDKException: if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.agent.Agent.enable_backup_at_time",
"url":12,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.agent.Agent.disable_backup",
"url":12,
"doc":"Disables Backup for this Agent. Raises: SDKException: if failed to disable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.agent.Agent.enable_restore",
"url":12,
"doc":"Enable Restore for this Agent. Raises: SDKException: if failed to enable restore if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.agent.Agent.enable_restore_at_time",
"url":12,
"doc":"Disables Restore if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the restore at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable restore if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.agent.Agent.disable_restore",
"url":12,
"doc":"Disables Restore for this Agent. Raises: SDKException: if failed to disable restore if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.agent.Agent.enable_ews_support_for_exchange_on_prem",
"url":12,
"doc":"Method to enable EWS backup support for an Exchange on-prem client. Args: ews_service_url (string)  EWS Connection URL for your exchange server",
"func":1
},
{
"ref":"cvpysdk.agent.Agent.refresh",
"url":12,
"doc":"Refresh the properties of the Agent.",
"func":1
},
{
"ref":"cvpysdk.agents",
"url":13,
"doc":"Initialize the Agents for the SDK."
},
{
"ref":"cvpysdk.agents.exchange_database_agent",
"url":14,
"doc":"Module for doing operations on an Exchange Database Agent. This module has operations that are applicable at the Agent level for Exchange Database. ExchangeDatabaseAgent: __init__()  initialize object of Agent with the specified agent name and id, and associated to the specified client backup()  runs backup for all subclients present in the Agent browse()  browse the backed up content of the agent find()  searches the backed up content in the agent for the given file / folder refresh()  refresh the properties of the object Attributes       subclients  returns the instance of the Subclients class, listing the subclients associated to the Agent"
},
{
"ref":"cvpysdk.agents.exchange_database_agent.ExchangeDatabaseAgent",
"url":14,
"doc":"Derived class from the Agent Base class, to perform operations specific to an Exchange Database Agent. Initialize the instance of the Agent class. Args: client_object (object)  instance of the Client class agent_name (str)  name of the agent (File System, Virtual Server, etc.) agent_id (str)  id of the agent default: None Returns: object - instance of the Agent class"
},
{
"ref":"cvpysdk.agents.exchange_database_agent.ExchangeDatabaseAgent.subclients",
"url":14,
"doc":"Returns the instance of the Subclients class representing the list of Subclients installed / configured on the Client for the selected Agent."
},
{
"ref":"cvpysdk.agents.exchange_database_agent.ExchangeDatabaseAgent.backup",
"url":14,
"doc":"Runs Incremental backup job for all subclients belonging to the Exchange Database Agent. Runs Full Backup job for a subclient, if no job had been ran earlier for it. Returns: list - list consisting of the job objects for the backup jobs started for the subclients in the agent",
"func":1
},
{
"ref":"cvpysdk.agents.exchange_database_agent.ExchangeDatabaseAgent.browse",
"url":14,
"doc":"Browses the content of the Exchange Database Agent. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.agents.exchange_database_agent.ExchangeDatabaseAgent.find",
"url":14,
"doc":"Searches a file/folder in the backed up content of the agent, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.agents.exchange_database_agent.ExchangeDatabaseAgent.refresh",
"url":14,
"doc":"Refresh the properties of the Agent.",
"func":1
},
{
"ref":"cvpysdk.agents.exchange_database_agent.ExchangeDatabaseAgent.update_properties",
"url":12,
"doc":"Updates the agent properties Args: properties_dict (dict)  agent property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.agents.exchange_database_agent.ExchangeDatabaseAgent.properties",
"url":12,
"doc":"Returns the agent properties"
},
{
"ref":"cvpysdk.agents.exchange_database_agent.ExchangeDatabaseAgent.name",
"url":12,
"doc":"Returns the Agent display name"
},
{
"ref":"cvpysdk.agents.exchange_database_agent.ExchangeDatabaseAgent.description",
"url":12,
"doc":"Returns the description of the Agent"
},
{
"ref":"cvpysdk.agents.exchange_database_agent.ExchangeDatabaseAgent.agent_id",
"url":12,
"doc":"Returns the id of the Agent."
},
{
"ref":"cvpysdk.agents.exchange_database_agent.ExchangeDatabaseAgent.agent_name",
"url":12,
"doc":"Returns the name of the Agent."
},
{
"ref":"cvpysdk.agents.exchange_database_agent.ExchangeDatabaseAgent.is_backup_enabled",
"url":12,
"doc":"Returns boolean specifying whether backup is enabled for this agent or not."
},
{
"ref":"cvpysdk.agents.exchange_database_agent.ExchangeDatabaseAgent.is_restore_enabled",
"url":12,
"doc":"Returns boolean specifying whether restore is enabled for this agent or not."
},
{
"ref":"cvpysdk.agents.exchange_database_agent.ExchangeDatabaseAgent.instances",
"url":12,
"doc":"Returns the instance of the Instances class representing the list of Instances installed / configured on the Client for the selected Agent."
},
{
"ref":"cvpysdk.agents.exchange_database_agent.ExchangeDatabaseAgent.backupsets",
"url":12,
"doc":"Returns the instance of the Backupsets class representing the list of Backupsets installed / configured on the Client for the selected Agent."
},
{
"ref":"cvpysdk.agents.exchange_database_agent.ExchangeDatabaseAgent.schedules",
"url":12,
"doc":"Returns the instance of the Schedules class representing the list of Schedules installed / configured on the Client for the selected Agent."
},
{
"ref":"cvpysdk.agents.exchange_database_agent.ExchangeDatabaseAgent.enable_backup",
"url":12,
"doc":"Enable Backup for this Agent. Raises: SDKException: if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.agents.exchange_database_agent.ExchangeDatabaseAgent.enable_backup_at_time",
"url":12,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.agents.exchange_database_agent.ExchangeDatabaseAgent.disable_backup",
"url":12,
"doc":"Disables Backup for this Agent. Raises: SDKException: if failed to disable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.agents.exchange_database_agent.ExchangeDatabaseAgent.enable_restore",
"url":12,
"doc":"Enable Restore for this Agent. Raises: SDKException: if failed to enable restore if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.agents.exchange_database_agent.ExchangeDatabaseAgent.enable_restore_at_time",
"url":12,
"doc":"Disables Restore if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the restore at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable restore if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.agents.exchange_database_agent.ExchangeDatabaseAgent.disable_restore",
"url":12,
"doc":"Disables Restore for this Agent. Raises: SDKException: if failed to disable restore if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.agents.exchange_database_agent.ExchangeDatabaseAgent.enable_ews_support_for_exchange_on_prem",
"url":12,
"doc":"Method to enable EWS backup support for an Exchange on-prem client. Args: ews_service_url (string)  EWS Connection URL for your exchange server",
"func":1
},
{
"ref":"cvpysdk.alert",
"url":15,
"doc":"Main file for performing alert operations. Alerts and Alert are 2 classes defined in this file. Alerts: Class for representing all the Alerts Alert: Class for a single alert selected Alerts: __init__(commcell_object)  initialise object of Alerts class associated with the specified commcell __str__()  returns all the alerts associated with the commcell __repr__()  returns the string for the instance of the Alerts class __len__()  returns the number of alerts configured on the Commcell __getitem__()  returns the name of the alert for the given alert Id or the details for the given alert name _get_alerts()  gets all the alerts associated with the commcell specified _get_entities()  returns the list of associations for an alert _get_alert_json()  returns the dict/json required to create an alert get_alert_sender()  returns the mail sender name as set in the Email server create_alert(alert_name)  returns the instance of Alert class for created alert has_alert(alert_name)  checks whether the alert exists or not get(alert_name)  returns the alert class object of the input alert name delete(alert_name)  removes the alerts from the commcell of the specified alert console_alerts()  returns the list of all console alerts console_alert()  returns console alert details for a console alert with given livefeedid refresh()  refresh the alerts associated with the commcell Alerts Attributes           all_alerts  returns the dict of all the alerts associated with the commcell and their information such as name, id and category Alert: __init__(commcell_object, alert_name, alert_id=None)  initialise object of alert with the specified commcell name and id, and associated to the specified commcell __repr__()  return the alert name with description and category, the alert is associated with _get_alert_id()  method to get the alert id, if not specified in __init__ _get_alert_properties()  get the properties of this alert _get_alert_category()  return the category of the alert _modify_alert_properties  modifies the alert properties alert_name(name)  sets the alert name alert_severity(severity)  sets the alert severity notification_types(list)  sets the notifications types entities(entities_dict)  sets the entities/associations enable()  enables the alert disable()  disables the alert enable_notification_type()  enables notification type of alert disable_notification_type()  disables notification type of alert refresh()  refresh the properties of the Alert Alert Attributes           alert_id  returns the id of an alert  alert_name  gets the name of an alert  alert_type  returns the type of an alert  alert_category  returns the category of an alert  alert_severity  returns the severity of an alert  alert_criteria  returns the criteria of an alert  notification_types  returns the notification types of an alert  description  returns the description of an alert  users_list  returns the list of users associated with the alert  user_group_list  returns the list of user groups associated with the alert  entities  returns the list of entities associated with an alert  email_recipients  returns the list of email recipients associated to the alert"
},
{
"ref":"cvpysdk.alert.Alerts",
"url":15,
"doc":"Class for getting all the Alerts associated with the commcell. Initialize object of the Alerts class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the Alerts class"
},
{
"ref":"cvpysdk.alert.Alerts.get_alert_sender",
"url":15,
"doc":"Returns the Alert Sender name",
"func":1
},
{
"ref":"cvpysdk.alert.Alerts.create_alert",
"url":15,
"doc":"Creates a new Alert for CommCell Args: alert_dict (dict)  dictionary required to create an alert Returns: object - instance of the Alert class for this new alert Raises: SDKException: if input argument is not an instance of dict if alert with given name already exists if failed to create an alert if response is not success if response is empty",
"func":1
},
{
"ref":"cvpysdk.alert.Alerts.all_alerts",
"url":15,
"doc":"Returns the dict of all the alerts configured on this commcell dict - consists of all alerts of the commcell { \"alert1_name\": { \"id\": alert1_id, \"category\": alert1_category }, \"alert2_name\": { \"id\": alert2_id, \"category\": alert2_category } }"
},
{
"ref":"cvpysdk.alert.Alerts.has_alert",
"url":15,
"doc":"Checks if a alert exists for the commcell with the input alert name. Args: alert_name (str)  name of the alert Returns: bool - boolean output whether the alert exists for the commcell or not Raises: SDKException: if type of the alert name argument is not string",
"func":1
},
{
"ref":"cvpysdk.alert.Alerts.get",
"url":15,
"doc":"Returns a alert object of the specified alert name. Args: alert_name (str)  name of the alert Returns: object - instance of the Alert class for the given alert name Raises: SDKException: if type of the alert name argument is not string if no alert exists with the given name",
"func":1
},
{
"ref":"cvpysdk.alert.Alerts.console_alerts",
"url":15,
"doc":"Returns the console alerts from page_number to the number of pages asked for page_count Args: page_number (int)  page number to get the alerts from page_count (int)  number of pages to get the alerts of Raises: SDKException: if type of the page number and page count argument is not int if response is empty if response is not success Returns: str - String representation of console alerts if version is less than SP23 object - json response object for console alerts if version greater than or equal to SP23",
"func":1
},
{
"ref":"cvpysdk.alert.Alerts.console_alert",
"url":15,
"doc":"Returns the console console alert with given live_feed_id Args: live_feed_id (int)  Live feed ID of console alert to fetch Raises: SDKException: if type of the live_feed_id argument is not int if response is empty if response is not success Returns: object - Console alert json object for given live_feed_id",
"func":1
},
{
"ref":"cvpysdk.alert.Alerts.delete",
"url":15,
"doc":"Deletes the alert from the commcell. Args: alert_name (str)  name of the alert Raises: SDKException: if type of the alert name argument is not string if failed to delete the alert if no alert exists with the given name",
"func":1
},
{
"ref":"cvpysdk.alert.Alerts.refresh",
"url":15,
"doc":"Refresh the alerts associated with the Commcell.",
"func":1
},
{
"ref":"cvpysdk.alert.Alert",
"url":15,
"doc":"Class for performing operations for a specific alert. Initialise the Alert class instance. Args: commcell_object (object)  instance of the Commcell class alert_name (str)  name of the alert alert_id (str)  id of the alert default: None alert_category (str)  name of the alert category default: None Returns: object - instance of the ALert class"
},
{
"ref":"cvpysdk.alert.Alert.name",
"url":15,
"doc":"Returns the Alert display name"
},
{
"ref":"cvpysdk.alert.Alert.alert_name",
"url":15,
"doc":"Treats the alert name as a read-only attribute."
},
{
"ref":"cvpysdk.alert.Alert.alert_id",
"url":15,
"doc":"Treats the alert id as a read-only attribute."
},
{
"ref":"cvpysdk.alert.Alert.alert_type",
"url":15,
"doc":"Treats the alert type as a read-only attribute."
},
{
"ref":"cvpysdk.alert.Alert.alert_category",
"url":15,
"doc":"Treats the alert category type id as a read-only attribute."
},
{
"ref":"cvpysdk.alert.Alert.alert_severity",
"url":15,
"doc":"Treats the alert severity type id as a read-only attribute."
},
{
"ref":"cvpysdk.alert.Alert.alert_criteria",
"url":15,
"doc":"Treats the alert criteria as a read-only attribute."
},
{
"ref":"cvpysdk.alert.Alert.notification_types",
"url":15,
"doc":"Treats the alert notif types as a read-only attribute."
},
{
"ref":"cvpysdk.alert.Alert.entities",
"url":15,
"doc":"Treats the alert associations as a read-only attribute."
},
{
"ref":"cvpysdk.alert.Alert.email_recipients",
"url":15,
"doc":"returns the email recipients associated to the alert"
},
{
"ref":"cvpysdk.alert.Alert.description",
"url":15,
"doc":"Treats the alert description as a read-only attribute."
},
{
"ref":"cvpysdk.alert.Alert.users_list",
"url":15,
"doc":"Treats the users list as a read-only attribute."
},
{
"ref":"cvpysdk.alert.Alert.user_group_list",
"url":15,
"doc":"Treats the user group list as a read-only attribute."
},
{
"ref":"cvpysdk.alert.Alert.enable_notification_type",
"url":15,
"doc":"Enable the notification type. Args: alert_notification_type (str)  alert notification to enable Raises: SDKException: if type of alert notification argument is not string if failed to enable notification type if response is empty if response is not success if no notification type exists with the name provided",
"func":1
},
{
"ref":"cvpysdk.alert.Alert.disable_notification_type",
"url":15,
"doc":"Disable the notification type. Args: alert_notification_type (str)  alert notification to disable Raises: SDKException: if type of alert notification argument is not string if failed to disable notification type if response is empty if response is not success if no notification type exists with the name provided",
"func":1
},
{
"ref":"cvpysdk.alert.Alert.enable",
"url":15,
"doc":"Enable an alert. Raises: SDKException: if failed to enable alert if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.alert.Alert.disable",
"url":15,
"doc":"Disable an alert. Raises: SDKException: if failed to disable alert if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.alert.Alert.refresh",
"url":15,
"doc":"Refresh the properties of the Alert.",
"func":1
},
{
"ref":"cvpysdk.array_management",
"url":16,
"doc":"File for performing IntelliSnap and Array Management operations on Commcell via REST API ArrayManagement: Class for handling all Array Management Operations ArrayManagement: __init__()  initialize instance of the ArrayManagement class _snap_operation()  Common Method for Snap Operations mount()  Method for mount operation unmount()  Method for unmount operation delete()  Method for delete operation force_delete()  Method for force delete operation revert()  Method for revert operation reconcile()  Method for recon operation add_array()  Method to add array delete_array()  Method to delete array edit_array()  Method to Update Snap Configuration and Array Access Node MA for the given Array"
},
{
"ref":"cvpysdk.array_management.ArrayManagement",
"url":16,
"doc":"Class for representing all the array management activities with the commcell. Initialize the ArrayManagement class instance for performing Snap related operations Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the ArrayManagement class"
},
{
"ref":"cvpysdk.array_management.ArrayManagement.mount",
"url":16,
"doc":"Mounts Snap of the given volume id Args: volume_id (int)  volume id of the snap backup job client_name (str)  name of the destination client, default: None MountPath (str)  MountPath for Snap operation, default: None do_vssprotection (int)  Performs VSS protected mount user_credentials (dict)  dict containing userName of vcenter server_name (str)  vcenter name for mount operation instance_details (dict)  dict containing apptypeId, InstanceId, InstanceName",
"func":1
},
{
"ref":"cvpysdk.array_management.ArrayManagement.unmount",
"url":16,
"doc":"UnMounts Snap of the given volume id Args: volume_id (int)  volume id of the snap backup job",
"func":1
},
{
"ref":"cvpysdk.array_management.ArrayManagement.force_unmount",
"url":16,
"doc":"Force UnMounts Snap of the given volume id Args: volume_id (int)  volume id of the snap backup job",
"func":1
},
{
"ref":"cvpysdk.array_management.ArrayManagement.delete",
"url":16,
"doc":"Deletes Snap of the given volume id Args: volume_id (int)  volume id of the snap backup job",
"func":1
},
{
"ref":"cvpysdk.array_management.ArrayManagement.force_delete",
"url":16,
"doc":"Deletes Snap of the given volume id Args: volume_id (int)  volume id of the snap backup job",
"func":1
},
{
"ref":"cvpysdk.array_management.ArrayManagement.revert",
"url":16,
"doc":"Reverts Snap of the given volume id Args: volume_id (int)  volume id of the snap backup job",
"func":1
},
{
"ref":"cvpysdk.array_management.ArrayManagement.reconcile",
"url":16,
"doc":"Runs Reconcile Snap of the given control host id Args: control_host (int)  control host id of the array",
"func":1
},
{
"ref":"cvpysdk.array_management.ArrayManagement.add_array",
"url":16,
"doc":"This method will help in adding array entry in the array management Args : vendor_name (str)  vendor name array_name (str)  name of the array username (str)  username of the array password (str)  password to access array vendor_id (int)  vendor id of the array config_data (list)  SNap configs list to be updated control_host (str)  control host of the array array_access_node (list)  Array Access Node MediaAgent's Name list is_ocum (bool)  used for netapp to specify whether to use Primary file server or OCUM Return : errorMessage (string) : Error message",
"func":1
},
{
"ref":"cvpysdk.array_management.ArrayManagement.delete_array",
"url":16,
"doc":"This method Deletes an array from the array management Args : control_host_array (str)  Control Host id of the array Return : errorMessage (str)  Error message after the execution",
"func":1
},
{
"ref":"cvpysdk.array_management.ArrayManagement.edit_array",
"url":16,
"doc":"Method to Update Snap Configuration and Array access nodes for the given Array Args: control_host_id (int)  Control Host Id of the Array Config_data (dict)  Master config Id and the config value in dict format config_update_level (str)  update level for the Snap config ex: \"array\", \"subclient\", \"copy\", \"client\" level_id (int)  level Id where the config needs to be added/updated array_access_node (dict)  Array Access Node MA's in dict format with operation mode default: None Ex: {\"snapautotest3\" : \"add\", \"linuxautomation1\" : \"add\", \"snapautofc1\" : \"delete\"}",
"func":1
},
{
"ref":"cvpysdk.backupset",
"url":17,
"doc":"Main file for performing backup set operations. Backupsets and Backupset are 2 classes defined in this file. Backupsets: Class for representing all the backup sets associated with a specific agent Backupset: Class for a single backup set selected for an agent, and to perform operations on that backup set Backupsets:      = __init__(class_object)  initialise object of Backupsets class associated with the specified agent/instance __str__()  returns all the backupsets associated with the agent __repr__()  returns the string for the instance of the Backupsets class __len__()  returns the number of backupsets associated with the Agent __getitem__()  returns the name of the backupset for the given backupset Id or the details for the given backupset name _get_backupsets()  gets all the backupsets associated with the agent specified default_backup_set()  returns the name of the default backup set all_backupsets()  returns the dict of all the backupsets for the Agent / Instance of the selected Client has_backupset(backupset_name)  checks if a backupset exists with the given name or not _process_add_response()  to process the add backupset request using API call add(backupset_name)  adds a new backupset to the agent of the specified client add_archiveset(archiveset_name)  adds a new archiveset to the agent of the specified client add_v1_sharepoint_client()  Adds a new Office 365 V1 Share Point Pseudo Client to the Commcell. add_salesforce_backupset()  adds a new salesforce backupset get(backupset_name)  returns the Backupset class object of the input backup set name delete(backupset_name)  removes the backupset from the agent of the specified client refresh()  refresh the backupsets associated with the agent Backupset:      __init__()  initialise object of Backupset with the specified backupset name and id, and associated to the specified instance __getattr__()  provides access to restore helper methods __repr__()  return the backupset name, the instance is associated with _get_backupset_id()  method to get the backupset id, if not specified in __init__ _get_backupset_properties()  get the properties of this backupset _run_backup()  runs full backup for the specified subclient, and appends the job object to the return list _update()  updates the properties of the backupset _get_epoch_time()  gets the Epoch time given the input time is in format %Y-%m-%d %H:%M:%S _set_defaults()  recursively sets default values on a dictionary _prepare_browse_options()  prepares the options for the Browse/find operation _prepare_browse_json()  prepares the JSON object for the browse request _process_browse_response()  retrieves the items from browse response _process_update_request()  to process the request using API call _do_browse()  performs a browse operation with the given options update_properties()  updates the backupset properties set_default_backupset()  sets the backupset as the default backup set for the agent, if not already default backup()  runs full backup for all subclients associated with this backupset browse()  browse the content of the backupset find()  find content in the backupset list_media()  List media required to browse and restore backed up data from the backupset refresh()  refresh the properties of the backupset delete_data()  deletes items from the backupset and makes then unavailable to browse and restore backed_up_files_count()  Returns the count of the total number of files present in the backed up data of all the subclients of the given backupset. Backupset instance Attributes               -  properties  returns the properties of backupset  name  returns the name of the backupset  guid  treats the backupset GUID as a property of the Backupset class"
},
{
"ref":"cvpysdk.backupset.Backupsets",
"url":17,
"doc":"Class for getting all the backupsets associated with a client. Initialize object of the Backupsets class. Args: class_object (object)  instance of the Agent / Instance class Returns: object - instance of the Backupsets class Raises: SDKException: if class object is not an instance of the Agent / Instance class"
},
{
"ref":"cvpysdk.backupset.Backupsets.all_backupsets",
"url":17,
"doc":"Returns the dict of backupsets for the Agent / Instance of the selected Client dict - consists of all backupsets { \"backupset1_name\": { \"id\": backupset1_id, \"instance\": instance }, \"backupset2_name\": { \"id\": backupset2_id, \"instance\": instance } }"
},
{
"ref":"cvpysdk.backupset.Backupsets.has_backupset",
"url":17,
"doc":"Checks if a backupset exists for the agent with the input backupset name. Args: backupset_name (str)  name of the backupset Returns: bool - boolean output whether the backupset exists for the agent or not Raises: SDKException: if type of the backupset name argument is not string",
"func":1
},
{
"ref":"cvpysdk.backupset.Backupsets.add",
"url":17,
"doc":"Adds a new backup set to the agent. Args: backupset_name (str)  name of the new backupset to add on_demand_backupset (bool)  flag to specify whether the backupset to be added is a simple backupset or an on-demand backupset default: False  kwargs  dict of keyword arguments as follows: storage_policy (str)  name of the storage policy to associate to the backupset plan_name (str)  name of the plan to associate to the backupset is_nas_turbo_backupset (bool)  True for NAS based client. Returns: object - instance of the Backupset class, if created successfully Raises: SDKException: if type of the backupset name argument is not string if failed to create a backupset if response is empty if response is not success if backupset with same name already exists",
"func":1
},
{
"ref":"cvpysdk.backupset.Backupsets.add_archiveset",
"url":17,
"doc":"Adds a new archiveset to the agent. It is just a backupset but is mainly used for archive only items Args: archiveset_name (str)  name of new archiveset to add is_nas_turbo_backupset (bool)  True for NAS based client. default - False Returns: object - instance of the Backupset class, if created successfully Raises: SDKException: if type of the archiveset name argument is not string if failed to create a archiveset if response is empty if response is not success if archiveset with same name already exists",
"func":1
},
{
"ref":"cvpysdk.backupset.Backupsets.add_v1_sharepoint_client",
"url":17,
"doc":"for sharepoint v1 client creation is a backupset Adds a new Office 365 V1 Share Point Pseudo Client to the Commcell. Args: backupset_name (str)  name of the new Sharepoint Pseudo Client server_plan (str)  server_plan to associate with the client client_name (str)  the access node for which Pseudo Client will be created Kwargs : tenant_url (str)  url of sharepoint tenant azure_username (str)  username of azure app azure_secret (str)  secret key of azure app user_username (str)  username of Sharepoint admin user_password (str)  password of Sharepoint admin azure_app_id (str)  azure app id for sharepoint online azure_app_key_id (str)  app key for sharepoint online azure_directory_id (str)  azure directory id for sharepoint online Returns: object - instance of the Client class for this new client Raises: SDKException: if client with given name already exists if index_server is not found if server_plan is not found if failed to add the client if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.backupset.Backupsets.add_salesforce_backupset",
"url":17,
"doc":"Adds a new Salesforce Backupset to the Commcell. Args: salesforce_options (dict)  salesforce options { \"salesforce_user_name\": 'salesforce login user', \"salesforce_user_password\": 'salesforce user password', \"salesforce_user_token\": 'salesforce user token' } db_options (dict)  database options to configure sync db { \"db_enabled\": 'True or False', \"db_type\": 'SQLSERVER or POSTGRESQL', \"db_host_name\": 'database hostname', \"db_instance\": 'database instance name', \"db_name\": 'database name', \"db_port\": 'port of the database', \"db_user_name\": 'database user name', \"db_user_password\": 'database user password' }  kwargs (dict)  dict of keyword arguments as follows download_cache_path (str)  download cache path mutual_auth_path (str)  mutual auth cert path storage_policy (str)  storage policy streams (int)  number of streams Returns: object - instance of the Backupset class for this new backupset Raises: SDKException: if backupset with given name already exists if failed to add the backupset if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.backupset.Backupsets.get",
"url":17,
"doc":"Returns a backupset object of the specified backupset name. Args: backupset_name (str)  name of the backupset Returns: object - instance of the Backupset class for the given backupset name Raises: SDKException: if type of the backupset name argument is not string if no backupset exists with the given name",
"func":1
},
{
"ref":"cvpysdk.backupset.Backupsets.delete",
"url":17,
"doc":"Deletes the backup set from the agent. Args: backupset_name (str)  name of the backupset Raises: SDKException: if type of the backupset name argument is not string if failed to delete the backupset if response is empty if response is not success if no backupset exists with the given name",
"func":1
},
{
"ref":"cvpysdk.backupset.Backupsets.refresh",
"url":17,
"doc":"Refresh the backupsets associated with the Agent / Instance.",
"func":1
},
{
"ref":"cvpysdk.backupset.Backupsets.default_backup_set",
"url":17,
"doc":"Returns the name of the default backup set for the selected Client and Agent."
},
{
"ref":"cvpysdk.backupset.Backupset",
"url":17,
"doc":"Class for performing backupset operations for a specific backupset. Initialise the backupset object. Args: instance_object (object)  instance of the Instance class backupset_name (str)  name of the backupset backupset_id (str)  id of the backupset default: None Returns: object - instance of the Backupset class"
},
{
"ref":"cvpysdk.backupset.Backupset.update_properties",
"url":17,
"doc":"Updates the backupset properties Args: properties_dict (dict)  Backupset property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.backupset.Backupset.properties",
"url":17,
"doc":"Returns the backupset properties"
},
{
"ref":"cvpysdk.backupset.Backupset.name",
"url":17,
"doc":"Returns the Backupset display name"
},
{
"ref":"cvpysdk.backupset.Backupset.backupset_id",
"url":17,
"doc":"Treats the backupset id as a read-only attribute."
},
{
"ref":"cvpysdk.backupset.Backupset.backupset_name",
"url":17,
"doc":"Treats the backupset name as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupset.Backupset.description",
"url":17,
"doc":"Treats the backupset description as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupset.Backupset.is_default_backupset",
"url":17,
"doc":"Treats the is default backupset as a read-only attribute."
},
{
"ref":"cvpysdk.backupset.Backupset.is_on_demand_backupset",
"url":17,
"doc":"Treats the is on demand backupset as a read-only attribute."
},
{
"ref":"cvpysdk.backupset.Backupset.plan",
"url":17,
"doc":"Treats the backupset plan as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupset.Backupset.guid",
"url":17,
"doc":"Treats the backupset GUID as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupset.Backupset.set_default_backupset",
"url":17,
"doc":"Sets the backupset represented by this Backupset class instance as the default backupset if it is not the default backupset. Raises: SDKException: if failed to set this as the default backupset",
"func":1
},
{
"ref":"cvpysdk.backupset.Backupset.backup",
"url":17,
"doc":"Runs backup job for all subclients in this backupset. kwargs: Please refer subclient.backup() for all the supported arguments. Commonly used arguments are, backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental advanced_options (dict)  advanced backup options to be included while making the request common_backup_options (dict)  advanced job options to be included while making request Returns: list - list consisting of the job objects for the backup jobs started for the subclients in the backupset",
"func":1
},
{
"ref":"cvpysdk.backupset.Backupset.browse",
"url":17,
"doc":"Browses the content of the Backupset. Args: Dictionary of browse options: Example: browse({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.backupset.Backupset.find",
"url":17,
"doc":"Searches a file/folder in the backed up content of the backupset, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.backupset.Backupset.delete_data",
"url":17,
"doc":"Deletes items for the backupset in the Index and makes them unavailable for browsing and recovery Args: paths (str/list)  The list of paths or single path to delete from the backupset Returns: None  If delete request is sent successfully Raises: Exception, if unable to prepare, response is invalid or send the delete data request",
"func":1
},
{
"ref":"cvpysdk.backupset.Backupset.list_media",
"url":17,
"doc":"List media required to browse and restore backed up data from the backupset Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.backupset.Backupset.refresh",
"url":17,
"doc":"Refresh the properties of the Backupset.",
"func":1
},
{
"ref":"cvpysdk.backupset.Backupset.backed_up_files_count",
"url":17,
"doc":"Returns the count of the total number of files present in the backed up data of all the subclients of the given backupset and given path. Args: path (str)  Folder path to find no of backed up files (Default: \\ \\ ) Returns: int  No of backed up files count in given path Raises: Exception: if browse response is not proper",
"func":1
},
{
"ref":"cvpysdk.backupsets",
"url":18,
"doc":"Initialize Backupsets for the SDK."
},
{
"ref":"cvpysdk.backupsets.aadbackupset",
"url":19,
"doc":"File for operating on an AD agent Backupset. adbackupset is the only class defined in this file. Function: azuread_browse_double_query create browse options for objects in folder azuread_browse_double_query_adv create browse options for objects attrbute azuread_browse_options_builder build browse options for azure ad browse Class: AzureADBackupset: Derived class from Backuset Base class, representing a Azure AD agent backupset, and to perform operations on that backupset _azuread_browse_basic : Do basic browse with option _azuread_browse_meta : Get Azure ad folder meta information _azuread_browse_folder : Get Azure objects based on the folder type _adv_attributes : Get Azure AD object attribute browse() : Overwrite default browse operation _process_browse_repsonse : process the browse result azuread_get_metadata : create azure ad object meta data information"
},
{
"ref":"cvpysdk.backupsets.aadbackupset.AzureAdBackupset",
"url":19,
"doc":"Azure AD agent backupset class Initialise the backupset object. Args: instance_object (object)  instance of the Instance class backupset_name (str)  name of the backupset backupset_id (str)  id of the backupset default: None Returns: object - instance of the Backupset class"
},
{
"ref":"cvpysdk.backupsets.aadbackupset.AzureAdBackupset.browse",
"url":19,
"doc":"Browses the content of the Backupset. Args: args list args passed for browse kwargs dict dict passed for browse Return: count (int) return count from browse browse_result (list) objects list from browse Raise: None",
"func":1
},
{
"ref":"cvpysdk.backupsets.aadbackupset.AzureAdBackupset.azuread_get_metadata",
"url":19,
"doc":"Get azure ad meta data for browse result Args: result (list) objects list from browse Return: metadata (dict) azure ad browse meta data Raise: 110 can't find meta data",
"func":1
},
{
"ref":"cvpysdk.backupsets.aadbackupset.AzureAdBackupset.azuread_browse_obj_meta",
"url":19,
"doc":"get azure ad obj meta info Args: obj_ (obj) azuare ad object Return: name (str) azure ad display name metainfo (dict) azure ad browse meta data Raise: None",
"func":1
},
{
"ref":"cvpysdk.backupsets.aadbackupset.AzureAdBackupset.azuread_browse_double_query",
"url":19,
"doc":"create request json for azure ad based on double query Args: options (dict) browse option from impoort request_json (json) request json file from basic request class Return: request_json (json) request json with addittional options Raise: None",
"func":1
},
{
"ref":"cvpysdk.backupsets.aadbackupset.AzureAdBackupset.azuread_browse_double_query_adv",
"url":19,
"doc":"get advanced attribute for obeject Args: options (dict) browse option from impoort request_json (json) request json file from basic request class Return: request_json (json) request json with addittional options Raise: None",
"func":1
},
{
"ref":"cvpysdk.backupsets.aadbackupset.AzureAdBackupset.azuread_browse_options_builder",
"url":19,
"doc":"build browse options Args: options (dict) browse option from impoort Return: options (list) create formated options based on import Raise: None",
"func":1
},
{
"ref":"cvpysdk.backupsets.aadbackupset.AzureAdBackupset.update_properties",
"url":17,
"doc":"Updates the backupset properties Args: properties_dict (dict)  Backupset property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.backupsets.aadbackupset.AzureAdBackupset.properties",
"url":17,
"doc":"Returns the backupset properties"
},
{
"ref":"cvpysdk.backupsets.aadbackupset.AzureAdBackupset.name",
"url":17,
"doc":"Returns the Backupset display name"
},
{
"ref":"cvpysdk.backupsets.aadbackupset.AzureAdBackupset.backupset_id",
"url":17,
"doc":"Treats the backupset id as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.aadbackupset.AzureAdBackupset.backupset_name",
"url":17,
"doc":"Treats the backupset name as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.aadbackupset.AzureAdBackupset.description",
"url":17,
"doc":"Treats the backupset description as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.aadbackupset.AzureAdBackupset.is_default_backupset",
"url":17,
"doc":"Treats the is default backupset as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.aadbackupset.AzureAdBackupset.is_on_demand_backupset",
"url":17,
"doc":"Treats the is on demand backupset as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.aadbackupset.AzureAdBackupset.plan",
"url":17,
"doc":"Treats the backupset plan as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.aadbackupset.AzureAdBackupset.guid",
"url":17,
"doc":"Treats the backupset GUID as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.aadbackupset.AzureAdBackupset.set_default_backupset",
"url":17,
"doc":"Sets the backupset represented by this Backupset class instance as the default backupset if it is not the default backupset. Raises: SDKException: if failed to set this as the default backupset",
"func":1
},
{
"ref":"cvpysdk.backupsets.aadbackupset.AzureAdBackupset.backup",
"url":17,
"doc":"Runs backup job for all subclients in this backupset. kwargs: Please refer subclient.backup() for all the supported arguments. Commonly used arguments are, backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental advanced_options (dict)  advanced backup options to be included while making the request common_backup_options (dict)  advanced job options to be included while making request Returns: list - list consisting of the job objects for the backup jobs started for the subclients in the backupset",
"func":1
},
{
"ref":"cvpysdk.backupsets.aadbackupset.AzureAdBackupset.find",
"url":17,
"doc":"Searches a file/folder in the backed up content of the backupset, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.backupsets.aadbackupset.AzureAdBackupset.delete_data",
"url":17,
"doc":"Deletes items for the backupset in the Index and makes them unavailable for browsing and recovery Args: paths (str/list)  The list of paths or single path to delete from the backupset Returns: None  If delete request is sent successfully Raises: Exception, if unable to prepare, response is invalid or send the delete data request",
"func":1
},
{
"ref":"cvpysdk.backupsets.aadbackupset.AzureAdBackupset.list_media",
"url":17,
"doc":"List media required to browse and restore backed up data from the backupset Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.backupsets.aadbackupset.AzureAdBackupset.refresh",
"url":17,
"doc":"Refresh the properties of the Backupset.",
"func":1
},
{
"ref":"cvpysdk.backupsets.aadbackupset.AzureAdBackupset.backed_up_files_count",
"url":17,
"doc":"Returns the count of the total number of files present in the backed up data of all the subclients of the given backupset and given path. Args: path (str)  Folder path to find no of backed up files (Default: \\ \\ ) Returns: int  No of backed up files count in given path Raises: Exception: if browse response is not proper",
"func":1
},
{
"ref":"cvpysdk.backupsets.adbackupset",
"url":20,
"doc":"File for operating on an AD agent Backupset. adbackupset is the only class defined in this file. Class: ADBackupset: Derived class from Backuset Base class, representing a AD agent backupset, and to perform operations on that backupset AdBackupset: check_subclient()  Method to check existing subclient. if not, create new one Usage   = Limitation:  current , update subclient content failed. this is limitation in sp12.will tyr in sp13"
},
{
"ref":"cvpysdk.backupsets.adbackupset.ADBackupset",
"url":20,
"doc":"AD agent backupset class Initialise the backupset object. Args: instance_object (object)  instance of the Instance class backupset_name (str)  name of the backupset backupset_id (str)  id of the backupset default: None Returns: object - instance of the Backupset class"
},
{
"ref":"cvpysdk.backupsets.adbackupset.ADBackupset.check_subclient",
"url":20,
"doc":"check if the subclient exsit, will create new one if not found Args: backupset_ins (instance) inherite backupset instance subclientname (string) subclient name storagepolicy (string) storage policy name subclinetconet (list) Ad subclinet content, each element start with path: deleteexist (bool) if subclient exist, delete or keep existing one Return: object Subclient instance Raise: None",
"func":1
},
{
"ref":"cvpysdk.backupsets.adbackupset.ADBackupset.update_properties",
"url":17,
"doc":"Updates the backupset properties Args: properties_dict (dict)  Backupset property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.backupsets.adbackupset.ADBackupset.properties",
"url":17,
"doc":"Returns the backupset properties"
},
{
"ref":"cvpysdk.backupsets.adbackupset.ADBackupset.name",
"url":17,
"doc":"Returns the Backupset display name"
},
{
"ref":"cvpysdk.backupsets.adbackupset.ADBackupset.backupset_id",
"url":17,
"doc":"Treats the backupset id as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.adbackupset.ADBackupset.backupset_name",
"url":17,
"doc":"Treats the backupset name as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.adbackupset.ADBackupset.description",
"url":17,
"doc":"Treats the backupset description as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.adbackupset.ADBackupset.is_default_backupset",
"url":17,
"doc":"Treats the is default backupset as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.adbackupset.ADBackupset.is_on_demand_backupset",
"url":17,
"doc":"Treats the is on demand backupset as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.adbackupset.ADBackupset.plan",
"url":17,
"doc":"Treats the backupset plan as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.adbackupset.ADBackupset.guid",
"url":17,
"doc":"Treats the backupset GUID as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.adbackupset.ADBackupset.set_default_backupset",
"url":17,
"doc":"Sets the backupset represented by this Backupset class instance as the default backupset if it is not the default backupset. Raises: SDKException: if failed to set this as the default backupset",
"func":1
},
{
"ref":"cvpysdk.backupsets.adbackupset.ADBackupset.backup",
"url":17,
"doc":"Runs backup job for all subclients in this backupset. kwargs: Please refer subclient.backup() for all the supported arguments. Commonly used arguments are, backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental advanced_options (dict)  advanced backup options to be included while making the request common_backup_options (dict)  advanced job options to be included while making request Returns: list - list consisting of the job objects for the backup jobs started for the subclients in the backupset",
"func":1
},
{
"ref":"cvpysdk.backupsets.adbackupset.ADBackupset.browse",
"url":17,
"doc":"Browses the content of the Backupset. Args: Dictionary of browse options: Example: browse({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.backupsets.adbackupset.ADBackupset.find",
"url":17,
"doc":"Searches a file/folder in the backed up content of the backupset, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.backupsets.adbackupset.ADBackupset.delete_data",
"url":17,
"doc":"Deletes items for the backupset in the Index and makes them unavailable for browsing and recovery Args: paths (str/list)  The list of paths or single path to delete from the backupset Returns: None  If delete request is sent successfully Raises: Exception, if unable to prepare, response is invalid or send the delete data request",
"func":1
},
{
"ref":"cvpysdk.backupsets.adbackupset.ADBackupset.list_media",
"url":17,
"doc":"List media required to browse and restore backed up data from the backupset Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.backupsets.adbackupset.ADBackupset.refresh",
"url":17,
"doc":"Refresh the properties of the Backupset.",
"func":1
},
{
"ref":"cvpysdk.backupsets.adbackupset.ADBackupset.backed_up_files_count",
"url":17,
"doc":"Returns the count of the total number of files present in the backed up data of all the subclients of the given backupset and given path. Args: path (str)  Folder path to find no of backed up files (Default: \\ \\ ) Returns: int  No of backed up files count in given path Raises: Exception: if browse response is not proper",
"func":1
},
{
"ref":"cvpysdk.backupsets.cabackupset",
"url":21,
"doc":"File for operating on a Cloud Apps Backupset. CloudAppsBackupset is the only class defined in this file. CloudAppsBackupset: Derived class from Backuset Base class, representing a cloud apps backupset, and to perform operations on that backupset CloudAppsBackupset: __new__()  Method to create object based on specific cloud apps instance type Usage   = To add a new Backupset for Cloud Apps agent, please follow these steps: 1. Add the module for the new instance type under the location:  /cvpysdk/backupsets/cloudapps , with the module name   _backupset.py (e.g. \"salesforce_backupset.py\")  . Create a class for your instance type and inherit the CloudAppsBackupset class.  . Add the import statement inside the __new__ method.  NOTE: If you add the import statement at the top, it'll cause cyclic import, and the call will fail  . After adding the import statement: - In the  instance_type dict - Add the cloud apps instance type as the key, and the class as its value"
},
{
"ref":"cvpysdk.backupsets.cabackupset.CloudAppsBackupset",
"url":21,
"doc":"Class for representing a Backupset of the Cloud Apps agent. Initialise the backupset object. Args: instance_object (object)  instance of the Instance class backupset_name (str)  name of the backupset backupset_id (str)  id of the backupset default: None Returns: object - instance of the Backupset class"
},
{
"ref":"cvpysdk.backupsets.cabackupset.CloudAppsBackupset.update_properties",
"url":17,
"doc":"Updates the backupset properties Args: properties_dict (dict)  Backupset property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.backupsets.cabackupset.CloudAppsBackupset.properties",
"url":17,
"doc":"Returns the backupset properties"
},
{
"ref":"cvpysdk.backupsets.cabackupset.CloudAppsBackupset.name",
"url":17,
"doc":"Returns the Backupset display name"
},
{
"ref":"cvpysdk.backupsets.cabackupset.CloudAppsBackupset.backupset_id",
"url":17,
"doc":"Treats the backupset id as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.cabackupset.CloudAppsBackupset.backupset_name",
"url":17,
"doc":"Treats the backupset name as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.cabackupset.CloudAppsBackupset.description",
"url":17,
"doc":"Treats the backupset description as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.cabackupset.CloudAppsBackupset.is_default_backupset",
"url":17,
"doc":"Treats the is default backupset as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.cabackupset.CloudAppsBackupset.is_on_demand_backupset",
"url":17,
"doc":"Treats the is on demand backupset as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.cabackupset.CloudAppsBackupset.plan",
"url":17,
"doc":"Treats the backupset plan as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.cabackupset.CloudAppsBackupset.guid",
"url":17,
"doc":"Treats the backupset GUID as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.cabackupset.CloudAppsBackupset.set_default_backupset",
"url":17,
"doc":"Sets the backupset represented by this Backupset class instance as the default backupset if it is not the default backupset. Raises: SDKException: if failed to set this as the default backupset",
"func":1
},
{
"ref":"cvpysdk.backupsets.cabackupset.CloudAppsBackupset.backup",
"url":17,
"doc":"Runs backup job for all subclients in this backupset. kwargs: Please refer subclient.backup() for all the supported arguments. Commonly used arguments are, backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental advanced_options (dict)  advanced backup options to be included while making the request common_backup_options (dict)  advanced job options to be included while making request Returns: list - list consisting of the job objects for the backup jobs started for the subclients in the backupset",
"func":1
},
{
"ref":"cvpysdk.backupsets.cabackupset.CloudAppsBackupset.browse",
"url":17,
"doc":"Browses the content of the Backupset. Args: Dictionary of browse options: Example: browse({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.backupsets.cabackupset.CloudAppsBackupset.find",
"url":17,
"doc":"Searches a file/folder in the backed up content of the backupset, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.backupsets.cabackupset.CloudAppsBackupset.delete_data",
"url":17,
"doc":"Deletes items for the backupset in the Index and makes them unavailable for browsing and recovery Args: paths (str/list)  The list of paths or single path to delete from the backupset Returns: None  If delete request is sent successfully Raises: Exception, if unable to prepare, response is invalid or send the delete data request",
"func":1
},
{
"ref":"cvpysdk.backupsets.cabackupset.CloudAppsBackupset.list_media",
"url":17,
"doc":"List media required to browse and restore backed up data from the backupset Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.backupsets.cabackupset.CloudAppsBackupset.refresh",
"url":17,
"doc":"Refresh the properties of the Backupset.",
"func":1
},
{
"ref":"cvpysdk.backupsets.cabackupset.CloudAppsBackupset.backed_up_files_count",
"url":17,
"doc":"Returns the count of the total number of files present in the backed up data of all the subclients of the given backupset and given path. Args: path (str)  Folder path to find no of backed up files (Default: \\ \\ ) Returns: int  No of backed up files count in given path Raises: Exception: if browse response is not proper",
"func":1
},
{
"ref":"cvpysdk.backupsets.cloudapps",
"url":22,
"doc":"Initialize Cloud Apps Backupsets for the SDK."
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset",
"url":23,
"doc":"File for operating on a Salesforce Backupset. SalesforceBackupset is the only class defined in this file. SalesforceBackuset: Derived class from CloudAppsBackupset Base class, representing a salesforce backupset, and to perform operations on that backupset SalesforceBackupset: __init__()  Backupset class method overwritten to add salesforce browse options in default browse options _get_backupset_properties()  Backupset class method overwritten to add salesforce backupset properties as well _prepare_browse_json()  Backupset class method overwritten to add salesforce browse option download_cache_path()  Fetches download cache path from backupset mutual_auth_path()  Fetches mutual auth path from backupset salesforce_user_name()  Fetches salesforce user name from backupset is_sync_db_enabled()  Determines sync database enabled or not on backupset sync_db_type()  Fetches sync database type from backupset sync_db_host()  Fetches sync database host name from backupset sync_db_instance()  Fetches ssync database instance name from backupset sync_db_name()  Fetches sync database name from backupset sync_db_port()  Fetches sync database port number from backupset sync_db_user_name()  Fetches sync database user name from backupset"
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset",
"url":23,
"doc":"Derived class from CloudAppsBackupset Base class, representing a salesforce backupset, and to perform operations on that backupset. Initlializes instance of the Backupset class for the Salesforce instance. Args: instance_object (object)  instance of the Instance class backupset_name (str)  name of backupset backupset_id (int)  id of backupset Returns: object - instance of the SalesforceBackupset class"
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.download_cache_path",
"url":23,
"doc":"getter for download cache path"
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.mutual_auth_path",
"url":23,
"doc":"getter for download cache path"
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.salesforce_user_name",
"url":23,
"doc":"getter for salesforce user name"
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.is_sync_db_enabled",
"url":23,
"doc":"lets the user know whether sync db enabled or not"
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.sync_db_type",
"url":23,
"doc":"getter for the sync database type"
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.sync_db_host",
"url":23,
"doc":"getter for the sync database hostname"
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.sync_db_instance",
"url":23,
"doc":"getter for the sync database instance name"
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.sync_db_name",
"url":23,
"doc":"getter for the sync database name"
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.sync_db_port",
"url":23,
"doc":"getter for the sync database port number"
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.sync_db_user_name",
"url":23,
"doc":"getter for the sync database user name"
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.update_properties",
"url":17,
"doc":"Updates the backupset properties Args: properties_dict (dict)  Backupset property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.properties",
"url":17,
"doc":"Returns the backupset properties"
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.name",
"url":17,
"doc":"Returns the Backupset display name"
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.backupset_id",
"url":17,
"doc":"Treats the backupset id as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.backupset_name",
"url":17,
"doc":"Treats the backupset name as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.description",
"url":17,
"doc":"Treats the backupset description as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.is_default_backupset",
"url":17,
"doc":"Treats the is default backupset as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.is_on_demand_backupset",
"url":17,
"doc":"Treats the is on demand backupset as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.plan",
"url":17,
"doc":"Treats the backupset plan as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.guid",
"url":17,
"doc":"Treats the backupset GUID as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.set_default_backupset",
"url":17,
"doc":"Sets the backupset represented by this Backupset class instance as the default backupset if it is not the default backupset. Raises: SDKException: if failed to set this as the default backupset",
"func":1
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.backup",
"url":17,
"doc":"Runs backup job for all subclients in this backupset. kwargs: Please refer subclient.backup() for all the supported arguments. Commonly used arguments are, backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental advanced_options (dict)  advanced backup options to be included while making the request common_backup_options (dict)  advanced job options to be included while making request Returns: list - list consisting of the job objects for the backup jobs started for the subclients in the backupset",
"func":1
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.browse",
"url":17,
"doc":"Browses the content of the Backupset. Args: Dictionary of browse options: Example: browse({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.find",
"url":17,
"doc":"Searches a file/folder in the backed up content of the backupset, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.delete_data",
"url":17,
"doc":"Deletes items for the backupset in the Index and makes them unavailable for browsing and recovery Args: paths (str/list)  The list of paths or single path to delete from the backupset Returns: None  If delete request is sent successfully Raises: Exception, if unable to prepare, response is invalid or send the delete data request",
"func":1
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.list_media",
"url":17,
"doc":"List media required to browse and restore backed up data from the backupset Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.refresh",
"url":17,
"doc":"Refresh the properties of the Backupset.",
"func":1
},
{
"ref":"cvpysdk.backupsets.cloudapps.salesforce_backupset.SalesforceBackupset.backed_up_files_count",
"url":17,
"doc":"Returns the count of the total number of files present in the backed up data of all the subclients of the given backupset and given path. Args: path (str)  Folder path to find no of backed up files (Default: \\ \\ ) Returns: int  No of backed up files count in given path Raises: Exception: if browse response is not proper",
"func":1
},
{
"ref":"cvpysdk.backupsets.db2backupset",
"url":24,
"doc":"File for operating on a DB2 Backupset. DB2Backupset is the only class defined in this file. DB2Backupset: Derived class from Backupset Base class, representing a db2 backupset, and to perform operations on that subclient DB2Backupset:       = restore_entire_database()  runs the restore job for specified backupset restore_out_of_place()  runs the out of place restore for given backupset restore_table_level()  Table level restore function DB2Backupset instance Attributes:                 =  db2_db_status  returns db2 database status"
},
{
"ref":"cvpysdk.backupsets.db2backupset.DB2Backupset",
"url":24,
"doc":"Derived class from Backupset Base class, representing a db2 backupset, and to perform operations on that backupset. Initialise the backupset object. Args: instance_object (object)  instance of the Instance class backupset_name (str)  name of the backupset backupset_id (str)  id of the backupset default: None Returns: object - instance of the Backupset class"
},
{
"ref":"cvpysdk.backupsets.db2backupset.DB2Backupset.db2_db_status",
"url":24,
"doc":"returns db2 database status Returns: (str)  Status of db as connected or disconnected"
},
{
"ref":"cvpysdk.backupsets.db2backupset.DB2Backupset.restore_entire_database",
"url":24,
"doc":"Restores the db2 databases specified in the input paths list to the same location. Args: dest_client_name (str)  destination client name where db need to be restored dest_instance_name (str)  destination db2 instance name of destination client dest_database_name (str)  destination database name recover_db (bool)  recover database flag default: True restore_incremental (bool)  Restore incremental flag default: True restore_data (bool)  Restore data or not default: True copy_precedence (int)  Copy precedence to perform restore from default : None roll_forward (bool)  Rollforward database or not default: True restore_logs (bool) - Restore the logs or not default: True Returns: object - instance of the Job class for this restore job Raises: SDKException: if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.backupsets.db2backupset.DB2Backupset.restore_out_of_place",
"url":24,
"doc":"Restores the DB2 data/log files specified in the input paths list to the same location. Args: dest_client_name (str)  destination client name where files are to be restored dest_instance_name (str)  destination db2 instance name of destination client dest_backupset_name (str)  destination db2 backupset name of destination client target_path (str)  Target DB Restore Destination copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None redirect_enabled (bool)  boolean to specify if redirect restore is enabled default: False redirect_storage_group_path (dict)  Path specified for each storage group in advanced restore options in order to perform redirect restore format: {'Storage Group Name': 'Redirect Path'} default: None redirect_tablespace_path (dict)  Path specified for each tablespace in advanced restore options in order to perform redirect restore format: {'Tablespace name': 'Redirect Path'} default: None destination_path (str)  destinath path for restore default: None restore_data (bool)  Restore data or not default: True Returns: object - instance of the Job class for this restore job Raises: SDKException: if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.backupsets.db2backupset.DB2Backupset.restore_table_level",
"url":24,
"doc":"Performs DB2 table level restore Args: aux_client_name (str)  auxiliary client name where files are to be restored aux_instance_name (str)  auxiliary instance name where files are to be restored aux_backupset_name (str)  auxiliary backupset name where files are to be restored dest_client_name (str)  destination client name where files are to be restored dest_instance_name (str)  destination db2 instance name of destination client dest_backupset_name (str)  destination db2 backupset name of destination client target_path (str)  Destination DB restore path src_backupset_name (str)  Source Backupset Name staging_path (str)  Staging Path user_name (str)  Destination User name password (str)  Destination Password tables_path (list)  List of tables path Example: Unix: ['/+tblview+/instance_name/database_name/schema_name/table_name/ '] Windows: [\"\\+tblview+\\instance_name\\database_name\\schema_name\\table_name\\ \"] copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None rollForward (bool)  Rollforward or not default: True destination_path (str)  destinath path for restore default: None server_port (int)  Server Port Destination instance default: 50000 generateAuthorizationDDL (bool)  Generate Authorization DDL default: False extractDDLStatements (bool)  Extracts DDL statement or not default: True clearAuxiliary (bool)  Cleanup auxilliary or not default: True dropTable (bool)  Drop table for import default: False Returns: object - instance of the Job class for this restore job Raises: SDKException: if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.backupsets.db2backupset.DB2Backupset.update_properties",
"url":17,
"doc":"Updates the backupset properties Args: properties_dict (dict)  Backupset property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.backupsets.db2backupset.DB2Backupset.properties",
"url":17,
"doc":"Returns the backupset properties"
},
{
"ref":"cvpysdk.backupsets.db2backupset.DB2Backupset.name",
"url":17,
"doc":"Returns the Backupset display name"
},
{
"ref":"cvpysdk.backupsets.db2backupset.DB2Backupset.backupset_id",
"url":17,
"doc":"Treats the backupset id as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.db2backupset.DB2Backupset.backupset_name",
"url":17,
"doc":"Treats the backupset name as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.db2backupset.DB2Backupset.description",
"url":17,
"doc":"Treats the backupset description as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.db2backupset.DB2Backupset.is_default_backupset",
"url":17,
"doc":"Treats the is default backupset as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.db2backupset.DB2Backupset.is_on_demand_backupset",
"url":17,
"doc":"Treats the is on demand backupset as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.db2backupset.DB2Backupset.plan",
"url":17,
"doc":"Treats the backupset plan as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.db2backupset.DB2Backupset.guid",
"url":17,
"doc":"Treats the backupset GUID as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.db2backupset.DB2Backupset.set_default_backupset",
"url":17,
"doc":"Sets the backupset represented by this Backupset class instance as the default backupset if it is not the default backupset. Raises: SDKException: if failed to set this as the default backupset",
"func":1
},
{
"ref":"cvpysdk.backupsets.db2backupset.DB2Backupset.backup",
"url":17,
"doc":"Runs backup job for all subclients in this backupset. kwargs: Please refer subclient.backup() for all the supported arguments. Commonly used arguments are, backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental advanced_options (dict)  advanced backup options to be included while making the request common_backup_options (dict)  advanced job options to be included while making request Returns: list - list consisting of the job objects for the backup jobs started for the subclients in the backupset",
"func":1
},
{
"ref":"cvpysdk.backupsets.db2backupset.DB2Backupset.browse",
"url":17,
"doc":"Browses the content of the Backupset. Args: Dictionary of browse options: Example: browse({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.backupsets.db2backupset.DB2Backupset.find",
"url":17,
"doc":"Searches a file/folder in the backed up content of the backupset, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.backupsets.db2backupset.DB2Backupset.delete_data",
"url":17,
"doc":"Deletes items for the backupset in the Index and makes them unavailable for browsing and recovery Args: paths (str/list)  The list of paths or single path to delete from the backupset Returns: None  If delete request is sent successfully Raises: Exception, if unable to prepare, response is invalid or send the delete data request",
"func":1
},
{
"ref":"cvpysdk.backupsets.db2backupset.DB2Backupset.list_media",
"url":17,
"doc":"List media required to browse and restore backed up data from the backupset Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.backupsets.db2backupset.DB2Backupset.refresh",
"url":17,
"doc":"Refresh the properties of the Backupset.",
"func":1
},
{
"ref":"cvpysdk.backupsets.db2backupset.DB2Backupset.backed_up_files_count",
"url":17,
"doc":"Returns the count of the total number of files present in the backed up data of all the subclients of the given backupset and given path. Args: path (str)  Folder path to find no of backed up files (Default: \\ \\ ) Returns: int  No of backed up files count in given path Raises: Exception: if browse response is not proper",
"func":1
},
{
"ref":"cvpysdk.backupsets.fsbackupset",
"url":25,
"doc":"Module for performing operations on a Backupset for the  File System Agent. FSBackupset is the only class defined in this file. FSBackupset: restore_in_place()  Restores the files/folders specified in the input paths list to the same location restore_out_of_place()  Restores the files/folders specified in the input paths list to the input client, at the specified destionation location find_all_versions()  Returns the dict containing list of all the backuped up versions of specified file restore_bmr_admin_json()  Returns the restore JSON required for BMR operations. restore_bmr_virtualserveropts_json()  Returns the Virtual Server JSON options needed for BMR _get_responsefile()  Returns the 1-touch response file for that backupset run_bmr_restore()  Triggers the VIrtualize Me to VMWare job _get_cs_login_details()  Get the cs login information. _restore_aix_1touch_admin_json()  Returns the restore JSON required for BMR operations. run_bmr_aix_restore()  Triggers the Aix 1-touch restore Job index_pruning_type()  Sets the index pruning type index_pruning_days_retention()  Sets the number of days to be maintained in the index database index_pruning_cycles_retention()  Sets the number of cycles to be maintained in the index database create_replica_copy()  Triggers Replica Copy for live Replication. delete_replication_pair()  Delete Replication Pair get_mount_path_guid()  Get the mount path volume's GUID get_recovery_points()  Gets all the valid recovery points from the RPStore for the BLR pair create_fsblr_replication_pair()  Create Live/Granular Replication Pair create_granular_replica_copy()  Triggers Granular replication permanent mount get_browse_volume_guid()  It returns browse volume guid"
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset",
"url":25,
"doc":"Derived class from Backupset Base class, representing a fs backupset, and to perform operations on that backupset. Initialise the backupset object. Args: instance_object (object)  instance of the Instance class backupset_name (str)  name of the backupset backupset_id (str)  id of the backupset default: None Returns: object - instance of the Backupset class"
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.restore_in_place",
"url":25,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore no_of_streams (int)  Number of streams to be used for restore restore_jobs (list)  list of jobs to be restored if the job is index free restore advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.restore_out_of_place",
"url":25,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore no_of_streams (int)  Number of streams to be used for restore restore_jobs (list)  list of jobs to be restored if the job is index free restore advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.find_all_versions",
"url":25,
"doc":"Searches the content of a Subclient, and returns all versions available for the content. Args: Dictionary of browse options: Example: find_all_versions({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) (OR) Keyword argument of browse options: Example: find_all_versions( path='c:\\hello.txt', show_deleted=True, to_time='2016-04-31 12:00:00' ) Refer self._default_browse_options for all the supported options Returns: dict - dictionary of the specified file with list of all the file versions and additional metadata retrieved from browse",
"func":1
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.run_bmr_restore",
"url":25,
"doc":"Calling the create task API with the final restore JSON Args : IsoPath (String) : The location of ISO in the datastore CommServIP (String) : The IP of the CS CommServHostname (String) : The hostname of he CS CommServUsername (String) : The username for the Comcell CommServPassword (String) : The password for the comcell Datastore (String) : The ESX store in which the VM is provisioned VcenterServerName (String) : The Vcenter to be used ClientHostName (String) : The hostname of the client being virtualized. VmName (String) : The name with which the VM is provisioned. VirtualizationClient (String) : The vmware virualization client EsxServer (String) : The ESX server name NetworkLabel (String) : The network label to be assigned to the VM. HyperVHost (String) : The Hyper-V host GuestUser (String) : The Username of the guest OS GuestPassword (String) : The Password of the guest OS CloneClientName (String) : The clone client name Returns : returns the task object",
"func":1
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.run_bmr_aix_restore",
"url":25,
"doc":"Calling the create task API with the final restore JSON Args : Clone Clinet Name (String) : Clone machine name Clone Hostname (String) :Clone machine host name DNS Suffix (String) :Dns suffix name DNS IP (Integer) :Ip of Dns Address Clone IP (Integer) :Clone Machine IP Clone Netmask (Integer) :Clone Machine NetMask Clone Gateway (Integer) :Clone Machine Gateway Auto Reboot (Boolean) :Client machine Auto reboot(True or False) Clone (Boolean) :Is Clone enabled(True or False) CS_Username (String) : The username for the Comcell CS_Password (String) : The password for the comcell Returns : returns the task object",
"func":1
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.index_server",
"url":25,
"doc":"Returns the index server client set for the backupset"
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.index_pruning_type",
"url":25,
"doc":"Returns index pruning type for the backupset"
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.index_pruning_days_retention",
"url":25,
"doc":"Returns number of days to be maintained in index by index pruning for the backupset"
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.index_pruning_cycles_retention",
"url":25,
"doc":"Returns number of cycles to be maintained in index by index pruning for the backupset"
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.create_replica_copy",
"url":25,
"doc":"\"setter for live blklvl Replication replica copy . Args: srcclientid (int)  Source client id. destclientid (dict)  Destintion client id . scid (int)  Replication Subclient id blrid (int)  Blr pair id srcguid (str)  Browse guid of source dstguid (str)  Browse guid of destination volume  replication_options (dict)  object instance",
"func":1
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.delete_replication_pair",
"url":25,
"doc":"\"Delete replication pair Args: blrid (int)  blocklevel replication id.",
"func":1
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.get_mount_path_guid",
"url":25,
"doc":"Gets the mount points for the BLR pairs Args: volume (str): volume name eg: \"E:\"",
"func":1
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.get_recovery_points",
"url":25,
"doc":"Get all recovery points for the BLR pair from the associated RPStore. These recovery points are those to which BLR pairs can failover/permanent mount to Args: client_id (int): The ID of the source client machine subclient_id (int): The ID of the subclient associated with the BLR pair Returns: List of dictionary of recovery points in the format: {'timestamp': 12323, 'dataChangedSize': 1200, 'sequenceNumber': 898}",
"func":1
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.create_fsblr_replication_pair",
"url":25,
"doc":"\" Create FSBLR continuous replication pair Args: srcclientid (int)  Source client id destclientid (dict)  Destintion client id srcguid (str)  Browse guid of source volume dstguid (str)  Browse guid of destination volume rpstoreid (str)  Rp store id for replication replicationtype (int)  Replication pair type to create (1 for live, 4 for granular pairs)  replication_options (dict)  { srcvol (str): Source volume name destvol (str): Destination volume name srcclient (str): Source volume name srcclient (str): Destination volume name rpstore (int): RPStore ID, ccrp (str): Time in minutes for crash consistent recovery point arcp (str): Time in minutes for app consistent recovery point }",
"func":1
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.create_granular_replica_copy",
"url":25,
"doc":"\"setter for granular blklvl Replication replica copy . Args: srcclientid (int)  Source client id. destclientid (dict)  Destintion client id . scid (int)  Replication Subclient id blrid (int)  Blr pair id srcguid (str)  source volume guid dstguid (str)  Destination relication guid restoreguid (str)  RP store guid timestamp (int)  Replication point timestamp  replication_options (dict)  object instance",
"func":1
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.get_browse_volume_guid",
"url":25,
"doc":"\"to get browse volume guids for client Returns: vguids (json) : Returns volume guids and properties",
"func":1
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.update_properties",
"url":17,
"doc":"Updates the backupset properties Args: properties_dict (dict)  Backupset property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.properties",
"url":17,
"doc":"Returns the backupset properties"
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.name",
"url":17,
"doc":"Returns the Backupset display name"
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.backupset_id",
"url":17,
"doc":"Treats the backupset id as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.backupset_name",
"url":17,
"doc":"Treats the backupset name as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.description",
"url":17,
"doc":"Treats the backupset description as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.is_default_backupset",
"url":17,
"doc":"Treats the is default backupset as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.is_on_demand_backupset",
"url":17,
"doc":"Treats the is on demand backupset as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.plan",
"url":17,
"doc":"Treats the backupset plan as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.guid",
"url":17,
"doc":"Treats the backupset GUID as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.set_default_backupset",
"url":17,
"doc":"Sets the backupset represented by this Backupset class instance as the default backupset if it is not the default backupset. Raises: SDKException: if failed to set this as the default backupset",
"func":1
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.backup",
"url":17,
"doc":"Runs backup job for all subclients in this backupset. kwargs: Please refer subclient.backup() for all the supported arguments. Commonly used arguments are, backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental advanced_options (dict)  advanced backup options to be included while making the request common_backup_options (dict)  advanced job options to be included while making request Returns: list - list consisting of the job objects for the backup jobs started for the subclients in the backupset",
"func":1
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.browse",
"url":17,
"doc":"Browses the content of the Backupset. Args: Dictionary of browse options: Example: browse({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.find",
"url":17,
"doc":"Searches a file/folder in the backed up content of the backupset, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.delete_data",
"url":17,
"doc":"Deletes items for the backupset in the Index and makes them unavailable for browsing and recovery Args: paths (str/list)  The list of paths or single path to delete from the backupset Returns: None  If delete request is sent successfully Raises: Exception, if unable to prepare, response is invalid or send the delete data request",
"func":1
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.list_media",
"url":17,
"doc":"List media required to browse and restore backed up data from the backupset Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.refresh",
"url":17,
"doc":"Refresh the properties of the Backupset.",
"func":1
},
{
"ref":"cvpysdk.backupsets.fsbackupset.FSBackupset.backed_up_files_count",
"url":17,
"doc":"Returns the count of the total number of files present in the backed up data of all the subclients of the given backupset and given path. Args: path (str)  Folder path to find no of backed up files (Default: \\ \\ ) Returns: int  No of backed up files count in given path Raises: Exception: if browse response is not proper",
"func":1
},
{
"ref":"cvpysdk.backupsets.hanabackupset",
"url":26,
"doc":"File for operating on a SAP HANA Backupset. HANABackupset is the only class defined in this file. HANABackupset: Derived class from Backupset Base class, representing a SAP HANA backupset, and to perform operations on that subclient HANABackupset: restore()  runs the restore job for specified backupset"
},
{
"ref":"cvpysdk.backupsets.hanabackupset.HANABackupset",
"url":26,
"doc":"Derived class from Backupset Base class, representing a SAP HANA backupset, and to perform operations on that backupset. Initialise the backupset object. Args: instance_object (object)  instance of the Instance class backupset_name (str)  name of the backupset backupset_id (str)  id of the backupset default: None Returns: object - instance of the Backupset class"
},
{
"ref":"cvpysdk.backupsets.hanabackupset.HANABackupset.restore",
"url":26,
"doc":"Restores the databases specified in the input paths list. Args: pseudo_client (str)  HANA client to restore the database at instance (str)  destination instance to restore the db at backup_prefix (str)  prefix of the backup job default: None point_in_time (str)  time to which db should be restored to default: None initialize_log_area (bool)  boolean to specify whether to initialize the new log area after restore default: False use_hardware_revert (bool)  boolean to specify whether to do a hardware revert in restore default: False clone_env (bool)  boolean to specify whether the database should be cloned or not default: False check_access (bool)  check access during restore or not default: True destination_instance_dir (str)  HANA data directory for snap cross instance restore or cross machine restores default: None ignore_delta_backups (bool)  whether to ignore delta backups during restore or not default: True Returns: object - instance of the Job class for this restore job Raises: SDKException: if instance is not a string or object if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.backupsets.hanabackupset.HANABackupset.update_properties",
"url":17,
"doc":"Updates the backupset properties Args: properties_dict (dict)  Backupset property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.backupsets.hanabackupset.HANABackupset.properties",
"url":17,
"doc":"Returns the backupset properties"
},
{
"ref":"cvpysdk.backupsets.hanabackupset.HANABackupset.name",
"url":17,
"doc":"Returns the Backupset display name"
},
{
"ref":"cvpysdk.backupsets.hanabackupset.HANABackupset.backupset_id",
"url":17,
"doc":"Treats the backupset id as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.hanabackupset.HANABackupset.backupset_name",
"url":17,
"doc":"Treats the backupset name as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.hanabackupset.HANABackupset.description",
"url":17,
"doc":"Treats the backupset description as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.hanabackupset.HANABackupset.is_default_backupset",
"url":17,
"doc":"Treats the is default backupset as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.hanabackupset.HANABackupset.is_on_demand_backupset",
"url":17,
"doc":"Treats the is on demand backupset as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.hanabackupset.HANABackupset.plan",
"url":17,
"doc":"Treats the backupset plan as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.hanabackupset.HANABackupset.guid",
"url":17,
"doc":"Treats the backupset GUID as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.hanabackupset.HANABackupset.set_default_backupset",
"url":17,
"doc":"Sets the backupset represented by this Backupset class instance as the default backupset if it is not the default backupset. Raises: SDKException: if failed to set this as the default backupset",
"func":1
},
{
"ref":"cvpysdk.backupsets.hanabackupset.HANABackupset.backup",
"url":17,
"doc":"Runs backup job for all subclients in this backupset. kwargs: Please refer subclient.backup() for all the supported arguments. Commonly used arguments are, backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental advanced_options (dict)  advanced backup options to be included while making the request common_backup_options (dict)  advanced job options to be included while making request Returns: list - list consisting of the job objects for the backup jobs started for the subclients in the backupset",
"func":1
},
{
"ref":"cvpysdk.backupsets.hanabackupset.HANABackupset.browse",
"url":17,
"doc":"Browses the content of the Backupset. Args: Dictionary of browse options: Example: browse({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.backupsets.hanabackupset.HANABackupset.find",
"url":17,
"doc":"Searches a file/folder in the backed up content of the backupset, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.backupsets.hanabackupset.HANABackupset.delete_data",
"url":17,
"doc":"Deletes items for the backupset in the Index and makes them unavailable for browsing and recovery Args: paths (str/list)  The list of paths or single path to delete from the backupset Returns: None  If delete request is sent successfully Raises: Exception, if unable to prepare, response is invalid or send the delete data request",
"func":1
},
{
"ref":"cvpysdk.backupsets.hanabackupset.HANABackupset.list_media",
"url":17,
"doc":"List media required to browse and restore backed up data from the backupset Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.backupsets.hanabackupset.HANABackupset.refresh",
"url":17,
"doc":"Refresh the properties of the Backupset.",
"func":1
},
{
"ref":"cvpysdk.backupsets.hanabackupset.HANABackupset.backed_up_files_count",
"url":17,
"doc":"Returns the count of the total number of files present in the backed up data of all the subclients of the given backupset and given path. Args: path (str)  Folder path to find no of backed up files (Default: \\ \\ ) Returns: int  No of backed up files count in given path Raises: Exception: if browse response is not proper",
"func":1
},
{
"ref":"cvpysdk.backupsets.nasbackupset",
"url":27,
"doc":"Module for performing operations on a Backupset for the  NAS / NDMP Agent. NASBackupset is the only class defined in this file. NASBackupset: Derived class from Backupset Base class, representing a  NAS / NDMP backupset, and to perform operations on that subclient NASBackupset: _get_backupset_properties()  gets the properties of this subclient set_image_backupset()  sets this backupset as image backupset"
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset",
"url":27,
"doc":"Derived class from Backupset Base class, representing a  NAS / NDMP backupset, and to perform operations on that backupset. Initialise the backupset object. Args: instance_object (object)  instance of the Instance class backupset_name (str)  name of the backupset backupset_id (str)  id of the backupset default: None Returns: object - instance of the Backupset class"
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.is_image_backupset",
"url":27,
"doc":"Treats is_image_backupset as a read-only property"
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.set_image_backupset",
"url":27,
"doc":"Sets the backupset represented by this Backupset class instance as the image backupset if it is not the image backupset. Raises: SDKException: if failed to set this as the image backupset",
"func":1
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.restore_in_place",
"url":25,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore no_of_streams (int)  Number of streams to be used for restore restore_jobs (list)  list of jobs to be restored if the job is index free restore advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.restore_out_of_place",
"url":25,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore no_of_streams (int)  Number of streams to be used for restore restore_jobs (list)  list of jobs to be restored if the job is index free restore advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.find_all_versions",
"url":25,
"doc":"Searches the content of a Subclient, and returns all versions available for the content. Args: Dictionary of browse options: Example: find_all_versions({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) (OR) Keyword argument of browse options: Example: find_all_versions( path='c:\\hello.txt', show_deleted=True, to_time='2016-04-31 12:00:00' ) Refer self._default_browse_options for all the supported options Returns: dict - dictionary of the specified file with list of all the file versions and additional metadata retrieved from browse",
"func":1
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.run_bmr_restore",
"url":25,
"doc":"Calling the create task API with the final restore JSON Args : IsoPath (String) : The location of ISO in the datastore CommServIP (String) : The IP of the CS CommServHostname (String) : The hostname of he CS CommServUsername (String) : The username for the Comcell CommServPassword (String) : The password for the comcell Datastore (String) : The ESX store in which the VM is provisioned VcenterServerName (String) : The Vcenter to be used ClientHostName (String) : The hostname of the client being virtualized. VmName (String) : The name with which the VM is provisioned. VirtualizationClient (String) : The vmware virualization client EsxServer (String) : The ESX server name NetworkLabel (String) : The network label to be assigned to the VM. HyperVHost (String) : The Hyper-V host GuestUser (String) : The Username of the guest OS GuestPassword (String) : The Password of the guest OS CloneClientName (String) : The clone client name Returns : returns the task object",
"func":1
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.run_bmr_aix_restore",
"url":25,
"doc":"Calling the create task API with the final restore JSON Args : Clone Clinet Name (String) : Clone machine name Clone Hostname (String) :Clone machine host name DNS Suffix (String) :Dns suffix name DNS IP (Integer) :Ip of Dns Address Clone IP (Integer) :Clone Machine IP Clone Netmask (Integer) :Clone Machine NetMask Clone Gateway (Integer) :Clone Machine Gateway Auto Reboot (Boolean) :Client machine Auto reboot(True or False) Clone (Boolean) :Is Clone enabled(True or False) CS_Username (String) : The username for the Comcell CS_Password (String) : The password for the comcell Returns : returns the task object",
"func":1
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.index_server",
"url":25,
"doc":"Returns the index server client set for the backupset"
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.index_pruning_type",
"url":25,
"doc":"Returns index pruning type for the backupset"
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.index_pruning_days_retention",
"url":25,
"doc":"Returns number of days to be maintained in index by index pruning for the backupset"
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.index_pruning_cycles_retention",
"url":25,
"doc":"Returns number of cycles to be maintained in index by index pruning for the backupset"
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.create_replica_copy",
"url":25,
"doc":"\"setter for live blklvl Replication replica copy . Args: srcclientid (int)  Source client id. destclientid (dict)  Destintion client id . scid (int)  Replication Subclient id blrid (int)  Blr pair id srcguid (str)  Browse guid of source dstguid (str)  Browse guid of destination volume  replication_options (dict)  object instance",
"func":1
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.delete_replication_pair",
"url":25,
"doc":"\"Delete replication pair Args: blrid (int)  blocklevel replication id.",
"func":1
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.get_mount_path_guid",
"url":25,
"doc":"Gets the mount points for the BLR pairs Args: volume (str): volume name eg: \"E:\"",
"func":1
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.get_recovery_points",
"url":25,
"doc":"Get all recovery points for the BLR pair from the associated RPStore. These recovery points are those to which BLR pairs can failover/permanent mount to Args: client_id (int): The ID of the source client machine subclient_id (int): The ID of the subclient associated with the BLR pair Returns: List of dictionary of recovery points in the format: {'timestamp': 12323, 'dataChangedSize': 1200, 'sequenceNumber': 898}",
"func":1
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.create_fsblr_replication_pair",
"url":25,
"doc":"\" Create FSBLR continuous replication pair Args: srcclientid (int)  Source client id destclientid (dict)  Destintion client id srcguid (str)  Browse guid of source volume dstguid (str)  Browse guid of destination volume rpstoreid (str)  Rp store id for replication replicationtype (int)  Replication pair type to create (1 for live, 4 for granular pairs)  replication_options (dict)  { srcvol (str): Source volume name destvol (str): Destination volume name srcclient (str): Source volume name srcclient (str): Destination volume name rpstore (int): RPStore ID, ccrp (str): Time in minutes for crash consistent recovery point arcp (str): Time in minutes for app consistent recovery point }",
"func":1
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.create_granular_replica_copy",
"url":25,
"doc":"\"setter for granular blklvl Replication replica copy . Args: srcclientid (int)  Source client id. destclientid (dict)  Destintion client id . scid (int)  Replication Subclient id blrid (int)  Blr pair id srcguid (str)  source volume guid dstguid (str)  Destination relication guid restoreguid (str)  RP store guid timestamp (int)  Replication point timestamp  replication_options (dict)  object instance",
"func":1
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.get_browse_volume_guid",
"url":25,
"doc":"\"to get browse volume guids for client Returns: vguids (json) : Returns volume guids and properties",
"func":1
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.update_properties",
"url":17,
"doc":"Updates the backupset properties Args: properties_dict (dict)  Backupset property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.properties",
"url":17,
"doc":"Returns the backupset properties"
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.name",
"url":17,
"doc":"Returns the Backupset display name"
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.backupset_id",
"url":17,
"doc":"Treats the backupset id as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.backupset_name",
"url":17,
"doc":"Treats the backupset name as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.description",
"url":17,
"doc":"Treats the backupset description as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.is_default_backupset",
"url":17,
"doc":"Treats the is default backupset as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.is_on_demand_backupset",
"url":17,
"doc":"Treats the is on demand backupset as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.plan",
"url":17,
"doc":"Treats the backupset plan as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.guid",
"url":17,
"doc":"Treats the backupset GUID as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.set_default_backupset",
"url":17,
"doc":"Sets the backupset represented by this Backupset class instance as the default backupset if it is not the default backupset. Raises: SDKException: if failed to set this as the default backupset",
"func":1
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.backup",
"url":17,
"doc":"Runs backup job for all subclients in this backupset. kwargs: Please refer subclient.backup() for all the supported arguments. Commonly used arguments are, backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental advanced_options (dict)  advanced backup options to be included while making the request common_backup_options (dict)  advanced job options to be included while making request Returns: list - list consisting of the job objects for the backup jobs started for the subclients in the backupset",
"func":1
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.browse",
"url":17,
"doc":"Browses the content of the Backupset. Args: Dictionary of browse options: Example: browse({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.find",
"url":17,
"doc":"Searches a file/folder in the backed up content of the backupset, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.delete_data",
"url":17,
"doc":"Deletes items for the backupset in the Index and makes them unavailable for browsing and recovery Args: paths (str/list)  The list of paths or single path to delete from the backupset Returns: None  If delete request is sent successfully Raises: Exception, if unable to prepare, response is invalid or send the delete data request",
"func":1
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.list_media",
"url":17,
"doc":"List media required to browse and restore backed up data from the backupset Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.refresh",
"url":17,
"doc":"Refresh the properties of the Backupset.",
"func":1
},
{
"ref":"cvpysdk.backupsets.nasbackupset.NASBackupset.backed_up_files_count",
"url":17,
"doc":"Returns the count of the total number of files present in the backed up data of all the subclients of the given backupset and given path. Args: path (str)  Folder path to find no of backed up files (Default: \\ \\ ) Returns: int  No of backed up files count in given path Raises: Exception: if browse response is not proper",
"func":1
},
{
"ref":"cvpysdk.backupsets.postgresbackupset",
"url":28,
"doc":"File for operating on a Postgres Server Backupset PostgresBackupset is the only class defined in this file. PostgresBackupset: Derived class from Backupset Base class, representing a Postgres server backupset, and to perform operations on that backupset PostgresBackupset:          run_live_sync()  runs live sync replication operation configure_live_sync()  runs the Task API with the request JSON provided to create live sync configuration, and returns the contents after parsing the response restore_postgres_server()  method to restore the Postgres server"
},
{
"ref":"cvpysdk.backupsets.postgresbackupset.PostgresBackupset",
"url":28,
"doc":"Derived class from Backupset Base class, representing a postgres backupset, and to perform operations on that backupset. Constructor for the class Args: instance_object (obj)  instance object backupset_name (str)  name of the backupset backupset_id (str)  id of the backupset"
},
{
"ref":"cvpysdk.backupsets.postgresbackupset.PostgresBackupset.configure_live_sync",
"url":28,
"doc":"Runs the Task API with the request JSON provided to create live sync configuration, and returns the contents after parsing the response. Args: request_json (dict)  JSON request to run for the API Returns: object - instance of the Schedule class Raises: SDKException: if live sync configuration fails if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.backupsets.postgresbackupset.PostgresBackupset.run_live_sync",
"url":28,
"doc":"runs live sync replication operation Args: dest_client_name (str)  destination client name where files are to be restored dest_instance_name (str)  destination postgres instance name of destination client baseline_job (obj)  baseline backup job object Returns: object - instance of the Schedule class",
"func":1
},
{
"ref":"cvpysdk.backupsets.postgresbackupset.PostgresBackupset.restore_postgres_server",
"url":28,
"doc":"Method to restore the Postgres server Args: database_list (List)  List of databases dest_client_name (str)  Destination Client name dest_instance_name (str)  Destination Instance name copy_precedence (int)  Copy precedence associted with storage from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None clone_env (bool)  boolean to specify whether the database should be cloned or not default: False clone_options (dict)  clone restore options passed in a dict default: None Accepted format: { \"stagingLocaion\": \"/gk_snap\", \"forceCleanup\": True, \"port\": \"5595\", \"libDirectory\": \"/opt/PostgreSQL/9.6/lib\", \"isInstanceSelected\": True, \"reservationPeriodS\": 3600, \"user\": \"postgres\", \"binaryDirectory\": \"/opt/PostgreSQL/9.6/bin\" } media_agent (str)  media agent name default: None table_level_restore (bool)  boolean to specify if the restore operation is table level default: False staging_path (str)  staging path location for table level restore default: None no_of_streams (int)  number of streams to be used by volume level restore default: None volume_level_restore (bool)  volume level restore flag default: False redirect_enabled (bool)  boolean to specify if redirect restore is enabled default: False redirect_path (str)  Path specified in advanced restore options in order to perform redirect restore default: None restore_to_disk (bool)  restore to disk flag default: False restore_to_disk_job (list)  list of backup job ids to restore to disk default: None destination_path (str)  destination path for restore default: None revert (bool)  boolean to specify whether to do a hardware revert in restore default: False Returns: object  Job containing restore details",
"func":1
},
{
"ref":"cvpysdk.backupsets.postgresbackupset.PostgresBackupset.update_properties",
"url":17,
"doc":"Updates the backupset properties Args: properties_dict (dict)  Backupset property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.backupsets.postgresbackupset.PostgresBackupset.properties",
"url":17,
"doc":"Returns the backupset properties"
},
{
"ref":"cvpysdk.backupsets.postgresbackupset.PostgresBackupset.name",
"url":17,
"doc":"Returns the Backupset display name"
},
{
"ref":"cvpysdk.backupsets.postgresbackupset.PostgresBackupset.backupset_id",
"url":17,
"doc":"Treats the backupset id as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.postgresbackupset.PostgresBackupset.backupset_name",
"url":17,
"doc":"Treats the backupset name as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.postgresbackupset.PostgresBackupset.description",
"url":17,
"doc":"Treats the backupset description as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.postgresbackupset.PostgresBackupset.is_default_backupset",
"url":17,
"doc":"Treats the is default backupset as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.postgresbackupset.PostgresBackupset.is_on_demand_backupset",
"url":17,
"doc":"Treats the is on demand backupset as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.postgresbackupset.PostgresBackupset.plan",
"url":17,
"doc":"Treats the backupset plan as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.postgresbackupset.PostgresBackupset.guid",
"url":17,
"doc":"Treats the backupset GUID as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.postgresbackupset.PostgresBackupset.set_default_backupset",
"url":17,
"doc":"Sets the backupset represented by this Backupset class instance as the default backupset if it is not the default backupset. Raises: SDKException: if failed to set this as the default backupset",
"func":1
},
{
"ref":"cvpysdk.backupsets.postgresbackupset.PostgresBackupset.backup",
"url":17,
"doc":"Runs backup job for all subclients in this backupset. kwargs: Please refer subclient.backup() for all the supported arguments. Commonly used arguments are, backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental advanced_options (dict)  advanced backup options to be included while making the request common_backup_options (dict)  advanced job options to be included while making request Returns: list - list consisting of the job objects for the backup jobs started for the subclients in the backupset",
"func":1
},
{
"ref":"cvpysdk.backupsets.postgresbackupset.PostgresBackupset.browse",
"url":17,
"doc":"Browses the content of the Backupset. Args: Dictionary of browse options: Example: browse({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.backupsets.postgresbackupset.PostgresBackupset.find",
"url":17,
"doc":"Searches a file/folder in the backed up content of the backupset, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.backupsets.postgresbackupset.PostgresBackupset.delete_data",
"url":17,
"doc":"Deletes items for the backupset in the Index and makes them unavailable for browsing and recovery Args: paths (str/list)  The list of paths or single path to delete from the backupset Returns: None  If delete request is sent successfully Raises: Exception, if unable to prepare, response is invalid or send the delete data request",
"func":1
},
{
"ref":"cvpysdk.backupsets.postgresbackupset.PostgresBackupset.list_media",
"url":17,
"doc":"List media required to browse and restore backed up data from the backupset Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.backupsets.postgresbackupset.PostgresBackupset.refresh",
"url":17,
"doc":"Refresh the properties of the Backupset.",
"func":1
},
{
"ref":"cvpysdk.backupsets.postgresbackupset.PostgresBackupset.backed_up_files_count",
"url":17,
"doc":"Returns the count of the total number of files present in the backed up data of all the subclients of the given backupset and given path. Args: path (str)  Folder path to find no of backed up files (Default: \\ \\ ) Returns: int  No of backed up files count in given path Raises: Exception: if browse response is not proper",
"func":1
},
{
"ref":"cvpysdk.backupsets.sharepointbackupset",
"url":29,
"doc":"File for operating on a Sharepoint Backupset. SPBackupset is the only class defined in this file. SPBackupset: Derived class from Backupset Base class, representing a sharepoint backupset, and to perform operations on that subclient SPBackupset:       = azure_storage_details()  updates azure storage details in sharepoint backupset properties"
},
{
"ref":"cvpysdk.backupsets.sharepointbackupset.SharepointBackupset",
"url":29,
"doc":"Derived class from Backupset Base class, representing a sharepoint backupset, and to perform operations on that backupset. Initialise the backupset object. Args: instance_object (object)  instance of the Instance class backupset_name (str)  name of the backupset backupset_id (str)  id of the backupset default: None Returns: object - instance of the Backupset class"
},
{
"ref":"cvpysdk.backupsets.sharepointbackupset.SharepointBackupset.is_sharepoint_online_instance",
"url":29,
"doc":"getter for SharePoint online instance check"
},
{
"ref":"cvpysdk.backupsets.sharepointbackupset.SharepointBackupset.azure_storage_details",
"url":29,
"doc":"Returns azure storage details associated with backupset Returns: azure_storage_account_information (dict)  dictionary of azure storage account details"
},
{
"ref":"cvpysdk.backupsets.sharepointbackupset.SharepointBackupset.update_properties",
"url":17,
"doc":"Updates the backupset properties Args: properties_dict (dict)  Backupset property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.backupsets.sharepointbackupset.SharepointBackupset.properties",
"url":17,
"doc":"Returns the backupset properties"
},
{
"ref":"cvpysdk.backupsets.sharepointbackupset.SharepointBackupset.name",
"url":17,
"doc":"Returns the Backupset display name"
},
{
"ref":"cvpysdk.backupsets.sharepointbackupset.SharepointBackupset.backupset_id",
"url":17,
"doc":"Treats the backupset id as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.sharepointbackupset.SharepointBackupset.backupset_name",
"url":17,
"doc":"Treats the backupset name as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.sharepointbackupset.SharepointBackupset.description",
"url":17,
"doc":"Treats the backupset description as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.sharepointbackupset.SharepointBackupset.is_default_backupset",
"url":17,
"doc":"Treats the is default backupset as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.sharepointbackupset.SharepointBackupset.is_on_demand_backupset",
"url":17,
"doc":"Treats the is on demand backupset as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.sharepointbackupset.SharepointBackupset.plan",
"url":17,
"doc":"Treats the backupset plan as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.sharepointbackupset.SharepointBackupset.guid",
"url":17,
"doc":"Treats the backupset GUID as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.sharepointbackupset.SharepointBackupset.set_default_backupset",
"url":17,
"doc":"Sets the backupset represented by this Backupset class instance as the default backupset if it is not the default backupset. Raises: SDKException: if failed to set this as the default backupset",
"func":1
},
{
"ref":"cvpysdk.backupsets.sharepointbackupset.SharepointBackupset.backup",
"url":17,
"doc":"Runs backup job for all subclients in this backupset. kwargs: Please refer subclient.backup() for all the supported arguments. Commonly used arguments are, backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental advanced_options (dict)  advanced backup options to be included while making the request common_backup_options (dict)  advanced job options to be included while making request Returns: list - list consisting of the job objects for the backup jobs started for the subclients in the backupset",
"func":1
},
{
"ref":"cvpysdk.backupsets.sharepointbackupset.SharepointBackupset.browse",
"url":17,
"doc":"Browses the content of the Backupset. Args: Dictionary of browse options: Example: browse({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.backupsets.sharepointbackupset.SharepointBackupset.find",
"url":17,
"doc":"Searches a file/folder in the backed up content of the backupset, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.backupsets.sharepointbackupset.SharepointBackupset.delete_data",
"url":17,
"doc":"Deletes items for the backupset in the Index and makes them unavailable for browsing and recovery Args: paths (str/list)  The list of paths or single path to delete from the backupset Returns: None  If delete request is sent successfully Raises: Exception, if unable to prepare, response is invalid or send the delete data request",
"func":1
},
{
"ref":"cvpysdk.backupsets.sharepointbackupset.SharepointBackupset.list_media",
"url":17,
"doc":"List media required to browse and restore backed up data from the backupset Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.backupsets.sharepointbackupset.SharepointBackupset.refresh",
"url":17,
"doc":"Refresh the properties of the Backupset.",
"func":1
},
{
"ref":"cvpysdk.backupsets.sharepointbackupset.SharepointBackupset.backed_up_files_count",
"url":17,
"doc":"Returns the count of the total number of files present in the backed up data of all the subclients of the given backupset and given path. Args: path (str)  Folder path to find no of backed up files (Default: \\ \\ ) Returns: int  No of backed up files count in given path Raises: Exception: if browse response is not proper",
"func":1
},
{
"ref":"cvpysdk.backupsets.vsbackupset",
"url":30,
"doc":"Module for performing operations on a Backupset for the  Virtual Server Agent. VSBackupset is the only class defined in this file. VSBackupset: browse()  browse the content of the backupset _process_browse_response()  retrieves the items from browse response To add a new Virtual Backupset, create a class in a new module under _virtual_server sub package The new module which is created has to named in the following manner: 1. Name the module with the name of the Virtual Server without special characters 2.Spaces alone must be replaced with underscores('_') For eg: The Virtual Server 'Red Hat Virtualization' is named as 'red_hat_virtualization.py' The Virtual Server 'Hyper-V' is named as 'hyperv.py'"
},
{
"ref":"cvpysdk.backupsets.vsbackupset.VSBackupset",
"url":30,
"doc":"Derived class from Backupset Base class, representing a vs backupset, and to perform operations on that backupset. Initialise the backupset object. Args: instance_object (object)  instance of the Instance class backupset_name (str)  name of the backupset backupset_id (str)  id of the backupset default: None Returns: object - instance of the Backupset class"
},
{
"ref":"cvpysdk.backupsets.vsbackupset.VSBackupset.hidden_subclient",
"url":30,
"doc":"Creates the object for the hidden subclient Returns: _hidden_subclient - object of the subclient"
},
{
"ref":"cvpysdk.backupsets.vsbackupset.VSBackupset.browse",
"url":30,
"doc":"Browses the content of the Backupset. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation",
"func":1
},
{
"ref":"cvpysdk.backupsets.vsbackupset.VSBackupset.index_server",
"url":30,
"doc":"Returns the index server client set for the backupset"
},
{
"ref":"cvpysdk.backupsets.vsbackupset.VSBackupset.vm_filter",
"url":30,
"doc":"Returns the vm filters set at the backupset level Returns: list - list of content associated as the filters with the backupset"
},
{
"ref":"cvpysdk.backupsets.vsbackupset.VSBackupset.vm_disk_filter",
"url":30,
"doc":"Returns the vm disk filters set at the backupset level Returns: list - list of content associated as the disk filters with the backupset"
},
{
"ref":"cvpysdk.backupsets.vsbackupset.VSBackupset.update_properties",
"url":17,
"doc":"Updates the backupset properties Args: properties_dict (dict)  Backupset property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.backupsets.vsbackupset.VSBackupset.properties",
"url":17,
"doc":"Returns the backupset properties"
},
{
"ref":"cvpysdk.backupsets.vsbackupset.VSBackupset.name",
"url":17,
"doc":"Returns the Backupset display name"
},
{
"ref":"cvpysdk.backupsets.vsbackupset.VSBackupset.backupset_id",
"url":17,
"doc":"Treats the backupset id as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.vsbackupset.VSBackupset.backupset_name",
"url":17,
"doc":"Treats the backupset name as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.vsbackupset.VSBackupset.description",
"url":17,
"doc":"Treats the backupset description as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.vsbackupset.VSBackupset.is_default_backupset",
"url":17,
"doc":"Treats the is default backupset as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.vsbackupset.VSBackupset.is_on_demand_backupset",
"url":17,
"doc":"Treats the is on demand backupset as a read-only attribute."
},
{
"ref":"cvpysdk.backupsets.vsbackupset.VSBackupset.plan",
"url":17,
"doc":"Treats the backupset plan as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.vsbackupset.VSBackupset.guid",
"url":17,
"doc":"Treats the backupset GUID as a property of the Backupset class."
},
{
"ref":"cvpysdk.backupsets.vsbackupset.VSBackupset.set_default_backupset",
"url":17,
"doc":"Sets the backupset represented by this Backupset class instance as the default backupset if it is not the default backupset. Raises: SDKException: if failed to set this as the default backupset",
"func":1
},
{
"ref":"cvpysdk.backupsets.vsbackupset.VSBackupset.backup",
"url":17,
"doc":"Runs backup job for all subclients in this backupset. kwargs: Please refer subclient.backup() for all the supported arguments. Commonly used arguments are, backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental advanced_options (dict)  advanced backup options to be included while making the request common_backup_options (dict)  advanced job options to be included while making request Returns: list - list consisting of the job objects for the backup jobs started for the subclients in the backupset",
"func":1
},
{
"ref":"cvpysdk.backupsets.vsbackupset.VSBackupset.find",
"url":17,
"doc":"Searches a file/folder in the backed up content of the backupset, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.backupsets.vsbackupset.VSBackupset.delete_data",
"url":17,
"doc":"Deletes items for the backupset in the Index and makes them unavailable for browsing and recovery Args: paths (str/list)  The list of paths or single path to delete from the backupset Returns: None  If delete request is sent successfully Raises: Exception, if unable to prepare, response is invalid or send the delete data request",
"func":1
},
{
"ref":"cvpysdk.backupsets.vsbackupset.VSBackupset.list_media",
"url":17,
"doc":"List media required to browse and restore backed up data from the backupset Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.backupsets.vsbackupset.VSBackupset.refresh",
"url":17,
"doc":"Refresh the properties of the Backupset.",
"func":1
},
{
"ref":"cvpysdk.backupsets.vsbackupset.VSBackupset.backed_up_files_count",
"url":17,
"doc":"Returns the count of the total number of files present in the backed up data of all the subclients of the given backupset and given path. Args: path (str)  Folder path to find no of backed up files (Default: \\ \\ ) Returns: int  No of backed up files count in given path Raises: Exception: if browse response is not proper",
"func":1
},
{
"ref":"cvpysdk.backup_network_pairs",
"url":31,
"doc":"Class to perform all the Backup Network Pairs operations on commcell BackupNetworkPairs is the only class defined in this file. BackupNetworkPairs: Helper class to perform Backup Network Pairs operations. BackupNetworkPairs: __init__()  initializes BackupNetworkPairs class object. __repr__()  returns the string to represent the instance of the BackupNetworkPairs class get_backup_interface_for_client()  returns list of interfaces on a client add_backup_interface_pairs ()  sets backup interface pairs on a client/client group delete__backup_interface_pairs()  deletes backup interface pairs on a client/client group _modify_backup_interface_pairs()  modifies backup interface pairs on a client/client group"
},
{
"ref":"cvpysdk.backup_network_pairs.BackupNetworkPairs",
"url":31,
"doc":"Class for representing backup network pairs operations from commcell Initializes object of the BackupNetworkPairs class. Args: commcell_object (object) -instance of the commcell class Returns: object - instance of the BackupNetworkPairs class"
},
{
"ref":"cvpysdk.backup_network_pairs.BackupNetworkPairs.get_backup_interface_for_client",
"url":31,
"doc":"Returns interfaces set on a particular client Args: client_name (str)  name of client Returns: list - list of interfaces with source and destination Raises: SDKException: if response is not received",
"func":1
},
{
"ref":"cvpysdk.backup_network_pairs.BackupNetworkPairs.add_backup_interface_pairs",
"url":31,
"doc":"Adds backup interface pairs on clients/client groups Args: interface_pairs (list)  list of tuples containing dict of source and destination Example: [({'client': 'featuretest', 'srcip': '172.19.96.123'}, {'client': 'SP9client', 'destip': '172.19.0.0'}), ({'client': 'featuretest', 'srcip': '172.19.96.123'}, {'clientgroup': 'G1', 'destip': 'No Default Interface'}), ({'clientgroup': 'G2', 'srcip': '172.19.0.0/16'}, {'clientgroup': 'G3', 'destip': '172.19.0. '})] Note: 0th index should be source with key 'srcip' and 1st index should be destination with key 'destip' entities should be passed with key client/clientgroup Raises: SDKException: if input is not correct if response is not received",
"func":1
},
{
"ref":"cvpysdk.backup_network_pairs.BackupNetworkPairs.delete_backup_interface_pairs",
"url":31,
"doc":"Deletes backup interface pairs on clients/client groups Args: interface_pairs (list)  list of tuples containing dict of source and destination Example: [({'client': 'featuretest', 'srcip': '172.19.96.123'}, {'client': 'SP9client', 'destip': '172.19.0.0'}), ({'client': 'featuretest', 'srcip': '172.19.96.123'}, {'clientgroup': 'G1', 'destip': 'No Default Interface'}), ({'clientgroup': 'G2', 'srcip': '172.19.0.0/16'}, {'clientgroup': 'G3', 'destip': '172.19.0. '})] Note: 0th index should be source with key 'srcip' and 1st index should be destination with key 'destip' entities should be passed with key client/clientgroup Raises: SDKException: if input is not correct if response is not received",
"func":1
},
{
"ref":"cvpysdk.certificates",
"url":32,
"doc":""
},
{
"ref":"cvpysdk.certificates.Certificate",
"url":32,
"doc":"Class for performing certificate related operations Initialize the Certificate class object Args: commcell: Commcell object"
},
{
"ref":"cvpysdk.certificates.Certificate.revoke",
"url":32,
"doc":"Revoke the certificate by certificate id Args: cert_ids (List[int]): List of certificate id's Return: bool: if request processed successfully Example: revoke([1, 2, 3])",
"func":1
},
{
"ref":"cvpysdk.certificates.Certificate.renew",
"url":32,
"doc":"Renew the certificate by certificate id Args: cert_ids (List[int]): List of certificate id's Return: bool: if request processed successfully Example: renew([1, 2, 3])",
"func":1
},
{
"ref":"cvpysdk.certificates.Certificate.force_client_authentication",
"url":32,
"doc":"Enable of disable the lockdown mode Args: operation (bool): Turn ON/OFF the lockdown mode. Return: bool: if request processed successfully Example: force_client_authentication(True) force_client_authentication(False)",
"func":1
},
{
"ref":"cvpysdk.certificates.Certificate.make_temp_certificate",
"url":32,
"doc":"Create temporary certificate of client Args: client_id (int): Client Id to generate certificate. Return: str: Temp certificate for the client. Example: make_temp_certificate(5)",
"func":1
},
{
"ref":"cvpysdk.certificates.Certificate.client_certificate_rotation",
"url":32,
"doc":"Modify certificate rotation period. Args: months (int): Number of months. Return: bool: if request processed successfully Example: client_certificate_rotation(12)",
"func":1
},
{
"ref":"cvpysdk.certificates.Certificate.ca_certificate_rotation",
"url":32,
"doc":"Modify certificate rotation period. Args: years (int): Number of years. Return: bool: if request processed successfully Example: ca_certificate_rotation(1)",
"func":1
},
{
"ref":"cvpysdk.cleanroom",
"url":33,
"doc":"Initialize Cleanroom for the SDK."
},
{
"ref":"cvpysdk.cleanroom.cs_recovery",
"url":34,
"doc":"Main file for performing CommServe Recovery operations. CommServeRecovery class is defined in this file. CommServeRecovery: Class for Commserve Recovery of a CS, and to perform operations related to Commserve Recovery CommServeRecovery: __init__()  initialize object of CommServeRecovery with the required CS GUID _get_backupsets()  method to get the latest 5 backupsets that are shown on the cloud command _get_active_recovery_requests()  method to get all the recovery requests submitted for the CS _quota_details()  returns the current recovery license status of the Commserv _create_cs_recovery_request()  returns the details of the given request ID"
},
{
"ref":"cvpysdk.cleanroom.cs_recovery.CommServeRecovery",
"url":34,
"doc":"Class to perform operations related to Commserve Recovery Initialize the instance of the CommServeRecovery class. Args: commcell_object (commcell object)  instance of the Commcell class cs_guid (str)  CS GUID"
},
{
"ref":"cvpysdk.cleanroom.cs_recovery.CommServeRecovery.is_licensed_commcell",
"url":34,
"doc":""
},
{
"ref":"cvpysdk.cleanroom.cs_recovery.CommServeRecovery.backupsets",
"url":34,
"doc":""
},
{
"ref":"cvpysdk.cleanroom.cs_recovery.CommServeRecovery.active_recovery_requests",
"url":34,
"doc":""
},
{
"ref":"cvpysdk.cleanroom.cs_recovery.CommServeRecovery.recovery_license_details",
"url":34,
"doc":"Returns a dict containing start date, expiry date of license, number of consumed recovery requests and max requests count. Ex: { \"is_licensed\": 1, \"start_date\": 1711460013.0, \"end_date\": 1711460013.0, 'used_recoveries_count': 23, 'total_recoveries_allocated': 40 }"
},
{
"ref":"cvpysdk.cleanroom.cs_recovery.CommServeRecovery.manual_retention_details",
"url":34,
"doc":"Returns a dict containing start date, expiry date of license, number of consumed retains and max retains allocated. Ex: { \"start_date\": 1711460013, \"end_date\": 1711544749, 'consumed_retains': 4, 'max_retains_allocated': 10 }"
},
{
"ref":"cvpysdk.cleanroom.cs_recovery.CommServeRecovery.start_recovery",
"url":34,
"doc":"Submits commserve recovery request for the given backupset Args: backupset_name (str) : name of the backup set to recover. Ex: SET_45 Returns: Request id of the submitted request as an integer",
"func":1
},
{
"ref":"cvpysdk.cleanroom.cs_recovery.CommServeRecovery.extend_reservation",
"url":34,
"doc":"Extends the expiry time of a VM created for the given request id. Args: request_id (int) : commserve recovery request id Returns: True is the request is submitted successfully, otherwise, False",
"func":1
},
{
"ref":"cvpysdk.cleanroom.cs_recovery.CommServeRecovery.get_vm_details",
"url":34,
"doc":"Returns VM details for the given recovery request in a dict format. Ex: { \"commandcenter_url\": \"https: 20.235.143.244/commandcenter\", \"vm_expiration_time\": 1712311000, \"username\": \"recoverymanager\", \"password\": \" \", }",
"func":1
},
{
"ref":"cvpysdk.cleanroom.recovery_groups",
"url":35,
"doc":"Main file for performing Cleanroom recovery operations RecoveryGroups: Class for representing all the recovery groups RecoveryGroup: Class for a single recovery group selected, and to perform operations on that recovery group"
},
{
"ref":"cvpysdk.cleanroom.recovery_groups.RecoveryGroups",
"url":35,
"doc":"Class representing all the cleanroom recovery groups Initialize object of the RecoveryGroups class. Args: commcell_object (object)  instance of the Commcell class"
},
{
"ref":"cvpysdk.cleanroom.recovery_groups.RecoveryGroups.all_groups",
"url":35,
"doc":"Returns dict of all recovery groups. Returns dict - consists of all groups { \"group1_name\": group1_id, \"group2_name\": group2_id }"
},
{
"ref":"cvpysdk.cleanroom.recovery_groups.RecoveryGroups.has_recovery_group",
"url":35,
"doc":"Checks if a recovery group is present in the commcell. Args: recovery_group_name (str)  name of the recovery group Returns: bool - boolean output whether the group is present in commcell or not Raises: SDKException: if type of the group name argument is not string",
"func":1
},
{
"ref":"cvpysdk.cleanroom.recovery_groups.RecoveryGroups.get",
"url":35,
"doc":"Returns a recovery group object. Args: recovery_group_name (str)  name of the recovery group Returns: object - instance of the recovery group class for the given group name Raises: SDKException: if type of the group name argument is not string if no group exists with the given name",
"func":1
},
{
"ref":"cvpysdk.cleanroom.recovery_groups.RecoveryGroups.refresh",
"url":35,
"doc":"Refresh the recovery groups",
"func":1
},
{
"ref":"cvpysdk.cleanroom.recovery_groups.RecoveryStatus",
"url":35,
"doc":"An enumeration."
},
{
"ref":"cvpysdk.cleanroom.recovery_groups.RecoveryStatus.NO_STATUS",
"url":35,
"doc":""
},
{
"ref":"cvpysdk.cleanroom.recovery_groups.RecoveryStatus.NONE",
"url":35,
"doc":""
},
{
"ref":"cvpysdk.cleanroom.recovery_groups.RecoveryStatus.NOT_READY",
"url":35,
"doc":""
},
{
"ref":"cvpysdk.cleanroom.recovery_groups.RecoveryStatus.READY",
"url":35,
"doc":""
},
{
"ref":"cvpysdk.cleanroom.recovery_groups.RecoveryStatus.RECOVERED",
"url":35,
"doc":""
},
{
"ref":"cvpysdk.cleanroom.recovery_groups.RecoveryStatus.FAILED",
"url":35,
"doc":""
},
{
"ref":"cvpysdk.cleanroom.recovery_groups.RecoveryStatus.RECOVERED_WITH_ERRORS",
"url":35,
"doc":""
},
{
"ref":"cvpysdk.cleanroom.recovery_groups.RecoveryStatus.IN_PROGRESS",
"url":35,
"doc":""
},
{
"ref":"cvpysdk.cleanroom.recovery_groups.RecoveryStatus.CLEANED_UP",
"url":35,
"doc":""
},
{
"ref":"cvpysdk.cleanroom.recovery_groups.RecoveryGroup",
"url":35,
"doc":"Class to perform actions on a recovery group Initialize the instance of the RecoveryGroup class. Args: commcell_object (object)  instance of the Commcell class recovery_group_name (str)  name of the target recovery_group_id (str)  id of the target (default: None)"
},
{
"ref":"cvpysdk.cleanroom.recovery_groups.RecoveryGroup.id",
"url":35,
"doc":"recovery group id"
},
{
"ref":"cvpysdk.cleanroom.recovery_groups.RecoveryGroup.entities",
"url":35,
"doc":"list of entities in recovery group"
},
{
"ref":"cvpysdk.cleanroom.recovery_groups.RecoveryGroup.recover_all",
"url":35,
"doc":"Sends request to recover all entities Returns: job_id: job id of recovery Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.cleanroom.recovery_groups.RecoveryGroup.refresh",
"url":35,
"doc":"Refresh the recovery group",
"func":1
},
{
"ref":"cvpysdk.cleanroom.target",
"url":36,
"doc":"Main file for performing Cleanroom Target specific operations. CleanroomTargets and CleanroomTarget are 2 classes defined in this file. CleanroomTargets: Class for representing all the cleanroom targets CleanroomTarget: Class for a single cleanroom target selected, and to perform operations on that cleanroom target cleanroomTargets: __init__()  initialize object of CleanroomTargets class __str__()  returns all the Cleanroom Targets _get_cleanroom_targets()  Gets all the cleanroom targets has_cleanroom_target()  Checks if a target is present in the commcell. get()  returns the cleanroom target class object of the input target name refresh()  refresh the targets present in the client cleanroomTargets Attributes               all_targets  returns the dictionary consisting of all the targets that are present in the commcell and their information such as id and name CleanroomTarget: __init__()  initialize object of CleanroomTarget with the specified cleanroom target name _get_cleanroom_target_id()  method to get the cleanroom target id _get_cleanroom_target_properties()  get the properties of this recovery target _delete_cleanroom_target()  Deletes the cleanroom target delete()  Deletes the cleanroom target refresh()  refresh the object properties CleanroomTarget Attributes               cleanroom_target_id  Returns the id of the cleanroom target  cleanroom_target_name  Returns the name of the cleanroom Target  destination_hypervisor  Returns the name of destination hypervisor  vm_prefix  Returns the prefix of the vm name  destination_host  Returns the destination host  storage_account  Returns the storage_account host  policy_type  Returns the policy type  application_type  Returns the application type  restore_as_managed_vm  Returns the restore_as_managed_vm  region  Returns the region  expiration_time  Returns the _expiration_time  vm_suffix  Returns the vm_suffix  vm_prefix  Returns the vm_prefix  access_node  Returns the access_node  access_node_client_group  Returns the access_node_client_group"
},
{
"ref":"cvpysdk.cleanroom.target.CleanroomTargets",
"url":36,
"doc":"Class for representing all the Cleanroom targets Initialize object of the CleanroomTargets class. Args: commcell_object (object)  instance of the Commcell class"
},
{
"ref":"cvpysdk.cleanroom.target.CleanroomTargets.all_targets",
"url":36,
"doc":"Returns dict of all the targets. Returns dict - consists of all targets { \"target1_name\": target1_id, \"target2_name\": target2_id }"
},
{
"ref":"cvpysdk.cleanroom.target.CleanroomTargets.has_cleanroom_target",
"url":36,
"doc":"Checks if a target is present in the commcell. Args: target_name (str)  name of the target Returns: bool - boolean output whether the target is present in commcell or not Raises: SDKException: if type of the target name argument is not string",
"func":1
},
{
"ref":"cvpysdk.cleanroom.target.CleanroomTargets.get",
"url":36,
"doc":"Returns a target object. Args: cleanroom_target_name (str)  name of the target Returns: object - instance of the target class for the given target name Raises: SDKException: if type of the target name argument is not string if no target exists with the given name",
"func":1
},
{
"ref":"cvpysdk.cleanroom.target.CleanroomTargets.refresh",
"url":36,
"doc":"Refresh the cleanroom targets",
"func":1
},
{
"ref":"cvpysdk.cleanroom.target.CleanroomTarget",
"url":36,
"doc":"Class for performing target operations Initialize the instance of the CleanroomTarget class. Args: commcell_object (object)  instance of the Commcell class cleanroom_target_name (str)  name of the target cleanroom_target_id (str)  id of the target"
},
{
"ref":"cvpysdk.cleanroom.target.CleanroomTarget.cleanroom_target_id",
"url":36,
"doc":"Returns: (str) the id of the cleanroom target"
},
{
"ref":"cvpysdk.cleanroom.target.CleanroomTarget.cleanroom_target_name",
"url":36,
"doc":"Returns: (str) the display name of the cleanroom target"
},
{
"ref":"cvpysdk.cleanroom.target.CleanroomTarget.policy_type",
"url":36,
"doc":"Returns: (str) the policy type ID 1 - AWS 2 - Microsoft Hyper-V 7 - Azure 13 - VMware"
},
{
"ref":"cvpysdk.cleanroom.target.CleanroomTarget.application_type",
"url":36,
"doc":"Returns: (str) the name of the application type 0 - Replication type 1 - Regular type"
},
{
"ref":"cvpysdk.cleanroom.target.CleanroomTarget.destination_hypervisor",
"url":36,
"doc":"Returns: (str) the client name of destination hypervisor"
},
{
"ref":"cvpysdk.cleanroom.target.CleanroomTarget.access_node",
"url":36,
"doc":"Returns: (str) the client name of the access node/proxy of the cleanroom target"
},
{
"ref":"cvpysdk.cleanroom.target.CleanroomTarget.access_node_client_group",
"url":36,
"doc":"Returns: (str) The client group name set on the access node field of cleanroom target"
},
{
"ref":"cvpysdk.cleanroom.target.CleanroomTarget.security_user_names",
"url":36,
"doc":"Returns: list the names of the users who are used for ownership of the hypervisor and VMs"
},
{
"ref":"cvpysdk.cleanroom.target.CleanroomTarget.vm_prefix",
"url":36,
"doc":"Returns: (str) the prefix of the vm name to be prefixed to the destination VM"
},
{
"ref":"cvpysdk.cleanroom.target.CleanroomTarget.vm_suffix",
"url":36,
"doc":"Returns: (str) the suffix of the vm name to be suffixed to the destination VM"
},
{
"ref":"cvpysdk.cleanroom.target.CleanroomTarget.expiration_time",
"url":36,
"doc":"Returns: (str) VMware/Azure: the expiration time of the test boot VM/test failover VM eg: 4 hours or 3 days"
},
{
"ref":"cvpysdk.cleanroom.target.CleanroomTarget.storage_account",
"url":36,
"doc":"Returns: (str) Azure: the storage account name used to deploy the VM's storage"
},
{
"ref":"cvpysdk.cleanroom.target.CleanroomTarget.region",
"url":36,
"doc":"Return: (str) Azure: the cleanroom target region for destination VM"
},
{
"ref":"cvpysdk.cleanroom.target.CleanroomTarget.restore_as_managed_vm",
"url":36,
"doc":"Returns: (bool) whether the destination VM will be a managed VM"
},
{
"ref":"cvpysdk.cleanroom.target.CleanroomTarget.refresh",
"url":36,
"doc":"Refresh the properties of the cleanroom Target.",
"func":1
},
{
"ref":"cvpysdk.cleanroom.target.CleanroomTarget.delete",
"url":36,
"doc":"Deletes the Cleanroom Target. Returns: (bool) whether the target is deleted or not.",
"func":1
},
{
"ref":"cvpysdk.client",
"url":37,
"doc":"File for performing client related operations on the Commcell. Clients and Client are 2 classes defined in this file. Clients: Class for representing all the clients associated with the commcell Client: Class for a single client of the commcell Clients    = __init__(commcell_object)  initialize object of Clients class associated with the commcell __str__()  returns all the clients associated with the commcell __repr__()  returns the string to represent the instance of the Clients class __len__()  returns the number of clients associated with the Commcell __getitem__()  returns the name of the client at the given index or the details for the given client name _get_clients()  gets all the clients associated with the commcell _get_office_365_clients()  get all office365 clients in the commcell _get_dynamics_365_clients()  get all the Dynamics 365 clients in the commcell _get_salesforce_clients()  get all salesforce clients in the commcell _get_hidden_clients()  gets all the hidden clients associated with the commcell _get_virtualization_clients()  gets all the virtualization clients associated with the commcell _get_virtualization_access_nodes()  gets all the virtualization access nodes associated with the commcell _get_client_dict()  returns the client dict for client to be added to member server _member_servers()  returns member clients to be associated with the Virtual Client _get_client_from_hostname()  returns the client name if associated with specified hostname if exists _get_hidden_client_from_hostname()  returns the client name if associated with specified hostname if exists _get_client_from_displayname()  get the client name for given display name has_client(client_name)  checks if a client exists with the given name or not has_hidden_client(client_name)  checks if a hidden client exists with the given name _process_add_response()  to process the add client request using API call add_vmware_client()  adds a new VMWare Virtualization Client to the Commcell add_kubernetes_client()  adds a new Kubernetes Virtualization Client to the Commcell add_nas_client()  adds a new NAS Client add_share_point_client()  adds a new sharepoint pseudo client to the Commcell add_onedrive_v2_client()  adds a new OneDrive for Business client to Commcell add_exchange_client()  adds a new Exchange Virtual Client to the Commcell add_splunk_client()  adds a new Splunk Client to the Commcell add_case_client()  adds a new Case Manger Client to the Commcell add_salesforce_client()  adds a new salesforce client add_azure_client()  adds a new azure cloud client add_amazon_client()  adds a new amazon cloud client add_google_client()  adds a new google cloud client add_alicloud_client()  adds a new alibaba cloud client add_nutanix_files_client()  adds a new nutanix files client add_onedrive_client()  adds a new onedrive client get(client_name)  returns the Client class object of the input client name delete(client_name)  deletes the client specified by the client name from the commcell filter_clients_return_displaynames()  filter clients based on criteria refresh()  refresh the clients associated with the commcell Clients Attributes           all_clients  returns the dictionary consisting of all the clients that are associated with the commcell and their information such as id and hostname  hidden_clients  returns the dictionary consisting of only the hidden clients that are associated with the commcell and their information such as id and hostname  virtualization_clients  returns the dictionary consisting of only the virtualization clients that are associated with the commcell and their information such as id and hostname  virtualization_access_nodes  returns the dictionary consisting of only the virtualization clients that are associated with the commcell and their information such as id and hostname  office365_clients  Returns the dictionary consisting of all the office 365 clients that are associated with the commcell  dynamics365_clients  Returns the dictionary consisting of all the Dynamics 365 clients that are associated with the commcell  salesforce_clients  Returns the dictionary consisting of all the salesforce clients that are associated with the commcell  file_server_clients  Returns the dictionary consisting of all the File Server clients that are associated with the commcell Client    __init__()  initialize object of Class with the specified client name and id, and associated to the commcell __repr__()  return the client name and id, the instance is associated with _get_client_id()  method to get the client id, if not specified in __init__ _get_client_properties()  get the properties of this client _get_instance_of_client()  get the instance associated with the client _get_log_directory()  get the log directory path on the client _service_operations()  perform services related operations on a client START / STOP / RESTART _make_request()  makes the upload request to the server _process_update_request()  to process the request using API call update_properties()  to update the client properties enable_backup()  enables the backup for the client enable_backup_at_time()  enables the backup for the client at the input time specified disable_backup()  disables the backup for the client enable_restore()  enables the restore for the client enable_restore_at_time()  enables the restore for the client at the input time specified disable_restore()  disables the restore for the client enable_data_aging()  enables the data aging for the client enable_data_aging_at_time()  enables the data aging for the client at input time specified disable_data_aging()  disables the data aging for the client execute_script()  executes given script on the client execute_command()  executes a command on the client enable_intelli_snap()  enables intelli snap for the client disable_intelli_snap()  disables intelli snap for the client upload_file()  uploads the specified file on controller to the client machine upload_folder()  uploads the specified folder on controller to client machine start_service()  starts the service with the given name on the client stop_service()  stops the service with the given name on the client restart_service()  restarts the service with the given name on the client restart_services()  executes the command on the client to restart the services push_network_config()  performs a push network configuration on the client add_user_association()  adds the user associations on this client add_client_owner()  adds users to owner list of this client refresh()  refresh the properties of the client add_additional_setting()  adds registry key to the client property delete_additional_setting()  deletes registry key from the client property get_configured_additional_setting()  To get configured additional settings from the client property release_license()  releases a license from a client retire()  perform retire operation on the client reconfigure_client()  reapplies license to the client push_servicepack_and_hotfixes()  triggers installation of service pack and hotfixes repair_software()  triggers Repair software on the client machine get_dag_member_servers()  Gets the member servers of an Exchange DAG client. create_pseudo_client()  Creates a pseudo client register_decoupled_client()  registers decoupled client set_job_start_time()  sets the job start time at client level uninstall_software()  Uninstalls all the packages of the client get_network_summary()  Gets the network summary of the client change_exchange_job_results_directory()  Move the Job Results Directory for an Exchange Online Environment get_environment_details()  Gets environment tile details present in dashboard page get_needs_attention_details()  Gets needs attention tile details from dashboard page enable_content_indexing()  Enables the v1 content indexing on the client disable_content_indexing()  Disables the v1 content indexing on the client check_eligibility_for_migration()  Checks whether client is Eligible for Migration or not change_company_for_client()  Migrates client to specified company disable_owner_privacy()  Disables the privacy option for client enable_owner_privacy()  Enables the privacy option for client Client Attributes         -  available_security_roles  returns the security roles available for the selected client  properties  returns the properties of the client  display_name  returns the display name of the client  description  returns the description of the client  client_id  returns the id of the client  client_name  returns the name of the client  client_hostname  returns the host name of the client  timezone  returns the timezone of the client  os_info  returns string consisting of OS information of the client  is_data_recovery_enabled  boolean specifying whether data recovery is enabled for the client or not  is_data_management_enabled  boolean specifying whether data management is enabled for the client or not  is_ci_enabled  boolean specifying whether content indexing is enabled for the client or not  is_backup_enabled  boolean specifying whether backup activity is enabled for the client or not  is_restore_enabled  boolean specifying whether restore activity is enabled for the client or not  is_data_aging_enabled  boolean specifying whether data aging is enabled for the client or not  is_intelli_snap_enabled  boolean specifying whether intelli snap is enabled for the client or not  install_directory  returns the path where the client is installed at  version  returns the version of the product installed on the client  service_pack  returns the service pack installed on the client  job_results_directory  returns the path of the job results directory on the client  instance  returns the Instance of the client  log_directory  returns the path of the log directory on the client  agents  returns the instance of the Agents class representing the list of agents installed on the Client  schedules  returns the instance of the Schedules class representing the list of schedules configured for the Client  users  returns the instance of the Users class representing the list of users with access to the Client  network  returns object of the Network class corresponding to the selected client  is_ready  returns boolean value specifying whether services on the client are running or not, and whether the CommServ is able to communicate with the client  is_mongodb_ready  returns boolean value specifying whether mongoDB is working fine or not  set_encryption_prop  Set encryption properties on a client  set_dedup_prop  Set DDB properties  consumed_licenses  returns dictionary of all the license details which is consumed by the client  cvd_port  returns cvd port of the client  vm_guid  returns guid of the vm client  company_name  returns company name for the client  is_privacy_enabled  returns if client privacy is enabled  latitude  Returns the latitude from geo location of the client  longitude  Returns the longitude from geo location of the client  is_vm  Returns True if its a VM client  hyperv_id_of_vm  Returns the Id of hyperV that the given VM is associated with  associated_client_group  Returns the list of clientgroups that the client is associated to  company_id  Returns the company Id of the client"
},
{
"ref":"cvpysdk.client.Clients",
"url":37,
"doc":"Class for representing all the clients associated with the commcell. Initialize object of the Clients class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the Clients class"
},
{
"ref":"cvpysdk.client.Clients.office_365_clients",
"url":37,
"doc":"Returns the dict of all office 365 clients in the commcell"
},
{
"ref":"cvpysdk.client.Clients.dynamics365_clients",
"url":37,
"doc":"Returns the dict of all Dynamics 365 clients in the commcell"
},
{
"ref":"cvpysdk.client.Clients.salesforce_clients",
"url":37,
"doc":"Returns the dict of all salesforce clients in the commcell"
},
{
"ref":"cvpysdk.client.Clients.all_clients",
"url":37,
"doc":"Returns the dictionary consisting of all the clients and their info. dict - consists of all clients in the commcell { \"client1_name\": { \"id\": client1_id, \"hostname\": client1_hostname, \"displayName\": client1 display name }, \"client2_name\": { \"id\": client2_id, \"hostname\": client2_hostname, \"displayName\": client2 display name }, }"
},
{
"ref":"cvpysdk.client.Clients.create_pseudo_client",
"url":37,
"doc":"Creates a pseudo client Args: client_name (str)  name of the client to be created client_hostname (str)  hostname of the client to be created default:None client_type(str)  OS/Type of client to be created default : \"windows\" Available Values for client_type : \"windows\" \"unix\" \"unix cluster\" \"sap hana\" Returns: client object for the created client. Raises: SDKException: if client name type is incorrect if response is empty if failed to get client id from response",
"func":1
},
{
"ref":"cvpysdk.client.Clients.register_decoupled_client",
"url":37,
"doc":"registers decoupled client Args: client_name (str)  client name client_host_name (str)  client host name port_number (int)  port number of the decoupled client Returns: client object for the registered client. Raises: SDKException: if client name type is incorrect if response is empty if failed to get client id from response",
"func":1
},
{
"ref":"cvpysdk.client.Clients.hidden_clients",
"url":37,
"doc":"Returns the dictionary consisting of the hidden clients and their info. dict - consists of all clients in the commcell { \"client1_name\": { \"id\": client1_id, \"hostname\": client1_hostname }, \"client2_name\": { \"id\": client2_id, \"hostname\": client2_hostname }, }"
},
{
"ref":"cvpysdk.client.Clients.virtualization_clients",
"url":37,
"doc":"Returns the dictionary consisting of the virtualization clients and their info. dict - consists of all clients in the commcell { \"client1_name\": { \"id\": client1_id, \"hostname\": client1_hostname }, \"client2_name\": { \"id\": client2_id, \"hostname\": client2_hostname }, }"
},
{
"ref":"cvpysdk.client.Clients.virtualization_access_nodes",
"url":37,
"doc":"Returns the dictionary consisting of the virtualization access nodes dict - consists of all access nodes in the commcell { \"display_name1\": { \"id\": client1_id, \"name\": client1_name, \"hostname\": client1_hostname }, \"display_name2\": { \"id\": client2_id, \"name\": client2_name, \"hostname\": client2_hostname }, }"
},
{
"ref":"cvpysdk.client.Clients.file_server_clients",
"url":37,
"doc":"Returns the dictionary consisting of the file server clients and their info. dict - consists of all file server clients in the commcell { \"client1_name\": { \"id\": client1_id, \"displayName\": client1_displayname }, \"client2_name\": { \"id\": client2_id, \"displayName\": client2_displayname } }"
},
{
"ref":"cvpysdk.client.Clients.has_client",
"url":37,
"doc":"Checks if a client exists in the commcell with the given client name / hostname. Args: client_name (str)  name / hostname of the client Returns: bool - boolean output whether the client exists in the commcell or not Raises: SDKException: if type of the client name argument is not string",
"func":1
},
{
"ref":"cvpysdk.client.Clients.has_hidden_client",
"url":37,
"doc":"Checks if a client exists in the commcell with the input client name as a hidden client. Args: client_name (str)  name of the client Returns: bool - boolean output whether the client exists in the commcell or not as a hidden client Raises: SDKException: if type of the client name argument is not string",
"func":1
},
{
"ref":"cvpysdk.client.Clients.add_kubernetes_client",
"url":37,
"doc":"Adds a new Kubernetes Cluster client to the Commcell. Args: client_name (str)  name of the new Kubernetes Cluster client api_server_endpoint (str)  Kubernetes API Server endpoint of the cluster service_account (str)  Name of the Service Account for authentication service_token (str)  Token fetched from the Service Account access_nodes (list/str)  Virtual Server proxy clients as access nodes Returns: object - instance of the Client class for this new client Raises: SDKException: if client with given name already exists if failed to add the client if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Clients.add_nas_client",
"url":37,
"doc":"Adds new NAS client with NDMP and NetworkShare iDA Args: ndmp_server_clientname (str)  new NAS client name ndmp_server_hostname (str)  HostName for new NAS client username (str)  NDMP user name password (str)  NDMP password Returns: client_object (obj)  client object associated with the new NAS client Raises: SDKException: if failed to add the client if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Clients.add_vmware_client",
"url":37,
"doc":"Adds a new VMWare Virtualization Client to the Commcell. Args: client_name (str)  name of the new VMWare Virtual Client vcenter_hostname (str)  hostname of the vcenter to connect to vcenter_username (str)  login username for the vcenter vcenter_password (str)  plain-text password for the vcenter clients (list)  list cotaining client names / client objects, to associate with the Virtual Client Returns: object - instance of the Client class for this new client Raises: SDKException: if client with given name already exists if failed to add the client if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Clients.add_hyperv_client",
"url":37,
"doc":"Adds a new Hyper-V Virtualization Client to the Commcell. Args: client_name (str)  name of the new Hyper-V Virtual Client hyperv_hostname (str)  hostname of the hyperv to connect to hyperv_username (str)  login username for the hyperv hyperv_password (str)  plain-text password for the hyperv clients (list)  list cotaining client names / client objects, to associate with the Virtual Client Returns: object - instance of the Client class for this new client Raises: SDKException: if client with given name already exists if failed to add the client if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Clients.add_share_point_client",
"url":37,
"doc":"Adds a new Office 365 Share Point Pseudo Client to the Commcell. Args: client_name (str)  name of the new Sharepoint Pseudo Client server_plan (str)  server_plan to associate with the client service_type (dict)  service type of Sharepoint \"ServiceType\": { \"Sharepoint Global Administrator\": 4 } index_server (str)  index server for virtual client access_nodes_list (list)  list containing client names / client objects Kwargs : tenant_url (str)  url of sharepoint tenant user_username (str)  username of sharepoint user user_password (str)  password of sharepoint user azure_username (str)  username of azure app azure_secret (str)  secret key of azure app global_administrator (str)  username of global administrator global_administrator_password (str)  password of global administrator azure_app_id (str)  azure app id for sharepoint online azure_app_key_id (str)  app key for sharepoint online azure_directory_id (str)  azure directory id for sharepoint online cloud_region (int)  stores the cloud region for the SharePoint client - Default (Global Service) [1] - Germany [2] - China [3] - U.S. Government GCC [4] - U.S. Government GCC High [5] Returns: object - instance of the Client class for this new client Raises: SDKException: if client with given name already exists if index_server is not found if server_plan is not found if failed to add the client if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Clients.add_splunk_client",
"url":37,
"doc":"Adds new splunk client after clientname and plan validation Args: new_client_name (str)  new splunk client name password (str)  splunk instance password master_uri (str)  URI for the master node master_node (str)  master node name user_name (str)  splunk instance username plan (str)  plan assocated with the new client Returns: client_object (obj)  client object associated with the new splunk client Raises: SDKException: if failed to add the client if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Clients.add_exchange_client",
"url":37,
"doc":"Adds a new Exchange Mailbox Client to the Commcell. Args: client_name (str)  name of the new Exchange Mailbox Client index_server (str)  index server for virtual client clients_list (list)  list containing client names / client objects, to associate with the Virtual Client server_plan (str)  storage policy to associate with the client recall_service_url (str)  recall service for client job_result_dir (str)  job result directory path exchange_servers (list)  list of exchange servers azure_app_key_secret (str)  app secret for the Exchange online azure_tenant_name (str)  tenant for exchange online azure_app_key_id (str)  app key for exchange online environment_type (int)  Exchange Environment Type for the Client. Supported Value and corresponding types: 1 : Exchange on- premise 2 : Exchange Hybrid with on- premise Exchange Server 3 : Exchange Hybrid with on- premise AD 4 : Exchange Online backupset_type_to_create (int)  Backup set type to create Supported Value and corresponding types: 1 : user mailbox 2 : journal mailbox 3 : content store mailbox Default Value: 1 (user mailbox) kwargs (dict)  Extra/ Additional Arguments Accepted Values: is_modern_auth_enabled  (bool)  Whether to create Exchange Online client with modern auth enabled Default Value: True Applicable For: Exchange Online Client Returns: object - instance of the Client class for this new client Raises: SDKException: if client with given name already exists if failed to add the client if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Clients.add_case_client",
"url":37,
"doc":"Adds a new Exchange Mailbox Client to the Commcell. Args: client_name (str)  name of the new Case Client server_plan (str)  Server plan to assocaite to case dc_plan (str)  DC plan to assocaite to case hold_type (int)  Type of client (values: 1, 2, 3) Returns: object - instance of the Client class for this new client Raises: SDKException: if client with given name already exists if failed to add the client if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Clients.add_salesforce_client",
"url":37,
"doc":"Adds a new Salesforce Client to the Commcell. Args: client_name (str)  salesforce pseudo client name access_node (str)  access node name salesforce_options (dict)  salesforce options { \"login_url\": 'salesforce login url', \"consumer_id\": 'salesforce consumer key', \"consumer_secret\": 'salesforce consumer secret', \"salesforce_user_name\": 'salesforce login user', \"salesforce_user_password\": 'salesforce user password', \"salesforce_user_token\": 'salesforce user token', \"sandbox\": True or False (default False) } db_options (dict)  database options to configure sync db { \"db_enabled\": 'True or False', \"db_type\": 'SQLSERVER or POSTGRESQL', \"db_host_name\": 'database hostname', \"db_instance\": 'database instance name', \"db_name\": 'database name', \"db_port\": 'port of the database', \"db_user_name\": 'database user name', \"db_user_password\": 'database user password' }  kwargs (dict)  dict of keyword arguments as follows instance_name (str)  name of the salesforce instance download_cache_path (str)  download cache path mutual_auth_path (str)  mutual auth certificate path storage_policy (str)  storage policy streams (int)  number of streams Returns: object - instance of the Client class for this new client Raises: SDKException: if client with given name already exists if failed to add the client if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Clients.add_azure_client",
"url":37,
"doc":"Method to add new azure cloud client Args: client_name (str)  azure client name access_node (str)  cloud access node name azure_options (dict)  dictionary for Azure details: Example: azure_options = { \"subscription_id\": 'subscription id', \"tenant_id\": 'tenant id', \"application_id\": 'application id', \"password\": 'application password', } Returns: object - instance of the Client class for this new client Raises: SDKException: if None value in azure options if pseudo client with same name already exists",
"func":1
},
{
"ref":"cvpysdk.client.Clients.add_amazon_client",
"url":37,
"doc":"Method to add new amazon cloud client Args: client_name (str)  amazon client name access_node (str)  cloud access node name amazon_options (dict)  dictionary for Amazon details: AccessKey and Secretkey authentication Example: amazon_options = { \"accessKey\": amazon_options.get(\"accessKey\"), \"secretkey\": amazon_options.get(\"secretkey\") } IAM authentication ( pass the key value pair \"useIamRole\":True ) Example: amazon_options = { \"useIamRole\": amazon_options.get(\"useIamRole\"), } STS Role Authentication ( pass the Role arn Name in accessKey of amazon_options) Example: amazon_options = { \"accessKey\": amazon_options.get(\"accessKey\"), } Returns: object - instance of the Client class for this new client Raises: SDKException: if None value in amazon options if pseudo client with same name already exists",
"func":1
},
{
"ref":"cvpysdk.client.Clients.add_google_client",
"url":37,
"doc":"Method to add new google cloud client Args: client_name (str)  google client name access_node (str)  cloud access node name google_options (dict)  dictionary for google details: Example: google_options = { \"serviceAccountId\": google_options.get(\"serviceAccountId\"), \"userName\": google_options.get(\"userName\"), \"password\": google_options.get(\"password\") } Returns: object - instance of the Client class for this new client Raises: SDKException: if None value in google options if pseudo client with same name already exists",
"func":1
},
{
"ref":"cvpysdk.client.Clients.add_alicloud_client",
"url":37,
"doc":"Method to add new alicloud cloud client Args: client_name (str)  alicloud client name access_node (str)  cloud access node name alicloud_options (dict)  dictionary for alicloud details: Example: alicloud_options = { \"accessKey\": alicloud_options.get(\"accessKey\"), \"secretkey\": alicloud_options.get(\"secretkey\") } Returns: object - instance of the Client class for this new client Raises: SDKException: if None value in alicloud options if pseudo client with same name already exists",
"func":1
},
{
"ref":"cvpysdk.client.Clients.add_onedrive_v2_client",
"url":37,
"doc":"Adds OneDrive for Business (v2) client Args: client_name (str) : Client Name server_plan (str) : Server Plan's Name azure_app_id (str) : Azure app ID azure_directory_id (str) : Azure directory ID azure_app_key_id (str) : Azure App key ID  kwargs (dict) : Additional parameters index_server (str) : Index Server's Name access_nodes_list (list[str/object]) : List of names/objects of access node clients number_of_backup_streams (int) : Number of backup streams to be associated (default: 10) user_name (str) : User name for shared job results user_password (str) : User password for shared job results shared_jr_directory (str) : Shared Job results directory path cloud_region(int) : Cloud region for the client which determines the gcc or gcc high configuration Returns: object - instance of the Client class for this new client Raises: SDKException: if client with given name already exists if server plan donot exists with the given name if data type of the input(s) is not valid if access node do not exists with the given name if failed to add the client if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Clients.add_onedrive_client",
"url":37,
"doc":"Adds a new OneDrive Client to the Commcell. Args: client_name (str)  name of the new Exchange Mailbox Client server_plan (str)  name of the server plan to be associated with the client connection_details (dict)  dictionary for Azure App details: Example: connection_details = { \"azure_directory_id\": 'azure directory id', \"application_id\": 'application id', \"application_key_value\": 'application key value', } access_node (str)  name of the access node auto_discovery (bool)  Enable/Disable (True/False) Returns: object - instance of the Client class for this new client Raises: SDKException: if client with given name already exists if server plan donot exists with the given name if access node donot exists with the given name if failed to add the client if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Clients.add_nutanix_files_client",
"url":37,
"doc":"Method to add new Nutanix Files client Args: client_name (str)  Nutanix files client name array_name (str)  FQDN of the Nutanix array(File Server) to be associated with client cifs_option (bool)  option for adding Windows File System agent in the created client i.e for adding CIFS agent nfs_option (bool)  option for adding Linux File System agent in the created client i.e for adding NFS agent Returns: object - instance of the Client class for this new client Raises: SDKException: if nfs_option and cifs_option both are false if pseudo client with same name already exists",
"func":1
},
{
"ref":"cvpysdk.client.Clients.get",
"url":37,
"doc":"Returns a client object if client name or host name or ID or display name matches the client attribute We check if specified name matches any of the existing client names else compare specified name with host names of existing clients else if name matches with the ID Args: name (str/int)  name / hostname / ID of the client / display name Returns: object - instance of the Client class for the given client name Raises: SDKException: if type of the client name argument is not string or Int if no client exists with the given name",
"func":1
},
{
"ref":"cvpysdk.client.Clients.delete",
"url":37,
"doc":"Deletes the client from the commcell. Args: client_name (str)  name of the client to remove from commcell forceDelete (bool)  Force delete client if True Raises: SDKException: if type of the client name argument is not string if failed to delete client if response is empty if response is not success if no client exists with the given name",
"func":1
},
{
"ref":"cvpysdk.client.Clients.refresh",
"url":37,
"doc":"Refresh the clients associated with the Commcell. Args: hard (bool)  flag to hard refresh mongo cache for this entity",
"func":1
},
{
"ref":"cvpysdk.client.Client",
"url":37,
"doc":"Class for performing client operations for a specific client. Initialise the Client class instance. Args: commcell_object (object)  instance of the Commcell class client_name (str)  name of the client client_id (str)  id of the client default: None Returns: object - instance of the Client class"
},
{
"ref":"cvpysdk.client.Client.update_properties",
"url":37,
"doc":"Updates the client properties Args: properties_dict (dict)  client property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.client.Client.properties",
"url":37,
"doc":"Returns the client properties"
},
{
"ref":"cvpysdk.client.Client.latitude",
"url":37,
"doc":"Returns the client latitude from clientRegionInfo GeoLocation"
},
{
"ref":"cvpysdk.client.Client.longitude",
"url":37,
"doc":"Returns the client Longitude from clientRegionInfo GeoLocation"
},
{
"ref":"cvpysdk.client.Client.is_vm",
"url":37,
"doc":"Returns True if the given client is a VM else False"
},
{
"ref":"cvpysdk.client.Client.hyperv_id_of_vm",
"url":37,
"doc":"Returns the Hypervisor ID associated to a VM client"
},
{
"ref":"cvpysdk.client.Client.associated_client_groups",
"url":37,
"doc":"Returns the list of client groups to which the given client is assocaited with"
},
{
"ref":"cvpysdk.client.Client.company_id",
"url":37,
"doc":"Returns the client's Company ID"
},
{
"ref":"cvpysdk.client.Client.name",
"url":37,
"doc":"Returns the Client name"
},
{
"ref":"cvpysdk.client.Client.display_name",
"url":37,
"doc":"Returns the Client display name"
},
{
"ref":"cvpysdk.client.Client.description",
"url":37,
"doc":"Returns the Client description"
},
{
"ref":"cvpysdk.client.Client.timezone",
"url":37,
"doc":"Returns the timezone of the client"
},
{
"ref":"cvpysdk.client.Client.commcell_name",
"url":37,
"doc":"Returns the Client's commcell name"
},
{
"ref":"cvpysdk.client.Client.name_change",
"url":37,
"doc":"Returns an instance of Namechange class"
},
{
"ref":"cvpysdk.client.Client.available_security_roles",
"url":37,
"doc":"Returns the list of available security roles"
},
{
"ref":"cvpysdk.client.Client.client_id",
"url":37,
"doc":"Treats the client id as a read-only attribute."
},
{
"ref":"cvpysdk.client.Client.client_name",
"url":37,
"doc":"Treats the client name as a read-only attribute."
},
{
"ref":"cvpysdk.client.Client.client_hostname",
"url":37,
"doc":"Treats the client host name as a read-only attribute."
},
{
"ref":"cvpysdk.client.Client.os_info",
"url":37,
"doc":"Treats the os information as a read-only attribute."
},
{
"ref":"cvpysdk.client.Client.is_data_recovery_enabled",
"url":37,
"doc":"Treats the is data recovery enabled as a read-only attribute."
},
{
"ref":"cvpysdk.client.Client.is_data_management_enabled",
"url":37,
"doc":"Treats the is data management enabled as a read-only attribute."
},
{
"ref":"cvpysdk.client.Client.is_ci_enabled",
"url":37,
"doc":"Treats the is online content index enabled as a read-only attribute."
},
{
"ref":"cvpysdk.client.Client.is_backup_enabled",
"url":37,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.client.Client.is_restore_enabled",
"url":37,
"doc":"Treats the is restore enabled as a read-only attribute."
},
{
"ref":"cvpysdk.client.Client.is_data_aging_enabled",
"url":37,
"doc":"Treats the is data aging enabled as a read-only attribute."
},
{
"ref":"cvpysdk.client.Client.is_intelli_snap_enabled",
"url":37,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.client.Client.is_privacy_enabled",
"url":37,
"doc":"Returns if client privacy is enabled"
},
{
"ref":"cvpysdk.client.Client.install_directory",
"url":37,
"doc":"Treats the install directory as a read-only attribute."
},
{
"ref":"cvpysdk.client.Client.version",
"url":37,
"doc":"Treats the version as a read-only attribute."
},
{
"ref":"cvpysdk.client.Client.service_pack",
"url":37,
"doc":"Treats the service pack as a read-only attribute."
},
{
"ref":"cvpysdk.client.Client.owners",
"url":37,
"doc":"Treats the client owners as a read-only attribute."
},
{
"ref":"cvpysdk.client.Client.job_results_directory",
"url":37,
"doc":"Treats the job_results_directory pack as a read-only attribute."
},
{
"ref":"cvpysdk.client.Client.block_level_cache_dir",
"url":37,
"doc":"Returns the Block level cache directory"
},
{
"ref":"cvpysdk.client.Client.instance",
"url":37,
"doc":"Returns the value of the instance the client is installed on."
},
{
"ref":"cvpysdk.client.Client.log_directory",
"url":37,
"doc":"Returns the path of the log directory on the client."
},
{
"ref":"cvpysdk.client.Client.agents",
"url":37,
"doc":"Returns the instance of the Agents class representing the list of Agents installed / configured on the Client."
},
{
"ref":"cvpysdk.client.Client.schedules",
"url":37,
"doc":"Returns the instance of the Schedules class representing the Schedules configured on the Client."
},
{
"ref":"cvpysdk.client.Client.users",
"url":37,
"doc":"Returns the instance of the Users class representing the list of Users with permissions set on the Client."
},
{
"ref":"cvpysdk.client.Client.network",
"url":37,
"doc":"Returns the object of Network class"
},
{
"ref":"cvpysdk.client.Client.network_throttle",
"url":37,
"doc":"Returns the object of NetworkThrottle class"
},
{
"ref":"cvpysdk.client.Client.is_cluster",
"url":37,
"doc":"Returns True if the client is of cluster type"
},
{
"ref":"cvpysdk.client.Client.enable_backup",
"url":37,
"doc":"Enable Backup for this Client. Raises: SDKException: if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Client.enable_backup_at_time",
"url":37,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  Time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Client.disable_backup",
"url":37,
"doc":"Disables Backup for this Client. Raises: SDKException: if failed to disable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Client.enable_restore",
"url":37,
"doc":"Enable Restore for this Client. Raises: SDKException: if failed to enable restore if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Client.enable_restore_at_time",
"url":37,
"doc":"Disables Restore if not already disabled, and enables at the time specified. Args: enable_time (str)  Time to enable the restore at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  kwargs (dict)  dict of keyword arguments as follows timezone (str)  timezone to be used of the operation  Note make use of TIMEZONES dict in constants.py to pass timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable restore if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Client.disable_restore",
"url":37,
"doc":"Disables Restore for this Client. Raises: SDKException: if failed to disable restore if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Client.enable_data_aging",
"url":37,
"doc":"Enable Data Aging for this Client. Raises: SDKException: if failed to enable data aging if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Client.enable_data_aging_at_time",
"url":37,
"doc":"Disables Data Aging if not already disabled, and enables at the time specified. Args: enable_time (str)  Time to enable the data aging at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  kwargs (dict)  dict of keyword arguments as follows timezone (str)  timezone to be used of the operation  Note make use of TIMEZONES dict in constants.py to pass timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable data aging if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Client.disable_data_aging",
"url":37,
"doc":"Disables Data Aging for this Client. Raises: SDKException: if failed to disable data aging if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Client.execute_script",
"url":37,
"doc":"Executes the given script of the script type on this client.  Only scripts of text format are supported , i.e., the scripts should not have any binary/bytes content Args: script_type (str)  type of script to be executed on the client Script Types Supported: JAVA Python PowerShell WindowsBatch UnixShell script (str)  path of the script to be executed on the client script_arguments (str)  arguments to the script default: None wait_for_completion (bool)  boolean specifying whether to wait for the script execution to finish or not default: True Returns: (int, str, str) int - exit code returned from executing the script on the client default: -1 (exit code not returned in the response) str - output returned from executing the script on the client default:  (output not returned in the response) str - error returned from executing the script on the client default:  (error not returned in the response) Raises: SDKException: if script type argument is not of type string if script argument is not of type string if script type is not valid if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Client.execute_command",
"url":37,
"doc":"Executes a command on this client. Args: command (str)  command in string to be executed on the client script_arguments (str)  arguments to the script default: None wait_for_completion (bool)  boolean specifying whether to wait for the script execution to finish or not default: True Returns: (int, str, str) int - exit code returned from executing the command on the client default: -1 (exit code not returned in the response) str - output returned from executing the command on the client default:  (output not returned in the response) str - error returned from executing the command on the client default:  (error not returned in the response) Raises: SDKException: if command argument is not of type string if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Client.enable_intelli_snap",
"url":37,
"doc":"Enables Intelli Snap for this Client. Raises: SDKException: if failed to enable intelli snap if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Client.disable_intelli_snap",
"url":37,
"doc":"Disables Intelli Snap for this Client. Raises: SDKException: if failed to disable intelli snap if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Client.is_ready",
"url":37,
"doc":"Checks if CommServ is able to communicate to the client. Returns: True - if the CS is able to connect to the client False - if communication fails b/w the CS and the client Raises: SDKException: if response is empty if response is not success"
},
{
"ref":"cvpysdk.client.Client.is_mongodb_ready",
"url":37,
"doc":"Checks the status mongoDB Returns: True : if the MongoDB is working fine False : if there is any error in mongoDB Raises: SDKException: if response is not success"
},
{
"ref":"cvpysdk.client.Client.upload_file",
"url":37,
"doc":"Upload the specified source file to destination path on the client machine Args: source_file_path (str)  path on the controller machine destination_folder (str)  path on the client machine where the files are to be copied Raises: SDKException: if failed to upload the file if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Client.upload_folder",
"url":37,
"doc":"Uploads the specified source dir to destination path on the client machine Args: source_dir (str)  path on the controller machine destination_dir (str)  path on the client machine where the files are to be copied Raises: SDKException: if failed to upload the file if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Client.start_service",
"url":37,
"doc":"Executes the command on the client machine to start the Commvault service(s). Args: service_name (str)  name of the service to be started default: None Example: GxVssProv(Instance001) Returns: None - if the service was started successfully Raises: SDKException: if failed to start the service",
"func":1
},
{
"ref":"cvpysdk.client.Client.stop_service",
"url":37,
"doc":"Executes the command on the client machine to stop the Commvault service(s). Args: service_name (str)  name of the service to be stopped default: None Example: GxVssProv(Instance001) Returns: None - if the service was stopped successfully Raises: SDKException: if failed to stop the service",
"func":1
},
{
"ref":"cvpysdk.client.Client.restart_service",
"url":37,
"doc":"Executes the command on the client machine to restart the Commvault service(s). Args: service_name (str)  name of the service to be restarted default: None Example: GxVssProv(Instance001) Returns: None - if the service was restarted successfully Raises: SDKException: if failed to restart the service",
"func":1
},
{
"ref":"cvpysdk.client.Client.restart_services",
"url":37,
"doc":"Executes the command on the client machine to restart  ALL services. Args: wait_for_service_restart (bool)  boolean to specify whether to wait for the services to restart, or just execute the command and exit if set to True, the method will wait till the services of the client are up otherwise, the method will trigger a service restart, and exit default: True timeout (int)  timeout  (in minutes) to wait for the services to restart if the services are not restarted by the timeout value, the method will exit out with Exception default: 10 implicit_wait (int)  Time (in seconds) to wait before the readiness is checked. default: 5 Returns: None - if the services were restarted sucessfully Raises: SDKException: if failed to restart the services before the timeout value",
"func":1
},
{
"ref":"cvpysdk.client.Client.get_network_summary",
"url":37,
"doc":"Gets the network summary for the client Returns: str - Network Summary Raises: SDKException: if response is not successful",
"func":1
},
{
"ref":"cvpysdk.client.Client.change_exchange_job_results_directory",
"url":37,
"doc":"Change the Job Result Directory of an Exchange Online Client Arguments: new_directory_path (str)  The new JR directory Example: C:\\JR or  username (str)  username of the machine, if new JobResults directory is a shared/ UNC path. password (str)  Password of the machine, if new JobResults directory is a shared/ UNC path. Raises SDKException (object) Error in moving the job results directory",
"func":1
},
{
"ref":"cvpysdk.client.Client.change_o365_client_job_results_directory",
"url":37,
"doc":"Change the Job Result Directory of a O365 Client Arguments: new_directory_path (str)  The new JR directory Example: C:\\JR or  username (str)  username of the machine, if new JobResults directory is a shared/ UNC path. password (str)  Password of the machine, if new JobResults directory is a shared/ UNC path. Raises SDKException (object) Error in moving the job results directory",
"func":1
},
{
"ref":"cvpysdk.client.Client.push_network_config",
"url":37,
"doc":"Performs a push network configuration on the client Raises: SDKException: if input data is invalid if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Client.add_user_associations",
"url":37,
"doc":"Adds the users to the owners list of this client Args: associations_list (list)  list of owners to be associated with this client Example: associations_list = [ { 'user_name': user1, 'role_name': role1 }, { 'user_name': user2, 'role_name': role2 } ] Note: You can get available roles list using self.available_security_roles",
"func":1
},
{
"ref":"cvpysdk.client.Client.add_client_owner",
"url":37,
"doc":"Adds the users to the owners list of this client Args: owner_list (list)  list of owners to be associated with this client Raises: SDKException: if input data is invalid",
"func":1
},
{
"ref":"cvpysdk.client.Client.filter_clients_return_displaynames",
"url":37,
"doc":"Gets all the clients associated with the commcell with properties Args: filter_by (str)  filters clients based on criteria Accepted values: 1. OS  kwargs (str)  accepted optional arguments: os_type (str) - accepted values Windows, Unix, NAS url_params (dict) - dict of url parameters and values Example: {\"Hiddenclients\":\"true\"} Returns: list - list of clients of given os_type Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Client.refresh",
"url":37,
"doc":"Refreshes the properties of the Client.",
"func":1
},
{
"ref":"cvpysdk.client.Client.set_encryption_property",
"url":37,
"doc":"updates encryption properties on client Args: enc_setting (str)  sets encryption level on client (USE_SPSETTINGS / OFF/ ON_CLIENT) default : USE_SPSETTINGS key (str)  cipher type key_len (str)  cipher key length to enable encryption : client_object.set_encryption_property(\"ON_CLIENT\", \"TwoFish\", \"256\") to disable encryption : client_object.set_encryption_property(\"OFF\")",
"func":1
},
{
"ref":"cvpysdk.client.Client.set_dedup_property",
"url":37,
"doc":"Set DDB propeties :param prop_name: property name :param prop_value: property value :return: prop_name and prop_value: clientSideDeduplication values: USE_SPSETTINGS, to use storage policy settings ON_CLIENT, to enable client side deduplication OFF, to disable client side deduplication enableClientSideCache: To set usage of Client Side Cache Values - None(Default) - DoNot Modify the property value True/False - Enable/Disable Cache respectively maxCacheDB: Size of Cache DB if enabled. Default Value: None (use default size) Valid values are: 1024 2048 4096 8192 16384 32768 65536 131072 variable_content_alignment: to increase the effectiveness of deduplication on the client computer. Variable content alignment reduces the amount of data stored during a backup operation. Values - None(Default) - DoNotModify the property value True/False - Enable/Disable optimization respectively high_latency_optimization: To set Optimization for High latency Networks Values - None(Default) - DoNotModify the property value True/False - Enable/Disable optimization respectively",
"func":1
},
{
"ref":"cvpysdk.client.Client.add_additional_setting",
"url":37,
"doc":"Adds registry key to the client property Args: category (str)  Category of registry key key_name (str)  Name of the registry key data_type (str)  Data type of registry key Accepted Values: BOOLEAN, INTEGER, STRING, MULTISTRING, ENCRYPTED value (str)  Value of registry key Raises: SDKException: if failed to add if response is empty if response code is not as expected",
"func":1
},
{
"ref":"cvpysdk.client.Client.delete_additional_setting",
"url":37,
"doc":"Deletes registry key from the client property Args: category (str)  Category of registry key key_name (str)  Name of the registry key Raises: SDKException: if failed to delete if response is empty if response code is not as expected",
"func":1
},
{
"ref":"cvpysdk.client.Client.get_configured_additional_settings",
"url":37,
"doc":"Method to get configured additional settings name",
"func":1
},
{
"ref":"cvpysdk.client.Client.release_license",
"url":37,
"doc":"Releases a license from a client Args: license_name (str)  Name of the license to be released. Releases all the licenses in the client if no value is passed. self.consumed_licenses() method will provide all the available license details along with license_name. default: None Raises: SDKException: if failed to release license if response is empty if response code is not as expected",
"func":1
},
{
"ref":"cvpysdk.client.Client.retire",
"url":37,
"doc":"Uninstalls the CommVault Software on the client, releases the license and deletes the client. Returns: Job - job object of the uninstall job Raises: SDKException: if failed to retire client if response is empty if response code is not as expected",
"func":1
},
{
"ref":"cvpysdk.client.Client.reconfigure_client",
"url":37,
"doc":"Reapplies license to the client Raises: SDKException: if failed to reconfigure client if response is empty if response code is not as expected",
"func":1
},
{
"ref":"cvpysdk.client.Client.push_servicepack_and_hotfix",
"url":37,
"doc":"triggers installation of service pack and hotfixes Args: reboot_client (bool)  boolean to specify whether to reboot the client or not default: False run_db_maintenance (bool)  boolean to specify whether to run db maintenance not default: True Returns: object - instance of the Job class for this download job Raises: SDKException: if Download job failed if response is empty if response is not success if another download job is already running  NOTE: push_serivcepack_and_hotfixes cannot be used for revision upgrades",
"func":1
},
{
"ref":"cvpysdk.client.Client.repair_software",
"url":37,
"doc":"triggers Repair software on the client machine Args: username (str)  username of the machine to re-install features on default : None password (str)  base64 encoded password default : None reboot_client (bool)  boolean to specify whether to reboot the client or not default: False Returns: object - instance of the Job class for this download job Raises: SDKException: if install job failed if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Client.get_dag_member_servers",
"url":37,
"doc":"Gets the member servers for an Exchange DAG client. Returns: list - list consisting of the member servers Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Client.consumed_licenses",
"url":37,
"doc":"returns dictionary of all the license details which is consumed by the client Returns: dict - consisting of all licenses consumed by the client { \"license_name_1\": { \"licenseType\": license_type_id, \"appType\": app_type_id, \"licenseName\": license_name, \"platformType\": platform_type_id }, \"license_name_2\": { \"licenseType\": license_type_id, \"appType\": app_type_id, \"licenseName\": license_name, \"platformType\": platform_type_id } } Raises: SDKException: if failed to get the licenses if response is empty if response code is not as expected"
},
{
"ref":"cvpysdk.client.Client.cvd_port",
"url":37,
"doc":"Returns CVD port of the client"
},
{
"ref":"cvpysdk.client.Client.client_guid",
"url":37,
"doc":"Returns client GUID"
},
{
"ref":"cvpysdk.client.Client.client_type",
"url":37,
"doc":"Returns client Type"
},
{
"ref":"cvpysdk.client.Client.vm_guid",
"url":37,
"doc":"Returns guid of the vm client"
},
{
"ref":"cvpysdk.client.Client.set_job_start_time",
"url":37,
"doc":"Sets the jobstarttime for this Client. Raises: SDKException: if failed to set the job start time if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Client.uninstall_software",
"url":37,
"doc":"Performs readiness check on the client Args: force_uninstall (bool): Uninstalls packages forcibly. Defaults to True. software_list (list): The client_composition will contain the list of components need to be uninstalled. Usage: client_obj.uninstall_software(force_uninstall=False,software_list=[\"Index Store\",\"File System\"]) Returns: The job object of the uninstall software job Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Client.job_start_time",
"url":37,
"doc":"Returns the job start time"
},
{
"ref":"cvpysdk.client.Client.readiness_details",
"url":37,
"doc":"returns instance of readiness"
},
{
"ref":"cvpysdk.client.Client.get_environment_details",
"url":37,
"doc":"Returns a dictionary with the count of fileservers, VM, Laptop for all the service commcells example output: { 'fileServerCount': {'commcell_name': count}, 'laptopCount': {'commcell_name': count}, 'vmCount': {'commcell_name': count} }",
"func":1
},
{
"ref":"cvpysdk.client.Client.get_needs_attention_details",
"url":37,
"doc":"Returns a dictionary with the count of AnomalousServers, AnomalousJobs, InfrastructureServers for all the service commcells example output: { 'CountOfAnomalousInfrastructureServers': {'commcell_name': count}, 'CountOfAnomalousServers': {'commcell_name': count}, 'CountOfAnomalousJobs': {'commcell_name': count} }",
"func":1
},
{
"ref":"cvpysdk.client.Client.get_mount_volumes",
"url":37,
"doc":"\"Gets mount volumes information for client Args: volume_names (list): List of volume names to be fetched (optional) Returns: volume_guids (list) : Returns list volume dictionaries eg: [{ \"volumeTypeFlags\": 1, \"freeSize\": 63669854208, \"size\": 106779639808, \"guid\": \"8459b015-4c07-4312-8440-a64cb426203c\", \"accessPathList\": [\"C:\"] }]",
"func":1
},
{
"ref":"cvpysdk.client.Client.enable_content_indexing",
"url":37,
"doc":"Enables the v1 content indexing on the client",
"func":1
},
{
"ref":"cvpysdk.client.Client.disable_content_indexing",
"url":37,
"doc":"Disables the v1 content indexing on the client",
"func":1
},
{
"ref":"cvpysdk.client.Client.enable_owner_privacy",
"url":37,
"doc":"Enables the privacy option for client",
"func":1
},
{
"ref":"cvpysdk.client.Client.company_name",
"url":37,
"doc":"Returns Company Name to which client belongs to, Returns Empty String, If client belongs to Commcell"
},
{
"ref":"cvpysdk.client.Client.check_eligibility_for_migration",
"url":37,
"doc":"Checks whether Client is Eligible for migration Args: destination_company_name (str)  Destination company name to which client is to be migrated Returns: eligibility_status (bool)  True, If Clients are eligible for migration else False Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Client.disable_owner_privacy",
"url":37,
"doc":"Enables the privacy option for client",
"func":1
},
{
"ref":"cvpysdk.client.Client.set_privacy",
"url":37,
"doc":"Internal function to enable/disable privacy for client Args: value(bool): True/False to enable/disable the privacy Raises: SDKException: if setting privacy for client fails if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.client.Client.change_dynamics365_client_job_results_directory",
"url":37,
"doc":"Change the Job Result Directory of a Dynamics 365 Client Arguments: new_directory_path (str)  The new JR directory Example: \\vm1.example-active-directory.com\\TestFolder1\\JobResults username (str)  username of the machine, if new JobResults directory is a shared/ UNC path. password (str)  Password of the machine, if new JobResults directory is a shared/ UNC path. Raises SDKException (object) Error in moving the job results directory",
"func":1
},
{
"ref":"cvpysdk.client.Client.change_company_for_client",
"url":37,
"doc":"Changes Company for Client Args: destination_company_name (str)  Destination company name to which client is to be migrated Raises: SDKException: If Client is not eligible for migration if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clientgroup",
"url":38,
"doc":"Main file for performing client group operations. ClientGroups and ClientGroup are the classes defined in this file. ClientGroups: Class for representing all the client groups associated with a commcell ClientGroup: Class for representing a single Client Group of the commcell ClientGroups: __init__(commcell_object)  initialise instance of the ClientGroups associated with the specified commcell __str__()  returns all the client groups associated with the Commcell __repr__()  returns the string for the instance of the ClientGroups class __len__()  returns the number of client groups associated with the Commcell __getitem__()  returns the name of the client group for the given client group Id or the details for the given client group name _get_clientgroups()  gets all the clientgroups associated with the commcell specified _valid_clients()  returns the list of all the valid clients, from the list of clients provided all_clientgroups()  returns the dict of all the clientgroups on the commcell has_clientgroup()  checks if a client group exists with the given name or not create_smart_rule()  Create rules required for smart client group creation based on input parameters merge_smart_rules()  Merge multiple rules into (SCG) rule to create smart client group _create_scope_dict()  Creates Scope Dictionary needed for Smart Client group association add(clientgroup_name)  adds a new client group to the commcell get(clientgroup_name)  returns the instance of the ClientGroup class, for the the input client group name delete(clientgroup_name)  deletes the client group from the commcell refresh()  refresh the client groups associated with the commcell ClientGroup: __init__(commcell_object, clientgroup_name, clientgroup_id=None)  initialise object of ClientGroup class with the specified client group name and id __repr__()  return the client group name, the instance is associated with _get_clientgroup_id()  method to get the clientgroup id, if not specified _get_clientgroup_properties()  get the properties of this clientgroup _initialize_clientgroup_properties()  initializes the properties of this ClientGroup _request_json_()  returns the appropriate JSON to pass for enabling/disabling an activity _process_update_request()  processes the clientgroup update API call _update()  updates the client group properties _add_or_remove_clients()  adds/removes clients to/from a ClientGroup enable_backup_at_time()  enables backup for the client group at the time specified enable_backup()  enables the backup flag disable_backup()  disables the backup flag enable_restore_at_time()  enables restore for the client group at the time specified enable_restore()  enables the restore flag disable_restore()  disables the restore flag enable_data_aging_at_time()  enables data aging for the client group at the time specified enable_data_aging()  enables the data aging flag disable_data_aging()  disables the data aging flag add_clients()  adds the valid clients to client group remove_clients()  removes the valid clients from client group remove_all_clients()  removes all the associated clients from client group network()  returns Network class object push_network_config()  performs a push network configuration on client group refresh()  refresh the properties of the client group push_servicepack_and_hotfixes()  triggers installation of service pack and hotfixes repair_software()  triggers Repair software on the client group update_properties()  to update the client group properties add_additional_setting()  adds registry key to client group property delete_additional_setting()  Delete registry key from client group property is_auto_discover_enabled()  gets the autodiscover option for the Organization enable_auto_discover()  enables autodiscover option at client group level disable_auto_discover()  disables autodiscover option at client group level ClientGroup Attributes            - Following attributes are available for an instance of the ClientGroup class:  name  returns the name of client group  clientgroup_id  returns the id of client group  clientgroup_name  returns the name of client group  description  returns the description of client group  associated_clients  returns the associated clients of client group  is_backup_enabled  returns the backup activity status of client group  is_restore_enabled  returns the restore activity status of client group  is_data_aging_enabled  returns the data aging activity status of client group  is_smart_client_group  returns true if client group is a smart client group  is_auto_discover_enabled  returns the auto discover status of client group"
},
{
"ref":"cvpysdk.clientgroup.ClientGroups",
"url":38,
"doc":"Class for representing all the clientgroups associated with a Commcell. Initialize object of the ClientGroups class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the ClientGroups class"
},
{
"ref":"cvpysdk.clientgroup.ClientGroups.all_clientgroups",
"url":38,
"doc":"Returns dict of all the clientgroups associated with this commcell dict - consists of all clientgroups of the commcell { \"clientgroup1_name\": clientgroup1_id, \"clientgroup2_name\": clientgroup2_id, }"
},
{
"ref":"cvpysdk.clientgroup.ClientGroups.has_clientgroup",
"url":38,
"doc":"Checks if a client group exists in the commcell with the input client group name. Args: clientgroup_name (str)  name of the client group Returns: bool - boolean output whether the client group exists in the commcell or not Raises: SDKException: if type of the client group name argument is not string",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroups.create_smart_rule",
"url":38,
"doc":"Create/Prepare rules required for smart client group creation based on input parameters Args: filter_rule (str)  Rule selection to match specific criterion filter_condition (str)  Filter value between selections in rule filter_value(str)  Value of rule criterion value(str)  value required to create rule Returns: dict - consists of single rule based on inputs { \"rule\": { \"filterID\": 100, \"secValue\": 'Windows', \"propID\": 8, \"propType\": 4, \"value\": '1' } }",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroups.merge_smart_rules",
"url":38,
"doc":"Merge multiple rules into (SCG) rule to create smart client group. Args: rule_list (list)  List of smart rules to be added in rule group op_value (str) condition to apply between smart rules ex: all, any,not any scg_op (str) condition to apply between smart rule groups (@group level) Returns: scg_rule (dict) - Rule group to create smart client group",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroups.add",
"url":38,
"doc":"Adds a new Client Group to the Commcell. Args: clientgroup_name (str)  name of the new client group to add clients (str/list)  ',' separated string of client names, or a list of clients, to be added under client group default: []  kwargs (dict)  Key value pairs for supported arguments Supported: clientgroup_description (str)  description of the client group default:  enable_backup (bool)  enable or disable backup default: True enable_restore (bool)  enable or disable restore default: True enable_data_aging (bool)  enable or disable data aging default: True scg_rule (dict)  scg_rule required to create smart client group client_scope (str)  Client scope for the Smart Client Group client_scope_value (str)  Client scope value for a particular scope Returns: object - instance of the ClientGroup class created by this method Raises: SDKException: if type of client group name and description is not of type string if clients argument is not of type list / string if response is empty if response is not success if client group already exists with the given name",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroups.get",
"url":38,
"doc":"Returns a client group object of the specified client group name. Args: clientgroup_name (str)  name of the client group Returns: object - instance of the ClientGroup class for the given clientgroup name Raises: SDKException: if type of the client group name argument is not string if no client group exists with the given name",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroups.delete",
"url":38,
"doc":"Deletes the clientgroup from the commcell. Args: clientgroup_name (str)  name of the clientgroup Raises: SDKException: if type of the clientgroup name argument is not string if response is empty if failed to delete the client group if no clientgroup exists with the given name",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroups.refresh",
"url":38,
"doc":"Refresh the client groups associated with the Commcell. Args: hard (bool)  flag to hard refresh mongo cache for this entity",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroup",
"url":38,
"doc":"Class for performing operations for a specific ClientGroup. Initialise the ClientGroup class instance. Args: commcell_object (object)  instance of the Commcell class clientgroup_name (str)  name of the clientgroup clientgroup_id (str)  id of the clientgroup default: None Returns: object - instance of the ClientGroup class"
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.properties",
"url":38,
"doc":"Returns the client group properties"
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.name",
"url":38,
"doc":"Returns the client group display name"
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.clientgroup_id",
"url":38,
"doc":"Treats the clientgroup id as a read-only attribute."
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.clientgroup_name",
"url":38,
"doc":"Treats the clientgroup name as a read-only attribute."
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.description",
"url":38,
"doc":"Treats the clientgroup description as a read-only attribute."
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.associated_clients",
"url":38,
"doc":"Treats the clients associated to the ClientGroup as a read-only attribute."
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.is_backup_enabled",
"url":38,
"doc":"Treats the clientgroup backup attribute as a property of the ClientGroup class."
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.is_restore_enabled",
"url":38,
"doc":"Treats the clientgroup restore attribute as a propetry of the ClientGroup class."
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.is_data_aging_enabled",
"url":38,
"doc":"Treats the clientgroup data aging attribute as a property of the ClientGroup class."
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.is_smart_client_group",
"url":38,
"doc":"Returns boolean indicating whether client group is smart client group"
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.company_name",
"url":38,
"doc":"Returns company name to which client group belongs to"
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.network",
"url":38,
"doc":"Returns the object of Network class."
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.network_throttle",
"url":38,
"doc":"Returns the object of NetworkThrottle class"
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.client_group_filter",
"url":38,
"doc":"Returns the client group filters"
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.is_auto_discover_enabled",
"url":38,
"doc":"Returns boolen for clientgroup autodiscover attribute whether property is enabled or not."
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.enable_backup",
"url":38,
"doc":"Enable Backup for this ClientGroup. Raises: SDKException: if failed to enable backup",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.enable_backup_at_time",
"url":38,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  kwargs (dict)  dict of keyword arguments as follows timezone (str)  timezone to be used of the operation  Note make use of TIMEZONES dict in constants.py to pass timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.disable_backup",
"url":38,
"doc":"Disables Backup for this ClientGroup. Raises: SDKException: if failed to disable backup",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.enable_restore",
"url":38,
"doc":"Enable Restore for this ClientGroup. Raises: SDKException: if failed to enable restore",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.enable_restore_at_time",
"url":38,
"doc":"Disables restore if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  kwargs (dict)  dict of keyword arguments as follows timezone (str)  timezone to be used of the operation  Note make use of TIMEZONES dict in constants.py to pass timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable Restore",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.disable_restore",
"url":38,
"doc":"Disables Restore for this ClientGroup. Raises: SDKException: if failed to disable restore",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.enable_data_aging",
"url":38,
"doc":"Enable Data Aging for this ClientGroup. Raises: SDKException: if failed to enable data aging",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.enable_data_aging_at_time",
"url":38,
"doc":"Disables Data Aging if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  kwargs (dict)  dict of keyword arguments as follows timezone (str)  timezone to be used of the operation  Note make use of TIMEZONES dict in constants.py to pass timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable Data Aging",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.disable_data_aging",
"url":38,
"doc":"Disables Data Aging for this ClientGroup. Raises: SDKException: if failed to disable data aging",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.add_clients",
"url":38,
"doc":"Adds clients to the ClientGroup. Args: clients (str/list)  ',' separated string of client names, or a list of clients, to be added under client group overwrite (bool)  if set to true will remove old clients, and add new clients default: False Raises: SDKException: if clients is not of type string / list if no valid clients are found if failed to add clients to client group",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.remove_clients",
"url":38,
"doc":"Deletes clients from the ClientGroup. Args: clients (str/list)  ',' separated string of client names, or a list of clients, to be removed from the client group Raises: SDKException: if clients is not of type string / list if no valid clients are found if failed to remove clients from client group",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.remove_all_clients",
"url":38,
"doc":"Clears the associated clients from client group Raises: SDKException: if failed to remove all clients from client group",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.push_network_config",
"url":38,
"doc":"Performs a push network configuration on the client group Raises: SDKException: if input data is invalid if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.push_servicepack_and_hotfix",
"url":38,
"doc":"triggers installation of service pack and hotfixes Args: reboot_client (bool)  boolean to specify whether to reboot the client or not default: False run_db_maintenance (bool)  boolean to specify whether to run db maintenance not default: True Returns: object - instance of the Job class for this download job Raises: SDKException: if Download job failed if response is empty if response is not success if another download job is already running  NOTE: push_serivcepack_and_hotfixes cannot be used for revision upgrades",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.repair_software",
"url":38,
"doc":"triggers Repair software on the client group Args: username (str)  username of the machine to re-install features on default : None password (str)  base64 encoded password default : None reboot_client (bool)  boolean to specify whether to reboot the client_group or not default: False Returns: object - instance of the Job class for this download job Raises: SDKException: if install job failed if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.update_properties",
"url":38,
"doc":"Updates the client group properties Args: properties_dict (dict)  client group property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.add_additional_setting",
"url":38,
"doc":"Adds registry key to the client group property Args: category (str)  Category of registry key key_name (str)  Name of the registry key data_type (str)  Data type of registry key Accepted Values: BOOLEAN, INTEGER, STRING, MULTISTRING, ENCRYPTED value (str)  Value of registry key comment (str)  Comment to be added for the additional setting enabled (int)  To enable the additional setting default: 1 Raises: SDKException: if failed to add if response is empty if response code is not as expected",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.delete_additional_setting",
"url":38,
"doc":"Delete registry key from the client group property Args: category (str)  Category of registry key key_name (str)  Name of the registry key Raises: SDKException: if failed to add if response is empty if response code is not as expected",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.enable_auto_discover",
"url":38,
"doc":"Enables autodiscover at ClientGroup level Raises: SDKException: if failed to enable_auto_discover",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.disable_auto_discover",
"url":38,
"doc":"Disables autodiscover at ClientGroup level Raises: SDKException: if failed to disable_auto_discover",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.refresh",
"url":38,
"doc":"Refresh the properties of the ClientGroup.",
"func":1
},
{
"ref":"cvpysdk.clientgroup.ClientGroup.change_company",
"url":38,
"doc":"Changes Company for client group and its belonging clients Args: target_company_name (str)  Company name to which clientgroup and its clients to be migrated Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients",
"url":39,
"doc":"Initialize Clients for the SDK."
},
{
"ref":"cvpysdk.clients.onedrive_client",
"url":40,
"doc":"OneDriveClient class is defined in this file. OneDriveClient: Class for a single OneDrive for Business client (v2) of the commcell OneDriveClient    = _get_subclient()  Returns the sub-client object for OneDrive for Business client (v2) backup_all_users_in_client()  Run backup for all users present in OneDrive for Business client (v2) in_place_restore()  Run an inplace restore of specified users for OneDrive for business client (v2) out_of_place_restore()  Run an out-of-place restore of specified users for OneDrive for business client (v2) disk_restore()  Runs disk restore of specified users for OneDrive for business client (v2) modify_server_plan()  Method to Modify Server Plan Associated to Client modify_job_results_directory()  Method to modify job results directory"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient",
"url":40,
"doc":"Class for performing client operations for a specific client. Initialise the OneDrive Client class instance. Args: commcell_object (object)  instance of the Commcell class client_name (str)  name of the client client_id (str)  id of the client default: None Returns: object - instance of the OneDrive Client class"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.backup_all_users_in_client",
"url":40,
"doc":"Run backup for all users present in OneDrive client Returns: object - instance of the Job class for this backup job",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.in_place_restore",
"url":40,
"doc":"Run an inplace restore of specified users for OneDrive for business client Args: users (list) : List of SMTP addresses of users  kwargs (dict) : Additional parameters overwrite (bool) : unconditional overwrite files during restore (default: False) restore_as_copy (bool) : restore files as copy during restore (default: False) skip_file_permissions (bool) : If True, restore of file permissions are skipped (default: False) Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.out_of_place_restore",
"url":40,
"doc":"Run an out-of-place restore of specified users for OneDrive for business client Args: users (list) : list of SMTP addresses of users destination_path (str) : SMTP address of destination user  kwargs (dict) : Additional parameters overwrite (bool) : unconditional overwrite files during restore (default: False) restore_as_copy (bool) : restore files as copy during restore (default: False) skip_file_permissions (bool) : If True, restore of file permissions are skipped (default: False) Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.disk_restore",
"url":40,
"doc":"Runs disk restore of specified users for OneDrive for business client Args: users (list) : list of SMTP addresses of users destination_client (str) : client where the users need to be restored destination_path (str) : Destination folder location skip_file_permissions (bool) : If True, restore of file permissions are skipped (default: False) Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.modify_server_plan",
"url":40,
"doc":"Method to Modify Server Plan Associated to Client Arguments: old_plan (str)  existing server plan name new_plan (str)  new server plan name",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.modify_job_results_directory",
"url":40,
"doc":"Method to modify job results directory modified_shared_jr_directory (str)  new job results directory",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.update_properties",
"url":37,
"doc":"Updates the client properties Args: properties_dict (dict)  client property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.properties",
"url":37,
"doc":"Returns the client properties"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.latitude",
"url":37,
"doc":"Returns the client latitude from clientRegionInfo GeoLocation"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.longitude",
"url":37,
"doc":"Returns the client Longitude from clientRegionInfo GeoLocation"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.is_vm",
"url":37,
"doc":"Returns True if the given client is a VM else False"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.hyperv_id_of_vm",
"url":37,
"doc":"Returns the Hypervisor ID associated to a VM client"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.associated_client_groups",
"url":37,
"doc":"Returns the list of client groups to which the given client is assocaited with"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.company_id",
"url":37,
"doc":"Returns the client's Company ID"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.name",
"url":37,
"doc":"Returns the Client name"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.display_name",
"url":37,
"doc":"Returns the Client display name"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.description",
"url":37,
"doc":"Returns the Client description"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.timezone",
"url":37,
"doc":"Returns the timezone of the client"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.commcell_name",
"url":37,
"doc":"Returns the Client's commcell name"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.name_change",
"url":37,
"doc":"Returns an instance of Namechange class"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.available_security_roles",
"url":37,
"doc":"Returns the list of available security roles"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.client_id",
"url":37,
"doc":"Treats the client id as a read-only attribute."
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.client_name",
"url":37,
"doc":"Treats the client name as a read-only attribute."
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.client_hostname",
"url":37,
"doc":"Treats the client host name as a read-only attribute."
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.os_info",
"url":37,
"doc":"Treats the os information as a read-only attribute."
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.is_data_recovery_enabled",
"url":37,
"doc":"Treats the is data recovery enabled as a read-only attribute."
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.is_data_management_enabled",
"url":37,
"doc":"Treats the is data management enabled as a read-only attribute."
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.is_ci_enabled",
"url":37,
"doc":"Treats the is online content index enabled as a read-only attribute."
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.is_backup_enabled",
"url":37,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.is_restore_enabled",
"url":37,
"doc":"Treats the is restore enabled as a read-only attribute."
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.is_data_aging_enabled",
"url":37,
"doc":"Treats the is data aging enabled as a read-only attribute."
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.is_intelli_snap_enabled",
"url":37,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.is_privacy_enabled",
"url":37,
"doc":"Returns if client privacy is enabled"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.install_directory",
"url":37,
"doc":"Treats the install directory as a read-only attribute."
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.version",
"url":37,
"doc":"Treats the version as a read-only attribute."
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.service_pack",
"url":37,
"doc":"Treats the service pack as a read-only attribute."
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.owners",
"url":37,
"doc":"Treats the client owners as a read-only attribute."
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.job_results_directory",
"url":37,
"doc":"Treats the job_results_directory pack as a read-only attribute."
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.block_level_cache_dir",
"url":37,
"doc":"Returns the Block level cache directory"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.instance",
"url":37,
"doc":"Returns the value of the instance the client is installed on."
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.log_directory",
"url":37,
"doc":"Returns the path of the log directory on the client."
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.agents",
"url":37,
"doc":"Returns the instance of the Agents class representing the list of Agents installed / configured on the Client."
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.schedules",
"url":37,
"doc":"Returns the instance of the Schedules class representing the Schedules configured on the Client."
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.users",
"url":37,
"doc":"Returns the instance of the Users class representing the list of Users with permissions set on the Client."
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.network",
"url":37,
"doc":"Returns the object of Network class"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.network_throttle",
"url":37,
"doc":"Returns the object of NetworkThrottle class"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.is_cluster",
"url":37,
"doc":"Returns True if the client is of cluster type"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.enable_backup",
"url":37,
"doc":"Enable Backup for this Client. Raises: SDKException: if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.enable_backup_at_time",
"url":37,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  Time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.disable_backup",
"url":37,
"doc":"Disables Backup for this Client. Raises: SDKException: if failed to disable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.enable_restore",
"url":37,
"doc":"Enable Restore for this Client. Raises: SDKException: if failed to enable restore if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.enable_restore_at_time",
"url":37,
"doc":"Disables Restore if not already disabled, and enables at the time specified. Args: enable_time (str)  Time to enable the restore at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  kwargs (dict)  dict of keyword arguments as follows timezone (str)  timezone to be used of the operation  Note make use of TIMEZONES dict in constants.py to pass timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable restore if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.disable_restore",
"url":37,
"doc":"Disables Restore for this Client. Raises: SDKException: if failed to disable restore if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.enable_data_aging",
"url":37,
"doc":"Enable Data Aging for this Client. Raises: SDKException: if failed to enable data aging if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.enable_data_aging_at_time",
"url":37,
"doc":"Disables Data Aging if not already disabled, and enables at the time specified. Args: enable_time (str)  Time to enable the data aging at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  kwargs (dict)  dict of keyword arguments as follows timezone (str)  timezone to be used of the operation  Note make use of TIMEZONES dict in constants.py to pass timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable data aging if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.disable_data_aging",
"url":37,
"doc":"Disables Data Aging for this Client. Raises: SDKException: if failed to disable data aging if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.execute_script",
"url":37,
"doc":"Executes the given script of the script type on this client.  Only scripts of text format are supported , i.e., the scripts should not have any binary/bytes content Args: script_type (str)  type of script to be executed on the client Script Types Supported: JAVA Python PowerShell WindowsBatch UnixShell script (str)  path of the script to be executed on the client script_arguments (str)  arguments to the script default: None wait_for_completion (bool)  boolean specifying whether to wait for the script execution to finish or not default: True Returns: (int, str, str) int - exit code returned from executing the script on the client default: -1 (exit code not returned in the response) str - output returned from executing the script on the client default:  (output not returned in the response) str - error returned from executing the script on the client default:  (error not returned in the response) Raises: SDKException: if script type argument is not of type string if script argument is not of type string if script type is not valid if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.execute_command",
"url":37,
"doc":"Executes a command on this client. Args: command (str)  command in string to be executed on the client script_arguments (str)  arguments to the script default: None wait_for_completion (bool)  boolean specifying whether to wait for the script execution to finish or not default: True Returns: (int, str, str) int - exit code returned from executing the command on the client default: -1 (exit code not returned in the response) str - output returned from executing the command on the client default:  (output not returned in the response) str - error returned from executing the command on the client default:  (error not returned in the response) Raises: SDKException: if command argument is not of type string if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.enable_intelli_snap",
"url":37,
"doc":"Enables Intelli Snap for this Client. Raises: SDKException: if failed to enable intelli snap if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.disable_intelli_snap",
"url":37,
"doc":"Disables Intelli Snap for this Client. Raises: SDKException: if failed to disable intelli snap if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.is_ready",
"url":37,
"doc":"Checks if CommServ is able to communicate to the client. Returns: True - if the CS is able to connect to the client False - if communication fails b/w the CS and the client Raises: SDKException: if response is empty if response is not success"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.is_mongodb_ready",
"url":37,
"doc":"Checks the status mongoDB Returns: True : if the MongoDB is working fine False : if there is any error in mongoDB Raises: SDKException: if response is not success"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.upload_file",
"url":37,
"doc":"Upload the specified source file to destination path on the client machine Args: source_file_path (str)  path on the controller machine destination_folder (str)  path on the client machine where the files are to be copied Raises: SDKException: if failed to upload the file if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.upload_folder",
"url":37,
"doc":"Uploads the specified source dir to destination path on the client machine Args: source_dir (str)  path on the controller machine destination_dir (str)  path on the client machine where the files are to be copied Raises: SDKException: if failed to upload the file if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.start_service",
"url":37,
"doc":"Executes the command on the client machine to start the Commvault service(s). Args: service_name (str)  name of the service to be started default: None Example: GxVssProv(Instance001) Returns: None - if the service was started successfully Raises: SDKException: if failed to start the service",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.stop_service",
"url":37,
"doc":"Executes the command on the client machine to stop the Commvault service(s). Args: service_name (str)  name of the service to be stopped default: None Example: GxVssProv(Instance001) Returns: None - if the service was stopped successfully Raises: SDKException: if failed to stop the service",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.restart_service",
"url":37,
"doc":"Executes the command on the client machine to restart the Commvault service(s). Args: service_name (str)  name of the service to be restarted default: None Example: GxVssProv(Instance001) Returns: None - if the service was restarted successfully Raises: SDKException: if failed to restart the service",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.restart_services",
"url":37,
"doc":"Executes the command on the client machine to restart  ALL services. Args: wait_for_service_restart (bool)  boolean to specify whether to wait for the services to restart, or just execute the command and exit if set to True, the method will wait till the services of the client are up otherwise, the method will trigger a service restart, and exit default: True timeout (int)  timeout  (in minutes) to wait for the services to restart if the services are not restarted by the timeout value, the method will exit out with Exception default: 10 implicit_wait (int)  Time (in seconds) to wait before the readiness is checked. default: 5 Returns: None - if the services were restarted sucessfully Raises: SDKException: if failed to restart the services before the timeout value",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.get_network_summary",
"url":37,
"doc":"Gets the network summary for the client Returns: str - Network Summary Raises: SDKException: if response is not successful",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.change_exchange_job_results_directory",
"url":37,
"doc":"Change the Job Result Directory of an Exchange Online Client Arguments: new_directory_path (str)  The new JR directory Example: C:\\JR or  username (str)  username of the machine, if new JobResults directory is a shared/ UNC path. password (str)  Password of the machine, if new JobResults directory is a shared/ UNC path. Raises SDKException (object) Error in moving the job results directory",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.change_o365_client_job_results_directory",
"url":37,
"doc":"Change the Job Result Directory of a O365 Client Arguments: new_directory_path (str)  The new JR directory Example: C:\\JR or  username (str)  username of the machine, if new JobResults directory is a shared/ UNC path. password (str)  Password of the machine, if new JobResults directory is a shared/ UNC path. Raises SDKException (object) Error in moving the job results directory",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.push_network_config",
"url":37,
"doc":"Performs a push network configuration on the client Raises: SDKException: if input data is invalid if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.add_user_associations",
"url":37,
"doc":"Adds the users to the owners list of this client Args: associations_list (list)  list of owners to be associated with this client Example: associations_list = [ { 'user_name': user1, 'role_name': role1 }, { 'user_name': user2, 'role_name': role2 } ] Note: You can get available roles list using self.available_security_roles",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.add_client_owner",
"url":37,
"doc":"Adds the users to the owners list of this client Args: owner_list (list)  list of owners to be associated with this client Raises: SDKException: if input data is invalid",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.filter_clients_return_displaynames",
"url":37,
"doc":"Gets all the clients associated with the commcell with properties Args: filter_by (str)  filters clients based on criteria Accepted values: 1. OS  kwargs (str)  accepted optional arguments: os_type (str) - accepted values Windows, Unix, NAS url_params (dict) - dict of url parameters and values Example: {\"Hiddenclients\":\"true\"} Returns: list - list of clients of given os_type Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.refresh",
"url":37,
"doc":"Refreshes the properties of the Client.",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.set_encryption_property",
"url":37,
"doc":"updates encryption properties on client Args: enc_setting (str)  sets encryption level on client (USE_SPSETTINGS / OFF/ ON_CLIENT) default : USE_SPSETTINGS key (str)  cipher type key_len (str)  cipher key length to enable encryption : client_object.set_encryption_property(\"ON_CLIENT\", \"TwoFish\", \"256\") to disable encryption : client_object.set_encryption_property(\"OFF\")",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.set_dedup_property",
"url":37,
"doc":"Set DDB propeties :param prop_name: property name :param prop_value: property value :return: prop_name and prop_value: clientSideDeduplication values: USE_SPSETTINGS, to use storage policy settings ON_CLIENT, to enable client side deduplication OFF, to disable client side deduplication enableClientSideCache: To set usage of Client Side Cache Values - None(Default) - DoNot Modify the property value True/False - Enable/Disable Cache respectively maxCacheDB: Size of Cache DB if enabled. Default Value: None (use default size) Valid values are: 1024 2048 4096 8192 16384 32768 65536 131072 variable_content_alignment: to increase the effectiveness of deduplication on the client computer. Variable content alignment reduces the amount of data stored during a backup operation. Values - None(Default) - DoNotModify the property value True/False - Enable/Disable optimization respectively high_latency_optimization: To set Optimization for High latency Networks Values - None(Default) - DoNotModify the property value True/False - Enable/Disable optimization respectively",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.add_additional_setting",
"url":37,
"doc":"Adds registry key to the client property Args: category (str)  Category of registry key key_name (str)  Name of the registry key data_type (str)  Data type of registry key Accepted Values: BOOLEAN, INTEGER, STRING, MULTISTRING, ENCRYPTED value (str)  Value of registry key Raises: SDKException: if failed to add if response is empty if response code is not as expected",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.delete_additional_setting",
"url":37,
"doc":"Deletes registry key from the client property Args: category (str)  Category of registry key key_name (str)  Name of the registry key Raises: SDKException: if failed to delete if response is empty if response code is not as expected",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.get_configured_additional_settings",
"url":37,
"doc":"Method to get configured additional settings name",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.release_license",
"url":37,
"doc":"Releases a license from a client Args: license_name (str)  Name of the license to be released. Releases all the licenses in the client if no value is passed. self.consumed_licenses() method will provide all the available license details along with license_name. default: None Raises: SDKException: if failed to release license if response is empty if response code is not as expected",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.retire",
"url":37,
"doc":"Uninstalls the CommVault Software on the client, releases the license and deletes the client. Returns: Job - job object of the uninstall job Raises: SDKException: if failed to retire client if response is empty if response code is not as expected",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.reconfigure_client",
"url":37,
"doc":"Reapplies license to the client Raises: SDKException: if failed to reconfigure client if response is empty if response code is not as expected",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.push_servicepack_and_hotfix",
"url":37,
"doc":"triggers installation of service pack and hotfixes Args: reboot_client (bool)  boolean to specify whether to reboot the client or not default: False run_db_maintenance (bool)  boolean to specify whether to run db maintenance not default: True Returns: object - instance of the Job class for this download job Raises: SDKException: if Download job failed if response is empty if response is not success if another download job is already running  NOTE: push_serivcepack_and_hotfixes cannot be used for revision upgrades",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.repair_software",
"url":37,
"doc":"triggers Repair software on the client machine Args: username (str)  username of the machine to re-install features on default : None password (str)  base64 encoded password default : None reboot_client (bool)  boolean to specify whether to reboot the client or not default: False Returns: object - instance of the Job class for this download job Raises: SDKException: if install job failed if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.get_dag_member_servers",
"url":37,
"doc":"Gets the member servers for an Exchange DAG client. Returns: list - list consisting of the member servers Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.consumed_licenses",
"url":37,
"doc":"returns dictionary of all the license details which is consumed by the client Returns: dict - consisting of all licenses consumed by the client { \"license_name_1\": { \"licenseType\": license_type_id, \"appType\": app_type_id, \"licenseName\": license_name, \"platformType\": platform_type_id }, \"license_name_2\": { \"licenseType\": license_type_id, \"appType\": app_type_id, \"licenseName\": license_name, \"platformType\": platform_type_id } } Raises: SDKException: if failed to get the licenses if response is empty if response code is not as expected"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.cvd_port",
"url":37,
"doc":"Returns CVD port of the client"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.client_guid",
"url":37,
"doc":"Returns client GUID"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.client_type",
"url":37,
"doc":"Returns client Type"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.vm_guid",
"url":37,
"doc":"Returns guid of the vm client"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.set_job_start_time",
"url":37,
"doc":"Sets the jobstarttime for this Client. Raises: SDKException: if failed to set the job start time if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.uninstall_software",
"url":37,
"doc":"Performs readiness check on the client Args: force_uninstall (bool): Uninstalls packages forcibly. Defaults to True. software_list (list): The client_composition will contain the list of components need to be uninstalled. Usage: client_obj.uninstall_software(force_uninstall=False,software_list=[\"Index Store\",\"File System\"]) Returns: The job object of the uninstall software job Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.job_start_time",
"url":37,
"doc":"Returns the job start time"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.readiness_details",
"url":37,
"doc":"returns instance of readiness"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.get_environment_details",
"url":37,
"doc":"Returns a dictionary with the count of fileservers, VM, Laptop for all the service commcells example output: { 'fileServerCount': {'commcell_name': count}, 'laptopCount': {'commcell_name': count}, 'vmCount': {'commcell_name': count} }",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.get_needs_attention_details",
"url":37,
"doc":"Returns a dictionary with the count of AnomalousServers, AnomalousJobs, InfrastructureServers for all the service commcells example output: { 'CountOfAnomalousInfrastructureServers': {'commcell_name': count}, 'CountOfAnomalousServers': {'commcell_name': count}, 'CountOfAnomalousJobs': {'commcell_name': count} }",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.get_mount_volumes",
"url":37,
"doc":"\"Gets mount volumes information for client Args: volume_names (list): List of volume names to be fetched (optional) Returns: volume_guids (list) : Returns list volume dictionaries eg: [{ \"volumeTypeFlags\": 1, \"freeSize\": 63669854208, \"size\": 106779639808, \"guid\": \"8459b015-4c07-4312-8440-a64cb426203c\", \"accessPathList\": [\"C:\"] }]",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.enable_content_indexing",
"url":37,
"doc":"Enables the v1 content indexing on the client",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.disable_content_indexing",
"url":37,
"doc":"Disables the v1 content indexing on the client",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.enable_owner_privacy",
"url":37,
"doc":"Enables the privacy option for client",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.company_name",
"url":37,
"doc":"Returns Company Name to which client belongs to, Returns Empty String, If client belongs to Commcell"
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.check_eligibility_for_migration",
"url":37,
"doc":"Checks whether Client is Eligible for migration Args: destination_company_name (str)  Destination company name to which client is to be migrated Returns: eligibility_status (bool)  True, If Clients are eligible for migration else False Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.disable_owner_privacy",
"url":37,
"doc":"Enables the privacy option for client",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.set_privacy",
"url":37,
"doc":"Internal function to enable/disable privacy for client Args: value(bool): True/False to enable/disable the privacy Raises: SDKException: if setting privacy for client fails if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.change_dynamics365_client_job_results_directory",
"url":37,
"doc":"Change the Job Result Directory of a Dynamics 365 Client Arguments: new_directory_path (str)  The new JR directory Example: \\vm1.example-active-directory.com\\TestFolder1\\JobResults username (str)  username of the machine, if new JobResults directory is a shared/ UNC path. password (str)  Password of the machine, if new JobResults directory is a shared/ UNC path. Raises SDKException (object) Error in moving the job results directory",
"func":1
},
{
"ref":"cvpysdk.clients.onedrive_client.OneDriveClient.change_company_for_client",
"url":37,
"doc":"Changes Company for Client Args: destination_company_name (str)  Destination company name to which client is to be migrated Raises: SDKException: If Client is not eligible for migration if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient",
"url":41,
"doc":"VMClient class is defined in this file. VMClient: Class for a single vm client of the commcell VMClient    = _return_parent_subclient()  Returns the parent subclient where the vm has been backed up _child_job_subclient_details()  returns the subclient details of the child job full_vm_restore_in_place()  Performs in place full vm restore and return job object full_vm_restore_out_of_place()  Performs out of place full vm restore and return job object"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient",
"url":41,
"doc":"Class for representing client of a vm client. Initialise the VM Client class instance. Args: commcell_object (object)  instance of the Commcell class client_name (str)  name of the client client_id (str)  id of the client default: None Returns: object - instance of the VM Client class"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.full_vm_restore_in_place",
"url":41,
"doc":"Restores in place FULL Virtual machine for the client Args:  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_in_place eg: overwrite (bool)  overwrite the existing VM power_on (bool)  power on the restored VM copy_precedence (int)  copy precedence value Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.full_vm_restore_out_of_place",
"url":41,
"doc":"Restores out of place FULL Virtual machine for the client Args:  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_out_of_place ex: restored_vm_name (str)  new name of vm. If nothing is passed, 'del' is appended to the original vm name vcenter_client (str)  name of the vcenter client where the VM should be restored. esx_host (str)  destination esx host. Restores to the source VM esx if this value is not specified Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.update_properties",
"url":37,
"doc":"Updates the client properties Args: properties_dict (dict)  client property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.properties",
"url":37,
"doc":"Returns the client properties"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.latitude",
"url":37,
"doc":"Returns the client latitude from clientRegionInfo GeoLocation"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.longitude",
"url":37,
"doc":"Returns the client Longitude from clientRegionInfo GeoLocation"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.is_vm",
"url":37,
"doc":"Returns True if the given client is a VM else False"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.hyperv_id_of_vm",
"url":37,
"doc":"Returns the Hypervisor ID associated to a VM client"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.associated_client_groups",
"url":37,
"doc":"Returns the list of client groups to which the given client is assocaited with"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.company_id",
"url":37,
"doc":"Returns the client's Company ID"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.name",
"url":37,
"doc":"Returns the Client name"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.display_name",
"url":37,
"doc":"Returns the Client display name"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.description",
"url":37,
"doc":"Returns the Client description"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.timezone",
"url":37,
"doc":"Returns the timezone of the client"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.commcell_name",
"url":37,
"doc":"Returns the Client's commcell name"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.name_change",
"url":37,
"doc":"Returns an instance of Namechange class"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.available_security_roles",
"url":37,
"doc":"Returns the list of available security roles"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.client_id",
"url":37,
"doc":"Treats the client id as a read-only attribute."
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.client_name",
"url":37,
"doc":"Treats the client name as a read-only attribute."
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.client_hostname",
"url":37,
"doc":"Treats the client host name as a read-only attribute."
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.os_info",
"url":37,
"doc":"Treats the os information as a read-only attribute."
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.is_data_recovery_enabled",
"url":37,
"doc":"Treats the is data recovery enabled as a read-only attribute."
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.is_data_management_enabled",
"url":37,
"doc":"Treats the is data management enabled as a read-only attribute."
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.is_ci_enabled",
"url":37,
"doc":"Treats the is online content index enabled as a read-only attribute."
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.is_backup_enabled",
"url":37,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.is_restore_enabled",
"url":37,
"doc":"Treats the is restore enabled as a read-only attribute."
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.is_data_aging_enabled",
"url":37,
"doc":"Treats the is data aging enabled as a read-only attribute."
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.is_intelli_snap_enabled",
"url":37,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.is_privacy_enabled",
"url":37,
"doc":"Returns if client privacy is enabled"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.install_directory",
"url":37,
"doc":"Treats the install directory as a read-only attribute."
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.version",
"url":37,
"doc":"Treats the version as a read-only attribute."
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.service_pack",
"url":37,
"doc":"Treats the service pack as a read-only attribute."
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.owners",
"url":37,
"doc":"Treats the client owners as a read-only attribute."
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.job_results_directory",
"url":37,
"doc":"Treats the job_results_directory pack as a read-only attribute."
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.block_level_cache_dir",
"url":37,
"doc":"Returns the Block level cache directory"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.instance",
"url":37,
"doc":"Returns the value of the instance the client is installed on."
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.log_directory",
"url":37,
"doc":"Returns the path of the log directory on the client."
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.agents",
"url":37,
"doc":"Returns the instance of the Agents class representing the list of Agents installed / configured on the Client."
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.schedules",
"url":37,
"doc":"Returns the instance of the Schedules class representing the Schedules configured on the Client."
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.users",
"url":37,
"doc":"Returns the instance of the Users class representing the list of Users with permissions set on the Client."
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.network",
"url":37,
"doc":"Returns the object of Network class"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.network_throttle",
"url":37,
"doc":"Returns the object of NetworkThrottle class"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.is_cluster",
"url":37,
"doc":"Returns True if the client is of cluster type"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.enable_backup",
"url":37,
"doc":"Enable Backup for this Client. Raises: SDKException: if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.enable_backup_at_time",
"url":37,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  Time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.disable_backup",
"url":37,
"doc":"Disables Backup for this Client. Raises: SDKException: if failed to disable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.enable_restore",
"url":37,
"doc":"Enable Restore for this Client. Raises: SDKException: if failed to enable restore if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.enable_restore_at_time",
"url":37,
"doc":"Disables Restore if not already disabled, and enables at the time specified. Args: enable_time (str)  Time to enable the restore at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  kwargs (dict)  dict of keyword arguments as follows timezone (str)  timezone to be used of the operation  Note make use of TIMEZONES dict in constants.py to pass timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable restore if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.disable_restore",
"url":37,
"doc":"Disables Restore for this Client. Raises: SDKException: if failed to disable restore if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.enable_data_aging",
"url":37,
"doc":"Enable Data Aging for this Client. Raises: SDKException: if failed to enable data aging if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.enable_data_aging_at_time",
"url":37,
"doc":"Disables Data Aging if not already disabled, and enables at the time specified. Args: enable_time (str)  Time to enable the data aging at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  kwargs (dict)  dict of keyword arguments as follows timezone (str)  timezone to be used of the operation  Note make use of TIMEZONES dict in constants.py to pass timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable data aging if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.disable_data_aging",
"url":37,
"doc":"Disables Data Aging for this Client. Raises: SDKException: if failed to disable data aging if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.execute_script",
"url":37,
"doc":"Executes the given script of the script type on this client.  Only scripts of text format are supported , i.e., the scripts should not have any binary/bytes content Args: script_type (str)  type of script to be executed on the client Script Types Supported: JAVA Python PowerShell WindowsBatch UnixShell script (str)  path of the script to be executed on the client script_arguments (str)  arguments to the script default: None wait_for_completion (bool)  boolean specifying whether to wait for the script execution to finish or not default: True Returns: (int, str, str) int - exit code returned from executing the script on the client default: -1 (exit code not returned in the response) str - output returned from executing the script on the client default:  (output not returned in the response) str - error returned from executing the script on the client default:  (error not returned in the response) Raises: SDKException: if script type argument is not of type string if script argument is not of type string if script type is not valid if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.execute_command",
"url":37,
"doc":"Executes a command on this client. Args: command (str)  command in string to be executed on the client script_arguments (str)  arguments to the script default: None wait_for_completion (bool)  boolean specifying whether to wait for the script execution to finish or not default: True Returns: (int, str, str) int - exit code returned from executing the command on the client default: -1 (exit code not returned in the response) str - output returned from executing the command on the client default:  (output not returned in the response) str - error returned from executing the command on the client default:  (error not returned in the response) Raises: SDKException: if command argument is not of type string if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.enable_intelli_snap",
"url":37,
"doc":"Enables Intelli Snap for this Client. Raises: SDKException: if failed to enable intelli snap if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.disable_intelli_snap",
"url":37,
"doc":"Disables Intelli Snap for this Client. Raises: SDKException: if failed to disable intelli snap if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.is_ready",
"url":37,
"doc":"Checks if CommServ is able to communicate to the client. Returns: True - if the CS is able to connect to the client False - if communication fails b/w the CS and the client Raises: SDKException: if response is empty if response is not success"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.is_mongodb_ready",
"url":37,
"doc":"Checks the status mongoDB Returns: True : if the MongoDB is working fine False : if there is any error in mongoDB Raises: SDKException: if response is not success"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.upload_file",
"url":37,
"doc":"Upload the specified source file to destination path on the client machine Args: source_file_path (str)  path on the controller machine destination_folder (str)  path on the client machine where the files are to be copied Raises: SDKException: if failed to upload the file if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.upload_folder",
"url":37,
"doc":"Uploads the specified source dir to destination path on the client machine Args: source_dir (str)  path on the controller machine destination_dir (str)  path on the client machine where the files are to be copied Raises: SDKException: if failed to upload the file if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.start_service",
"url":37,
"doc":"Executes the command on the client machine to start the Commvault service(s). Args: service_name (str)  name of the service to be started default: None Example: GxVssProv(Instance001) Returns: None - if the service was started successfully Raises: SDKException: if failed to start the service",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.stop_service",
"url":37,
"doc":"Executes the command on the client machine to stop the Commvault service(s). Args: service_name (str)  name of the service to be stopped default: None Example: GxVssProv(Instance001) Returns: None - if the service was stopped successfully Raises: SDKException: if failed to stop the service",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.restart_service",
"url":37,
"doc":"Executes the command on the client machine to restart the Commvault service(s). Args: service_name (str)  name of the service to be restarted default: None Example: GxVssProv(Instance001) Returns: None - if the service was restarted successfully Raises: SDKException: if failed to restart the service",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.restart_services",
"url":37,
"doc":"Executes the command on the client machine to restart  ALL services. Args: wait_for_service_restart (bool)  boolean to specify whether to wait for the services to restart, or just execute the command and exit if set to True, the method will wait till the services of the client are up otherwise, the method will trigger a service restart, and exit default: True timeout (int)  timeout  (in minutes) to wait for the services to restart if the services are not restarted by the timeout value, the method will exit out with Exception default: 10 implicit_wait (int)  Time (in seconds) to wait before the readiness is checked. default: 5 Returns: None - if the services were restarted sucessfully Raises: SDKException: if failed to restart the services before the timeout value",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.get_network_summary",
"url":37,
"doc":"Gets the network summary for the client Returns: str - Network Summary Raises: SDKException: if response is not successful",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.change_exchange_job_results_directory",
"url":37,
"doc":"Change the Job Result Directory of an Exchange Online Client Arguments: new_directory_path (str)  The new JR directory Example: C:\\JR or  username (str)  username of the machine, if new JobResults directory is a shared/ UNC path. password (str)  Password of the machine, if new JobResults directory is a shared/ UNC path. Raises SDKException (object) Error in moving the job results directory",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.change_o365_client_job_results_directory",
"url":37,
"doc":"Change the Job Result Directory of a O365 Client Arguments: new_directory_path (str)  The new JR directory Example: C:\\JR or  username (str)  username of the machine, if new JobResults directory is a shared/ UNC path. password (str)  Password of the machine, if new JobResults directory is a shared/ UNC path. Raises SDKException (object) Error in moving the job results directory",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.push_network_config",
"url":37,
"doc":"Performs a push network configuration on the client Raises: SDKException: if input data is invalid if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.add_user_associations",
"url":37,
"doc":"Adds the users to the owners list of this client Args: associations_list (list)  list of owners to be associated with this client Example: associations_list = [ { 'user_name': user1, 'role_name': role1 }, { 'user_name': user2, 'role_name': role2 } ] Note: You can get available roles list using self.available_security_roles",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.add_client_owner",
"url":37,
"doc":"Adds the users to the owners list of this client Args: owner_list (list)  list of owners to be associated with this client Raises: SDKException: if input data is invalid",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.filter_clients_return_displaynames",
"url":37,
"doc":"Gets all the clients associated with the commcell with properties Args: filter_by (str)  filters clients based on criteria Accepted values: 1. OS  kwargs (str)  accepted optional arguments: os_type (str) - accepted values Windows, Unix, NAS url_params (dict) - dict of url parameters and values Example: {\"Hiddenclients\":\"true\"} Returns: list - list of clients of given os_type Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.refresh",
"url":37,
"doc":"Refreshes the properties of the Client.",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.set_encryption_property",
"url":37,
"doc":"updates encryption properties on client Args: enc_setting (str)  sets encryption level on client (USE_SPSETTINGS / OFF/ ON_CLIENT) default : USE_SPSETTINGS key (str)  cipher type key_len (str)  cipher key length to enable encryption : client_object.set_encryption_property(\"ON_CLIENT\", \"TwoFish\", \"256\") to disable encryption : client_object.set_encryption_property(\"OFF\")",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.set_dedup_property",
"url":37,
"doc":"Set DDB propeties :param prop_name: property name :param prop_value: property value :return: prop_name and prop_value: clientSideDeduplication values: USE_SPSETTINGS, to use storage policy settings ON_CLIENT, to enable client side deduplication OFF, to disable client side deduplication enableClientSideCache: To set usage of Client Side Cache Values - None(Default) - DoNot Modify the property value True/False - Enable/Disable Cache respectively maxCacheDB: Size of Cache DB if enabled. Default Value: None (use default size) Valid values are: 1024 2048 4096 8192 16384 32768 65536 131072 variable_content_alignment: to increase the effectiveness of deduplication on the client computer. Variable content alignment reduces the amount of data stored during a backup operation. Values - None(Default) - DoNotModify the property value True/False - Enable/Disable optimization respectively high_latency_optimization: To set Optimization for High latency Networks Values - None(Default) - DoNotModify the property value True/False - Enable/Disable optimization respectively",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.add_additional_setting",
"url":37,
"doc":"Adds registry key to the client property Args: category (str)  Category of registry key key_name (str)  Name of the registry key data_type (str)  Data type of registry key Accepted Values: BOOLEAN, INTEGER, STRING, MULTISTRING, ENCRYPTED value (str)  Value of registry key Raises: SDKException: if failed to add if response is empty if response code is not as expected",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.delete_additional_setting",
"url":37,
"doc":"Deletes registry key from the client property Args: category (str)  Category of registry key key_name (str)  Name of the registry key Raises: SDKException: if failed to delete if response is empty if response code is not as expected",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.get_configured_additional_settings",
"url":37,
"doc":"Method to get configured additional settings name",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.release_license",
"url":37,
"doc":"Releases a license from a client Args: license_name (str)  Name of the license to be released. Releases all the licenses in the client if no value is passed. self.consumed_licenses() method will provide all the available license details along with license_name. default: None Raises: SDKException: if failed to release license if response is empty if response code is not as expected",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.retire",
"url":37,
"doc":"Uninstalls the CommVault Software on the client, releases the license and deletes the client. Returns: Job - job object of the uninstall job Raises: SDKException: if failed to retire client if response is empty if response code is not as expected",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.reconfigure_client",
"url":37,
"doc":"Reapplies license to the client Raises: SDKException: if failed to reconfigure client if response is empty if response code is not as expected",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.push_servicepack_and_hotfix",
"url":37,
"doc":"triggers installation of service pack and hotfixes Args: reboot_client (bool)  boolean to specify whether to reboot the client or not default: False run_db_maintenance (bool)  boolean to specify whether to run db maintenance not default: True Returns: object - instance of the Job class for this download job Raises: SDKException: if Download job failed if response is empty if response is not success if another download job is already running  NOTE: push_serivcepack_and_hotfixes cannot be used for revision upgrades",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.repair_software",
"url":37,
"doc":"triggers Repair software on the client machine Args: username (str)  username of the machine to re-install features on default : None password (str)  base64 encoded password default : None reboot_client (bool)  boolean to specify whether to reboot the client or not default: False Returns: object - instance of the Job class for this download job Raises: SDKException: if install job failed if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.get_dag_member_servers",
"url":37,
"doc":"Gets the member servers for an Exchange DAG client. Returns: list - list consisting of the member servers Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.consumed_licenses",
"url":37,
"doc":"returns dictionary of all the license details which is consumed by the client Returns: dict - consisting of all licenses consumed by the client { \"license_name_1\": { \"licenseType\": license_type_id, \"appType\": app_type_id, \"licenseName\": license_name, \"platformType\": platform_type_id }, \"license_name_2\": { \"licenseType\": license_type_id, \"appType\": app_type_id, \"licenseName\": license_name, \"platformType\": platform_type_id } } Raises: SDKException: if failed to get the licenses if response is empty if response code is not as expected"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.cvd_port",
"url":37,
"doc":"Returns CVD port of the client"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.client_guid",
"url":37,
"doc":"Returns client GUID"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.client_type",
"url":37,
"doc":"Returns client Type"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.vm_guid",
"url":37,
"doc":"Returns guid of the vm client"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.set_job_start_time",
"url":37,
"doc":"Sets the jobstarttime for this Client. Raises: SDKException: if failed to set the job start time if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.uninstall_software",
"url":37,
"doc":"Performs readiness check on the client Args: force_uninstall (bool): Uninstalls packages forcibly. Defaults to True. software_list (list): The client_composition will contain the list of components need to be uninstalled. Usage: client_obj.uninstall_software(force_uninstall=False,software_list=[\"Index Store\",\"File System\"]) Returns: The job object of the uninstall software job Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.job_start_time",
"url":37,
"doc":"Returns the job start time"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.readiness_details",
"url":37,
"doc":"returns instance of readiness"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.get_environment_details",
"url":37,
"doc":"Returns a dictionary with the count of fileservers, VM, Laptop for all the service commcells example output: { 'fileServerCount': {'commcell_name': count}, 'laptopCount': {'commcell_name': count}, 'vmCount': {'commcell_name': count} }",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.get_needs_attention_details",
"url":37,
"doc":"Returns a dictionary with the count of AnomalousServers, AnomalousJobs, InfrastructureServers for all the service commcells example output: { 'CountOfAnomalousInfrastructureServers': {'commcell_name': count}, 'CountOfAnomalousServers': {'commcell_name': count}, 'CountOfAnomalousJobs': {'commcell_name': count} }",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.get_mount_volumes",
"url":37,
"doc":"\"Gets mount volumes information for client Args: volume_names (list): List of volume names to be fetched (optional) Returns: volume_guids (list) : Returns list volume dictionaries eg: [{ \"volumeTypeFlags\": 1, \"freeSize\": 63669854208, \"size\": 106779639808, \"guid\": \"8459b015-4c07-4312-8440-a64cb426203c\", \"accessPathList\": [\"C:\"] }]",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.enable_content_indexing",
"url":37,
"doc":"Enables the v1 content indexing on the client",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.disable_content_indexing",
"url":37,
"doc":"Disables the v1 content indexing on the client",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.enable_owner_privacy",
"url":37,
"doc":"Enables the privacy option for client",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.company_name",
"url":37,
"doc":"Returns Company Name to which client belongs to, Returns Empty String, If client belongs to Commcell"
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.check_eligibility_for_migration",
"url":37,
"doc":"Checks whether Client is Eligible for migration Args: destination_company_name (str)  Destination company name to which client is to be migrated Returns: eligibility_status (bool)  True, If Clients are eligible for migration else False Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.disable_owner_privacy",
"url":37,
"doc":"Enables the privacy option for client",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.set_privacy",
"url":37,
"doc":"Internal function to enable/disable privacy for client Args: value(bool): True/False to enable/disable the privacy Raises: SDKException: if setting privacy for client fails if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.change_dynamics365_client_job_results_directory",
"url":37,
"doc":"Change the Job Result Directory of a Dynamics 365 Client Arguments: new_directory_path (str)  The new JR directory Example: \\vm1.example-active-directory.com\\TestFolder1\\JobResults username (str)  username of the machine, if new JobResults directory is a shared/ UNC path. password (str)  Password of the machine, if new JobResults directory is a shared/ UNC path. Raises SDKException (object) Error in moving the job results directory",
"func":1
},
{
"ref":"cvpysdk.clients.vmclient.VMClient.change_company_for_client",
"url":37,
"doc":"Changes Company for Client Args: destination_company_name (str)  Destination company name to which client is to be migrated Raises: SDKException: If Client is not eligible for migration if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.commcell",
"url":42,
"doc":"Main file for performing operations on Commcell via REST API. Commcell is the main class for the CVPySDK python package. Commcell: Initializes a connection to the commcell and is a wrapper for the entire commcell ops. Commcell: __init__()  initialize instance of the Commcell class __repr__()  return the name of the commcell, user is connected to, along with the user name of the connected user __enter__()  returns the current instance, using the \"with\" context manager __exit__()  logs out the user associated with the current instance _update_response_()  returns only the relevant response for the response received from the server _remove_attribs_()  removes all the attributs associated with the commcell object upon call to the logout method _get_commserv_details()  gets the details of the commserv, the Commcell class instance is initialized for _qoperation_execute()  runs the qoperation execute rest api on specified input xml _qoperation_execscript()  runs the qoperation execute qscript with specified arguements get_gxglobalparam_value()  makes a rest api call to get values from GXGlobalParam _set_gxglobalparam_value  updates GXGlobalParam(commcell level configuration parameters) verify_owner_assignment_config()  verifies that the ownership assignments settings are configured and set properly logout()  logs out the user associated with the current instance request()  runs an input HTTP request on the API specified, and returns its response send_mail()  sends an email to the specified user refresh()  refresh the properties associated with the Commcell class instance run_data_aging()  triggers data aging job from the commcell level get_saml_token()  returns the SAML token for the currently logged-in user add_additional_setting()  adds registry key to the commserve property delete_additional_setting()  deletes registry key from the commserve property get_configured_additional_setting()  To get configured additional settings from the commserve property download_software()  triggers the Download Software job with the given options copy_software()  triggers the Copy Software job with the given options sync_remote_cache()  syncs remote cache get_remote_cache()  returns the instance of the RemoteCache class push_servicepack_and_hotfixes()  triggers installation of service pack and hotfixes install_software()  triggers the install Software job with the given options remote_cache_clients()  fetches the list of Remote Cache configured for a particular Admin/Tenant enable_auth_code()  executes the request on the server to enable Auth Code for installation on the commcell enable_shared_laptop()  Executes the request on the server to enable Shared Laptop on commcell disable_shared_laptop()  Executes the request on the server to disable Shared Laptop on commcell execute_qcommand()  executes the ExecuteQCommand API on the commcell add_associations_to_saml_app()  Adds the given user under associations of the SAML app _get_registered_service_commcells()  gets the list of registered service commcells register_commcell()  registers a commcell sync_service_commcell()  Sync a service commcell unregister_commcell()  unregisters a commcell is_commcell_registered()  checks if the commcell is registered _get_redirect_rules_service_commcell()  gets the redirect rules of service commcell get_eligible_service_commcells()  gets the eligible service commcells to redirect get_default_plan()  Get the default plans associed with the commcell get_security_associations()  Get the security associations associated with the commcell get_password_encryption_config()  Get the Password encryption configuration for the commcell get_email_settings()  Get the SMTP settings for the commcell set_email_settings()  Set the SMTP settings for the commcell get_commcell_properties()  Get the general, privacy and other properties of commcell get_commcell_organization_properties()  Get the organization properties of commcell add_service_commcell_associations()  adds an association for an entity on a service commcell get_service_commcell_associations()  gets the association details for entity on commcell remove_service_commcell_association()  removes association for an entity on all service commcells enable_tfa()  Enables two factor authentication on this commcell disable_tfa()  Disables two factor authentication on this commcell _get_commserv_metadata()  Returns back the commserv metadata on this commcell _get_commserv_oem_id()  Returns back the commserv OEM ID on this commcell enable_privacy()  Enables users to enable data privacy on commcell disable_privacy()  Enables users to disable data privacy on commcell switch_to_company()  Login to company as an operator, just like using switcher on Command Center reset_company()  Switch back to Commcell allow_users_to_enable_passkey()  Enable or Disable passkey authorization for company administrators and client owners get_sla_configuration()  gets the sla configuration details at commcell level get_workload_region()  gets the current workload region get_user_suggestions()  gets details of entities matching given term enable_limit_user_logon_attempts()  Enables limit user logon attempts feature. disable_limit_user_logon_attempts()  Disables limit user logon attempts feature. Commcell instance Attributes                commserv_guid  returns the  CommServ GUID, class instance is initalized for  commserv_hostname  returns the hostname of the  CommServ , class instance is initalized for  commserv_name  returns the  CommServ name, class instance is initalized for  commserv_timezone  returns the time zone of the  CommServ , class instance is initalized for  commserv_timezone_name  returns the name of the  CommServ time zone, class instance is initalized for  commserv_version  returns the ContentStore version installed on the  CommServ , class instance is initalized for  version  returns the complete version info of the commserv  commcell_id  returns the  CommCell ID  commserv_metadata  returns the commserv metadata of the commserv  commserv_oem_id  returns the commserv OEM ID of the commserv  webconsole_hostname  returns the host name of the  webconsole , class instance is connected to  auth_token  returns the  Authtoken for the current session to the commcell  commcell_username  returns the associated  user name for the current session to the commcell  device_id  returns the id associated with the calling machine  name_change  returns the name change object of the commcell  clients  returns the instance of the  Clients class, to interact with the clients added on the Commcell  commserv_cache  returns the instance of the  CommServeCache class  media_agents  returns the instance of the  MediaAgents class, to interact with the media agents associated with the Commcell class instance  workflows  returns the instance of the  WorkFlow class, to interact with the workflows deployed on the Commcell  alerts  returns the instance of the  Alerts class, to interact with the alerts available on the Commcell  disk_libraries  returns the instance of the  DiskLibraries class, to interact with the disk libraries added on the Commcell  tape_libraries  returns the instance of the  TapeLibraries class, to interact with the tape libraries added on the Commcell  storage_policies  returns the instance of the  StoragePolicies class, to interact with the storage policies available on the Commcell  schedule_policies  returns the instance of the  SchedulePolicies class, to interact with the schedule policies added to the Commcell  schedules  returns the instance of the  Schedules class, to interact with the schedules associated to the Commcell  user_groups  returns the instance of the  UserGroups class, to interact with the user groups added to the Commcell  domains  returns the instance of the  Domains class, to interact with the domains added to the Commcell  client_groups  returns the instance of the  ClientGroups class, to interact with the client groups added to the Commcell  global_filters  returns the instance of the  GlobalFilters class, to interact with the global filters available on the Commcell  datacube  returns the instance of the  Datacube class, to interact with the datacube engine deployed on the Commcell  content_analyzers  returns the instance of the  ContentAnalyzers class, to interact with the CA cloud deployed on the Commcell  activate  returns the instance of the  Activate class, to interact with activate apps on the Commcell  export_sets  returns the instance of the  ExportSets class to interact with compliance search export sets on the Commcell  plans  returns the instance of the  Plans class, to interact with the plans associated with the Commcell  job_controller  returns the instance of the  JobController class, to interact with all the jobs finished / running on the Commcell  users  returns the instance of the  Users class, to interact with the users added to the Commcell  roles  returns the instance of the  Roles class, to interact with the roles added to the Commcell  credentials  returns the instance of the  Credentials class, to interact with the credentials records added to the Commcell  download_center  returns the instance of the  DownloadCenter class, to interact with the download center repositories deployed on the Commcell WebConsole  organizations  returns the instance of the  Organizations class, to interact with the organizations/companies added on the Commcell  storage_pools  returns the instance of the  StoragePools class, to interact with the storage pools added to the Commcell Admin Console  monitoring_policies  returns the instance of the  MonitoringPolicies class, to interact with the MonitoringPolicies added to the Commcell  operation_window  returns the instance of the 'OperationWindow' class, to interact with the opeartion windows of commcell  array_management  returns the instance of the  ArrayManagement class, to perform SNAP related operations on the Commcell  activity_control  returns the instance of the  ActivityControl class, to interact with the Activity Control on the Commcell  event_viewer  returns the instance of the  Events class, to interact with the Events associated on the Commcell  disasterrecovery  returns the instance of the 'DisasterRecovery' class, to run disaster recovery backup , restore operations.  commserv_client  returns the client object associated with the commserver  identity_management  returns the instance of the 'IdentityManagementApps class to perform identity management operations on the commcell class  system  returns the instance of the 'System' class to perform system related operations on the commcell  commcell_migration  returns the instance of the 'CommCellMigration' class, to interact with the Commcell Export & Import on the Commcell  grc  returns the instance of the 'GlobalRepositoryCell' class, to interact with the registered commcells and setup/modify GRC schedules  backup_network_pairs  returns the instance of 'BackupNetworkPairs' class to perform backup network pairs operations on the commcell class  recovery_targets  Returns the instance of RecoverTargets class  reports  Return the instance of Report class  job_management  Returns an instance of the JobManagement class.  hac_clusters  Returns an instance of the HAC Clusters class  index_pools  Returns an instance of the IndexPools class  deduplications_engines  Returnes the instance of the DeduplicationEngines class to interact wtih deduplication enines available on the commcell  two_factor_authentication  Returns an instance of the TwoFactorAuthentication class.  is_tfa_enabled  Returns the status of tfa on this commcell.  tfa_enabled_user_groups  Returns user group names on which tfa is enabled. only for user group inclusion tfa.  is_linux_commserv  boolean specifying if CommServer is installed on linux cs.  default_timezone  Default timezone used by all the operations performed via cvpysdk.  metallic  Returns the instance of CVMetallic class  key_management_servers  Returns the instance of  KeyManagementServers class"
},
{
"ref":"cvpysdk.commcell.USER_DOES_NOT_HAVE_PERMISSION",
"url":42,
"doc":"str: Message to be returned to the user, when trying the get the value of an attribute of the Commcell class, after the user was logged out."
},
{
"ref":"cvpysdk.commcell.Commcell",
"url":42,
"doc":"Class for establishing a session to the Commcell via Commvault REST API. Initialize the Commcell object with the values required for doing the API operations. Commcell Username and Password can be None, if QSDK / SAML token is being given as the input by the user. If both the Commcell Password and the Authtoken are None, then the user will be prompted to enter the password via command line. Args: webconsole_hostname (str)  webconsole host Name / IP address e.g.: - webclient.company.com - xxx.xxx.xxx.xxx commcell_username (str)  username for log in to the commcell console default: None commcell_password (str)  plain-text password for log in to the console default: None authtoken (str)  QSDK / SAML token for log in to the console default: None verify_ssl (str)  Pass this choose to verify SSL requests to commcell default: True  Note : If SAML token is to be used to login to service commcell please set is_service_commcell=True force_https (bool)  boolean flag to specify whether to force the connection to the commcell only via HTTPS if the flag is set to  False , SDK first tries to connect to the commcell via HTTPS, but if that fails, it tries to connect via HTTP if flag is set to  True , it'll only try via HTTPS, and exit if it fails default: False certificate_path (str)  path of the CA_BUNDLE or directory with certificates of trusted CAs (including trusted self-signed certificates) default: None  Note If certificate path is provided, force_https is set to True is_service_commcell (bool)  True if login into service (child commcell) False if it is a normal login default: None  Note In case of Multicommcell Login, if we wanted to login into child commcell (Service commcell) set is_service_commcell to True  kwargs: web_service_url (str)  url of webservice for the api requests Returns: object - instance of this class Raises: SDKException: if the web service is down or not reachable if no token is received upon log in"
},
{
"ref":"cvpysdk.commcell.Commcell.qoperation_execute",
"url":42,
"doc":"Wrapper for def _qoperation_execute(self, request_xml) Args: request_xml (str)  request xml that is to be passed  kwargs: return_xml (bool)  if True, will get the xml response instead of json Returns: dict - JSON response received from the server. Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.commcell_id",
"url":42,
"doc":"Returns the ID of the CommCell."
},
{
"ref":"cvpysdk.commcell.Commcell.get_gxglobalparam_value",
"url":42,
"doc":"Makes a rest api call to get values from GXGlobalParam Args: parameters (str/list)  The single parameter name or list of parameter names to get value for Returns: str  If parameters argument is a string. None if the parameter is not found in response list  If parameters argument is a list. Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.verify_owner_assignment_config",
"url":42,
"doc":"Verifies that the ownership assignments settings are configured and set properly Returns: dict - json response received from the server Raises: SDKException: if response is empty if response is not success if ownership assignment is not correct",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.commserv_guid",
"url":42,
"doc":"Returns the GUID of the CommServ."
},
{
"ref":"cvpysdk.commcell.Commcell.commserv_hostname",
"url":42,
"doc":"Returns the hostname of the CommServ."
},
{
"ref":"cvpysdk.commcell.Commcell.commserv_name",
"url":42,
"doc":"Returns the name of the CommServ."
},
{
"ref":"cvpysdk.commcell.Commcell.commserv_timezone",
"url":42,
"doc":"Returns the time zone of the CommServ."
},
{
"ref":"cvpysdk.commcell.Commcell.commserv_timezone_name",
"url":42,
"doc":"Returns the name of the time zone of the CommServ."
},
{
"ref":"cvpysdk.commcell.Commcell.commserv_version",
"url":42,
"doc":"Returns the version installed on the CommServ. Example: 19"
},
{
"ref":"cvpysdk.commcell.Commcell.version",
"url":42,
"doc":"Returns the complete version info of the commserv Example: 11.19.1"
},
{
"ref":"cvpysdk.commcell.Commcell.webconsole_hostname",
"url":42,
"doc":"Returns the value of the host name of the webconsole used to connect to the Commcell."
},
{
"ref":"cvpysdk.commcell.Commcell.auth_token",
"url":42,
"doc":"Returns the Authtoken for the current session to the Commcell."
},
{
"ref":"cvpysdk.commcell.Commcell.commcell_username",
"url":42,
"doc":"Returns the logged in user name"
},
{
"ref":"cvpysdk.commcell.Commcell.device_id",
"url":42,
"doc":"Returns the value of the Device ID attribute."
},
{
"ref":"cvpysdk.commcell.Commcell.name_change",
"url":42,
"doc":"Returns an instance of Namechange class"
},
{
"ref":"cvpysdk.commcell.Commcell.clients",
"url":42,
"doc":"Returns the instance of the Clients class."
},
{
"ref":"cvpysdk.commcell.Commcell.commserv_cache",
"url":42,
"doc":"Returns the instance of the CommServeCache class."
},
{
"ref":"cvpysdk.commcell.Commcell.index_servers",
"url":42,
"doc":"Returns the instance of the Index Servers class."
},
{
"ref":"cvpysdk.commcell.Commcell.hac_clusters",
"url":42,
"doc":"Returns the instance of the HAC Clusters class."
},
{
"ref":"cvpysdk.commcell.Commcell.index_pools",
"url":42,
"doc":"Returns the instance of the HAC Clusters class."
},
{
"ref":"cvpysdk.commcell.Commcell.media_agents",
"url":42,
"doc":"Returns the instance of the MediaAgents class."
},
{
"ref":"cvpysdk.commcell.Commcell.workflows",
"url":42,
"doc":"Returns the instance of the Workflows class."
},
{
"ref":"cvpysdk.commcell.Commcell.alerts",
"url":42,
"doc":"Returns the instance of the Alerts class."
},
{
"ref":"cvpysdk.commcell.Commcell.disk_libraries",
"url":42,
"doc":"Returns the instance of the DiskLibraries class."
},
{
"ref":"cvpysdk.commcell.Commcell.tape_libraries",
"url":42,
"doc":"Returns the instance of the TapeLibraries class"
},
{
"ref":"cvpysdk.commcell.Commcell.storage_policies",
"url":42,
"doc":"Returns the instance of the StoragePolicies class."
},
{
"ref":"cvpysdk.commcell.Commcell.schedule_policies",
"url":42,
"doc":"Returns the instance of the SchedulePolicies class."
},
{
"ref":"cvpysdk.commcell.Commcell.schedules",
"url":42,
"doc":"Returns the instance of the Schedules class."
},
{
"ref":"cvpysdk.commcell.Commcell.policies",
"url":42,
"doc":"Returns the instance of the Policies class."
},
{
"ref":"cvpysdk.commcell.Commcell.deduplication_engines",
"url":42,
"doc":"Returns the instance of the Deduplicationengines class."
},
{
"ref":"cvpysdk.commcell.Commcell.user_groups",
"url":42,
"doc":"Returns the instance of the UserGroups class."
},
{
"ref":"cvpysdk.commcell.Commcell.domains",
"url":42,
"doc":"Returns the instance of the UserGroups class."
},
{
"ref":"cvpysdk.commcell.Commcell.client_groups",
"url":42,
"doc":"Returns the instance of the ClientGroups class."
},
{
"ref":"cvpysdk.commcell.Commcell.global_filters",
"url":42,
"doc":"Returns the instance of the GlobalFilters class."
},
{
"ref":"cvpysdk.commcell.Commcell.datacube",
"url":42,
"doc":"Returns the instance of the Datacube class."
},
{
"ref":"cvpysdk.commcell.Commcell.content_analyzers",
"url":42,
"doc":"Returns the instance of the ContentAnalyzers class."
},
{
"ref":"cvpysdk.commcell.Commcell.activate",
"url":42,
"doc":"Returns the instance of the ContentAnalyzers class."
},
{
"ref":"cvpysdk.commcell.Commcell.export_sets",
"url":42,
"doc":"Returns the instance of the ExportSets class."
},
{
"ref":"cvpysdk.commcell.Commcell.plans",
"url":42,
"doc":"Returns the instance of the Plans class."
},
{
"ref":"cvpysdk.commcell.Commcell.job_controller",
"url":42,
"doc":"Returns the instance of the Jobs class."
},
{
"ref":"cvpysdk.commcell.Commcell.users",
"url":42,
"doc":"Returns the instance of the Users class."
},
{
"ref":"cvpysdk.commcell.Commcell.roles",
"url":42,
"doc":"Returns the instance of the Roles class."
},
{
"ref":"cvpysdk.commcell.Commcell.credentials",
"url":42,
"doc":"Returns the instance of the Credentials class."
},
{
"ref":"cvpysdk.commcell.Commcell.download_center",
"url":42,
"doc":"Returns the instance of the DownloadCenter class."
},
{
"ref":"cvpysdk.commcell.Commcell.organizations",
"url":42,
"doc":"Returns the instance of the Organizations class."
},
{
"ref":"cvpysdk.commcell.Commcell.storage_pools",
"url":42,
"doc":"Returns the instance of the StoragePools class."
},
{
"ref":"cvpysdk.commcell.Commcell.monitoring_policies",
"url":42,
"doc":"Returns the instance of the MonitoringPolicies class."
},
{
"ref":"cvpysdk.commcell.Commcell.operation_window",
"url":42,
"doc":"Returns the instance of the OperationWindow class."
},
{
"ref":"cvpysdk.commcell.Commcell.activity_control",
"url":42,
"doc":"Returns the instance of the ActivityControl class."
},
{
"ref":"cvpysdk.commcell.Commcell.event_viewer",
"url":42,
"doc":"Returns the instance of the Event Viewer class."
},
{
"ref":"cvpysdk.commcell.Commcell.array_management",
"url":42,
"doc":"Returns the instance of the ArrayManagement class."
},
{
"ref":"cvpysdk.commcell.Commcell.disasterrecovery",
"url":42,
"doc":"Returns the instance of the DisasterRecovery class."
},
{
"ref":"cvpysdk.commcell.Commcell.identity_management",
"url":42,
"doc":"Returns the instance of the IdentityManagementApps class."
},
{
"ref":"cvpysdk.commcell.Commcell.system",
"url":42,
"doc":"Returns the instance of the System class."
},
{
"ref":"cvpysdk.commcell.Commcell.commserv_client",
"url":42,
"doc":"Returns the instance of the Client class for the CommServ client."
},
{
"ref":"cvpysdk.commcell.Commcell.commcell_migration",
"url":42,
"doc":"Returns the instance of the CommcellMigration class"
},
{
"ref":"cvpysdk.commcell.Commcell.grc",
"url":42,
"doc":"Returns the instance of the GlobalRepositoryCell class"
},
{
"ref":"cvpysdk.commcell.Commcell.registered_routing_commcells",
"url":42,
"doc":"Returns the dictionary consisting of all registered commcells and their info dict - consists of all registered routing commcells { \"commcell_name1:{ details related to commcell_name1 }, \"commcell_name2:{ details related to commcell_name2 } }"
},
{
"ref":"cvpysdk.commcell.Commcell.registered_commcells",
"url":42,
"doc":"Returns the dictionary consisting of all registered commcells and their info dict - consists of all registered routing commcells { \"commcell_name1:{ details related to commcell_name1 }, \"commcell_name2:{ details related to commcell_name2 } }"
},
{
"ref":"cvpysdk.commcell.Commcell.redirect_rules_of_service",
"url":42,
"doc":"Returns the list of redirect rules from service commcell list - consists of redirect rules of service commcell ['abc.com','commvault-nj']"
},
{
"ref":"cvpysdk.commcell.Commcell.replication_groups",
"url":42,
"doc":"Returns the instance of ReplicationGroups class"
},
{
"ref":"cvpysdk.commcell.Commcell.failover_groups",
"url":42,
"doc":"Returns the instance of FailoverGroups class"
},
{
"ref":"cvpysdk.commcell.Commcell.recovery_targets",
"url":42,
"doc":"Returns the instance of RecoverTargets class"
},
{
"ref":"cvpysdk.commcell.Commcell.cleanroom_recovery_groups",
"url":42,
"doc":"Returns the instance of RecoveryGroups class"
},
{
"ref":"cvpysdk.commcell.Commcell.blr_pairs",
"url":42,
"doc":"Returns the instance of BLRPairs class"
},
{
"ref":"cvpysdk.commcell.Commcell.backup_network_pairs",
"url":42,
"doc":"Returns the instance of BackupNetworkPairs class"
},
{
"ref":"cvpysdk.commcell.Commcell.reports",
"url":42,
"doc":"Returns the instance of the Report class"
},
{
"ref":"cvpysdk.commcell.Commcell.job_management",
"url":42,
"doc":"Returns the instance of the JobManagement class."
},
{
"ref":"cvpysdk.commcell.Commcell.commcells_for_user",
"url":42,
"doc":"returns the list of accessible commcells to logged in user list - contains the list of accessible commcells ['cc1','cc2']"
},
{
"ref":"cvpysdk.commcell.Commcell.commserv_metadata",
"url":42,
"doc":"Returns the metadata of the commserv."
},
{
"ref":"cvpysdk.commcell.Commcell.commserv_oem_id",
"url":42,
"doc":"Returns the OEM ID of the commserve"
},
{
"ref":"cvpysdk.commcell.Commcell.metallic",
"url":42,
"doc":"Returns the instance of the Metallic class."
},
{
"ref":"cvpysdk.commcell.Commcell.is_privacy_enabled",
"url":42,
"doc":"Method to return if the privacy is enabled at commcell level or not"
},
{
"ref":"cvpysdk.commcell.Commcell.key_management_servers",
"url":42,
"doc":"Returns the instance of the KeyManagementServers class."
},
{
"ref":"cvpysdk.commcell.Commcell.regions",
"url":42,
"doc":"Returns the instance of the Regions class."
},
{
"ref":"cvpysdk.commcell.Commcell.logout",
"url":42,
"doc":"Logs out the user associated with the current instance.",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.request",
"url":42,
"doc":"Runs the request of the type specified on the request URL, with the body passed in the arguments. Args: request_type (str)  type of HTTP request to run on the Commcell e.g.; - POST - GET - PUT - DELETE request_url (str)  API name to run the request on with params, if any e.g.; - Backupset - Agent - Client - Client/{clientId} -  . etc. request_body (dict)  JSON request body to pass along with the request default: None Returns: object - the response received from the server",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.send_mail",
"url":42,
"doc":"Sends a mail to the specified email address from the email asscoiated to this user Args: receivers (list)  list of email addresses to whom the email is to be sent subject (str)  subject of the email that is to be sent to the user body (str)  email body that is to be included in the email copy_sender (bool)  copies the sender in the html report that is sent is_html_content (bool)  determines if the email body has html content True - the email body has html content False - the email content is plain text Raises: SDKException: if failed to send an email to specified user if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.refresh",
"url":42,
"doc":"Refresh the properties of the Commcell.",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.get_remote_cache",
"url":42,
"doc":"Returns the instance of the RemoteCache class.",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.run_data_aging",
"url":42,
"doc":"Runs the Data Aging from Commcell,SP and copy level",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.get_saml_token",
"url":42,
"doc":"Returns the SAML token for the currently logged-in user. Args: validity (int)  validity of the SAML token,  in minutes default: 30 Returns: str - SAML token string received from the server",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.add_additional_setting",
"url":42,
"doc":"Adds registry key to the commserve property. Args: category (str)  Category of registry key key_name (str)  Name of the registry key data_type (str)  Data type of registry key Accepted Values: - BOOLEAN - INTEGER - STRING - MULTISTRING - ENCRYPTED value (str)  Value of registry key Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.delete_additional_setting",
"url":42,
"doc":"Deletes registry key from the commserve property. Args: category (str)  Category of registry key key_name (str)  Name of the registry key Returns: None Raises: SDKException: if failed to delete if response is empty if response code is not as expected",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.get_configured_additional_setting",
"url":42,
"doc":"Method to get configured additional settings name",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.protected_vms",
"url":42,
"doc":"Returns all the protected VMs for the particular client for passed days Args: days: Protected VMs for days ex: if value is 30 , returns VM protected in past 30 days limit: Number of Protected VMs ex: if value is 50, returns 50 protected vms are returned if value is 0, all the protected vms are returned default value is 100 Returns: vm_dict - all properties of VM protected for passed days",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.sync_remote_cache",
"url":42,
"doc":"Syncs remote cache Args: client_list (list)  list of client names. Default is None. By default all remote cache clients are synced Returns: object - instance of the Job class for sync job Raises: SDKException: if sync job failed if response is empty if response is not success if another sync job is running with the given client",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.download_software",
"url":42,
"doc":"Downloads the os packages on the commcell Args: options (enum)  Download option to download software os_list (list of enum)  list of windows/unix packages to be downloaded service_pack (int)  service pack to be downloaded cu_number (int)  maintenance release number sync_cache (bool)  True if download and sync False only download sync_cache_list (list)  list of names of remote caches to sync use None to sync all caches Returns: object - instance of the Job class for this download job Raises: SDKException: if Download job failed if response is empty if response is not success if another download job is running Usage: - if download_software is not given any parameters it takes default value of latest service pack for options and downloads WINDOWS_64 package >>> commcell_obj.download_software() - DownloadOptions and DownloadPackages enum is used for providing input to the download software method, it can be imported by >>> from cvpysdk.deployment.deploymentconstants import DownloadOptions from cvpysdk.deployment.deploymentconstants import DownloadPackages - sample method calls for different options, for latest service pack >>> commcell_obj.download_software( options=DownloadOptions.LATEST_SERVICEPACK.value, os_list=[DownloadPackages.WINDOWS_64.value] ) - For Latest hotfixes for the installed service pack >>> commcell_obj.download_software( options='DownloadOptions.LATEST_HOTFIXES.value', os_list=[DownloadPackages.WINDOWS_64.value, DownloadPackages.UNIX_LINUX64.value] ) - For service pack and hotfixes >>> commcell_obj.download_software( options='DownloadOptions.SERVICEPACK_AND_HOTFIXES.value', os_list=[DownloadPackages.UNIX_MAC.value], service_pack=13 )  NOTE: service_pack parameter must be specified for third option",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.copy_software",
"url":42,
"doc":"copies media from the specified location on the commcell Args: media_loc (str)  Media Location to be used for copy software username (str)  username to authenticate to external location password (str)  password to authenticate to external location sync_cache (bool)  True if download and sync False only download schedule_pattern(dict)  pattern for schedule task Returns: object - instance of the Job class for this copy software job Raises: SDKException: if Download job failed if response is empty if response is not success if another download job is running Usage: - if media_location directory is local to the machine - username and password is not needed >>> commcell_obj.copy_software(media_loc = \"C:\\Downloads\\Media\") - if Media_location directory is remote- username and passsword(base 64 encoded) are needed to authenticate the cache >>> commcell_obj.copy_software( media_loc = \"\\subdomain.company.com\\Media\", username = \"domainone\\userone\", password = \"base64encoded password\" )",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.push_servicepack_and_hotfix",
"url":42,
"doc":"triggers installation of service pack and hotfixes Args: client_computers (list)  Client machines to install service pack on client_computer_groups (list)  Client groups to install service pack on all_client_computers (bool)  boolean to specify whether to install on all client computers or not default: False all_client _computer_groups (bool)  boolean to specify whether to install on all client computer groups or not default: False reboot_client (bool)  boolean to specify whether to reboot the client or not default: False run_db_maintenance (bool)  boolean to specify whether to run db maintenance not default: True maintenance_release_only (bool)  for clients of feature releases lesser than CS, this option maintenance release of that client FR, if present in cache  kwargs: (dict)  Key value pairs for supporting conditional initializations Supported - schedule_pattern (dict)  Request JSON for scheduling the operation Returns: object - instance of the Job/Task class for this download Raises: SDKException: if schedule is not of type dictionary if Download job failed if response is empty if response is not success if another download job is already running  NOTE: push_serivcepack_and_hotfixes cannot be used for revision upgrades",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.install_software",
"url":42,
"doc":"Installs the selected features in the selected clients Args: client_computers (list)  list of hostnames/IP address to install the features on default : None windows_features (list of enum)  list of windows features to be installed default : None unix_features (list of enum)  list of unix features to be installed default : None username (str)  username of the machine to install features on default : None password (str)  base64 encoded password default : None install_path (str)  Install to a specified path on the client default : None log_file_loc (str)  Install to a specified log path on the client default : None client_group_name (list)  List of client groups for the client default : None storage_policy_name (str)  Storage policy for the default subclient default : None sw_cache_client (str)  Remote Cache Client Name/ Over-riding Software Cache default : None (Use CS Cache by default)  kwargs: (dict)  Key value pairs for supporting conditional initializations Supported - install_flags (dict)  dictionary of install flag values default : None Ex : install_flags = {\"preferredIPfamily\":2, \"install32Base\":True} db2_logs_location (dict) - dictionary of db2 logs location default : None Ex: db2_logs_location = { \"db2ArchivePath\": \"/opt/Archive/\", \"db2RetrievePath\": \"/opt/Retrieve/\", \"db2AuditErrorPath\": \"/opt/Audit/\" } Returns: object - instance of the Job class for this install_software job Raises: SDKException: if install job failed if response is empty if response is not success Usage: - UnixDownloadFeatures and WindowsDownloadFeatures enum is used for providing input to the install_software method, it can be imported by >>> from cvpysdk.deployment.deploymentconstants import UnixDownloadFeatures from cvpysdk.deployment.deploymentconstants import WindowsDownloadFeatures - sample method call >>> commcell_obj.install_software( client_computers=[win_machine1, win_machine2], windows_features=[WindowsDownloadFeatures.FILE_SYSTEM.value], unix_features=None, username='username', password='password', install_path='/opt/commvault', log_file_loc='/var/log', client_group_name=[My_Servers], storage_policy_name='My_Storage_Policy', sw_cache_client=\"remote_cache_client_name\" install_flags={\"preferredIPFamily\":2})  NOTE: Either Unix or Windows clients_computers should be chosen and not both",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.remote_cache_clients",
"url":42,
"doc":"Fetches the List of Remote Cache configured for a particular Admin/Tenant :return: List of Remote Cache configured"
},
{
"ref":"cvpysdk.commcell.Commcell.enable_auth_code",
"url":42,
"doc":"Executes the request on the server to enable Auth Code for installation on commcell Args: None Returns: str - auth code generated from the server Raises: SDKException: if failed to enable auth code generation if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.enable_shared_laptop",
"url":42,
"doc":"Executes the request on the server to enable Shared Laptop on commcell Args: None Returns: None Raises: SDKException: if response is empty if failed to enable shared laptop if response is not success",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.disable_shared_laptop",
"url":42,
"doc":"Executes the request on the server to disable Shared Laptop on commcell Args: None Returns: None Raises: SDKException: if response is empty if failed to disable shared laptop if response is not success",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.enable_privacy",
"url":42,
"doc":"Enables users to enable data privacy on commcell",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.disable_privacy",
"url":42,
"doc":"Enables users to disable data privacy on commcell",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.set_privacy",
"url":42,
"doc":"Method to enable/disble privacy Args: value (bool): True/False to enable/disable privacy Raises: SDKException: if response is empty if failed to disable privacy if response is not success",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.get_commcell_properties",
"url":42,
"doc":"Get Commcell properties Returns: (dict) \"hostName\": String, \"enableSharedLaptopUsage\": Boolean, \"enableTwoFactorAuthentication\": Boolean, \"networkErrorRetryCount\": Number, \"useUPNForEmail\": Boolean, \"flags\": Number, \"description\": String, \"networkErrorRetryFreq\": Number, \"autoClientOwnerAssignmentType\": Number, \"networkErrorRetryFlag\": Boolean, \"allowUsersToEnablePasskey\": Boolean, \"autoClientOwnerAssignmentValue\": String, \"enablePrivacy\": Boolean, \"twoFactorAuthenticationInfo\": { \"mode\": Number }",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.get_commcell_organization_properties",
"url":42,
"doc":"Get organization properties for the commcell return: dict of organization properties of commcell",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.get_email_settings",
"url":42,
"doc":"Get Email Server (SMTP) setup for commcell return: (dict) Email server settings for commcell",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.set_email_settings",
"url":42,
"doc":"Set Email Server (SMTP) setup for commcell Args: smtp_server(str)  hostname of the SMTP server sender_name(str)  Name of the sender sender_email(str)  Email address of the sender to be used  kwargs(dict)  Key value pairs for supported arguments Supported argument values: enable_ssl(boolean)  option to represent whether ssl is supported for the EMail Server Default value: False smtp_port(int)  Port number to be used by Email Server Default value: 25 username(str)  Username to be used password(str)  Password to be used Returns: None Raises: SDKException: if invalid argument type is passed if failed to update Email server if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.get_password_encryption_config",
"url":42,
"doc":"Get the password encryption config for commcell returns: (dict) \"keyFilePath\": String, \"keyProviderName\": String, \"isKeyMovedToFile\": Boolean",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.get_security_associations",
"url":42,
"doc":"Get the security associations for commcell Returns: (dict) { 'master': [ ['Array Management'], ['Create Role', 'Edit Role', 'Delete Role'], ['Master'] ], 'User2': [ ['View'] ] }",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.get_default_plan",
"url":42,
"doc":"Executes the request on the server to get Default Plan at commcell level. This is independent of the organization, as id is 0. returns: (list of dictionaries) [ { \"subtype\": 'File system plan', \"plan\": { \"planName\": \"Gold plan\", \"planId\": 2 } } ]",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.set_default_plan",
"url":42,
"doc":"Executes the request on the server to set Default Plan at commcell level. This is independent of the organization, as id is 0. Args: plan_name (str) - Plan name Returns: None Raises: SDKException: if failed to set Default plan if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.execute_qcommand",
"url":42,
"doc":"Executes the ExecuteQCommand API on the commcell. Args: command (str)  qcommand to be executed input_xml (str)  xml body (if applicable) default: None Returns: object - requests.Response object Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.add_associations_to_saml_app",
"url":42,
"doc":"adds the given user under associations tab of the saml app Args: saml_app_name (str) : SAML app name to add associations for saml_app_key (str) :app key of the SAML app props (str) :properties to be included in the XML request user_to_be_added (str) : user to be associated with Raises: SDKException: if input data is invalid if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.is_commcell_registered",
"url":42,
"doc":"checks if a commcell is registered in the commcell with the provided name Args: commcell_name (str)  name of the commcell Returns: bool - boolean output whether the commcell is registered or not Raises: SDKException: if type of the commcell_name is not string",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.register_commcell",
"url":42,
"doc":"Registers a commcell Args: commcell_name (str)  name of the commcell registered_for_routing (bool)  True - if we want to register for Routing False - if we dont want to register for Routing admin_username (str)  username of the user who has administrative rights on a commcell admin_password (str)  password of the user specified register_for_idp (bool)  True - if we want to register for Identity provider False - if we dont want to register for Identity provider Raises: SDKException: if the registration fails if response is empty if there is no response",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.service_commcell_sync",
"url":42,
"doc":"Sync a service commcell Args: service_commcell (object) : Service commcell object Raises: if sync fails if the response is empty if there is no response",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.unregister_commcell",
"url":42,
"doc":"Unregisters a commcell Args: commcell_name (str) - Name of the service commcell that has to be unregistered force (bool) - if True, will perform forced unregistration Raises: if Unregistration fails if the response is empty if there is no response",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.get_eligible_service_commcells",
"url":42,
"doc":"Gets the redirect service commcells based on login_name or email provided Args: login_name_or_email (str)  Login name or email of the user default: current logged in user Raises: if the response is empty if there is no response Returns: list_of_service_commcells (list)  list of service commcells",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.add_service_commcell_associations",
"url":42,
"doc":"adds an association for an entity on a service commcell Args: entity_name (object)  entity_name can be object of User,UserGroup,Domain and Organization Class service_commcell (str)  name of the service commcell to which above entities can be associated Raises: SDKException: if response is empty if add association fails if response is not success",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.get_service_commcell_associations",
"url":42,
"doc":"Gets an entity's association details for every commcell it is associated to Args: entity_name (object)  entity_name can be object of User,UserGroup,Domain and Organization Class Returns: list - list of dicts, each dict containing details of the entity's association with a service commcell Example: [ { \"userOrGroup\": { \"userId\": , \"GUID\": , \"userName\": , \"_type_\": , }, \"entity\": { \"entityType\": , \"entityName\": , \"entityId\": , \"_type_\": , \"flags\": , }, \"properties\": , }, { \"userOrGroup\": { .}, \"entity\": { .}, \"properties\": { .}, }, { \"userOrGroup\": { .}, \"entity\": { .}, \"properties\": { .}, } ]",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.remove_service_commcell_associations",
"url":42,
"doc":"removes an entity's associations to every commcell Args: entity_name (object)  entity_name can be object of User,UserGroup,Domain and Organization Class Raises: SDKException: if response is empty if remove association fails if response is not success",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.is_service_commcell",
"url":42,
"doc":"Returns the is_service_commcell property."
},
{
"ref":"cvpysdk.commcell.Commcell.master_saml_token",
"url":42,
"doc":"Returns the saml token of master commcell."
},
{
"ref":"cvpysdk.commcell.Commcell.two_factor_authentication",
"url":42,
"doc":"Returns the instance of the TwoFactorAuthentication class"
},
{
"ref":"cvpysdk.commcell.Commcell.is_tfa_enabled",
"url":42,
"doc":"Returns the status of two factor authentication for this commcell bool  status of tfa."
},
{
"ref":"cvpysdk.commcell.Commcell.tfa_enabled_user_groups",
"url":42,
"doc":"Returns the list of user group names for which two factor authentication is enabled. only for user group inclusion tfa. eg:- [ { \"userGroupId\": 1, \"userGroupName\": \"dummy\" } ]"
},
{
"ref":"cvpysdk.commcell.Commcell.is_linux_commserv",
"url":42,
"doc":"Returns true if CommServer is installed on the linux machine Returns None if unable to determine the CommServ OS type  Note To determine CommServ OS type logged in user should have access on CommServ client"
},
{
"ref":"cvpysdk.commcell.Commcell.default_timezone",
"url":42,
"doc":"Returns the default timezone used for all the operations performed via cvpysdk"
},
{
"ref":"cvpysdk.commcell.Commcell.enable_tfa",
"url":42,
"doc":"Enables two factor authentication option on this commcell. Args: user_groups (list)  user group names for which tfa needs to be enabled. Returns: None",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.disable_tfa",
"url":42,
"doc":"Disables two factor authentication on this commcell. Returns: None",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.switch_to_company",
"url":42,
"doc":"Switching to Company as Operator",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.reset_company",
"url":42,
"doc":"Resets company to Commcell",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.allow_users_to_enable_passkey",
"url":42,
"doc":"Enable or Disable passkey authorization for company administrators and client owners Args: flag (boolean)  Enable or Disable Passkey Authorization Raises: SDKException: if response is empty if response is not success if failed to enable or disable passkey",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.get_sla_configuration",
"url":42,
"doc":"Makes a rest api call to get SLA configuration at commcell level Returns: dict - sla details example: { 'slaDays': 7, 'excludedReason':  , 'useSystemDefaultSLA': False, 'excludeFromSLA': False, 'delayInterval': 0, 'inheritedSLA': { 'slaDays': 0, 'entityType': 0, 'excludeFromSLA': False } } Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.get_workload_region",
"url":42,
"doc":"Makes a rest api call to get commserve workload region Returns: dict - with region id,name example: { 'regionId': 2, 'displayName': 'Asia', 'regionName': 'Asia' } Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.get_user_suggestions",
"url":42,
"doc":"Makes a multicommcell api call to get user suggestions for entities Args: term (str) - the entity name to get matched suggestions of Returns: list - list of dicts with details of entity whose name matches for given term example: [ { \"displayName\":  , \"groupId\": 0, \"umEntityType\": 0, \"umGuid\":  ,  . \"groupGuid\": \" .\", \"company\": { .}, }, { .}, { .}, ] Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.enable_limit_user_logon_attempts",
"url":42,
"doc":"Enable Limit user logon attempts feature Args: failed_login_attempt_limit (int)  number of logon attempts a user is allowed default : 5 failed_login_attempts_within (int)  logon attempts a user is allowed within specified default : 3600 secs numbers of secs account_lock_duration (int)  number of secs a locked account remains locked default : 86400 secs lock_duration_increment_by (int)  increment the lock duration by specified secs after each consecutive user account lock default : 3600 secs Raises: SDKException: if response is empty if response is not success if failed to enable limit user logon feature",
"func":1
},
{
"ref":"cvpysdk.commcell.Commcell.disable_limit_user_logon_attempts",
"url":42,
"doc":"Disable limit user logon attempts feature. Raises: SDKException: if response is empty if response is not success if failed to disable limit user logon feature",
"func":1
},
{
"ref":"cvpysdk.commcell_migration",
"url":43,
"doc":"Class to perform all the CommCell Migration operations on commcell CommCellMigration, GlobalRepositoryCell are the only classes defined in this file. CommCellMigration: Helper class to perform CommCell Import & Export operations. CommCellMigration: __init__()  initializes CommCellMigration helper object. commcell_export()  function to run CCM Export operation. commcell_import()  function to run CCM Import operation. tape_import()  function to run tape import operation. GlobalRepositoryCell: Helper class to perform GRC related operations GlobalRepositoryCell: __init__()  initializes GlobalRepositoryCell object get_podcell_entities()  gets all entities from registered podcell that can be imported get_podcell_properties()  gets all grc related properties for registered podcell modify_monitored_clients()  overwrites imported clients in podcell grc schedule"
},
{
"ref":"cvpysdk.commcell_migration.CommCellMigration",
"url":43,
"doc":"Class for representing the commcell export & import operations from commcell. Initializes object of the CommCellMigration class. Args: commcell_object (object) -instance of the commcell class Returns: object - instance of the CommCellMigration class"
},
{
"ref":"cvpysdk.commcell_migration.CommCellMigration.commcell_export",
"url":43,
"doc":"Starts the Commcell Export job. Args: export_location ( str )  Location to export generated dumps. client_list ( list )  Contains list of clients used for export. [ \"Server_1\",\"Client1\",\"Client2\" ] options_dictionary ( dict )  Contains options used to perform CCM Export. { \"pathType\":\"Local\", \"otherSqlInstance\":True, \"userName\":\"UserName\", \"password\":\"User \", \"otherSqlInstance\": False, \"sqlInstanceName\":\"SQLInstanceName\", \"sqlUserName\":\"SQLUserName\", \"sqlPassword\":\"SQLPassword\", \"Database\":\"commserv\", \"captureMediaAgents\":True, \"captureSchedules\":True, \"captureActivityControl\":True, \"captureOperationWindow\":True, \"captureHolidays\":True, \"csName\": \"CommservName\",  host cs for using sql instance export \"clientIds\": [client_id1, client_id2],  required only when exporting clients using sql instance \"autopickCluster\":False } other_entities ( list )  list of other entities to be exporteddd [ \"schedule_policies\", \"users_and_user_groups\", \"alerts\" ] Returns: CCM Export Job instance  returns the CCM Export job instance. Raises: SDKException: if type of the input is not valid. if all the required inputs are not provided. if invalid inputs are passed.",
"func":1
},
{
"ref":"cvpysdk.commcell_migration.CommCellMigration.commcell_import",
"url":43,
"doc":"Starts the Commcell Import job. Args: import_location ( str )  Location to import the generated dumps. options_dictionary ( dict )  Contains list of options used for CCMImport and default values. { \"pathType\": \"Network\", \"userName\" : \"username\", \"password\": \"password\", \"forceOverwrite\": False, \"failIfEntityAlreadyExists\": False, \"deleteEntitiesNotPresent\": False, \"deleteEntitiesIfOnlyfromSource\": False, \"forceOverwriteHolidays\": False, \"mergeHolidays\": True, \"forceOverwriteOperationWindow\": False, \"mergeOperationWindow\": False, \"forceOverwriteSchedule\": False, \"mergeSchedules\": True } Returns: CCM Import Job instance  returns the CCM Import job instance. Raises: SDKException: if type of the input is not valid. if all the required inputs are not provided. if invalid inputs are passed.",
"func":1
},
{
"ref":"cvpysdk.commcell_migration.CommCellMigration.tape_import",
"url":43,
"doc":"performs the tape import import operation for the specified tape. Args: library_id (int)  tape library id. medias_id (list)  tape id. drive_pool_id (int)  drive pool id Returns: Tape import job instance",
"func":1
},
{
"ref":"cvpysdk.commcell_migration.GlobalRepositoryCell",
"url":43,
"doc":"Class for representing the GRC feature from commcell Initializes the object of GlobalRepositoryCell class Args: commcell_object (Commcell) - Commcell class instance Returns: grc (GlobalRepositoryCell) - instance of the GlobalRepositoryCell class"
},
{
"ref":"cvpysdk.commcell_migration.GlobalRepositoryCell.get_clients_for_migration",
"url":43,
"doc":"Gets the podcell clients that can be migrated Args: podcell_name (str) - name of pod cell podcell_id (int) - id of podcell podcell_guid (str) - guid of podcell (Optional) Returns: clients_dict (dict) - dict with client ID as key and client name value Example: { X: \"clientA\", Y: \"clientB\", Z: \"clienta\" }",
"func":1
},
{
"ref":"cvpysdk.commcell_migration.GlobalRepositoryCell.modify_monitored_clients",
"url":43,
"doc":"Modifies (overwrites) the monitored clients in grc properties for given podcell Args: podcell_name (str) - name of pod cell podcell_id (int) - id of podcell client_ids (list) - list of client ids, names or Client objects (of pod cell) Returns: None",
"func":1
},
{
"ref":"cvpysdk.constants",
"url":44,
"doc":"Helper file to maintain all the constants used in the SDK TIMEZONES  Dict which maintains the list of all timezones ENTITY_TYPE_MAP  Dict containing mapping of entity type codes (returned by company API) to Entity Name HypervisorType  Enum which maintains the list of all the hypervisors supported by SDK AppIDAType  Enum which maintains the list of all the IDA type values InstanceBackupType  Enum for backup type for instance SQLDefines  Class which maintains the defines list for SQL Server AdvancedJobDetailType  Enum to maintain advanced job details info type VSALiveSyncStatus  Enum to maintain status of the VSA Live sync VSAFailOverStatus  Enum to maintain Failover status of the VSA Live sync ApplicationGroup  Enum to maintain Application Group Types."
},
{
"ref":"cvpysdk.constants.HypervisorType",
"url":44,
"doc":"Class to maintain all the hypervisor related constants."
},
{
"ref":"cvpysdk.constants.HypervisorType.VIRTUAL_CENTER",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.HypervisorType.MS_VIRTUAL_SERVER",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.HypervisorType.AZURE",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.HypervisorType.AZURE_V2",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.HypervisorType.FUSION_COMPUTE",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.HypervisorType.ORACLE_VM",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.HypervisorType.ALIBABA_CLOUD",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.HypervisorType.ORACLE_CLOUD",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.HypervisorType.OPENSTACK",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.HypervisorType.GOOGLE_CLOUD",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.HypervisorType.Azure_Stack",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.HypervisorType.Rhev",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.HypervisorType.AMAZON_AWS",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.HypervisorType.VCLOUD",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.HypervisorType.Nutanix",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.HypervisorType.ORACLE_CLOUD_INFRASTRUCTURE",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.HypervisorType.OPENSHIFT",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.AppIDAType",
"url":44,
"doc":"Class to maintain all the app ida constants"
},
{
"ref":"cvpysdk.constants.AppIDAType.WINDOWS_FILE_SYSTEM",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.AppIDAType.LINUX_FILE_SYSTEM",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.AppIDAType.VIRTUAL_SERVER",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.AppIDAType.CLOUD_APP",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.AppIDAName",
"url":44,
"doc":"Class to maintain the app IDA names"
},
{
"ref":"cvpysdk.constants.AppIDAName.FILE_SYSTEM",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.AppIDAName.VIRTUAL_SERVER",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects",
"url":44,
"doc":"Mapping for VSA Objects."
},
{
"ref":"cvpysdk.constants.VSAObjects.SERVER",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.RESOURCE_POOL",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.VAPP",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.DATACENTER",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.FOLDER",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.CLUSTER",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.DATASTORE",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.DATASTORE_CLUSTER",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.VM",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.VMName",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.VMGuestOS",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.VMGuestHostName",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.ClusterSharedVolumes",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.LocalDisk",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.ClusterDisk",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.UnprotectedVMs",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.ROOT",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.FileServer",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.SMBShare",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.TypesFolder",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.VMFolder",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.ServerFolder",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.TemplateFolder",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.StorageRepositoryFolder",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.VAppFolder",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.DatacenterFolder",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.ClusterFolder",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.VMPowerState",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.VMNotes",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.VMCustomAttribute",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.Network",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.User",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.VMTemplate",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.Tag",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.TagCategory",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.Subclient",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.ClientGroup",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.ProtectionDomain",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.ConsistencyGroup",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.InstanceSize",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.Organization",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAObjects.Selector",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.InstanceBackupType",
"url":44,
"doc":"Class to maintain type of instance backup"
},
{
"ref":"cvpysdk.constants.InstanceBackupType.FULL",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.InstanceBackupType.INCREMENTAL",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.InstanceBackupType.CUMULATIVE",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.SQLDefines",
"url":44,
"doc":"Class to maintain SQL Defines"
},
{
"ref":"cvpysdk.constants.SQLDefines.DATABASE_RESTORE",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.SQLDefines.STEP_RESTORE",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.SQLDefines.RECOVER_ONLY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.SQLDefines.STATE_RECOVER",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.SQLDefines.STATE_NORECOVER",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.SQLDefines.STATE_STANDBY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.SharepointDefines",
"url":44,
"doc":"Class to maintiain Sharepoint Defines"
},
{
"ref":"cvpysdk.constants.SharepointDefines.CONTENT_WEBAPP",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.SharepointDefines.CONTENT_DB",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.AdvancedJobDetailType",
"url":44,
"doc":"Class to maintain advanced job details info type"
},
{
"ref":"cvpysdk.constants.AdvancedJobDetailType.RETENTION_INFO",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.AdvancedJobDetailType.REFERNCE_COPY_INFO",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.AdvancedJobDetailType.DASH_COPY_INFO",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.AdvancedJobDetailType.ADMIN_DATA_INFO",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.AdvancedJobDetailType.BKUP_INFO",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSALiveSyncStatus",
"url":44,
"doc":"Class to maintain status of the VSA Live sync"
},
{
"ref":"cvpysdk.constants.VSALiveSyncStatus.NEVER_HAS_BEEN_SYNCED",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSALiveSyncStatus.IN_SYNC",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSALiveSyncStatus.NEEDS_SYNC",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSALiveSyncStatus.SYNC_IN_PROGRESS",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSALiveSyncStatus.SYNC_PAUSED",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSALiveSyncStatus.SYNC_FAILED",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSALiveSyncStatus.SYNC_DISABLED",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSALiveSyncStatus.SYNC_ENABLED",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSALiveSyncStatus.VALIDATION_FAILED",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSALiveSyncStatus.SYNC_QUEUED",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSALiveSyncStatus.REVERT_FAILED",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSALiveSyncStatus.SYNC_STARTING",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAFailOverStatus",
"url":44,
"doc":"Class to maintain Failover status of the VSA Live sync"
},
{
"ref":"cvpysdk.constants.VSAFailOverStatus.NONE",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAFailOverStatus.FAILOVER_COMPLETE",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAFailOverStatus.FAILOVER_RUNNING",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAFailOverStatus.FAILOVER_PAUSED",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAFailOverStatus.FAILOVER_FAILED",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAFailOverStatus.FAILBACK_COMPLETE",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAFailOverStatus.FAILBACK_RUNNING",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAFailOverStatus.FAILBACK_PAUSED",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAFailOverStatus.FAILBACK_FAILED",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAFailOverStatus.FAILBACK_PARTIAL",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.VSAFailOverStatus.FAILOVER_PARTIAL",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.ApplicationGroup",
"url":44,
"doc":"Class to maintain application group types."
},
{
"ref":"cvpysdk.constants.ApplicationGroup.WINDOWS",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.ApplicationGroup.UNIX",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.ApplicationGroup.IBMi",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.ApplicationGroup.OPENVMS",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.ApplicationGroup.CLOUDAPPS",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.ApplicationGroup.MSSQLSERVER",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.ApplicationGroup.SHAREPOINTSERVER",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.StoragePoolConstants",
"url":44,
"doc":"Class to maintain storage policy constants"
},
{
"ref":"cvpysdk.constants.StoragePoolConstants.AZURE_STORAGE_REQ_JSON",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.StoragePoolConstants.MA_INFO_LIST",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity",
"url":44,
"doc":"Class to maintain Commcell Entity types"
},
{
"ref":"cvpysdk.constants.CommcellEntity.COMMCELL_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.CLIENT_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.APPTYPE_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.INSTANCE_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.BACKUPSET_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.SUBCLIENT_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.LIBRARIES_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.LIBRARY_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.MEDIAAGENT_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.USER_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.USERGROUP_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.STORAGE_POLICIES_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.STORAGE_POLICY_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.STORAGE_POLICY_COPY_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.ALL_USERS_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.ALL_USERGROUPS_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.TRACKING_POLICIES_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.TRACKING_POLICY_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.VAULTRACKER_JOBS",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.DATAPROTECTION_JOBS",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.AUX_COPY_JOBS",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.MACHINE_ENTITIY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.CLIENT_GROUP_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.SRM_REPORT_SET",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.SRM_REPORT_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.LEGAL_HOLD",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.SRM_REPORTS_SET",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.SRM_REPORTS_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.SCHEDULE_POLICY_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.SECURITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.HOLIDAYS",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.OPERATION_WINDOW",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.CALENDAR",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.GLOBALFILTERS",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.MEDIA_LOCATIONS",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.CALENDARS",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.APPID_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.MEDIA_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.DRIVE_POOL_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.SCRATCH_POOL_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.LIBRARY_MEDIA_TYPE_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.MEDIA_SIDE_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.DRIVE_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.MOUNT_PATH_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.LOCATION_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.TIME_RANGE",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.TIME_ZONE",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.DATE_TIME",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.SHELF_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.GALAXYRELEASE_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.LICENSE_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.COMPONENT_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.PROVIDER_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.EXTERNAL_GROUP_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.CALENDAR_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.ALERT_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.SUBCLIENT_POLICY_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.LOCALE_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.SPARE_MEDIA_GROUP_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.SUBTASK_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.TASK_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.CommcellEntity.MEDIA_TYPE_ENTITY",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.Credential_Type",
"url":44,
"doc":"Class to maintain Credential types"
},
{
"ref":"cvpysdk.constants.Credential_Type.WINDOWSACCOUNT",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.Credential_Type.LINUXACCOUNT",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.Credential_Type.SSHACCOUNT",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.Credential_Type.AZUREACCOUNT",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.Credential_Type.VMWAREACCOUNT",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.constants.Credential_Type.MICROSOFT_AZURE",
"url":44,
"doc":""
},
{
"ref":"cvpysdk.content_analyzer",
"url":45,
"doc":"Main file for performing operations on content analyzers, and a single content analyzer client in the commcell.  ContentAnalyzers , and  ContentAnalyzer are 2 classes defined in this file. ContentAnalyzers: Class for representing all the Content analyzers in the commcell. ContentAnalyzer: Class for representing a single content analyzer client in the commcell. ContentAnalyzers: __init__(commcell_object)  initialise object of the ContentAnalyzers class _response_not_success()  parses through the exception response, and raises SDKException refresh()  refresh the content analyzers associated with the commcell get()  Returns an instance of ContentAnalyzer class for the given CA client name get_properties()  Returns the properties for the given content analyzer client name _get_all_contentanalyzers()  Returns dict consisting all content analyzers associated with commcell _get_cloud_from_collections()  gets all the content analyzer details from collection response has_client()  Checks whether given CA client exists in commcell or not ContentAnalyzer: __init__()  initialize an object of ContentAnalyzer Class with the given CACloud name and client id associated to the commcell refresh()  refresh the properties of the CA client _get_cloud_properties()  Gets all the details of associated content analyzer client ContentAnalyzer Attributes         -  client_id  returns the client id of the content analyzer client  cloud_url  returns the url of the content analyzer"
},
{
"ref":"cvpysdk.content_analyzer.ContentAnalyzers",
"url":45,
"doc":"Class for representing all the ContentAnalyzers in the commcell. Initializes an instance of the ContentAnalyzers class. Args: commcell_object (object)  instance of the commcell class Returns: object - instance of the ContentAnalyzers class"
},
{
"ref":"cvpysdk.content_analyzer.ContentAnalyzers.get_properties",
"url":45,
"doc":"Returns a properties of the specified content analyzer client name. Args: caclient_name (str)  name of the content analyzer client Returns: dict - properties for the given content analyzer client name",
"func":1
},
{
"ref":"cvpysdk.content_analyzer.ContentAnalyzers.refresh",
"url":45,
"doc":"Refresh the content analyzers associated with the commcell.",
"func":1
},
{
"ref":"cvpysdk.content_analyzer.ContentAnalyzers.get",
"url":45,
"doc":"Returns a ContentAnalyzer object for the given CA client name. Args: client_name (str)  name of the Content analyzer client Returns: obj  Object of ContentAnalyzer class Raises: SDKException: if response is empty if response is not success if cacloud_name is not of type string",
"func":1
},
{
"ref":"cvpysdk.content_analyzer.ContentAnalyzers.has_client",
"url":45,
"doc":"Checks if a content analyzer client exists in the commcell with the input name. Args: client_name (str)  name of the content analyzer client Returns: bool - boolean output whether the CA client exists in the commcell or not Raises: SDKException: if type of the CA client name argument is not string",
"func":1
},
{
"ref":"cvpysdk.content_analyzer.ContentAnalyzer",
"url":45,
"doc":"Class for performing operations on a single content analyzer client Initialize an object of the ContentAnalyzer class. Args: commcell_object (object)  instance of the commcell class client_name (str)  name of the content analyzer client Returns: object - instance of the ContentAnalyzer class"
},
{
"ref":"cvpysdk.content_analyzer.ContentAnalyzer.client_id",
"url":45,
"doc":"Returns the value of the Content analyzer client id attribute."
},
{
"ref":"cvpysdk.content_analyzer.ContentAnalyzer.cloud_url",
"url":45,
"doc":"Returns the value of the Content analyzer client url attribute."
},
{
"ref":"cvpysdk.content_analyzer.ContentAnalyzer.refresh",
"url":45,
"doc":"Refresh the content analyzer details associated with this commcell",
"func":1
},
{
"ref":"cvpysdk.credential_manager",
"url":46,
"doc":"Main file for managing credentials records on this commcell Credentials and Credential are only the two classes defined in this commcell Credentials: __init__()  initializes the Credentials class object __str__()  returns all the Credentials associated with the commcell __repr__()  returns the string for the instance of the Credentials class _get_credentials()  Returns the list of Credentials configured on this commcell all_credentials()  Returns all the Credentials present in the commcell has_credential()  Checks if any Credentials with specified name exists on this commcell get()  Returns the Credential object for the specified Credential name add()  creates the credential record on this commcell refresh()  refreshes the list of credentials on this commcell delete()  deletes the credential record on this commcell get_security_associations()  Returns the security association dictionary for a given user or user group add_azure_cloud_creds()  Creates azure access key based credential on this commcell Credential: __init__()  initiaizes the credential class object __repr__()  returns the string for the instance of the credential class _get_credential_id()  Gets the Credential id associated with this Credential credential_name  Returns the name of the credential record credential_id  Returns the id of the credential record credential_description  Returns the description set of credential record credential_user_name  Returns the user name set in the credential record update_user_credential  Sets the value for credential user name and password with the parameters provided refresh()  refreshes the properties of credential account _get_credential_properties() returns the properties of credential account _update_credential_props()  Updates credential account properties"
},
{
"ref":"cvpysdk.credential_manager.Credentials",
"url":46,
"doc":"Class for maintaining all the configured credential on this commcell Initializes the credentials class object for this commcell Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the Clients class"
},
{
"ref":"cvpysdk.credential_manager.Credentials.all_credentials",
"url":46,
"doc":"\"Returns all the Credentials present in the commcell"
},
{
"ref":"cvpysdk.credential_manager.Credentials.has_credential",
"url":46,
"doc":"Checks if any Credentials with specified name exists on this commcell Args: credential_name (str)  name of the Credential which has to be checked if exists Retruns: Bool- True if specified Credential is present on the commcell else false Raises: SDKException: if data type of input is invalid",
"func":1
},
{
"ref":"cvpysdk.credential_manager.Credentials.get",
"url":46,
"doc":"Returns the Credential object for the specified Credential name Args: credential_name (str)  name of the Credential for which the object has to be created Raises: SDKException: if Credential doesn't exist with specified name",
"func":1
},
{
"ref":"cvpysdk.credential_manager.Credentials.add",
"url":46,
"doc":"Creates credential account on this commcell Args: record_type (str)  type of credential record to be created (windows/linux) credential_name (str)  name to be given to credential account user_name (str)  name of the user to be associated to this credential account user_password (str)  password for user description (str)  description for credential account Raises: SDKException: if credential account is already present on the commcell if string format are not proper if response is not successful",
"func":1
},
{
"ref":"cvpysdk.credential_manager.Credentials.refresh",
"url":46,
"doc":"Refresh the list of credential records on this commcell.",
"func":1
},
{
"ref":"cvpysdk.credential_manager.Credentials.delete",
"url":46,
"doc":"Deletes the credential object for specified credential name Args: credential_name (str)  name of the credential for which the object has to be deleted Raises: SDKException: if credential doesn't exist if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.credential_manager.Credentials.get_security_associations",
"url":46,
"doc":"Returns the security association dictionary for a given user or user group Args: owner(str) - Owner of the user or user group is_user(bool) - True if the owner is a user False if the owner is a user group Returns: dict containing the security association",
"func":1
},
{
"ref":"cvpysdk.credential_manager.Credentials.add_azure_cloud_creds",
"url":46,
"doc":"Creates azure access key based credential on this commcell Args: credential_name (str)  name to be given to credential account account_name (str)  name of the azure storage account access_key_id (str)  access key for azure storage  kwargs(dict)  Key value pairs for supported arguments Supported argument values: description(str) - description of the credentials Raises: SDKException: if arguments type is incorrect if credential account is already present on the commcell if string format are not proper if response is not successful",
"func":1
},
{
"ref":"cvpysdk.credential_manager.Credential",
"url":46,
"doc":"\"Class for representing a particular Credential record on this commcell Initialize the Credential class object for specified Credential Args: commcell_object (object)  instance of the Commcell class credential_name (str)  name of the Credential credential_id (str)  id of the credential default: None"
},
{
"ref":"cvpysdk.credential_manager.Credential.credential_name",
"url":46,
"doc":"Returns the name of the credential record"
},
{
"ref":"cvpysdk.credential_manager.Credential.credential_id",
"url":46,
"doc":"Returns the Credential id of this commcell Credential record"
},
{
"ref":"cvpysdk.credential_manager.Credential.credential_description",
"url":46,
"doc":"Returns the Credential_desccription of this commcell Credential reord"
},
{
"ref":"cvpysdk.credential_manager.Credential.credential_security_properties",
"url":46,
"doc":"Returns the Credential's security association"
},
{
"ref":"cvpysdk.credential_manager.Credential.update_securtiy",
"url":46,
"doc":"Updates the security association for this commcell Credential record Args: name (str)  User or UserGroupName is_user (bool)  Set False for UserGroup",
"func":1
},
{
"ref":"cvpysdk.credential_manager.Credential.credential_user_name",
"url":46,
"doc":"Returns the Credential name of this commcell Credential record"
},
{
"ref":"cvpysdk.credential_manager.Credential.update_user_credential",
"url":46,
"doc":"Sets the value for credential user name and password with the parameters provided Args: uname (str)  new user name upassword(str)  new password for user",
"func":1
},
{
"ref":"cvpysdk.credential_manager.Credential.credential_record_type",
"url":46,
"doc":"Returns the Credential name of this commcell Credential record"
},
{
"ref":"cvpysdk.credential_manager.Credential.refresh",
"url":46,
"doc":"Refresh the properties of the Credentials.",
"func":1
},
{
"ref":"cvpysdk.cvpysdk",
"url":47,
"doc":"Helper file for session operations. This file is used to perform Authentication for the user on the Commcell.  . Check if the web server and service is valid and running  . Perform Login operation to the Commcell using the credentials provided by the user  . Store the Authtoken received after Login REST API call to use for the entire session  . Renew Authtoken if credentials were given by the user during Commcell object initialization, and the current token has expired  . Logout the current user from the Commcell, and disconnect the API session  . Common method to be used in the entire SDK to perform REST API call on the Web Server CVPySDK: __init__(commcell_object)  initialise object of the CVPySDK class and bind to the commcell _is_valid_service()  checks if the service is valid and running or not _login()  sign in the user to the commcell with the credentials provided _renew_login_token()  renews the Authtoken for the currently logged in user _logout()  sign out the current logged in user from the commcell, and ends the session _request()  executes the request on the server and return the Response who_am_i()  Fetches the username of the user to whom authtoken is mapped make_request()  run the http request specified on the URL/WebService provided, and return the flag specifying success/fail, and response"
},
{
"ref":"cvpysdk.cvpysdk.CVPySDK",
"url":47,
"doc":"Helper class for login, and logout operations. Also contains common method for running all HTTP requests. Initialize the CVPySDK object for running various operations. Args: commcell_object (object)  instance of the Commcell class certificate_path (str)  path of the CA_BUNDLE or directory with certificates of trusted CAs (including trusted self-signed certificates) default: None verify_ssl (str)  verify ssl while making requests default: True Returns: object - instance of the CVPySDK class"
},
{
"ref":"cvpysdk.cvpysdk.CVPySDK.who_am_i",
"url":47,
"doc":"Get the username of the user, to whom the Authtoken belongs to. Args: authtoken (str)  QSDK or SAML authentication token Returns: str - username of the user respective to the token Raises: SDKException: if no user mapping found",
"func":1
},
{
"ref":"cvpysdk.cvpysdk.CVPySDK.make_request",
"url":47,
"doc":"Makes the request of the type specified in the argument 'method'. Args: method (str)  HTTP operation to perform e.g.: - GET - POST - PUT - DELETE url (str)  the web url or service to run the HTTP request on payload (dict / str)  data to be passed along with the request default: None attempts (int)  number of attempts made with the same request default: 0 headers (dict)  dict of request headers for the request if not specified we use default headers default: None stream (bool)  boolean specifying whether the request should get data via stream or normal get default: False files (dict)  file to upload in the form of { 'file': open('report.txt', 'rb') } default: None Kwargs supported values: remove_processing_info (bool)  removes the processing instruction info from response.json() Returns: tuple: (True, response) - in case of success (False, response) - in case of failure Raises: SDKException: if the method passed is incorrect / not supported if the number of attempts exceed 3 requests Connection Error: requests.exceptions.ConnectionError",
"func":1
},
{
"ref":"cvpysdk.datacube",
"url":48,
"doc":"Initialize Datacube APIs, and Classes for the SDK."
},
{
"ref":"cvpysdk.datacube.constants",
"url":49,
"doc":"Helper file to maintain all the constants for index server and datacube IndexServerConstants - Maintains constants for index server ContentAnalyzerConstants - Maintains constants for Content Analyzer"
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants",
"url":49,
"doc":"Class to maintain all the index server related constants"
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.INDEX_SERVER_IDA_NAME",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.INDEX_SERVER_INSTANCE_NAME",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.ROLE_DATA_ANALYTICS",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.ROLE_FILE_SYSTEM_INDEX",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.ROLE_EXCHANGE_INDEX",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.ROLE_ONEDRIVE_INDEX",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.ROLE_SYSTEM_DEFAULT",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.ENGINE_NAME",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.CLOUD_ID",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.ROLES",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.HOST_NAME",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.CLOUD_NAME",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.CLIENT_NAME",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.CI_SERVER_URL",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.TYPE",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.BASE_PORT",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.CLIENT_ID",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.SERVER_TYPE",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.INDEX_SERVER_CLIENT_ID",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.FSINDEX",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.MULTINODE",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.OPERATION_ADD",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.OPERATION_DELETE",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.OPERATION_EDIT",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.DEFAULT_JVM_MAX_MEMORY",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.DEFAULT_SOLR_PORT",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.SOLR_PORT_META_INFO",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.SOLR_JVM_META_INFO",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.UPDATE_ADD_ROLE",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.REQUEST_JSON",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.IndexServerConstants.PRUNE_REQUEST_JSON",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.ContentAnalyzerConstants",
"url":49,
"doc":"Class to maintain all the content analyzer cloud related constants"
},
{
"ref":"cvpysdk.datacube.constants.ContentAnalyzerConstants.OPERATION_ADD",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.ContentAnalyzerConstants.OPERATION_DELETE",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.ContentAnalyzerConstants.OPERATION_EDIT",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.constants.ContentAnalyzerConstants.REQUEST_JSON",
"url":49,
"doc":""
},
{
"ref":"cvpysdk.datacube.datacube",
"url":50,
"doc":"Main file for performing operations related to Datacube APIs. The class  Datacube is defined here in this file, that will directly interact with all the Datacube APIs. Datacube: __init__(commcell_object)  initialise object of the Datacube class __repr__()  returns the string representation of an instance of this class _response_not_success()  parses through the exception response, and raises SDKException _get_analytics_engines()  returns the list of all Content Indexing (CI) Servers datasources()  returns an instance of the Datasources class get_jdbc_drivers()  gets the list all jdbc_drivers associated with the datacube. refresh()  refresh the datasources associated with the Datacube Engine refresh_engine()  refresh the index server associated with datacube"
},
{
"ref":"cvpysdk.datacube.datacube.USER_LOGGED_OUT_MESSAGE",
"url":50,
"doc":"str: Message to be returned to the user, when trying the get the value of an attribute of the Commcell class, after the user was logged out."
},
{
"ref":"cvpysdk.datacube.datacube.Datacube",
"url":50,
"doc":"Represents a datacube running on the commcell Initialize an instance of the Datacube class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the Datacube class"
},
{
"ref":"cvpysdk.datacube.datacube.Datacube.analytics_engines",
"url":50,
"doc":"Returns the value of the analytics engines attributes."
},
{
"ref":"cvpysdk.datacube.datacube.Datacube.datasources",
"url":50,
"doc":"Returns the instance of the Datasources class."
},
{
"ref":"cvpysdk.datacube.datacube.Datacube.get_jdbc_drivers",
"url":50,
"doc":"Gets the list all jdbc_drivers associated with the datacube. Args: analytics_engine (str)  client name of analytics_engine Returns: list - consists of all jdbc_drivers in the datacube Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.datacube.datacube.Datacube.refresh",
"url":50,
"doc":"Refresh the datasources associated to the Datacube Engine.",
"func":1
},
{
"ref":"cvpysdk.datacube.datacube.Datacube.refresh_engine",
"url":50,
"doc":"Refresh the Index server associated to the Datacube.",
"func":1
},
{
"ref":"cvpysdk.datacube.datasource",
"url":51,
"doc":"Main file for performing operations on Datasources, and a single Datasource in the Datacube.  Datasources , and  Datasource are 2 classes defined in this file. Datasources: Class for representing all the Datasources in the Datacube. Datasource: Class for representing a single Datasource in the Datacube. Datasources: __init__(datacube_object)  initialise object of the Datasources class __str__()  prints all the datasources __repr__()  returns the string representation of this instance _get_datasources_from_collections()  gets all the datasources from a list of collections _get_all_datasources()  gets the collections, and all datasources in it has_datasource()  checks if a datasource exists with the given name get(datasource_name)  returns an instance of the Datasource class, for the input datasource name add(datasource_name, analytics_engine, datasource_type)  adds new datasource to the datacube delete(datasource_name)  deletes the give datasource to the datacube refresh()  refresh the datasources associated with the datacube Datasource: __init__( datacube_object, datasource_name, datasource_id=None)  initialize an object of Class with the given datasource name and id, and associated to the datacube __repr__()  return the datasource name, the instance is associated with _get_datasource_id()  method to get the data source id, if not specified in __init__ _get_datasource_properties()  get the properties of this data source get_datasource_properties()  get the properties of this data source get_crawl_history()  get the crawl history of the data source. get_datasource_schema()  returns information about the schema of a data source update_datasource_schema(schema)  updates the schema for the given data source import_data(data)  imports/pumps given data into data source. delete_content()  deletes the contents of the data source. refresh()  refresh the properties of the datasource start_job()  Starts crawl job for the datasource get_status()  Gets the status of the datasource share()  Share the datasource with user or usergroup delete_datasource()  deletes the datasource associated with this DataSource Attributes             computed_core_name  Data source core name in index server  datasource_id  data source id  datasource_name  name of the data source  data_source_type  data source type value  properties  returns the properties of the data source  index_server_cloud_id  index server cloudid associated to this data source"
},
{
"ref":"cvpysdk.datacube.datasource.Datasources",
"url":51,
"doc":"Class for representing all the Datasources in the Datacube. Initializes an instance of the Datasources class. Args: datacube_object (object)  instance of the Datacube class Returns: object - instance of the Datasources class"
},
{
"ref":"cvpysdk.datacube.datasource.Datasources.get_datasource_properties",
"url":51,
"doc":"Returns the properties of datasources. Args: data_source_name (str)  Name of the data source Returns: dict - dictionary consisting of the properties of datasources",
"func":1
},
{
"ref":"cvpysdk.datacube.datasource.Datasources.has_datasource",
"url":51,
"doc":"Checks if a datasource exists in the Datacube with the input datasource name. Args: datasource_name (str)  name of the datasource Returns: bool - boolean output whether the datasource exists in the datacube or not Raises: SDKException: if type of the datasource name argument is not string",
"func":1
},
{
"ref":"cvpysdk.datacube.datasource.Datasources.get",
"url":51,
"doc":"Returns a datasource object of the specified datasource name. Args: datasource_name (str)  name of the datasource Returns: object - instance of the Datasource class for the given datasource name Raises: SDKException: if type of the datasource name argument is not string if no datasource exists with the given name",
"func":1
},
{
"ref":"cvpysdk.datacube.datasource.Datasources.add",
"url":51,
"doc":"Add a datasource. Args: datasource_name (str)  name of the datasource to add to the datacube analytics_engine (str)  name of the analytics engine or index server node to be associated with this datacube. datasource_type (str)  type of datasource to add Valid values are: 1: Database 2: Web site 3: CSV 4: File system 5: NAS 6: Eloqua 8: Salesforce 9: LDAP 10: Federated Search 11: Open data source 12: HTTP input_param(list)  properties for datasource Raises: SDKException: if type of the datasource name argument is not string if type of the analytics_engine argument is not string if type of the datasource_type argument is not string if failed to add datasource if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.datacube.datasource.Datasources.delete",
"url":51,
"doc":"Deletes specified datasource from data cube . Args: datasource_name (str)  name of the datasource Raises: SDKException: if type of the datasource name argument is not string if no datasource exists with the given name",
"func":1
},
{
"ref":"cvpysdk.datacube.datasource.Datasources.refresh",
"url":51,
"doc":"Refresh the datasources associated with the Datacube.",
"func":1
},
{
"ref":"cvpysdk.datacube.datasource.Datasource",
"url":51,
"doc":"Class for performing operations on a single datasource Initialize an object of the Datasource class. Args: datacube_object (object)  instance of the Datacube class datasource_name (str)  name of the datasource datasource_id (str)  id of the datasource default: None Returns: object - instance of the Datasource class"
},
{
"ref":"cvpysdk.datacube.datasource.Datasource.start_job",
"url":51,
"doc":"Starts the crawl job for the datasource Returns: Str - Job id of crawl job Raises: Exception: failed to start job",
"func":1
},
{
"ref":"cvpysdk.datacube.datasource.Datasource.delete_datasource",
"url":51,
"doc":"deletes the datasource Returns: true - if success Raises: Exception: Error message for failed ops",
"func":1
},
{
"ref":"cvpysdk.datacube.datasource.Datasource.get_status",
"url":51,
"doc":"Gets status of the datasource. Returns: dict - containing all status information of datasource Raises: Exception: Failure to find datasource details",
"func":1
},
{
"ref":"cvpysdk.datacube.datasource.Datasource.get_crawl_history",
"url":51,
"doc":"Gets the Crawling history for this datasource. Args: last_crawl_history (bool)  if set to True , returns the status of and information about the most recent crawling operation for a data source in Data Cube Returns: list - list consisting of key value pair for history details of this datasource [ { \"numFailed\": , \"totalcount\": , \"endUTCTime\": , \"numAccessDenied\": , \"numAdded\": , \"startUTCTime\": , \"state\": } ] Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.datacube.datasource.Datasource.datasource_id",
"url":51,
"doc":"Returns the value of the data source id attribute."
},
{
"ref":"cvpysdk.datacube.datasource.Datasource.properties",
"url":51,
"doc":"Returns all the data source properties"
},
{
"ref":"cvpysdk.datacube.datasource.Datasource.datasource_name",
"url":51,
"doc":"Returns the value of the data source name attribute."
},
{
"ref":"cvpysdk.datacube.datasource.Datasource.computed_core_name",
"url":51,
"doc":"Returns the value of the computedcorename attribute."
},
{
"ref":"cvpysdk.datacube.datasource.Datasource.index_server_cloud_id",
"url":51,
"doc":"Returns the value of the cloud id attribute."
},
{
"ref":"cvpysdk.datacube.datasource.Datasource.data_source_type",
"url":51,
"doc":"Returns the value of the data source type attribute."
},
{
"ref":"cvpysdk.datacube.datasource.Datasource.get_datasource_schema",
"url":51,
"doc":"returns information about the schema of a data source. Returns: dict - dict consisting of all schema fields of this datasource grouped under dynSchemaFields and schemaFields { \"uniqueKey\": \"contentid\", \"schemaFields\": [{properties of field},list of fields] \"dynSchemaFields\":[{properties of field},list of fields] Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.datacube.datasource.Datasource.update_datasource_schema",
"url":51,
"doc":"updates the schema of a data source. Args: schema (list)  list of properties of schemas represented as key value pair. [{ \"fieldName\":  , \"indexed\":  , \"autocomplete\":  , \"type\":  , \"searchDefault\":  , \"multiValued\":  }] Valid values for type are as follows: [string, int, float, long, double, date, longstring] indexed, autocomplete, searchDefault, multiValued takes 0/1 Raises: SDKException: if response is empty if type of the schema argument is not list if response is not success",
"func":1
},
{
"ref":"cvpysdk.datacube.datasource.Datasource.import_data",
"url":51,
"doc":"imports/pumps given data into data source. Args: data (list)  data to be indexed and pumped into solr.list of key value pairs. Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.datacube.datasource.Datasource.delete_content",
"url":51,
"doc":"deletes the content of a data source from Data Cube. The data source itself is not deleted using this API. Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.datacube.datasource.Datasource.refresh",
"url":51,
"doc":"Refresh the properties of the Datasource.",
"func":1
},
{
"ref":"cvpysdk.datacube.datasource.Datasource.ds_handlers",
"url":51,
"doc":"Returns the instance of the Handlers class."
},
{
"ref":"cvpysdk.datacube.datasource.Datasource.share",
"url":51,
"doc":"Share datasource with user/usergroup Args: permission_list (list) List of permission operation_type (int)  Operation type (2-add / 3- delete) user_id (int)  User id of share user user_name (str)  Share user name user_type (int)  Share user type (Ex : 13- User) Returns: None Raises: SDKExpception: if response is empty if response is not success if failed to share the datasource with User/userGroup",
"func":1
},
{
"ref":"cvpysdk.datacube.handler",
"url":52,
"doc":"Main file for performing handler operations on a datasource. Handlers and Handler are 2 classes defined in this file. Handlers: Class for representing all the Handlers associated with the datasource Handler: Class for a single Handler of the datasource Handlers: __init__()  initialize object of Handlers class associated with commcell __str__()  returns all the handlers associated with the commcell __repr__()  returns the string representing instance of the Handlers class _get_handlers()  gets all the handlers associated with the commcell has_handler()  checks if a handler exists with the given name or not get_properties()  gets the properties of the given handler add()  adds a new handler to the datasource refresh()  refresh the handlers associated with the datasource get()  gets the object for the given handler name delete()  deletes the given handler name Handler: __init__()  Initialize object for Handler get_handler_data()  Execute the handler share()  Share the handler with user or usergroup"
},
{
"ref":"cvpysdk.datacube.handler.Handlers",
"url":52,
"doc":"Class for representing all the handlers associated with the datasource. Initialize object of the Handlers class. Args: _datasource_object (object)  instance of the datastore class Returns: object - instance of the Handlers class"
},
{
"ref":"cvpysdk.datacube.handler.Handlers.has_handler",
"url":52,
"doc":"Checks if a handler exists in the datasource with the input handler name. Args: handler_name (str)  name of the handler Returns: bool - boolean output whether the handler exists in the commcell or not Raises: SDKException: if type of the handler name argument is not string",
"func":1
},
{
"ref":"cvpysdk.datacube.handler.Handlers.get_properties",
"url":52,
"doc":"Returns a handler object of the specified handler name. Args: handler_name (str)  name of the handler Returns: dict - properties for the given handler name",
"func":1
},
{
"ref":"cvpysdk.datacube.handler.Handlers.get",
"url":52,
"doc":"Returns a handler object of the specified handler name. Args: handler_name (str)  name of the handler Returns: obj  Object of Handler class",
"func":1
},
{
"ref":"cvpysdk.datacube.handler.Handlers.delete",
"url":52,
"doc":"deletes the handler associated with this handler object Args: handler_name (str)  Name of the handler which needs to be deleted Returns: None Raises: SDKExpception: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.datacube.handler.Handlers.add",
"url":52,
"doc":"Adds a new handler to the commcell. Args: handler_name (str)  name of the handler to add to the datastore search_query (list)  list of keywords on which the search is performed. filter_query (list)  list of conditional queries which needs to be performed when the data is retrieved facet_field (list)  list of fields to be faceted. facet_query (list)  list of conditional queries for which the facet count should be retrieved rows (int)  list of keywords on which the search is performed. response_type (str)  format in which search results are retrieved. default: json Supported Types: json csv xml sort_column (list)  list of column name to be sorted Raises: SDKException: if type of the handler name argument is not string if failed to delete handler if response is empty if response is not success if no handler exists with the given name",
"func":1
},
{
"ref":"cvpysdk.datacube.handler.Handlers.refresh",
"url":52,
"doc":"Refresh the handlers associated with the Datasource.",
"func":1
},
{
"ref":"cvpysdk.datacube.handler.Handler",
"url":52,
"doc":"Class for performing operations on a single Handler Initialize an object of the Handler class. Args: datasource_object (object)  instance of the Datacube class handler_name (str)  name of the Handler handler_id (int)  Id of the Handler. Default = None Returns: object - instance of the Handler class"
},
{
"ref":"cvpysdk.datacube.handler.Handler.handler_id",
"url":52,
"doc":"Returns the value of the handler id attribute."
},
{
"ref":"cvpysdk.datacube.handler.Handler.get_handler_data",
"url":52,
"doc":"Executes handler for fetching data Args: handler_filter (str)  Filter which needs to applied for handler execution Returns: dict  Dictionary of values fetched from handler execution Raises: SDKExpception: if response is empty if response is not success if error in fetching handler data",
"func":1
},
{
"ref":"cvpysdk.datacube.handler.Handler.share",
"url":52,
"doc":"Share handler with user/usergroup Args: permission_list (list)  List of permission operation_type (int)  Operation type (2-add / 3- delete) user_id (int)  User id of share user user_name (str)  Share user name user_type (int)  Share user type (Ex : 13- User) Returns: None Raises: SDKExpception: if response is empty if response is not success if failed to share handler with User/Usergroup",
"func":1
},
{
"ref":"cvpysdk.datacube.sedstype",
"url":53,
"doc":"File to store the SEDS Type along with their value. A Python Dictionary  SEDS_TYPE_DICT is defined in this file, to store the SEDS Type. All SEDS Types must be added to this dictionary. A copy of this dicionary can be imported in all Datacube classes."
},
{
"ref":"cvpysdk.deduplication_engines",
"url":54,
"doc":"Main file for performing deduplication engine related operations on the commcell. This file has all the classes related to deduplication engine operations. DeduplicationEnigines: Class for representing all the deduplication engines associated to the commcell. DeduplicationEninge: Class for representing a single deduplication engine associated to the commcell. Store: Class for representing a single deduplication store associated to the deduplication engine. SubStore: Class for representing a single substore associated to the deduplication store. DeduplicationEngines: __init__(commcell_object) - Initialise the DeduplicationEngines class instance __repr__() - Representation string consisting of deduplication engines. __str__() - Representation string for the instance of the DeduplicationEngines class. _get_engines() - returns all engines properties on commcell get() - returns list of all engines has_engine() - checkes if a engine exisits for storage policy and copy name refresh() - refreshes all engine properties DeduplicationEngine: __init__(commcell_object, storage_policy_name, copy_name) - Initialise the DeduplicationEngine class instance __repr__() - Representation string consisting of deduplication engine. __str__() - Representation string for the instance of the DeduplicationEngine class. _initialize_policy_and_copy_id() - Gets deduplication engine properties _get_engine_properties() - initializes deduplication engine properties _initialize_stores() - initializes all the stores presnet in deduplication engine refresh() - refreshes all the deduplication engine properties all_stores() - Checks if a deduplication store exists in a engine with provided storeid id. has_store() - returns list of all stores present in deduplication engines get() - Returns store class object for sssthe store id on deduplication engine Store: __init__(commcell_object, storage_policy_name, copy_name, store_id) - Initialise the Store class instance __repr__() - Representation string consisting of deduplication store. __str__() - Representation string for the instance of the Store class. _initialize_store_properties() - initializes store properties _get_substores() - gets all substores in a store along with properties _initialize_substores() - initializes all substore properties refresh() - refreshes store properties has_substore() - checks if a substore exists in a store get() - gets a substore class object for provided substore id seal_deduplication_database() - Seals the deduplication database recover_deduplication_database() - starts DDB Reconstruction job for store run_space_reclaimation() - starts DDB space reclaimation job for store run_ddb_verification() - starts DDB verification job for store config_only_move_partition() - performs config-only ddb move operation on specified substore move_partition() - performs normal ddb move operation on specified substore add_partition() - Adding a partition to this store Attributes       all_substores  returns list of all substores present on a deduplication store  store_flags  returns the deduplication flags on store  store_name  returns the store display name  store_id  return the store id  version  returns deduplication store version  status  returns the store display name  storage_policy_name  returns storage policy name associated with store  copy_name  returns copy name associated with store  copy_id  returns copy id the store is associated to  enable_store_pruning  returns whether purning is enabled or disabled on store  enable_store_pruning.setter  sets store purning value to true or false  enable_garbage_collection  returns garbage collection property value for store  enable_garbage_collection.setter  sets garbage collection property value for store  enable_journal_pruning  Returns the value of journal pruning property  enable_journal_pruning.setter  Sets the value of journal pruning property Substore: __init__(commcell_object, storage_policy_name, copy_name, store_id, substore-id) - Initialise the SubStore class instance __repr__() - Representation string consisting of substore. __str__() - Representation string for the instance of the SubStore class. _initialize_substore_properties() - initialize substore properties of a store refresh() - refreshes substore properties mark_for_recovery() - marks a substore for recovery"
},
{
"ref":"cvpysdk.deduplication_engines.StoreFlags",
"url":54,
"doc":"An enumeration."
},
{
"ref":"cvpysdk.deduplication_engines.StoreFlags.IDX_SIDBSTORE_FLAGS_PRUNING_ENABLED",
"url":54,
"doc":""
},
{
"ref":"cvpysdk.deduplication_engines.StoreFlags.IDX_SIDBSTORE_FLAGS_DDB_NEEDS_AUTO_RESYNC",
"url":54,
"doc":""
},
{
"ref":"cvpysdk.deduplication_engines.StoreFlags.IDX_SIDBSTORE_FLAGS_DDB_UNDER_MAINTENANCE",
"url":54,
"doc":""
},
{
"ref":"cvpysdk.deduplication_engines.DeduplicationEngines",
"url":54,
"doc":"Class for getting all the deduplication engines associated with the commcell. Initialize object of the DeduplicationEngines class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the StoragePolicies class"
},
{
"ref":"cvpysdk.deduplication_engines.DeduplicationEngines.all_engines",
"url":54,
"doc":"returns list all the deduplication engines with storage polic and copy name"
},
{
"ref":"cvpysdk.deduplication_engines.DeduplicationEngines.refresh",
"url":54,
"doc":"refreshes all the deduplication engines and their properties",
"func":1
},
{
"ref":"cvpysdk.deduplication_engines.DeduplicationEngines.has_engine",
"url":54,
"doc":"Checks if a deduplication engine exists in the commcell with the input storage policy and copy name. Args: storage_policy_name (str)  name of the storage policy copy_name (str)  name of the storage policy copy Returns: bool - boolean output whether the deduplication engine exists in the commcell or not Raises: SDKException: if type of the storage policy and copy name arguments are not string",
"func":1
},
{
"ref":"cvpysdk.deduplication_engines.DeduplicationEngines.get",
"url":54,
"doc":"Returns eng class object for the engine on deduplication engines Args: storage_policy_name (str) - name of the storage policy copy_name (str) - name of the deduplication enabled copy Return: object - instance of engine class for a given storage policy and copy name Raises: SDKException: if type of arguments are not string if no engine exists with given storage policy and copy name",
"func":1
},
{
"ref":"cvpysdk.deduplication_engines.DeduplicationEngine",
"url":54,
"doc":"Class to get all stores associated for deduplication engine Initialise the DeduplicationEngine class instance. Args: commcell_object (object) - instance of class Commcell storage_policy_name (str) - storage policy name on commcell copy_name (str) - copy name under storage policy storage_policy_id (int) - storage policy id for commcell copy_id (int) - copy id under storage policy"
},
{
"ref":"cvpysdk.deduplication_engines.DeduplicationEngine.refresh",
"url":54,
"doc":"refreshes all the deduplication engine properties",
"func":1
},
{
"ref":"cvpysdk.deduplication_engines.DeduplicationEngine.all_stores",
"url":54,
"doc":"returns list of all stores present in deduplication engines"
},
{
"ref":"cvpysdk.deduplication_engines.DeduplicationEngine.storage_policy_id",
"url":54,
"doc":"returns storage policy id associated to engine"
},
{
"ref":"cvpysdk.deduplication_engines.DeduplicationEngine.copy_id",
"url":54,
"doc":"returns copy id associated to engine"
},
{
"ref":"cvpysdk.deduplication_engines.DeduplicationEngine.has_store",
"url":54,
"doc":"Checks if a deduplication store exists in a engine with provided storeid id. Args: store_id (int) - deduplication store id to check existance Returns: bool - boolean output whether the deduplication store exists in the engine or not Raises: SDKException: if type of the store id argument is not int",
"func":1
},
{
"ref":"cvpysdk.deduplication_engines.DeduplicationEngine.get",
"url":54,
"doc":"Returns store class object for the store id on deduplication engine Args: store_id (int) - id of the store on deduplication engine Return: object - instance of Store class for a given store id Raises: if type of store id argument is not integer if no store exists with given store id",
"func":1
},
{
"ref":"cvpysdk.deduplication_engines.Store",
"url":54,
"doc":"Class for performing deduplication store level operations for deduplication engine Initialise the Store class instance. Args: commcell_object (object) - commcell class instance storage_policy_name (str) - storage policy name in commcell copy_name (str) - copy name under storage policy store_id (int) - deduplication store id in commcell"
},
{
"ref":"cvpysdk.deduplication_engines.Store.refresh",
"url":54,
"doc":"refreshes all the deduplication store properties",
"func":1
},
{
"ref":"cvpysdk.deduplication_engines.Store.add_partition",
"url":54,
"doc":"Adding a partition to this store Args: path (str) - path of the new deduplication database media_agent (str) - MediaAgent name of the new deduplication database",
"func":1
},
{
"ref":"cvpysdk.deduplication_engines.Store.all_substores",
"url":54,
"doc":"returns list of all substores present on a deduplication store"
},
{
"ref":"cvpysdk.deduplication_engines.Store.has_substore",
"url":54,
"doc":"Checks if a substore exists in a deduplication store with provided substore id. Args: substore_id (int) - substore id to check existance Returns: bool - boolean output whether the substore exists in the store or not Raises: SDKException: if type of the store id argument is not int",
"func":1
},
{
"ref":"cvpysdk.deduplication_engines.Store.get",
"url":54,
"doc":"Returns substore class object for the substore id on deduplication store Args: substore_id (int) - id of the substore on deduplication store Return: object - instance of subStore class for a given substore id Raises: if type of substore id argument is not integer if no substore exists with given substore id",
"func":1
},
{
"ref":"cvpysdk.deduplication_engines.Store.store_flags",
"url":54,
"doc":"returns the deduplication flags on store"
},
{
"ref":"cvpysdk.deduplication_engines.Store.store_name",
"url":54,
"doc":"returns the store display name"
},
{
"ref":"cvpysdk.deduplication_engines.Store.store_id",
"url":54,
"doc":"return the store id"
},
{
"ref":"cvpysdk.deduplication_engines.Store.version",
"url":54,
"doc":"returns deduplication store version"
},
{
"ref":"cvpysdk.deduplication_engines.Store.status",
"url":54,
"doc":"returns the store display name"
},
{
"ref":"cvpysdk.deduplication_engines.Store.storage_policy_name",
"url":54,
"doc":"returns storage policy name associated with store"
},
{
"ref":"cvpysdk.deduplication_engines.Store.copy_name",
"url":54,
"doc":"returns copy name associated with store"
},
{
"ref":"cvpysdk.deduplication_engines.Store.copy_id",
"url":54,
"doc":"returns copy id the store is associated to"
},
{
"ref":"cvpysdk.deduplication_engines.Store.enable_garbage_collection",
"url":54,
"doc":"returns garbage collection property value for store"
},
{
"ref":"cvpysdk.deduplication_engines.Store.enable_store_pruning",
"url":54,
"doc":"returns if purning is enabled or disabled on store"
},
{
"ref":"cvpysdk.deduplication_engines.Store.enable_journal_pruning",
"url":54,
"doc":"returns journal pruning property value for store"
},
{
"ref":"cvpysdk.deduplication_engines.Store.seal_deduplication_database",
"url":54,
"doc":"Seals the deduplication database",
"func":1
},
{
"ref":"cvpysdk.deduplication_engines.Store.recover_deduplication_database",
"url":54,
"doc":"refresh store properties and start reconstruction job if at least one substore is marked for recovery Args: full_reconstruction (bool) - to reconstruct without using previous backup (True/False) Default: False scalable_resources (bool) - to run reconstruction using scalable resources Default: True Returns: object - instance of Job class for DDB Reconstruction job Raises: SDKException: if DDB Reconstruction job failed if response if empty if response in not success",
"func":1
},
{
"ref":"cvpysdk.deduplication_engines.Store.run_space_reclaimation",
"url":54,
"doc":"runs DDB Space reclaimation job with provided level Args: level (int) - criteria for space reclaimation level (1, 2, 3, 4) Default: 3 clean_orphan_data (bool) - run space reclaimation with OCL or not (True/False) Default: False use_scalable_resource (bool) - Use Scalable Resource Allocation while running DDB Space Reclamation Job Default: True num_streams (str)  Number of streams with which job will run. defragmentation(bool) - run space reclamation with Defragmentation or not (True/False) Default : True Returns: object - instance of Job class for DDB Verification job Raises: SDKException: if invalid level is provided if DDB space reclaimation job failed if response if empty if response in not success",
"func":1
},
{
"ref":"cvpysdk.deduplication_engines.Store.run_ddb_verification",
"url":54,
"doc":"runs deduplication data verification(dv2) job with verification type and dv2 option Args: incremental_verification (bool) - DV2 job type, incremental or Full (True/False) Default: True (Incremental) quick_verification (bool) - DV2 job option, Quick or Complete (True/False) Default: True (quick verification) use_scalable_resource (bool) - Use Scalable Resource Allocation while running DDB Verification Job Default: True max_streams (int) - DV2 job option, maximum number of streams to use. By default, job uses max streams. total_jobs_to_process (int) - Batch size for number of backup jobs to be picked for verification simultaneously Default: 1000 jobs per batch Returns: object - instance of Job class for DDB Verification job Raises: SDKException: if DDB Verification job failed if response if empty if response in not success",
"func":1
},
{
"ref":"cvpysdk.deduplication_engines.Store.config_only_move_partition",
"url":54,
"doc":"runs config-only ddb move operation on specified substore Args: substoreid - (int) - substore Id for partition to be moved dest_path - (str) - full path for partition destination directory dest_ma_name - (str) - destination media agent name Returns: boolean - returns true or false value depending on success of config only",
"func":1
},
{
"ref":"cvpysdk.deduplication_engines.Store.move_partition",
"url":54,
"doc":"runs normal ddb move operation on specified substore Args: substoreid - (int) - substore Id for partition to be moved dest_path - (str) - full path for partition destination directory dest_ma_name - (str) - destination media agent name Returns: object - instance of Job class for DDB Move job Raises: SDKException: if DDB Move job failed if response if empty if response in not success",
"func":1
},
{
"ref":"cvpysdk.deduplication_engines.SubStore",
"url":54,
"doc":"Class to performing substore level operations for Deduplication engine Initialise the SubStore class instance. Args: commcell_object (object) - commcell class instance storage_policy_name (str) - storage policy name in commcell copy_name (str) - copy name under storage policy store_id (int) - deduplication store id in commcell substore_id (int) - substore id under deduplication store"
},
{
"ref":"cvpysdk.deduplication_engines.SubStore.refresh",
"url":54,
"doc":"refresh the properties of a substore",
"func":1
},
{
"ref":"cvpysdk.deduplication_engines.SubStore.mark_for_recovery",
"url":54,
"doc":"mark a substore for recovery and refresh substore properties",
"func":1
},
{
"ref":"cvpysdk.deduplication_engines.SubStore.media_agent",
"url":54,
"doc":"returns media agent for the substore"
},
{
"ref":"cvpysdk.deduplication_engines.SubStore.media_agent_id",
"url":54,
"doc":"returns media agent id for the substore"
},
{
"ref":"cvpysdk.deduplication_engines.SubStore.path",
"url":54,
"doc":"returns path for the substore"
},
{
"ref":"cvpysdk.deduplication_engines.SubStore.store_id",
"url":54,
"doc":"returns store id for the substore"
},
{
"ref":"cvpysdk.deduplication_engines.SubStore.substore_id",
"url":54,
"doc":"returns substore id"
},
{
"ref":"cvpysdk.deployment",
"url":55,
"doc":"Initialize Deployment for the SDK."
},
{
"ref":"cvpysdk.deployment.cache_config",
"url":56,
"doc":"\" Main file for performing the software cache configuration related operations CommserveCache  Class for performing operations on the CS cache RemoteCache  Class for performing operations on the remote cache CommServeCache        __init__(commcell_object)  initialize commcell_object of CommServeCache class associated with the commcell get_request_xml()  returns request xml for cache and remote cache related operations get_cs_cache_path()  returns CS cache path delete_cache()  deletes CS cache commit_cache()  commits CS cache get_remote_cache_clients()  fetches the list of Remote Cache configured for a particular Admin/Tenant RemoteCache        __init__(commcell, client_object)  initialize commcell and client_object of RemoteCache class associated with the client get_remote_cache_path()  returns remote cache path, if exists, else None configure_remote_cache()  Configures client as remote cache configure_packages_to_sync()  Configures packages to sync for the remote cache assoc_entity_to_remote_cache()  Associates entity to the Remote Cache delete_remote_cache_contents()  deletes remote cache contents"
},
{
"ref":"cvpysdk.deployment.cache_config.CommServeCache",
"url":56,
"doc":"\"class for downloading software packages Initialize commcell_object of the Download class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the CommServeCache class"
},
{
"ref":"cvpysdk.deployment.cache_config.CommServeCache.get_request_xml",
"url":56,
"doc":"Returns request xml for cache and remote cache related operations",
"func":1
},
{
"ref":"cvpysdk.deployment.cache_config.CommServeCache.get_cs_cache_path",
"url":56,
"doc":"Returns CS cache path Returns: cs_cache_path (str)  returns cs cache path Raises: SDKException: - Failed to execute the api - Response is incorrect/empty",
"func":1
},
{
"ref":"cvpysdk.deployment.cache_config.CommServeCache.delete_cache",
"url":56,
"doc":"Delete CS cache Raises: SDKException: - Failed to execute the api - Response is incorrect",
"func":1
},
{
"ref":"cvpysdk.deployment.cache_config.CommServeCache.commit_cache",
"url":56,
"doc":"Commits CS cache Raises: SDKException: - Failed to execute the api - Response is incorrect",
"func":1
},
{
"ref":"cvpysdk.deployment.cache_config.CommServeCache.get_remote_cache_clients",
"url":56,
"doc":"Fetches the List of Remote Cache configured for a particular Admin/Tenant :return: List of Remote Cache configured",
"func":1
},
{
"ref":"cvpysdk.deployment.cache_config.RemoteCache",
"url":56,
"doc":"\"class for downloading software packages Initialize commcell_object of the Download class. Args: commcell (object)  commcell object client_name  client name Returns: object - instance of the RemoteCache class"
},
{
"ref":"cvpysdk.deployment.cache_config.RemoteCache.get_remote_cache_path",
"url":56,
"doc":"Returns remote cache path, if exists, else None Returns: remote_cache_path (str) - remote cache path of the client if exists None - otherwise Raises: SDKException: - Failed to execute the api - Response is incorrect/empty",
"func":1
},
{
"ref":"cvpysdk.deployment.cache_config.RemoteCache.configure_remotecache",
"url":56,
"doc":"Configures client as remote cache Args: cache_path (str) - Remote cache path Raises: SDKException: - Failed to execute the api - Response is incorrect",
"func":1
},
{
"ref":"cvpysdk.deployment.cache_config.RemoteCache.configure_packages_to_sync",
"url":56,
"doc":"Configures packages to sync for the remote cache Args: win_os (list)  list of windows oses to sync win_package_list (list) list of windows packages to sync unix_os (list)  list of unix oses to sync unix_package_list (list) list of unix packages to sync Raises: SDKException: - Failed to execute the api - Response is incorrect - Incorrect input Usage: commcell_obj.configure_packages_to_sync() win_os = [\"WINDOWS_32\", \"WINDOWS_64\"] unix_os = [\"UNIX_LINUX64\", \"UNIX_AIX\"] win_package_list = [\"FILE_SYSTEM\", \"MEDIA_AGENT\"] unix_package_list = [\"FILE_SYSTEM\", \"MEDIA_AGENT\"] OS_Name_ID_Mapping, WindowsDownloadFeatures and UnixDownloadFeatures enum is used for providing input to the configure_packages_to_sync method, it can be imported by >>> from cvpysdk.deployment.deploymentconstants import UnixDownloadFeatures from cvpysdk.deployment.deploymentconstants import OS_Name_ID_Mapping from cvpysdk.deployment.deploymentconstants import WindowsDownloadFeatures",
"func":1
},
{
"ref":"cvpysdk.deployment.cache_config.RemoteCache.delete_remote_cache_contents",
"url":56,
"doc":"Delete remote cache contents Raises: SDKException: - Failed to execute the api - Response is incorrect",
"func":1
},
{
"ref":"cvpysdk.deployment.cache_config.RemoteCache.assoc_entity_to_remote_cache",
"url":56,
"doc":"Points/Associates entity to the Remote Cache Client Args: client_name (str)  The client which has to be pointed to Remote Cache client_group_name (str)  The client_group which has to be pointed to Remote Cache Raises: SDKException: - Failed to execute the api - Response is incorrect",
"func":1
},
{
"ref":"cvpysdk.deployment.deploymentconstants",
"url":57,
"doc":"File that contains list of constants used by Deployment package"
},
{
"ref":"cvpysdk.deployment.deploymentconstants.DownloadOptions",
"url":57,
"doc":"Enum with list of all options available under Download software"
},
{
"ref":"cvpysdk.deployment.deploymentconstants.DownloadOptions.LATEST_SERVICEPACK",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.DownloadOptions.LATEST_HOTFIXES",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.DownloadOptions.SERVICEPACK_AND_HOTFIXES",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.DownloadPackages",
"url":57,
"doc":"List of supported OS groups."
},
{
"ref":"cvpysdk.deployment.deploymentconstants.DownloadPackages.WINDOWS_32",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.DownloadPackages.WINDOWS_64",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.DownloadPackages.UNIX_AIX",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.DownloadPackages.UNIX_AIX32",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.DownloadPackages.UNIX_MAC",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.DownloadPackages.UNIX_FREEBSD86",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.DownloadPackages.UNIX_FREEBSD64",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.DownloadPackages.UNIX_HP",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.DownloadPackages.UNIX_LINUX86",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.DownloadPackages.UNIX_LINUX64",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.DownloadPackages.UNIX_S390",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.DownloadPackages.UNIX_S390_31",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.DownloadPackages.UNIX_PPC64",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.DownloadPackages.UNIX_SOLARIS86",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.DownloadPackages.UNIX_SOLARIS64",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.DownloadPackages.UNIX_SOLARIS_SPARC",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.DownloadPackages.UNIX_SOLARIS_SPARC86",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.DownloadPackages.UNIX_LINUX64LE",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.UnixDownloadFeatures",
"url":57,
"doc":"list of Unix features supported"
},
{
"ref":"cvpysdk.deployment.deploymentconstants.UnixDownloadFeatures.COMMSERVE",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.UnixDownloadFeatures.CASSANDRA",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.UnixDownloadFeatures.CLOUD_APPS",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.UnixDownloadFeatures.DOMINO_DATABASE",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.UnixDownloadFeatures.FILE_SYSTEM",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.UnixDownloadFeatures.FILE_SYSTEM_CORE",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.UnixDownloadFeatures.FILE_SYSTEM_FOR_IBMI",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.UnixDownloadFeatures.FILE_SYSTEM_FOR_OPEN_VMS",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.UnixDownloadFeatures.MEDIA_AGENT",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.UnixDownloadFeatures.ORACLE",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.UnixDownloadFeatures.POSTGRESQL",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.UnixDownloadFeatures.SAPHANA",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.UnixDownloadFeatures.SQLSERVER",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.UnixDownloadFeatures.VIRTUAL_SERVER",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.UnixDownloadFeatures.TEST_AUTOMATION",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.UnixDownloadFeatures.PYTHON_SDK",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.UnixDownloadFeatures.CONTENT_ANALYZER",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.UnixDownloadFeatures.DB2_AGENT",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.UnixDownloadFeatures.INFORMIX",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.UnixDownloadFeatures.SYBASE",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures",
"url":57,
"doc":"list of Windows features supported"
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures.COMMSERVE",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures.ACTIVE_DIRECTORY",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures.CLOUD_APPS",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures.DOMINO_DATABASE",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures.EXCHANGE",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures.FILE_SYSTEM",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures.FILE_SYSTEM_CORE",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures.MEDIA_AGENT",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures.SHAREPOINT",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures.ORACLE",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures.POSTGRESQL",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures.SQLSERVER",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures.VIRTUAL_SERVER",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures.VSS_PROVIDER",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures.VSS_HARDWARE_PROVIDER",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures.WEB_CONSOLE",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures.TEST_AUTOMATION",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures.PYTHON_SDK",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures.COMMSERVE_LITE",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures.CONTENT_ANALYZER",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures.INDEX_STORE",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures.INDEX_GATEWAY",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures.CONTENT_EXTRACTOR",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures.DB2_AGENT",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures.INFORMIX",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures.SYBASE",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.WindowsDownloadFeatures.WEB_SERVER",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.OSNameIDMapping",
"url":57,
"doc":"Class for os name to id mapping"
},
{
"ref":"cvpysdk.deployment.deploymentconstants.OSNameIDMapping.WINDOWS_32",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.OSNameIDMapping.WINDOWS_64",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.OSNameIDMapping.UNIX_AIX",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.OSNameIDMapping.UNIX_AIX32",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.OSNameIDMapping.UNIX_FREEBSD86",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.OSNameIDMapping.UNIX_FREEBSD64",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.OSNameIDMapping.UNIX_HP",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.OSNameIDMapping.UNIX_LINUX86",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.OSNameIDMapping.UNIX_LINUX64",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.OSNameIDMapping.UNIX_S390",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.OSNameIDMapping.UNIX_S390_31",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.OSNameIDMapping.UNIX_PPC64",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.OSNameIDMapping.UNIX_SOLARIS86",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.OSNameIDMapping.UNIX_SOLARIS64",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.OSNameIDMapping.UNIX_SOLARIS_SPARC",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.OSNameIDMapping.UNIX_SOLARIS_SPARC86",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.OSNameIDMapping.UNIX_LINUX64LE",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.InstallUpdateOptions",
"url":57,
"doc":"Enum with list of all options available under Upgrade software"
},
{
"ref":"cvpysdk.deployment.deploymentconstants.InstallUpdateOptions.UPDATE_INSTALL_CV",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.InstallUpdateOptions.UPDATE_INSTALL_SQL",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.InstallUpdateOptions.UPDATE_INSTALL_WINOS",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.InstallUpdateOptions.UPDATE_INSTALL_FREL_OS_UPDATES",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.InstallUpdateOptions.UPDATE_INSTALL_HYPERSCALE_OS_UPDATES",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.InstallUpdateOptions.UPDATE_INSTALL_HSX_STORAGE_UPDATES",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.deploymentconstants.InstallUpdateOptions.UPDATE_INSTALL_HSX_STORAGE_UPDATES_DISRUPTIVE_MODE",
"url":57,
"doc":""
},
{
"ref":"cvpysdk.deployment.download",
"url":58,
"doc":"\" Main file for performing the download operation Download     __init__(commcell_object)  initialize commcell_object of Download class associated with the commcell download_software()  downloads software packages in the commcell sync_remote_cache()  syncs remote cache"
},
{
"ref":"cvpysdk.deployment.download.Download",
"url":58,
"doc":"\"class for downloading software packages Initialize commcell_object of the Download class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the Download class"
},
{
"ref":"cvpysdk.deployment.download.Download.download_software",
"url":58,
"doc":"Downloads the os packages on the commcell Args: options (enum)  Download option to download software os_list (list of enum)  list of windows/unix packages to be downloaded service_pack (int)  service pack to be downloaded cu_number (int)  maintenance release number sync_cache (bool)  True if download and sync False only download sync_cache_list (list)  list of names of remote caches to sync use None to sync all caches schedule_pattern (dict)  pattern for schedule task Returns: object - instance of the Job class for this download job Raises: SDKException: if Download job failed if response is empty if response is not success if another download job is running Usage: - if download_software is not given any parameters it takes default value of latest service pack for options and downloads WINDOWS_64 package >>> commcell_obj.download_software() - DownloadOptions and DownloadPackages enum is used for providing input to the download software method, it can be imported by >>> from cvpysdk.deployment.deploymentconstants import DownloadOptions from cvpysdk.deployment.deploymentconstants import DownloadPackages - sample method calls for different options, for latest service pack >>> commcell_obj.download_software( options=DownloadOptions.lATEST_SERVICEPACK.value, os_list=[DownloadPackages.WINDOWS_64.value] ) - For Latest hotfixes for the installed service pack >>> commcell_obj.download_software( options='DownloadOptions.LATEST_HOTFIXES.value', os_list=[DownloadPackages.WINDOWS_64.value, DownloadPackages.UNIX_LINUX64.value] ) - For service pack and hotfixes >>> commcell_obj.download_software( options='DownloadOptions.SERVICEPACK_AND_HOTFIXES.value', os_list=[DownloadPackages.UNIX_MAC.value], service_pack=13, cu_number=42 )  NOTE: service_pack parameter must be specified for third option",
"func":1
},
{
"ref":"cvpysdk.deployment.download.Download.copy_software",
"url":58,
"doc":"copies media from the specified location on the commcell Args: media_loc (str)  Media Location to be used for copy software username (str)  username to authenticate to external location password (str)  password to authenticate to external location sync_cache (bool)  True if download and sync False only download schedule_pattern(dict)  pattern for schedule task Returns: object - instance of the Job class for this copy software job Raises: SDKException: if Download job failed if response is empty if response is not success if another download job is running Usage: - if media_location directory is local to the machine - username and password is not needed >>> commcell_obj.copy_software(media_loc = \"C:\\Downloads\\Media\") - if Media_location directory is remote- username and passsword(base 64 encoded) are needed to authenticate the cache >>> commcell_obj.copy_software( media_loc = \" subdomain.company.com\\Media\", username = \"domainone\\userone\", password = \"base64encoded password\" )",
"func":1
},
{
"ref":"cvpysdk.deployment.download.Download.sync_remote_cache",
"url":58,
"doc":"Syncs remote cache Args: client_list  list of client names Default is None. By default all remote cache clients are synced Returns: object - instance of the Job class for sync job Raises: SDKException: if sync job failed if response is empty if response is not success if another sync job is running with the given client",
"func":1
},
{
"ref":"cvpysdk.deployment.install",
"url":59,
"doc":"\" Main file for performing the download operation Download     __init__(commcell_object)  initialize commcell_object of Install class associated with the commcell repair_software  triggers Repair of the software on a specified client/client group push_servicepack_and_hotfix()  installs the latest service pack in the client machine install_software  Installs the features selected on the machines selected"
},
{
"ref":"cvpysdk.deployment.install.Install",
"url":59,
"doc":"\"class for installing software packages Initialize object of the Install class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the Install class"
},
{
"ref":"cvpysdk.deployment.install.Install.repair_software",
"url":59,
"doc":"triggers Repair of the software for a specified client machine Args: client (str)  Client machine to re-install service pack on client_group (str)  Client group to re-install service pack on (eg : 'Media Agent') username (str)  username of the machine to re-install features on default : None password (str)  base64 encoded password default : None reboot_client (bool)  boolean to specify whether to reboot the client or not default: False Returns: object - instance of the Job class for this download job Raises: SDKException: if re-install job failed if response is empty if response is not success  NOTE: repair_software can be used for client/ client_group not both; When both inputs are given only the client computer will be repaired  NOTE: If machine requires reboot and reboot is not selected, machine won't be updated  NOTE: If machine requires login credentials and if not provided - client reinstallation might fail.",
"func":1
},
{
"ref":"cvpysdk.deployment.install.Install.push_servicepack_and_hotfix",
"url":59,
"doc":"Installs the software packages on the clients Args: client_computers (list)  Client machines to install service pack on client_computer_groups (list)  Client groups to install service pack on all_client_computers (bool)  boolean to specify whether to install on all client computers or not default: False all_client _computer_groups (bool)  boolean to specify whether to install on all client computer groups or not default: False reboot_client (bool)  boolean to specify whether to reboot the client or not default: False run_db_maintenance (bool)  boolean to specify whether to run db maintenance not default: True maintenance_release_only (bool)  for clients of feature releases lesser than CS, this option maintenance release of that client FR, if present in cache  kwargs: (dict)  Key value pairs for supporting conditional initializations Supported - schedule_pattern (dict)  Request JSON for scheduling the operation install_update_options (int)  Refer InstallUpdateOptions from deploymentconstants module Returns: object - instance of the Job/Task class for this download Raises: SDKException: if schedule is not of type dictionary if Download job failed if response is empty if response is not success if another download job is already running  NOTE: push_serivcepack_and_hotfixes cannot be used for revision upgrades",
"func":1
},
{
"ref":"cvpysdk.deployment.install.Install.install_software",
"url":59,
"doc":"Installs the features selected on the given machines Args: client_computers (list)  list of hostnames/IP address to install the features on default : None windows_features (list of enum)  list of windows features to be installed default : None unix_features (list of enum)  list of unix features to be installed default : None username (str)  username of the machine to install features on default : None password (str)  base64 encoded password default : None install_path (str)  Install to a specified path on the client default : None log_file_loc (str)  Install to a specified log path on the client default : None client_group_name (list)  List of client groups for the client default : None storage_policy_name (str)  Storage policy for the default subclient default : None sw_cache_client (str)  Remote Cache Client Name/ Over-riding Software Cache default : None (Use CS Cache by default)  kwargs: (dict)  Key value pairs for supporting conditional initializations Supported - install_flags (dict) - dictionary of install flag values Ex : install_flags = {\"preferredIPFamily\":2, \"install32Base\":True} db2_logs_location (dict) - dictionary of db2 logs location Ex: db2_logs_location = { \"db2ArchivePath\": \"/opt/Archive/\", \"db2RetrievePath\": \"/opt/Retrieve/\", \"db2AuditErrorPath\": \"/opt/Audit/\" } index_cache_location (str) - Set index cache location for MA package Ex: index_cache_location = \"/opt/IndexCache/\" firewall_inputs (dict) - dictionary for firewall configuration Ex: firewall_inputs = { \"enableFirewallConfig\": True, \"firewallConnectionType\": 1, \"httpProxyConfigurationType\": 0, \"proxyClientName\": \"Proxy_client_name\", \"proxyHostName\": \"Proxy_host_name\", \"portNumber\": \"port_number\", \"encryptedTunnel\": \"encrypted_tunnel\" } firewall_inputs can take the following values Ex 1: Client can open connection to CS firewall_inputs = { \"enableFirewallConfig\": True, \"firewallConnectionType\": 0, \"proxyClientName\":  , \"proxyHostName\":  , \"portNumber\": \"port_number\", \"httpProxyConfigurationType\": 0, \"encryptedTunnel\": True/False } Ex 2: CS can open connection to Client firewall_inputs = { \"enableFirewallConfig\": True, \"firewallConnectionType\": 1, \"proxyClientName\":  , \"proxyHostName\":  , \"portNumber\": \"port_number\", \"httpProxyConfigurationType\": 0, \"encryptedTunnel\": True/False } Ex 3: Client can communicate to CS using Proxy firewall_inputs = { \"enableFirewallConfig\": True, \"firewallConnectionType\": 2, \"httpProxyConfigurationType\": 0, \"proxyClientName\": \"Proxy_client_name\", \"proxyHostName\": \"Proxy_host_name\", \"portNumber\": \"port_number\", \"encryptedTunnel\": True/False } webconsole_inputs (dict) - dictionary for webconsole configuration Ex: webconsole_inputs = { \"webServerClientId\": \"webservername\" } Returns: object - instance of the Job class for this install_software job Raises: SDKException: if install job failed if response is empty if response is not success Usage: - UnixDownloadFeatures and WindowsDownloadFeatures enum is used for providing input to the install_software method, it can be imported by >>> from cvpysdk.deployment.deploymentconstants import UnixDownloadFeatures from cvpysdk.deployment.deploymentconstants import WindowsDownloadFeatures - sample method call >>> commcell_obj.install_software( client_computers=[win_machine1, win_machine2], windows_features=[WindowsDownloadFeatures.FILE_SYSTEM.value], unix_features=None, username='username', password='password', install_path='C:\\Temp, log_file_loc='/var/log', client_group_name=[My_Servers], storage_policy_name='My_Storage_Policy', install_flags={\"preferredIPFamily\":2})  NOTE: Either Unix or Windows clients_computers should be chosen and not both",
"func":1
},
{
"ref":"cvpysdk.deployment.uninstall",
"url":60,
"doc":"\" Main file for performing the Uniinstall operations Download     __init__(commcell_object)  initialize commcell_object of Uninstall class associated with the commcell uninstall_software  Uninstalls all the packages of the selected client."
},
{
"ref":"cvpysdk.deployment.uninstall.Uninstall",
"url":60,
"doc":"\"class for Uninstalling software packages Initialize object of the Uninstall class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the Uninstall class"
},
{
"ref":"cvpysdk.deployment.uninstall.Uninstall.uninstall_software",
"url":60,
"doc":"Performs readiness check on the client Args: force_uninstall (bool): Uninstalls packages forcibly. Defaults to True. client_name (str): The client_name whose packages are to be uninstalled. client_composition (list): The client_coposition will contain the list of components need to be uninstalled. Usage: uninstall.uninstall_software(client_name=\"freezaclient\",force_uninstall=False,client_composition=[{ \"activateClient\": True, \"packageDeliveryOption\": 0, \"components\": { \"componentInfo\": [ { \"osType\": \"Windows\", \"ComponentName\": \"High Availability Computing\" }, { \"osType\": \"Windows\", \"ComponentName\": \"Index Store\" }, { \"osType\": \"Windows\", \"ComponentName\": \"Index Gateway\" } ] } } ]) Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.dev_test_group",
"url":61,
"doc":"Main file for performing virtual lab restore operations on the Commcell. Dev_Test_Group : Class for representing all the Virtual Lab creation associated with the Commcell. Dev_Test_Group: __init__(commcell_object)  initialize the VirtualMachinePolicies instance for the Commcell"
},
{
"ref":"cvpysdk.dev_test_group.Dev_Test_Group",
"url":61,
"doc":"Class for Virtual Lab restore opreation with the Commcell Initialize object of the VirtualMachinePolicies class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the Dev_Test_Group class"
},
{
"ref":"cvpysdk.dev_test_group.Dev_Test_Group.dev_test_lab_json",
"url":61,
"doc":"Runs Virtual Lab job for the Dev-Test-Group at Commcell Level. vapp_prop (dict)  options like vappName and vappId to be include while making the request Returns: object - instance of the Job class for the Virtual Lab job",
"func":1
},
{
"ref":"cvpysdk.disasterrecovery",
"url":62,
"doc":"main file for performing disaster recovery operations on commcell DisasterRecovery : Class for performing DR backup with various options. DisasterRecoveryManagement : Class for performing disaster recovery management operations. DisasterRecovery:         = __init__()  initializes DisasterRecovery class object reset_to_defaults()  resets the properties to default values disaster_recovery_backup()  function to run DR backup _process_drbackup_response()  process the disaster recovery backup request restore_out_of_place()  function to run DR restore operation _advanced_dr_backup()  includes advance dr backup options _generatedrbackupjson()  Generate JSON corresponds to DR backup job _process_createtask_response() Runs the CreateTask API with the request JSON provided for DR backup. _filter_paths()  Filters the paths based on the Operating System and Agent. DisasterRecovery Attributes               backuptype  set or get backup type  is_compression_enabled  set or get compression property  is_history_db_enabled  set or get history db property  is_workflow_db_enabled  set or get workflow db property  is_appstudio_db_enabled  set or get appstudio db property  is_cvcloud_db_enabled  set or get cvcloud db property  is_dm2_db_enabled  set or get dm2db property  client_list  set or get client list property. DisasterRecoveryManagement:              __init__()  initializes DisasterRecoveryManagement class object _get_dr_properties()  Executes get request on server and retrives the dr settings _set_dr_properties()  Executes post request on server and sets the dr settings refresh()  retrives the latest dr settings set_local_dr_path  sets the local dr path set_network_dr_path  sets the unc path upload_metdata_to_commvault_cloud  sets ths account to be used for commvault cloud backup. upload_metdata_to_cloud_library  sets the libarary to be used for cloud backup. impersonate_user  account to be used for execution of pre/post scripts use_impersonate_user  gets the setting use_impersonate_user DisasterRecoveryManagement Attributes:                   =  number_of_metadata  set or get number of metadata to be retained property  use_vss  set or get use vss property  wild_card_settings  set or get wild card settings property  backup_metadata_folder  get backup metadata folder property  upload_backup_metadata_to_cloud  get upload backup metadata to cloud property  upload_backup_metadata_to_cloud_lib  get upload backup metadata to cloud lib.  dr_storage_policy  set or get dr storage policy property  pre_scan_process  set or get pre scan process  post_scan_process  set or get post scan process  pre_backup_process  set or get pre backup process  post_backup_process  set or get post backup process  run_post_scan_process  set or get run post scan process  run_post_backup_process  set or get run post backup process"
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecovery",
"url":62,
"doc":"Class to perform all the disaster recovery operations on commcell Initializes DisasterRecovery object Args: commcell (object)  instance of commcell"
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecovery.reset_to_defaults",
"url":62,
"doc":"Resets the instance variables to default values Returns: None",
"func":1
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecovery.disaster_recovery_backup",
"url":62,
"doc":"Runs a DR job for Commserv Returns: object - instance of the Job class for this backup job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecovery.restore_out_of_place",
"url":62,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up restore_jobs (list)  list of jobs to be restored if the job is index free restore Returns: object - instance of the Job class for this restore job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecovery.client_list",
"url":62,
"doc":"Treats the client_list as a read-only attribute."
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecovery.is_compression_enabled",
"url":62,
"doc":"Treats the iscompressionenabled as a read-only attribute."
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecovery.backup_type",
"url":62,
"doc":"Treats the backup_type as a read-only attribute."
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecovery.is_history_db_enabled",
"url":62,
"doc":"Treats the historydb as a read-only attribute."
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecovery.is_workflow_db_enabled",
"url":62,
"doc":"Treats the workflowdb as a read-only attribute."
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecovery.is_appstudio_db_enabled",
"url":62,
"doc":"Treats the workflowdb as a read-only attribute."
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecovery.is_cvcloud_db_enabled",
"url":62,
"doc":"Treats the cvclouddb as a read-only attribute."
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecovery.is_dm2_db_enabled",
"url":62,
"doc":"Treats the dm2db as a read-only attribute."
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecovery.disaster_recovery_management",
"url":62,
"doc":"Returns the instance of the DisasterRecoveryManagement class"
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecoveryManagement",
"url":62,
"doc":"Class to perform all the disaster recovery management operations on commcell Initializes DisasterRecoveryManagement object Args: commcell (object)  instance of commcell"
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecoveryManagement.refresh",
"url":62,
"doc":"refreshs the dr settings associated with commcell. Returns: None",
"func":1
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecoveryManagement.set_local_dr_path",
"url":62,
"doc":"Sets local DR path Args: path (str)  local path. Returns: None",
"func":1
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecoveryManagement.set_network_dr_path",
"url":62,
"doc":"Sets network DR path Args: path (str)  UNC path. username (str)  username with admin privileges of the remote machine. password (str)  password. Returns: None",
"func":1
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecoveryManagement.upload_metdata_to_commvault_cloud",
"url":62,
"doc":"Enable/Disable upload metadata to commvault cloud setting. Args: flag (bool)  True/False. username (str)  username of the commvault cloud. password (str)  password of the commvault cloud. Returns: None",
"func":1
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecoveryManagement.upload_metdata_to_cloud_library",
"url":62,
"doc":"Enable/Disable upload metadata to cloud library Args: flag (bool)  True/False. libraryname (str/object)  Third party cloud library name/disklibrary object. Returns: None",
"func":1
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecoveryManagement.impersonate_user",
"url":62,
"doc":"Enable/Disable Impersonate user option for pre/post scripts. Args: flag (bool)  True/False. username (str)  username with admin privileges. password (str)  password for the account. Returns: None",
"func":1
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecoveryManagement.use_impersonate_user",
"url":62,
"doc":"gets the impersonate user(True/False) Returns: True/False"
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecoveryManagement.number_of_metadata",
"url":62,
"doc":"gets the value, Number of metadata folders to be retained. Returns: number of metadata (int)"
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecoveryManagement.use_vss",
"url":62,
"doc":"gets the value, use vss() Returns: True/False"
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecoveryManagement.wild_card_settings",
"url":62,
"doc":"gets the wild card settings Returns: (str)  client logs that are to be backed up"
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecoveryManagement.backup_metadata_folder",
"url":62,
"doc":"gets the backup metadata folder Returns: (str)  Backup metadata folder"
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecoveryManagement.upload_backup_metadata_to_cloud",
"url":62,
"doc":"gets the upload backup metadata to cloud setting Returns: True/False"
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecoveryManagement.upload_backup_metadata_to_cloud_lib",
"url":62,
"doc":"gets the upload metadata to cloud lib Returns: True/False"
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecoveryManagement.dr_storage_policy",
"url":62,
"doc":"gets the storage policy name, that is being used for DR backups Returns: (str)  Name of the storage policy"
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecoveryManagement.pre_scan_process",
"url":62,
"doc":"gets the script path of the pre scan process Returns: (str)  script path"
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecoveryManagement.post_scan_process",
"url":62,
"doc":"gets the script path of the post scan process Returns: (str)  script path"
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecoveryManagement.pre_backup_process",
"url":62,
"doc":"gets the script path of the pre backup process Returns: (str)  script path"
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecoveryManagement.post_backup_process",
"url":62,
"doc":"gets the script path of the post backup process Returns: (str)  script path"
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecoveryManagement.run_post_scan_process",
"url":62,
"doc":"gets the value, run post scan process Returns: True/False"
},
{
"ref":"cvpysdk.disasterrecovery.DisasterRecoveryManagement.run_post_backup_process",
"url":62,
"doc":"gets the value, run post backup process Returns: True/False"
},
{
"ref":"cvpysdk.domains",
"url":63,
"doc":"File for performing domain related operations. Domains: Class for representing all the associated domains with the commcell. Domains: __init__(commcell_object)  initialize instance of the Domains associated with the specified commcell __str__()  returns all the domains associated with the commcell __repr__()  returns the string for the instance of the Domains class __len__()  returns the number of domains associated with the Commcell __getitem__()  returns the name of the domain for the given domain Id or the details for the given domain name _get_domains()  gets all the domains associated with the commcell specified all_domains()  returns the dict of all the domanin configured has_domain()  checks if a domain exists with the given name or not get(domain_name)  returns the instance of the Domain class, for the the input domain name delete(domain_name)  deletes the domain from the commcell refresh()  refresh the domains associated with the commcell Domain: __init__()  initializes instance of the Domain class for doing operations on the selected Domain __repr__()  returns the string representation of an instance of this class _get_domain_id()  Gets the domain id associated with this domain _get_domain_properties  get the properties of the domain set_sso  Enables/Disables single sign on a domain"
},
{
"ref":"cvpysdk.domains.Domains",
"url":63,
"doc":"Class for getting all the domains associated with a commcell. Initialize object of the Domains class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the Domains class"
},
{
"ref":"cvpysdk.domains.Domains.all_domains",
"url":63,
"doc":"Returns the domains configured on this commcell dict - consists of all domain in the commcell { \"domain1_name\": domain_Details_dict1, \"domain2_name\": domain_Details_dict2 }"
},
{
"ref":"cvpysdk.domains.Domains.has_domain",
"url":63,
"doc":"Checks if a domain exists in the commcell with the input domain name. Args: domain_name (str)  name of the domain Returns: bool - boolean output whether the domain exists in the commcell or not Raises: SDKException: if type of the domain name argument is not string",
"func":1
},
{
"ref":"cvpysdk.domains.Domains.get",
"url":63,
"doc":"Returns a domain object of the specified domain name. Args: domain_name (str)  name of the domain Returns: object of the domain Raises: SDKException: if domain doesn't exist with specified name if type of the domain name argument is not string",
"func":1
},
{
"ref":"cvpysdk.domains.Domains.delete",
"url":63,
"doc":"Deletes the domain from the commcell. Args: domain_name (str)  name of the domain to remove from the commcell Raises: SDKException: if type of the domain name argument is not string if failed to delete domain if response is empty if response is not success if no domain exists with the given name",
"func":1
},
{
"ref":"cvpysdk.domains.Domains.refresh",
"url":63,
"doc":"Refresh the domains associated with the Commcell.",
"func":1
},
{
"ref":"cvpysdk.domains.Domains.add",
"url":63,
"doc":"Adds a new domain to the commcell. Args: domain_name (str)  name of the domain netbios_name (str)  netbios name of the domain user_name (str)  user name of the domain password (str)  password of the domain company_id (int)  company id for which the domain needs to be added for ad_proxy_list (list)  list of client objects to be used as proxy. default: None if no proxy required enable_sso (bool)  enable sso for domain type_of_server (str)  Type of server to be registered values: \"active directory\" \"apple directory\" \"oracle ldap\" \"open ldap\" \"ldap server\"  kwargs  required parameters for LDAP Server registration and other additional settings can be passed group_filter (str)  group filter for ldap server user_filter (str)  user filter for ldap server unique_identifier (str)  unique identifier for ldap server base_dn (str)  base dn for ldap server additional_settings (list)  additional settings for directory server. eg:- [ { \"relativepath\": \"CommServDB.Console\", \"keyName\": \"basedn\", \"type\": \"STRING\", \"value\": \"cn=automation_group2,dc=example,dc=com\", \"enabled\": 1 } ] Returns: dict - properties of domain Raises: SDKException: if type of the domain name argument is not string if no domain exists with the given name",
"func":1
},
{
"ref":"cvpysdk.domains.Domain",
"url":63,
"doc":"Class for representing a particular domain configured on a commcell Initialize the domain class object for specified domain Args: commcell_object (object)  instance of the Commcell class domain_name (str)  name of the domain domain_id (str)  id of the domain"
},
{
"ref":"cvpysdk.domains.Domain.refresh",
"url":63,
"doc":"Refresh the properties of the domain.",
"func":1
},
{
"ref":"cvpysdk.domains.Domain.set_sso",
"url":63,
"doc":"Enables/Disables single sign on the domain Args: flag(bool)  True - enables SSO False - disables SSO  kwargs(dict)  Key value pairs for supported arguments Supported argument values: username(str)  Username to be used password(str)  Password to be used Returns: None Raises: SDKException: if arguments passed are of incorrect types if failed to enable SSO if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.domains.Domain.domain_name",
"url":63,
"doc":"Returns the User display name"
},
{
"ref":"cvpysdk.domains.Domain.domain_id",
"url":63,
"doc":"Returns the user name of this commcell user"
},
{
"ref":"cvpysdk.download_center",
"url":64,
"doc":"File for doing operations on Download Center. DownloadCenter is the class defined in this module for doing operations on the Download Center. Following Operations can be performed on the Download Center: 1. Add a new category to Download Center 2. Add a new sub category to the specified category to Download Center 3. Upload a package to Download Center 4. Download a package from Download Center 5. Delete a sub category from the specified category on Download Center 6. Delete a category from Download Center 7. Delete a package from Download Center 8. Update the category information 9. Update the sub category information for the specified category DownloadCenter: __init__(commcell_object)  initializes a connection to the download center __repr__()  returns the string representation of an instance of this class _get_properties()  get the properties of the download center _get_packages()  get the packages available at download center _process_category_request()  executes the request on the server, and parses the response _process_sub_category_request()  executes the request on the server, and parses the response sub_categories()  returns the sub categories available for the given category get_package_details()  returns the details of the package specified add_category()  adds a new category to the download center update_category()  updates the category details at the download center delete_category()  deletes the given category from the download center add_sub_category()  adds a new sub category to the specified category update_sub_category()  updates the sub category details for the given catetory at the download center delete_sub_category()  deletes the specified sub category for the given category from the download center upload_package()  uploads the given package to download center download_package()  downloads the given package from download center delete_package()  deletes the given package from download center refresh()  refresh the properties of the download center class instance Attributes: Following attributes are available for an instance of the Download Center class:  product_versions  returns list of product versions supported on Download Center  servers_for_browse  returns the list of servers available for browse on DC  error_detail  errors returned while getting the Download Center attributes  users_and_groups  returns the list of users and user groups available at DC  categories  returns the list of categories available at Download Center  download_types  returns the list of supported download types for packages  vendors  returns the list of vendors available at Download Center  platforms  returns the list of supported platforms for DC packages  packages  returns the list of packages available at Download Center  TODO: implement update method for updating details of a package  TODO: add a PS script to be called via commcell client, to check if the location is valid, and get the size of the file"
},
{
"ref":"cvpysdk.download_center.DownloadCenter",
"url":64,
"doc":"Class for doing operations on Download Center like upload or download product. Initializes an instance of the DownloadCenter class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the DownloadCenter class"
},
{
"ref":"cvpysdk.download_center.DownloadCenter.product_versions",
"url":64,
"doc":"Return the versions of product available at Download Center."
},
{
"ref":"cvpysdk.download_center.DownloadCenter.servers_for_browse",
"url":64,
"doc":"Returns the servers available for browse at Download Center."
},
{
"ref":"cvpysdk.download_center.DownloadCenter.error_detail",
"url":64,
"doc":"Returns the error details."
},
{
"ref":"cvpysdk.download_center.DownloadCenter.users_and_groups",
"url":64,
"doc":"Returns the Users and User Groups available at Download Center."
},
{
"ref":"cvpysdk.download_center.DownloadCenter.categories",
"url":64,
"doc":"Returns the categories of products available at Download Center."
},
{
"ref":"cvpysdk.download_center.DownloadCenter.download_types",
"url":64,
"doc":"Returns the types of packages available for download at Download Center."
},
{
"ref":"cvpysdk.download_center.DownloadCenter.vendors",
"url":64,
"doc":"Returns the vendors available at Download Center."
},
{
"ref":"cvpysdk.download_center.DownloadCenter.platforms",
"url":64,
"doc":"Returns the platforms supported for packages at Download Center."
},
{
"ref":"cvpysdk.download_center.DownloadCenter.packages",
"url":64,
"doc":"Returns the packages available for download at Download Center."
},
{
"ref":"cvpysdk.download_center.DownloadCenter.has_package",
"url":64,
"doc":"Checks if a package with the given name already exists at Download Center or not. Args: package (str)  name of the package to check Returns: bool - boolean specifying whether the package exists or not",
"func":1
},
{
"ref":"cvpysdk.download_center.DownloadCenter.sub_categories",
"url":64,
"doc":"Returns the sub categories available for the specified category. Args: category (str)  name of the category to get the sub categories of Returns: list - list of sub categories available for the given category Raises: SDKException: if category does not exist",
"func":1
},
{
"ref":"cvpysdk.download_center.DownloadCenter.get_package_details",
"url":64,
"doc":"Returns the details of the package, like the package description, platforms, etc. Args: package (str)  name of the package to get the details of Returns: dict - dictionary consisting of the details of the package Raises: SDKException: if package does not exist",
"func":1
},
{
"ref":"cvpysdk.download_center.DownloadCenter.add_category",
"url":64,
"doc":"Adds a new category with the given name, and description. Args: name (str)  name of the category to add description (str)  description for the category (optional) default: None Returns: None - if the category was added successfully Raises: SDKException: if category already exists if failed to add the category",
"func":1
},
{
"ref":"cvpysdk.download_center.DownloadCenter.update_category",
"url":64,
"doc":"Updates the name and description of the category with the given name. Args: name (str)  name of the existing category to update new_name (str)  new name for the category description (str)  description for the category (optional) default: None Returns: None - if the category information was updated successfully Raises: SDKException: if no category exists with the given name if category already exists with the new name specified if failed to update the category",
"func":1
},
{
"ref":"cvpysdk.download_center.DownloadCenter.delete_category",
"url":64,
"doc":"Deletes the category with the given name. Args: name (str)  name of the category to delete Returns: None - if the category was deleted successfully Raises: SDKException: if category does not exists if failed to delete the category",
"func":1
},
{
"ref":"cvpysdk.download_center.DownloadCenter.add_sub_category",
"url":64,
"doc":"Adds a new sub category with the given name, and description to the specified category. Args: name (str)  name of the sub category to add category (str)  name of the category to add the sub category to description (str)  description for the sub category (optional) default: None Returns: None - if the sub category was added successfully Raises: SDKException: if category does not exist if sub category already exists if failed to add the sub category",
"func":1
},
{
"ref":"cvpysdk.download_center.DownloadCenter.update_sub_category",
"url":64,
"doc":"Updates the name and description of the sub category with the given name and category. Args: name (str)  name of the sub category to update the details of category (str)  name of the category to update the sub category of new_name (str)  new name for the sub category description (str)  description for the sub category (optional) default: None Returns: None - if the sub category information was updated successfully Raises: SDKException: if no sub category exists with the given name if sub category already exists with the new name specified if failed to update the sub category",
"func":1
},
{
"ref":"cvpysdk.download_center.DownloadCenter.delete_sub_category",
"url":64,
"doc":"Deletes the sub category from the category with the given name. Args: name (str)  name of the sub category to delete category (str)  name of the category to delete the sub category from Returns: None - if the sub category was deleted successfully Raises: SDKException: if sub category does not exist if failed to delete the sub category",
"func":1
},
{
"ref":"cvpysdk.download_center.DownloadCenter.upload_package",
"url":64,
"doc":"Uploads the given package to Download Center. Args: package (str)  name of the package to upload category (str)  category to upload the package for version (str)  product version for package to upload platform_download_locations (list)  list consisting of dictionaries where each dictionary contains the values for the platform, download type, and location of the file e.g.: [ { 'platform': 'Windows-x64', 'download_type': 'Exe', 'location': 'C:\\location1' }, { 'platform': 'Windows-x64', 'download_type': 'Script', 'location': 'C:\\location2' }, { 'platform': 'Windows-x86', 'download_type': 'Exe', 'location': 'C:\\location3' }, { 'platform': 'Windows-x86', 'download_type': 'Script', 'location': 'C:\\location4' } ]  kwargs: valid_from (str)  date from which the package should be valid if the value is not specified, then current date is taken as it's value format: DD/MM/YYYY description (str)  description of the package readme_location (str)  location of the readme file readme file should have one of the following extensions [ .txt ,  .pdf ,  .doc ,  .docx ] sub_category (str)  sub category to associate the package with vendor (str)  vendor / distributor of the package valid_to (str)  date till which the package should be valid format: DD/MM/YYYY repository (str)  name of the repository to add the package to if this value is not defined, the first repository will be taken by default visible_to (list)  list of users, the package should be visible to not_visible_to (list)  users, the package should not be visible to early_preview_users (list)  list of users, the package should be visible to before release Returns: None - if the package was uploaded successfully to Download Center Raises: SDKException: if package with given name already exists if category does not exists at Download Center if version is not supported at Download Center if platform is not supported at Download Center if download type is not supported at Download Center if sub category not present for the given category if failed to upload the package if error returned by the server if response was not success",
"func":1
},
{
"ref":"cvpysdk.download_center.DownloadCenter.download_package",
"url":64,
"doc":"Downloads the given package from Download Center to the path specified. Args: package (str)  name of the pacakge to be downloaded download_location (str)  path on local machine to download the package at platform (str)  platform to download the package for to be provided only if the package is added for multiple platforms default: None download_type (str)  type of package to be downloaded to be provided only if multiple download types are present for single platform default: None Returns: str - path on local machine where the file has been downloaded Raises: SDKException: if package does not exist if platform not given: in case of multiple platforms if platform given does not exists in the list of supported platforms if download type is not specified: if case of multiple download types for the selected platform if download type given does not exists in the list of download types available if error returned by the server if response was not success",
"func":1
},
{
"ref":"cvpysdk.download_center.DownloadCenter.delete_package",
"url":64,
"doc":"Deletes the package from Download Center. Args: package (str)  name of the package to be deleted Returns: None - if the package was deleted successfully Raises: SDKException: if no package exists with the given name if failed to delete the package if response is not success",
"func":1
},
{
"ref":"cvpysdk.download_center.DownloadCenter.refresh",
"url":64,
"doc":"Refresh the properties of the DownloadCenter.",
"func":1
},
{
"ref":"cvpysdk.drorchestration",
"url":65,
"doc":"Initialize Replication APIs, and Classes for the SDK."
},
{
"ref":"cvpysdk.drorchestration.blr_pairs",
"url":66,
"doc":"Main file for performing BLR pair specific operations. BLRPairs and BLRPair are classes defined in this file. BLRPairs: Class for representing all the BLR pairs PairStatus: Enum for all possible pair status EndPointTypes: Enum for all allowed end points for BLR pairs PendingStatus: Enum for all pending status codes RecoveryType: Enum of all possible recovery point types DROperations: Enum of DR Operations that can be applied on the BLR pair BLRPair: Class for a single BLR Pair BLRPairs: __init__(commcell_object)  Initialise object of BLRPairs class __repr__()  Returns the string for the instance of the BLRPairs class blr_pairs()  Returns a dictionary of BLR pair names mapping with their IDs has_blr_pair( source_name, destination_name)  Checks if BLR pair exists with the given source and destination client name create_fsblr_pair(source_client_id,  Creates FSBLR replication pair for given set of options destination_client_id, source_volumes, destination_volumes, recovery_type,  kwargs) get(source_name, destination_name)  Returns the BLRPair class object for the source and destination client name delete(source_name, destination_name)  Delete BLR pair with the source and destination client name refresh()  Refresh all BLR pairs created on the commcell get_rpstore_id(rpstore_name)  Get the RPStore ID for the given name get_rpstore_mountpath(rpstore_name)  Get the RPstore mounth path for the given name  internal methods  _update_data()  REST API call to get all BLR pairs in the commcell BLRPair: __init__(commcell_object, pair_name)  Initialise object of BLRPair class for pair name __repr__()  Returns the string for the instance of the BLRPair class pair_properties  Returns the properties of the pair pair_status  Returns the status of the pair source  Returns the dictionary for all source client properties destination  Returns the dictionary for all destination client properties lag_time  Returns the replication lag time in minutes replication_group_name  (VSABLR) Returns the replication group name of the pair pending_status  Returns the reason for replication lag pair_flag  Returns the integer for the pair's flag subclient_props  Returns the properties of the subclient associated with the pair pair_recovery_type  Returns the enum for recovery type of the pair pair_rpstore_intervals  Returns the RPStore interval options set for the pair pair_volume_map  (FSBLR) Returns the mapping of volumes for FSBLR pairs pair_latest_stats  Returns the pair's latest data stats get_pair_stats()  Returns the pair's data stats get_recovery_point_stores()  Returns the RPstore points for the pair create_replica_copy()  Creates a replica copy task and return the job/task ID refresh()  Refresh the BLR pair properties  internal methods  _get_pair_id()  Returns the BLR pair ID from the BLR pairs dictionary _get_pair_properties()  Returns the BLR pair properties"
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPairs",
"url":66,
"doc":"Class for getting all BLR pairs in commcell. Initialize object of the BLR Pairs Args: commcell_object (Commcell)  instance of the Commcell class replication_group_name (str) Name of the replication group (only for VSA BLR)"
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPairs.PairStatus",
"url":66,
"doc":"An enumeration."
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPairs.EndPointTypes",
"url":66,
"doc":"An enumeration."
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPairs.AgentTypes",
"url":66,
"doc":"An enumeration."
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPairs.PendingStatus",
"url":66,
"doc":"An enumeration."
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPairs.RecoveryType",
"url":66,
"doc":"An enumeration."
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPairs.DROperations",
"url":66,
"doc":"An enumeration."
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPairs.blr_pairs",
"url":66,
"doc":"REST API call for getting all the BLR pairs in the commcell. Args: Returns: dict - consists of all BLR pairs { \"blr_id_1\": { \"sourceName\": \"vm1\", \"destinationName\": \"DRvm1\", \"subclientName\": \"BLR_vm1( )\" }, \"blr_id_2\": { \"sourceName\": \"vm1\", \"destinationName\": \"DRvm1\", \"subclientName\": \"BLRSC_vm1_DRvm1_E:\" }, }"
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPairs.has_blr_pair",
"url":66,
"doc":"Checks if BLR pair exists or not Args: source_name (str): Name of the source client destination_name (str): Name of the destination client Returns: bool - boolean output whether BLR pair exists or not Raises: SDKException: if proper inputs are not provided",
"func":1
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPairs.create_fsblr_pair",
"url":66,
"doc":"Creates a new FSBLR pair on the commcell with the specified options Args: source_client_id (str) : The source client's ID destination_client_id (str) : The destination client's ID source_volumes (list) : The list of all source volumes destination_volumes (list) : The list of all destination volumes recovery_type (RecoveryType): The enum to specify what type of recovery pair is supposed to be  kwargs (dict) : Only used for granular type FSBLR pairs rpstore_id (str) : The ID of the RPstore to be used rpstore_name (str) : The name of the RPStore ccrp_interval (int) : The number of minutes after which CCRP is taken acrp_interval (int) : The number of minutes after which ACRP is taken max_rp_interval (int) : The number of minutes after which RP store's retention is ended rp_merge_delay (int) : Merge recovery points older than time in minutes rp_retention (int) : The number of minutes for which RPstore is retained for rpstore_switch_live(int): The time in minutes after which pair is switch to live if RPstore is offline merge_only_off_peak(bool):Whether to merge RPstore only during off-peak time",
"func":1
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPairs.get",
"url":66,
"doc":"Get pair name on the basis of source and destination name and return pair object Args: source_name (str): Name of the source client destination_name (str): Name of the destination client Returns: BLRPair object for source and destination Raises: SDKException: if proper inputs are not provided",
"func":1
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPairs.delete",
"url":66,
"doc":"Deletes the blr pair with source and destination names Args: source_name (str): Name of the source client destination_name (str): Name of the destination client Returns: BLRPair object for source and destination Raises: SDKException: if proper inputs are not provided if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPairs.refresh",
"url":66,
"doc":"Refresh the BLR pairs created in the commcell. Args: Returns: Raises:",
"func":1
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPairs.get_rpstore_id",
"url":66,
"doc":"Gets the RPStore ID for the given name Args: rpstore_name (str) : The name of the RP store",
"func":1
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPairs.get_rpstore_mountpath",
"url":66,
"doc":"Gets the RPStore mount path for the given name Args: rpstore_name (str) : The name of the RP store",
"func":1
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair",
"url":66,
"doc":"Initialise the ReplicationGroup object for the given group name Args: commcell_object (Commcell)  instance of the Commcell class source_name (str)  Name of the source of BLR pair destination_name (str)  Name of the destination of BLR pair"
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair.PairOperationsStatus",
"url":66,
"doc":"An enumeration."
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair.pair_properties",
"url":66,
"doc":"Returns a dictionary of the pair properties"
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair.pair_status",
"url":66,
"doc":"Returns the status of the pair according the to PairStatus enum"
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair.source",
"url":66,
"doc":"Returns: (dict) The properties of the source client eg: { name: 'clientName', client_id: 'client id' proxy_client_id: 'head proxy_id', guid: 'client guid', endpoint: 'endpoint enum' }"
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair.source_vm",
"url":66,
"doc":"Returns (str): the source VM name"
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair.destination",
"url":66,
"doc":"Returns: (dict) The properties of the destination client eg: { name: 'clientName', proxy_client_id: 'tail proxy_id', guid: 'client guid', endpoint: 'endpoint enum' }"
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair.destination_vm",
"url":66,
"doc":"Returns (str): the destination VM name"
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair.lag_time",
"url":66,
"doc":"Returns: (int) The replication lag for pair in minutes"
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair.replication_group_name",
"url":66,
"doc":"Returns: (str) The name of the replication group"
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair.pending_status",
"url":66,
"doc":"Returns: (enum) The pair pending Status"
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair.pair_flag",
"url":66,
"doc":"Returns: (int) The pair's flag status"
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair.subclient_props",
"url":66,
"doc":"Returns: (dict) The subclient associated with pair's properties eg: { \"subclientName\": \"subclient name\", \"subclientId\": subclient ID, \"instanceId\": instance ID, \"backupsetId\": backupset ID, \"clientId\": client ID }"
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair.pair_recovery_type",
"url":66,
"doc":"Returns: (enum) Returns whether the pair is granular or live"
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair.pair_rpstore_intervals",
"url":66,
"doc":"Returns: (dict) A dictionary of intervals set for RPstores eg: { 'ccrpInterval': 15, 'maxRpStoreOfflineTime': 900, 'useOffPeakSchedule': True, 'acrpInterval': 3600, 'rpMergeDelay': 43200, 'maxRpInterval': 21600, 'rpStoreId': 0, 'rpRetention': 604800, 'rpStoreName': 'N/A' }"
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair.pair_volume_map",
"url":66,
"doc":"Returns: (list) Returns a list of volume mappings for FSBLR eg: [{ 'sourceVolumeGUID': 'F961A090-90B3-403A-8629-10203C81517F', 'destVolume': 'F:', 'destVolumeGUID': '0A800478-57E2-42B2-80BA-F7BA1B2E0BE1', 'sourceVolume': 'E:' }]"
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair.pair_latest_stats",
"url":66,
"doc":"Returns: (list) A list of dictionary of latest statistics for BLR pair eg: [{ 'repDataDeltaActual': 226051, 'ioDelta': 303935, 'repSetSize': 10522460160, 'iopsDelta': 160, 'sizeInRpStore': 0, 'id': 14195, 'repDataDeltaComp': 226051, 'retention': 0, 'timeStamp': {'time': 1622714743} }]"
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair.get_pair_stats",
"url":66,
"doc":"Returns: (list) A list of dictionary of statistics for BLR pair eg: [{ 'repDataDeltaActual': 226051, 'ioDelta': 303935, 'repSetSize': 10522460160, 'iopsDelta': 160, 'sizeInRpStore': 0, 'id': 14195, 'repDataDeltaComp': 226051, 'retention': 0, 'timeStamp': {'time': 1622714743} }]",
"func":1
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair.get_recovery_point_stores",
"url":66,
"doc":"Returns a list of all recovery point stores for the BLR pair Args: Returns: Gets the BLR rpstores list Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair.get_test_failover_vms",
"url":66,
"doc":"Returns the BLRTestFailovers object for all test failover VMs of the BLR pair Args: boot_type (int): Refer to BLRTestFailover.BLRBootType Returns: BLRTestFailovers object",
"func":1
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair.stop",
"url":66,
"doc":"Stops the BLR Pair Args: Returns: Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair.start",
"url":66,
"doc":"Starts the BLR Pair Args: Returns: Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair.resume",
"url":66,
"doc":"Resumes the BLR Pair Args: Returns: Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair.resync",
"url":66,
"doc":"Resyncs the BLR pair Args: Returns: Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair.suspend",
"url":66,
"doc":"Suspends the BLR Pair Args: Returns: Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair.wait_for_pair_status",
"url":66,
"doc":"Waits for the BLR pair to reach the expected status Args: expected_status (enum or str): Enum of PairStatus or string value for pair status timeout (int) : The amount of time in minutes to wait for pair to reach status before exiting Returns: True, if the expected status is met False, if the expected status was not met in given time",
"func":1
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair.create_replica_copy",
"url":66,
"doc":"Perform the DR operation for the BLR pair Args: destination_volumes (list) : The destination volumes list copy_volumes (list) : The copy volumes list timestamp (int) : The timestamp of the RPstore, only for granular pairs Returns: Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRPair.refresh",
"url":66,
"doc":"Refresh the BLR pair properties",
"func":1
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRTestFailovers",
"url":66,
"doc":"Class for getting all test failover VMs for BLR pair Method for making initial data members Args: commcell_object (Commcell)  instance of the Commcell class pair_id (str)  Id of the BLR pair boot_type (BLRBootType)  The type of the boot for VMs"
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRTestFailovers.BLRBootType",
"url":66,
"doc":"An enumeration."
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRTestFailovers.BootStatus",
"url":66,
"doc":"An enumeration."
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRTestFailovers.refresh",
"url":66,
"doc":"Refresh the VMs list for BLR pair",
"func":1
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRTestFailovers.all_boot_vms",
"url":66,
"doc":"Returns a list of all boot VMs"
},
{
"ref":"cvpysdk.drorchestration.blr_pairs.BLRTestFailovers.get_boot_vm_details",
"url":66,
"doc":"Get the boot VM details for a given vm name Args: vm_name (str): The name of the VM to fetch details for Returns: dict: { id (int) : The ID of the test failover VM uuid (str) : The UUID of the test failover VM name (str) : The name of the test failover VM creation_time (int) : The timestamp of VM creation vm_status (BootStatus) : The status of the test failover VM status_message (str) : The description of the VM status } Raises: BLRPair not found: If test boot VM name is not found",
"func":1
},
{
"ref":"cvpysdk.drorchestration.drjob",
"url":67,
"doc":"Main file for getting DR orchestration/sync job details and phases DRJob: Class for representing all the DR jobs DRJob(Job): __init__(commcell_object, job_id)  Initialise object of DRJob _get_replication_job_stats()  Gets the DR job statistics get_phases()  Gets the phases of the DR job get_vm_list()  Gets the list of all VMs and their properties"
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob",
"url":67,
"doc":"Class for performing DR orchestration operations on ReplicationMonitor. Initialise the DR job"
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.blobs_retained",
"url":67,
"doc":"Returns True if blobs to be retained chosen in failover job for Azure destination",
"func":1
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.get_phases",
"url":67,
"doc":"Gets the DR phases of the job Returns: dictionaries of phases for each source and destination VM pair {\"source_vm_1\": [{ 'phase_name': enum - Enum of phase short name and full name mapping, 'phase_status': int - 0 for success, 1 for failed, 'start_time': int - timestamp of start of job, 'end_time': int - timestamp of end of job, 'machine_name': str - The name of the machine Job is executing on, 'error_message': str - Error message, if any, }], }",
"func":1
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.wait_for_completion",
"url":68,
"doc":"Waits till the job is not finished; i.e.; till the value of job.is_finished is not True. Kills the job and exits, if the job has been in Pending / Waiting state for more than the timeout value. In case of job failure job status and failure reason can be obtained using status and delay_reason property Args: timeout (int)  minutes after which the job should be killed and exited, if the job has been in Pending / Waiting state default: 30  kwargs (str)  accepted optional arguments return_timeout (int)  minutes after which the method will return False. Returns: bool - boolean specifying whether the job had finished or not True - if the job had finished successfully False - if the job was killed/failed",
"func":1
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.is_finished",
"url":68,
"doc":"Checks whether the job has finished or not. Returns: bool - boolean that represents whether the job has finished or not"
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.client_name",
"url":68,
"doc":"Treats the client name as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.agent_name",
"url":68,
"doc":"Treats the agent name as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.instance_name",
"url":68,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.backupset_name",
"url":68,
"doc":"Treats the backupset name as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.subclient_name",
"url":68,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.status",
"url":68,
"doc":"Treats the job status as a read-only attribute. http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm please refer status section in above doc link for complete list of status available"
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.job_id",
"url":68,
"doc":"Treats the job id as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.job_type",
"url":68,
"doc":"Treats the job type as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.backup_level",
"url":68,
"doc":"Treats the backup level as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.start_time",
"url":68,
"doc":"Treats the start time as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.start_timestamp",
"url":68,
"doc":"Treats the unix start time as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.end_timestamp",
"url":68,
"doc":"Treats the unix end time as a read-only attribute"
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.end_time",
"url":68,
"doc":"Treats the end time as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.delay_reason",
"url":68,
"doc":"Treats the job delay reason as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.pending_reason",
"url":68,
"doc":"Treats the job pending reason as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.phase",
"url":68,
"doc":"Treats the job current phase as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.attempts",
"url":68,
"doc":"Returns job attempts data as read-only attribute"
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.summary",
"url":68,
"doc":"Treats the job full summary as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.username",
"url":68,
"doc":"Treats the username as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.userid",
"url":68,
"doc":"Treats the userid as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.details",
"url":68,
"doc":"Treats the job full details as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.size_of_application",
"url":68,
"doc":"Treats the size of application as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.media_size",
"url":68,
"doc":"Treats the size of media as a read-only attribute Returns: integer - size of media or data written"
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.num_of_files_transferred",
"url":68,
"doc":"Treats the number of files transferred as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.state",
"url":68,
"doc":"Treats the job state as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.task_details",
"url":68,
"doc":"Returns: (dict) A dictionary of job task details"
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.pause",
"url":68,
"doc":"Suspends the job. Args: wait_for_job_to_pause (bool)  wait till job status is changed to Suspended default: False Raises: SDKException: if failed to suspend job if response is not success",
"func":1
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.resume",
"url":68,
"doc":"Resumes the job. Args: wait_for_job_to_resume (bool)  wait till job status is changed to Running default: False Raises: SDKException: if failed to resume job if response is not success",
"func":1
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.resubmit",
"url":68,
"doc":"Resubmits the job Args: start_suspended (bool) - whether to start the new job in suspended state or not default: None, the new job starts same as this job started Returns: object - Job class object for the given job id Raises: SDKException: if job is already running if response is not success",
"func":1
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.kill",
"url":68,
"doc":"Kills the job. Args: wait_for_job_to_kill (bool)  wait till job status is changed to Killed default: False Raises: SDKException: if failed to kill job if response is not success",
"func":1
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.refresh",
"url":68,
"doc":"Refresh the properties of the Job.",
"func":1
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.advanced_job_details",
"url":68,
"doc":"Returns advanced properties for the job Args: infoType (object)  job detail type to be passed from AdvancedJobDetailType enum from the constants Returns: dict - dictionary with advanced details of the job info type given Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.get_events",
"url":68,
"doc":"gets the commserv events associated with this job Args: None Returns: list - list of job events Example : [ { \"severity\": 3, \"eventCode\": \"318769020\", \"jobId\": 4547, \"acknowledge\": 0, \"eventCodeString\": \"19:1916\", \"subsystem\": \"JobManager\", \"description\": \"Data Analytics operation has completed with one or more errors.\", \"id\": 25245, \"timeSource\": 1600919001, \"type\": 0, \"clientEntity\": { \"clientId\": 2, \"clientName\": \"xyz\", \"displayName\": \"xyz\" } }, { \"severity\": 6, \"eventCode\": \"318767961\", \"jobId\": 4547, \"acknowledge\": 0, \"eventCodeString\": \"19:857\", \"subsystem\": \"clBackup\", \"description\": \"Failed to send some items to Index Engine\", \"id\": 25244, \"timeSource\": 1600918999, \"type\": 0, \"clientEntity\": { \"clientId\": 33, \"clientName\": \"xyz\", \"displayName\": \"xyz\" } } ]",
"func":1
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.get_vm_list",
"url":68,
"doc":"Gets the list of all VMs associated to the job Returns: list of VM dictionaries VM: { \"Size\":0, \"AverageThroughput\":0, \"UsedSpace\":0, \"ArchivedByCurrentJob\":false, \"jobID\":0, \"CBTStatus\": , \"BackupType\":0, \"totalFiles\":0, \"Status\":2, \"CurrentThroughput\":0, \"Agent\":\"proxy\", \"lastSyncedBkpJob\":0, \"GUID\":\"live sync pair guid\", \"HardwareVersion\":\"vm h/w\", \"restoredSize\":1361912, \"FailureReason\": , \"BackupStartTime\":0, \"TransportMode\":\"nbd\", \"projectId\": , \"syncStatus\":3, \"PoweredOffSince\":0, \"OperatingSystem\":\"Microsoft Windows Server 2012 (64-bit)\", \"backupLevel\":0, \"destinationVMName\":\"drvm1\", \"successfulCIedFiles\":0, \"GuestSize\":0, \"failedCIedFiles\":0, \"vmName\":\"vm1\", \"ToolsVersion\":\"Not running\", \"clientId\":3280, \"Host\":\"1.1.1.1\", \"StubStatus\":0, \"BackupEndTime\":0, \"PoweredOffByCurrentJob\":false }",
"func":1
},
{
"ref":"cvpysdk.drorchestration.drjob.DRJob.get_child_jobs",
"url":68,
"doc":"Get the child jobs details for the current job Returns: _jobs_list (list): List of child jobs",
"func":1
},
{
"ref":"cvpysdk.drorchestration.drorchestrationoperations",
"url":69,
"doc":"Main file for performing DR Orchestration specific operations. DROrchestrationOperations: Class for representing all the DR orchestration operations from failover groups or replication monitor DROrchestrationOperations: __init__(commcell_object)  Initialise object of DROrchestrationOperations __repr__()  Return the DROrchestrationOperations testboot()  Call testboot operation planned_failover()  Call Planned failvoer operation unplanned_failover()  Call Unplanned Failover operation failback()  Call failback operation undo_failover()  Call UndoFailover operation revert_failover()  Call RevertFailover operation point_in_time_failover()  Call PointInTimeFailover operation reverse_replication()  Schedule and call ReverseReplication operation schedule_reverse_replication()  Schedule ReverseReplication force_reverse_replication()  Call ReverseReplication operation validate_dr_orchestration_job(jobId)  Validate DR orchestration job Id get_snapshot_list(guid)  Retrieves snapshot lists from the specified guid  internal methods  _construct_dr_orchestration_operation_json()  Construct dr orchestration operation json _construct_reverse_replication_json()  Construct reverse replication json _call_dr_orchestration_task (dr_orchestration_json)  Call DR orchestration task _call_reverse_replication_task (dr_orchestration_json)  Call reverse replication _get_dr_orchestration_job_stats (jobId, replicationId)  Gets DR orchetration job phase types and states  properties  _json_task()  Returns task json _json_dr_orchestration_subtasks()  Returns DR orchestration subtasks json _json_dr_orchestration()  Returns DR orchestration json _dr_group_id()  Returns DR group Id dr_orchestration_options()  DR orchestration options dr_orchestration_job_phase()  DR orchestration job phase type"
},
{
"ref":"cvpysdk.drorchestration.drorchestrationoperations.DROrchestrationOperations",
"url":69,
"doc":"Class for invoking DROrchestration operations in the commcell. Initialize object of the DROrchestrationOperations. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the DROrchestrationOperations class"
},
{
"ref":"cvpysdk.drorchestration.drorchestrationoperations.DROrchestrationOperations.dr_orchestration_job_phase",
"url":69,
"doc":"Args: Returns: DR orchestration job phase dict Raises:"
},
{
"ref":"cvpysdk.drorchestration.drorchestrationoperations.DROrchestrationOperations.dr_orchestration_options",
"url":69,
"doc":"Getter dr orchestration options json"
},
{
"ref":"cvpysdk.drorchestration.drorchestrationoperations.DROrchestrationOperations.dr_group_id",
"url":69,
"doc":"Getter DR group Id"
},
{
"ref":"cvpysdk.drorchestration.drorchestrationoperations.DROrchestrationOperations.testboot",
"url":69,
"doc":"Performs testboot failover operation. Args: Returns: (JobId, TaskId) - JobId and taskId of the Testboot job triggered Raises: SDKException: if proper inputs are not provided",
"func":1
},
{
"ref":"cvpysdk.drorchestration.drorchestrationoperations.DROrchestrationOperations.planned_failover",
"url":69,
"doc":"Performs Planned failover operation. Args: Returns: (JobId, TaskId) - JobId and taskId of the Planned Failover job triggered Raises: SDKException: if proper inputs are not provided",
"func":1
},
{
"ref":"cvpysdk.drorchestration.drorchestrationoperations.DROrchestrationOperations.unplanned_failover",
"url":69,
"doc":"Performs UnPlanned failover operation. Args: Returns: (JobId, TaskId) - JobId and taskId of the Unplanned Failover job triggered Raises: SDKException: if proper inputs are not provided",
"func":1
},
{
"ref":"cvpysdk.drorchestration.drorchestrationoperations.DROrchestrationOperations.failback",
"url":69,
"doc":"Performs Failback operation. Args: Returns: (JobId, TaskId) - JobId and taskId of the failback job triggered Raises: SDKException: if proper inputs are not provided",
"func":1
},
{
"ref":"cvpysdk.drorchestration.drorchestrationoperations.DROrchestrationOperations.undo_failover",
"url":69,
"doc":"Performs Undo Failover operation. Args: Returns: (JobId, TaskId) - JobId and taskId of the failback job triggered Raises: SDKException: if proper inputs are not provided",
"func":1
},
{
"ref":"cvpysdk.drorchestration.drorchestrationoperations.DROrchestrationOperations.reverse_replication",
"url":69,
"doc":"Schedules and calls Reverse Replication Args: Returns: (JobId, TaskId) - JobId and taskId of the reverse replication job triggered Raises: SDKException: if proper inputs are not provided",
"func":1
},
{
"ref":"cvpysdk.drorchestration.drorchestrationoperations.DROrchestrationOperations.schedule_reverse_replication",
"url":69,
"doc":"Schedules Reverse Replication. Args: Returns: (TaskId) - TaskId of the scheduling reverse replication job triggered Raises: SDKException: if proper inputs are not provided",
"func":1
},
{
"ref":"cvpysdk.drorchestration.drorchestrationoperations.DROrchestrationOperations.force_reverse_replication",
"url":69,
"doc":"Performs one reverse replication operation. Args: Returns: (JobId, TaskId) - JobId and taskId of the reverse replication job triggered Raises: SDKException: if proper inputs are not provided",
"func":1
},
{
"ref":"cvpysdk.drorchestration.drorchestrationoperations.DROrchestrationOperations.revert_failover",
"url":69,
"doc":"Performs Revert Failover operation. Args: Returns: (JobId, TaskId) - JobId and taskId of the failback job triggered Raises: SDKException: if proper inputs are not provided",
"func":1
},
{
"ref":"cvpysdk.drorchestration.drorchestrationoperations.DROrchestrationOperations.point_in_time_failover",
"url":69,
"doc":"Performs Point in time Failover operation. Args: Returns: (JobId, TaskId) - JobId and taskId of the failback job triggered Raises: SDKException: if proper inputs are not provided",
"func":1
},
{
"ref":"cvpysdk.drorchestration.drorchestrationoperations.DROrchestrationOperations.validate_dr_orchestration_job",
"url":69,
"doc":"Validates DR orchestration job of jobId Args: JobId: Job Id of the DR orchestration job Returns: bool - boolean that represents whether the DR orchestration job finished successfully or not Raises: SDKException: if proper inputs are not provided If failover phase failed at any stage",
"func":1
},
{
"ref":"cvpysdk.drorchestration.drorchestrationoperations.DROrchestrationOperations.get_snapshot_list",
"url":69,
"doc":"Gets snapshot list Args: guid (str): GUID of the spcified VM timestamp_filter (bool): whether to only return snapshots with timestamps Returns: list of dict: list of snapshot information",
"func":1
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase",
"url":70,
"doc":"This file provides dicts. One is from job phase code to text, and the other is from enum to code."
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases",
"url":70,
"doc":"An enumeration."
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.SCRIPT_EXECUTION",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.POWER_ON",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.POWER_OFF",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.REBOOT",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.GUEST_TOOLS_STATUS_CHECK",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.CREATE_NETWORK_SWITCH",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.DELETE_NETWORK_SWITCH",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.REPLICATION",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.BACKUP",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.CONFIGURE_NETWORK_SWITCH",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.EXTERNAL_PORT_CONFIG",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.IP_MASQUERADE",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.STATIC_IP_MAPPING",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.INTIALIZATION",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.WAIT_ON_IP_ASSIGNMENT",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.DISABLE_SYNC",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.ENABLE_SYNC",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.CREATE_SNAPSHOT",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.DELETE_SNAPSHOT",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.REVERT_SNAPSHOT",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.DISABLE_NETWORK_ADAPTER",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.AUX_COPY",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.POST_OPERATION",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.SNAP_TO_TAPE",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.SHUTDOWN",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.STORAGE_OPERATION",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.FINALIZE",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.DR_APPROVAL",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.DELETE_VM",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.CREATE_VM",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.GET_VM_INFO",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.CREATE_DR_VM",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.POST_VM_FAILOVER",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.MOUNT_SNAP_PRIMARY",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.DR_VM_SNAP_MOUNT",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.BREAK_VOLUME_RELATIONSHIP",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.RESYNC_VOLUME_RELATIONSHIP",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.DR_VM_SNAP_UNMOUNT",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.DR_TEST_VM_SNAP_MOUNT",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.DR_TEST_VM_SNAP_UNMOUNT",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.DELETE_DR_VM",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.POST_VM_FAILOVER_SNAP",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.CLONE_VM",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.REFRESH_VM",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.LIVE_MOUNT",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.INIT_UNDO_FAILOVER",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.POST_UNDO_FAILOVER",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.RESTORE_VM",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.PRE_SCRIPT_EXECUTION",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.POST_SCRIPT_EXECUTION",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhases.VM_LEVEL",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText",
"url":70,
"doc":"An enumeration."
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.SCRIPT_EXECUTION",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.POWER_ON",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.POWER_OFF",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.REBOOT",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.GUEST_TOOLS_STATUS_CHECK",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.CREATE_NETWORK_SWITCH",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.DELETE_NETWORK_SWITCH",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.REPLICATION",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.BACKUP",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.CONFIGURE_NETWORK_SWITCH",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.EXTERNAL_PORT_CONFIG",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.IP_MASQUERADE",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.STATIC_IP_MAPPING",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.INTIALIZATION",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.WAIT_ON_IP_ASSIGNMENT",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.DISABLE_SYNC",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.ENABLE_SYNC",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.CREATE_SNAPSHOT",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.DELETE_SNAPSHOT",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.REVERT_SNAPSHOT",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.DISABLE_NETWORK_ADAPTER",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.AUX_COPY",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.POST_OPERATION",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.SNAP_TO_TAPE",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.SHUTDOWN",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.STORAGE_OPERATION",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.FINALIZE",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.DR_APPROVAL",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.DELETE_VM",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.CREATE_VM",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.GET_VM_INFO",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.CREATE_DR_VM",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.POST_VM_FAILOVER",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.MOUNT_SNAP_PRIMARY",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.DR_VM_SNAP_MOUNT",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.BREAK_VOLUME_RELATIONSHIP",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.RESYNC_VOLUME_RELATIONSHIP",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.DR_VM_SNAP_UNMOUNT",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.DR_TEST_VM_SNAP_MOUNT",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.DR_TEST_VM_SNAP_UNMOUNT",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.DELETE_DR_VM",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.POST_VM_FAILOVER_SNAP",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.CLONE_VM",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.REFRESH_VM",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.LIVE_MOUNT",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.INIT_UNDO_FAILOVER",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.POST_UNDO_FAILOVER",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.RESTORE_VM",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.PRE_SCRIPT_EXECUTION",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.POST_SCRIPT_EXECUTION",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.dr_orchestration_job_phase.DRJobPhaseToText.VM_LEVEL",
"url":70,
"doc":""
},
{
"ref":"cvpysdk.drorchestration.failovergroups",
"url":71,
"doc":"Main file for getting failover group related information FailoverGroups and FailoverGroup are 2 classes defined in this file. FailoverGroups: Class for getting information of all failover groups in the commcell FailoverGroup: Class for a failover group that gives us all the live sync pairs associated to in, with addition to the clients/hypervisors associated FailoverGroups: FailoverGroupSourceTypes  Enum to represent all type of sources for failover groups FailoverGroupTypes  Enum to represent all types of failover groups DRReplicationTypes  Enum to represent all live sync types __init__(commcell_object)  Initialize the object of failovergroups class for commcell __str__()  Returns the list of all failover groups __repr__()  Returns the string for the instance of the FailoverGroups class has_failover_group(failover_group_name)  Checks if failover group exists with the given name get(failover_group_name)  Returns the FailoverGroup class object of the given name refresh()  Refresh all failover groups created on the commcell  internal methods  _get_failover_groups()  Internal call to get information of all failover groups in commcell  properties  failover_groups  Returns the dictionary of all failover groups and their info FailoverGroup: __init__(commcell_object, failover_group_name)  Initialize object of FailoverGroup with the given name __repr__()  Returns the name of the failover group for the object __str__()  Returns the name of the all VM pairs for the failover group refresh()  Refresh the failover group properties  internal methods  _get_failover_group_dict()  Gets the failover group information from FailoverGroups class _get_failover_group_properties()  Get the failover group properties  properties  failover_group_id  The ID of the failover group failover_group_name  The name of the failover group replication_type  The DRReplicationTypes key for replication of failover group group_type  The FailoverGroupTypes for operation of failover group source_type  The FailoverGroupSourceTypes of source of failover group is_client_group  Whether the VM pairs are part of a client group or not replication_pairs  The ReplicationPairs class for failover group vm_pair_ids  The ID of the replication pairs vm_pairs  Returns the live sync pair objects for each VM pair of the group as a mapping of source VM name and VM pair object replication_groups  The names of all replication groups associated to the failover group source_client  The client object of the source client source_agent  The agent object of the source client source_instance  The instance object of the source client destination_client  The client object of the destination client destination_agent  The agent object of the destination client destination_instance  The instance object of the destination instance is_approval_required  Whether the approval is set in failover group or not user_for_approval  Returns the name of the user set in failover group for approval"
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroups",
"url":71,
"doc":"Class for getting all the failover groups in commcell. Initialize object of the Failover groups Args: commcell_object (Commcell)  instance of the Commcell class"
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroups.FailoverGroupSourceTypes",
"url":71,
"doc":"An enumeration."
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroups.FailoverGroupTypes",
"url":71,
"doc":"Enum to map Failover Group Types to integers"
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroups.DRReplicationTypes",
"url":71,
"doc":"Enum to map replication types to replication groups/failover groups"
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroups.has_failover_group",
"url":71,
"doc":"Checks if failover group exists or not Args: failover_group_name (str)  name of the failover group Returns: bool - boolean output whether failover group exists or not Raises: SDKException: if proper inputs are not provided",
"func":1
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroups.get",
"url":71,
"doc":"Returns a failover group object of the specified failover group name. Args: failover_group_name (str)  name of the failover group Returns: object - instance of the FailoverGroup class for the given failover group name Raises: SDKException: if proper inputs are not provided If Failover group doesnt exists with given name",
"func":1
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroups.failover_groups",
"url":71,
"doc":"return all failover groups Args: Returns: (dict) All the failover groups in the commcell eg: { \"failover_group_name1\": {id: '1', 'type': VSA_PERIODIC, 'operation_type': FAILOVER}, \"failover_group_name2\": {id: '2', 'type': VSA_CONTINUOUS, 'operation_type': FAILOVER} } Raises:"
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroups.refresh",
"url":71,
"doc":"Refresh the failover groups created in the commcell. Args: Returns: Raises:",
"func":1
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroup",
"url":71,
"doc":"Class for representing a failover group Initialise the FailoverGroup object for the given group name Args: commcell_object (Commcell)  instance of the Commcell class failover_group_name (str)  name of the failover group"
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroup.refresh",
"url":71,
"doc":"Refresh the failover group properties",
"func":1
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroup.failover_group_id",
"url":71,
"doc":"Returns: (str) The ID of the failover group"
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroup.failover_group_name",
"url":71,
"doc":"Returns: (str) The name of the failover group"
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroup.replication_type",
"url":71,
"doc":"Returns: (DRReplicationTypes) The type of replication"
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroup.group_type",
"url":71,
"doc":"Returns: (FailoverGroupTypes) The type of failover group"
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroup.source_type",
"url":71,
"doc":"Returns: (FailoverGroupSourceTypes) The type of failover group's source"
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroup.is_client_group",
"url":71,
"doc":"Returns: (bool) Whether this failover group has a client group or not"
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroup.replication_pairs",
"url":71,
"doc":"Returns: (ReplicationPairs) Returns the ReplicationPairs object that belongs to this failover group Note: Implemented only for live sync failover groups"
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroup.vm_pair_ids",
"url":71,
"doc":"Returns: (List[str]) Returns the VM pair IDs that belong to this failover group"
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroup.vm_pairs",
"url":71,
"doc":"Returns: (dict) The list of all live sync VM pairs eg: {  :  ,  :  }"
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroup.replication_groups",
"url":71,
"doc":"Returns: (list) The list of all replication group names"
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroup.source_client",
"url":71,
"doc":"Returns: (Client) The client object for the failover group's source hypervisor"
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroup.source_agent",
"url":71,
"doc":"Returns: (Agent) The agent object for the source hypervisor"
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroup.source_instance",
"url":71,
"doc":"Returns: (Instance) The instance object for the source hypervisor"
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroup.destination_client",
"url":71,
"doc":"Returns: (Client) The client object for the failover group's destination hypervisor"
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroup.destination_agent",
"url":71,
"doc":"Returns: (Agent) The agent object for the destination hypervisor"
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroup.destination_instance",
"url":71,
"doc":"Returns: (Instance) The instance object for the destination hypervisor"
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroup.is_approval_required",
"url":71,
"doc":"Returns bool: true : if approval set in failover group false: if approval not set in failover group"
},
{
"ref":"cvpysdk.drorchestration.failovergroups.FailoverGroup.user_for_approval",
"url":71,
"doc":"Returns: user name set in failover group"
},
{
"ref":"cvpysdk.drorchestration.replicationmonitor",
"url":72,
"doc":"Main file for performing failover specific operations. ReplicationMonitor: Class for representing all the dr orchestration operations from Replication monitor ReplicationMonitor: __init__(commcell_object, replication_monitor_options)  Initialise object of ReplicationMonitor __repr__()  Return the ReplicationMonitor name testboot()  Call testboot operation planned_failover()  Call Planned failvoer operation unplanned_failover()  Call Unplanned Failover operation failback()  Call failback operation undo_failover()  Call UndoFailover operation revert_failover()  Call RevertFailover operation point_in_time_failover()  Call PointInTimeFailover operation reverse_replication()  Schedule and call ReverseReplication operation schedule_reverse_replication()  Schedule ReverseReplication force_reverse_replication()  Call ReverseReplication operation validate_dr_orchestration_job(jobId)  Validate DR orchestration job Id refresh()  Refresh the object properties  internal methods  _get_replication_monitor()  Gets replication monitor _get_snapshot_list()  Gets snapshot list for the destination client  properties  _replication_Ids()  Returns replication Ids list replication_monitor_options()  Returns replication monitor options"
},
{
"ref":"cvpysdk.drorchestration.replicationmonitor.ReplicationMonitor",
"url":72,
"doc":"Class for performing DR orchestration operations on ReplicationMonitor. Initialise the ReplicationMonitor object. Args: commcell_object (object)  instance of the Commcell class input dict of replication monitor options replication_monitor_options (json)  replication monitor options { \"VirtualizationClient\":  , \"approvalRequired\": False, \"skipDisableNetworkAdapter\": False \"initiatedFromMonitor\": True, \"vmName\": 'DRVM1' } Returns: object - instance of the ReplicationMonitor class"
},
{
"ref":"cvpysdk.drorchestration.replicationmonitor.ReplicationMonitor.replication_monitor_options",
"url":72,
"doc":"Getter replication monitor"
},
{
"ref":"cvpysdk.drorchestration.replicationmonitor.ReplicationMonitor.replication_monitor",
"url":72,
"doc":"Getter replication monitor"
},
{
"ref":"cvpysdk.drorchestration.replicationmonitor.ReplicationMonitor.refresh",
"url":72,
"doc":"Refresh the replication monitor. Args: Returns: Raises:",
"func":1
},
{
"ref":"cvpysdk.drorchestration.replicationmonitor.ReplicationMonitor.testboot",
"url":72,
"doc":"Performs testboot failover operation. Args: Returns: (JobId, TaskId) - JobId and taskId of the Testboot job triggered Raises: SDKException: if proper inputs are not provided",
"func":1
},
{
"ref":"cvpysdk.drorchestration.replicationmonitor.ReplicationMonitor.planned_failover",
"url":72,
"doc":"Performs Planned failover operation. Args: Returns: (JobId, TaskId) - JobId and taskId of the Planned Failover job triggered Raises: SDKException: if proper inputs are not provided",
"func":1
},
{
"ref":"cvpysdk.drorchestration.replicationmonitor.ReplicationMonitor.unplanned_failover",
"url":72,
"doc":"Performs UnPlanned failover operation. Args: Returns: (JobId, TaskId) - JobId and taskId of the Unplanned Failover job triggered Raises: SDKException: if proper inputs are not provided",
"func":1
},
{
"ref":"cvpysdk.drorchestration.replicationmonitor.ReplicationMonitor.failback",
"url":72,
"doc":"Performs Failback operation. Args: Returns: (JobId, TaskId) - JobId and taskId of the failback job triggered Raises: SDKException: if proper inputs are not provided",
"func":1
},
{
"ref":"cvpysdk.drorchestration.replicationmonitor.ReplicationMonitor.undo_failover",
"url":72,
"doc":"Performs Undo Failover operation. Args: Returns: (JobId, TaskId) - JobId and taskId of the failback job triggered Raises: SDKException: if proper inputs are not provided",
"func":1
},
{
"ref":"cvpysdk.drorchestration.replicationmonitor.ReplicationMonitor.reverse_replication",
"url":72,
"doc":"Schedules and calls Reverse Replication Args: Returns: (JobId, TaskId) - JobId and taskId of the reverse replication job triggered Raises: SDKException: if proper inputs are not provided",
"func":1
},
{
"ref":"cvpysdk.drorchestration.replicationmonitor.ReplicationMonitor.schedule_reverse_replication",
"url":72,
"doc":"Schedules Reverse Replication. Args: Returns: (TaskId) - TaskId of the scheduling reverse replication job triggered Raises: SDKException: if proper inputs are not provided",
"func":1
},
{
"ref":"cvpysdk.drorchestration.replicationmonitor.ReplicationMonitor.force_reverse_replication",
"url":72,
"doc":"Performs one reverse replication operation. Args: Returns: (JobId, TaskId) - JobId and taskId of the reverse replication job triggered Raises: SDKException: if proper inputs are not provided",
"func":1
},
{
"ref":"cvpysdk.drorchestration.replicationmonitor.ReplicationMonitor.revert_failover",
"url":72,
"doc":"Performs Revert Failover operation. Args: Returns: (JobId, TaskId) - JobId and taskId of the failback job triggered Raises: SDKException: if proper inputs are not provided",
"func":1
},
{
"ref":"cvpysdk.drorchestration.replicationmonitor.ReplicationMonitor.point_in_time_failover",
"url":72,
"doc":"Performs Revert Failover operation. Args: Returns: (JobId, TaskId) - JobId and taskId of the failback job triggered Raises: SDKException: if proper inputs are not provided",
"func":1
},
{
"ref":"cvpysdk.drorchestration.replicationmonitor.ReplicationMonitor.validate_dr_orchestration_job",
"url":72,
"doc":"Validates DR orchestration job of jobId Args: JobId: Job Id of the DR orchestration job Returns: bool - boolean that represents whether the DR orchestration job finished successfully or not Raises: SDKException: if proper inputs are not provided If failover phase failed at any stage",
"func":1
},
{
"ref":"cvpysdk.drorchestration.replication_groups",
"url":73,
"doc":"Main file for performing replication group specific operations. ReplicationGroups and ReplicationGroup are 2 classes defined in this file. ReplicationGroups: Class for representing all the replication groups associated with a specific client ReplicationGroup: Class for a single replication group selected for a client, and to perform operations on that replication group ReplicationGroups: ReplicationGroupType  Enum to denote all possible types of replication groups __init__(commcell_object)  Initialise object of ReplicationGroups class __str__()  Returns all the replication groups __repr__()  Returns the string for the instance of the ReplicationGroups class has_replication_group( replication_group_name)  Checks if replication group exists with the given name get(replication_group_name)  Returns the ReplicationGroup class object of the input replication name delete(replication_group_name)  Delete replication group with replication group name refresh()  Refresh all replication groups created on the commcell  internal methods  _get_replication_groups()  REST API call to get all replication groups in the commcell  properties  replication_groups()  Returns all replication groups in the commcell ReplicationGroup: __init__(commcell_object, replication_group_name)  Initialise object of ReplicationGroup with the specified replication group name __repr__()  return the ReplicationGroup name refresh()  Refresh the object properties  internal methods  _get_replication_group_dict()  Method to get replication group dictionary _get_replication_group_properties()  Get the replication group properties  properties  group_name()  Returns the replication group name group_id()  Returns the replication group ID task_id()  Returns the ID of the task associated to replication group replication_type()  Returns the enum constant of the ReplicationGroupType zeal_group()  Returns a boolean to denote whether group is Zeal or backup-based restore_options()  Returns a hypervisor specific set of restore options is_dvdf_enabled()  Returns whether 'Deploy VM during failover' enabled is_warm_sync_enabled()  Returns whether 'Warm site recovery' is enabled source_client()  Returns a client object of the source hypervisor destination_client()  Returns a client object of the destination hypervisor source_agent()  Returns an agent object of the source client destination_agent()  Returns an agent object of the destination client source_instance()  Returns an instance object of the source agent destination_instance()  Returns an instance object of the destination agent subclient()  Returns the subclient object of the VM group associated with the replication group live_sync_pairs()  Returns the list of source VM names that are already present in replication monitor vm_pairs()  Returns a dictionary of source VM names and LiveSyncVMPairs object mapping is_enabled()  Returns a boolean to tell whether replication group is enabled or disabled group_frequency()  Returns the group frequency in minutes copy_precedence_applicable  Returns a boolean whether the copy precedence is applicable or not copy_for_replication()  Returns the copy precedence ID used for replication"
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroups",
"url":73,
"doc":"Class for getting all the replication groups in commcell. Initialize object of the Replication groups Args: commcell_object (Commcell)  instance of the Commcell class"
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroups.ReplicationGroupType",
"url":73,
"doc":"Enum to map Replication Group Types to integers"
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroups.has_replication_group",
"url":73,
"doc":"Checks if replication group exists or not Args: replication_group_name (str)  name of the replication group Returns: bool - boolean output whether replication group exists or not Raises: SDKException: if proper inputs are not provided",
"func":1
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroups.get",
"url":73,
"doc":"Returns a replication group object of the specified replication group name. Args: replication_group_name (str)  name of the replication group Returns: object - instance of the ReplicationGroup class for the given replication group name Raises: SDKException: if proper inputs are not provided If Replication group doesnt exists with given name",
"func":1
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroups.delete",
"url":73,
"doc":"Deletes the specified replication group name. Args: replication_group_name (str)  name of the replication group Returns: Raises: SDKException: if proper inputs are not provided if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroups.replication_groups",
"url":73,
"doc":"return all replication groups Args: Returns: All the replication groups in the commcell Raises:"
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroups.refresh",
"url":73,
"doc":"Refresh the replication groups created in the commcell. Args: Returns: Raises:",
"func":1
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroup",
"url":73,
"doc":"Class for all Replication groups related SDK Initialise the ReplicationGroup object for the given group name Args: commcell_object (Commcell)  instance of the Commcell class replication_group_name (str)  name of the replication group"
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroup.refresh",
"url":73,
"doc":"Refresh the replication group properties",
"func":1
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroup.group_name",
"url":73,
"doc":"Returns: (str) Returns the name of the replication group"
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroup.group_id",
"url":73,
"doc":"Returns: (str) Returns the ID of the replication group (Zeal)/subtask(classic)"
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroup.task_id",
"url":73,
"doc":"Returns: (str) Returns the ID of the task associated to the replication group"
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroup.replication_type",
"url":73,
"doc":"Returns: (enum) Returns the type of the replication group."
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroup.zeal_group",
"url":73,
"doc":"Returns: (bool) True, if zeal replication group, false otherwise"
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroup.restore_options",
"url":73,
"doc":"Returns: (dict) The dictionary of restore options of the replication group The dictionary structure depends on the vendor"
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroup.is_dvdf_enabled",
"url":73,
"doc":"Returns: (bool) Whether deploy VM during failover is enabled or not"
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroup.is_warm_sync_enabled",
"url":73,
"doc":"Returns: (bool) Whether Warm sync is enabled or not"
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroup.is_intelli_snap_enabled",
"url":73,
"doc":"Returns: (bool) Whether Snapshot on source is utilised or not"
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroup.source_client",
"url":73,
"doc":"Returns: the client object of the source hypervisor"
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroup.destination_client",
"url":73,
"doc":"Returns: (str) the client object for the destination hypervisor"
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroup.source_agent",
"url":73,
"doc":"Returns: the agent object of the source hypervisor"
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroup.destination_agent",
"url":73,
"doc":"Returns: the agent object of the destination hypervisor"
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroup.source_instance",
"url":73,
"doc":"Returns: (str) The source hypervisor's instance name"
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroup.destination_instance",
"url":73,
"doc":"Returns: (str) The destination hypervisor's instance name"
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroup.subclient",
"url":73,
"doc":"Returns: the subclient object of the replication group"
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroup.live_sync_pairs",
"url":73,
"doc":"Returns: A list of all source VM names for which live sync pair exists for a periodic replication group eg: [\"vm1\", \"vm2\"]"
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroup.vm_pairs",
"url":73,
"doc":"Returns: A dictionary of livesyncVM pairs/BLR pairs object eg: {\"src_vm1\": LiveSyncVMPair, \"src_vm2\": LiveSyncVMPair}"
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroup.is_enabled",
"url":73,
"doc":"Returns: (bool) Returns True if state of the replication group 'Enabled' else False"
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroup.group_frequency",
"url":73,
"doc":"Returns: (int) The frequency in minutes at which the group is synced (only applicable for Zeal groups)"
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroup.copy_precedence_applicable",
"url":73,
"doc":"Returns: (bool) Whether the copy precedence is applicable or not"
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroup.copy_for_replication",
"url":73,
"doc":"Returns: (int) The ID of the copy used for the replication"
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroup.recovery_target",
"url":73,
"doc":"Returns: (str) The recovery target used for the replication"
},
{
"ref":"cvpysdk.drorchestration.replication_groups.ReplicationGroup.intelli_snap_engine",
"url":73,
"doc":"Returns: (str) Intelli Snap Engine Name"
},
{
"ref":"cvpysdk.drorchestration.replication_pairs",
"url":74,
"doc":"ReplicationPairs: Class for a group of replication pairs from the replication monitor ReplicationPairs Methods:              __init__(commcell_object,  kwargs)  Initializes the Replication pairs class with Commcell object and filters __str__()  Returns the list of all replication pairs as a string __repr__()  Return the string representation for Replication pairs class refresh()  Refreshes the list of Replication pairs _get_replication_pairs()  Internal method to fetch replication pairs information from CommServ  replication_pairs  Returns the dictionary of replication pair IDs with their information get(replication_id)  Returns the ReplicationPair class associated to replication ID ReplicationPair: Class for monitoring a replication pair which exists on periodic monitor ReplicationPair Attributes:               vm_pair_id  Returns the live sync VM pair ID  vm_pair_name  Returns the live sync VM pair name  replication_guid  Returns the replication guid of the live sync pair  source_vm  Returns the name of the source virtual machine  destination_vm  Returns the name of the destination virtual machine  destination_client  Returns the destination client of the Live sync VM pair  destination_proxy  Returns the destination proxy of the Live sync VM pair  destination_instance  Returns the destination instance of the Live sync VM pair  status  Returns the status of the live sync pair  last_synced_backup_job  Returns the last synced backup job ID  latest_replication_job  Returns the latest replication job ID  last_replication_job  Returns the last replication job ID  reverse_replication_schedule_id  Returns the ID of the reverse replication schedule"
},
{
"ref":"cvpysdk.drorchestration.replication_pairs.ReplicationPairs",
"url":74,
"doc":"Class for a group of replication pairs from the replication monitor Constructor method for replication monitor with filtering on the basis of kwargs Args: commcell_object (Commcell): CVPySDK commcell object kwargs (dict): The arguments passed for filtering replication pairs application_id: The application ID for the replication pairs. eg: 106 for VSA instance_id: The instance ID for the source instance associated subclient_id: The ID of VM group to find associated pairs for schedule_id: The ID of the replication schedule that replication pairs are part of failover_group_id: The ID of the failover group that is used for DROrchestration"
},
{
"ref":"cvpysdk.drorchestration.replication_pairs.ReplicationPairs.refresh",
"url":74,
"doc":"Re-populate the replication monitor information",
"func":1
},
{
"ref":"cvpysdk.drorchestration.replication_pairs.ReplicationPairs.replication_pairs",
"url":74,
"doc":"Returns: (dict) Returns the dictionary of all the replication pairs and their info { \"id1\": { \"source_vm\": \"sourceVM1\", \"destination_vm\": \"sourceVM1DRVM\" }, \"id2\": { \"source_vm\": \"sourceVM2\", \"destination_vm\": \"sourceVM2DR\" } }"
},
{
"ref":"cvpysdk.drorchestration.replication_pairs.ReplicationPairs.get",
"url":74,
"doc":"Returns the ReplicationPair object associated to the pair ID Args: replication_id (str or int) : The ID of the replication pair",
"func":1
},
{
"ref":"cvpysdk.drorchestration.replication_pairs.ReplicationPair",
"url":74,
"doc":"Class for replication pair in the replication monitor New constructor method which uses pair ID instead of Live sync objects Args: commcell_object (Commcell): CVPySDK commcell object replication_pair_id (int or str): The pair id of the live sync pair"
},
{
"ref":"cvpysdk.drorchestration.replication_pairs.ReplicationPair.task_id",
"url":75,
"doc":"Returns: (int) The ID of the replication schedule task"
},
{
"ref":"cvpysdk.drorchestration.replication_pairs.ReplicationPair.vm_pair_id",
"url":75,
"doc":"Treats the live sync id as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.replication_pairs.ReplicationPair.vm_pair_name",
"url":75,
"doc":"Treats the live sync name as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.replication_pairs.ReplicationPair.replication_guid",
"url":75,
"doc":"Treats the replication guid as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.replication_pairs.ReplicationPair.source_vm",
"url":75,
"doc":"Treats the source VM as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.replication_pairs.ReplicationPair.source_vm_guid",
"url":75,
"doc":"Returns (str): The GUID of the source VM"
},
{
"ref":"cvpysdk.drorchestration.replication_pairs.ReplicationPair.destination_vm",
"url":75,
"doc":"Treats the destination VM as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.replication_pairs.ReplicationPair.destination_vm_guid",
"url":75,
"doc":"Returns (str): The GUID of the destination VM"
},
{
"ref":"cvpysdk.drorchestration.replication_pairs.ReplicationPair.destination_client",
"url":75,
"doc":"Treats the destination VM as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.replication_pairs.ReplicationPair.destination_proxy",
"url":75,
"doc":"Treats the destination VM as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.replication_pairs.ReplicationPair.destination_instance",
"url":75,
"doc":"Treats the destination instance as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.replication_pairs.ReplicationPair.status",
"url":75,
"doc":"Treats the status as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.replication_pairs.ReplicationPair.failover_status",
"url":75,
"doc":"Treats the failover_status as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.replication_pairs.ReplicationPair.last_synced_backup_job",
"url":75,
"doc":"Treats the synced backup job as a read-only attribute."
},
{
"ref":"cvpysdk.drorchestration.replication_pairs.ReplicationPair.last_replication_job",
"url":75,
"doc":"Returns (int): the last replication job that has been run for the Live sync VM pair"
},
{
"ref":"cvpysdk.drorchestration.replication_pairs.ReplicationPair.latest_replication_job",
"url":75,
"doc":"Returns (int): the latest successful replication job for the Live sync VM pair"
},
{
"ref":"cvpysdk.drorchestration.replication_pairs.ReplicationPair.failover_job_id",
"url":75,
"doc":"Returns (int): the job ID of the failover job"
},
{
"ref":"cvpysdk.drorchestration.replication_pairs.ReplicationPair.reverse_replication_schedule_id",
"url":75,
"doc":"Returns (int): The schedule ID of the reverse replication schedule"
},
{
"ref":"cvpysdk.drorchestration.replication_pairs.ReplicationPair.replication_group_name",
"url":75,
"doc":"Returns (str): The name of the replication group associated to the VM pair Note: This also removes the CV prefix for new replication groups"
},
{
"ref":"cvpysdk.drorchestration.replication_pairs.ReplicationPair.is_warm_sync_pair",
"url":75,
"doc":"Returns (bool): Warm Sync enabled/disabled"
},
{
"ref":"cvpysdk.drorchestration.replication_pairs.ReplicationPair.refresh",
"url":75,
"doc":"Refreshes the properties of the live sync",
"func":1
},
{
"ref":"cvpysdk.eventviewer",
"url":76,
"doc":"Main file for performing Event Viewer Operations Events and Event are 2 classes defined in this file Events: Class for representing all the Events associated with the commcell Event: Class for a single Event of the commcell Events: __init__(commcell_object)  initialise object of Clients class associated with the commcell __str__()  returns all the Events associated with the commcell __repr__()  returns the string to represent the instance of the Events class. events()  gets all the Events associated with the commcell get(event_id)  returns the Event class object of the input event id Event: __init__(commcell_object)  initialise object of Class associated to the commcell __repr__()  return the Event id, the instance is associated with _get_event_properties()  method to get the Event id, if not specified in __init__  event_code  returns the event code associated to the event id  job_id  returns the job id associated to the event id is_backup_disabled  boolean specifying if backup is disabled or not is_restore_disabled  boolean specifying if restore is disabled or not"
},
{
"ref":"cvpysdk.eventviewer.Events",
"url":76,
"doc":"Class for representing Events associated with the commcell. Initialize object of the Events class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the Events class"
},
{
"ref":"cvpysdk.eventviewer.Events.events",
"url":76,
"doc":"Gets all the events associated with the commcell Args: query_params_dict (dict)  Query Params Dict Example: { \"jobId\": 123, } details (bool)  Returns all details if True Returns: dict - consists of all events in the commcell { \"event1_id\": event1_code or complete details dict, \"event2_id\": event2_code or complete details dict } Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.eventviewer.Events.get",
"url":76,
"doc":"Returns an event object Args: event_id (str)  Id of the Event Returns: object - instance of the Event class for the given Event Id",
"func":1
},
{
"ref":"cvpysdk.eventviewer.Event",
"url":76,
"doc":"Class for Event Viewer operations. Initialize the Event Viewer class instance. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the Event class"
},
{
"ref":"cvpysdk.eventviewer.Event.event_code",
"url":76,
"doc":"Treats the event code as a read-only attribute."
},
{
"ref":"cvpysdk.eventviewer.Event.job_id",
"url":76,
"doc":"Treats the job id as a read-only attribute."
},
{
"ref":"cvpysdk.eventviewer.Event.is_backup_disabled",
"url":76,
"doc":"Returns True/False based on the event type"
},
{
"ref":"cvpysdk.eventviewer.Event.is_restore_disabled",
"url":76,
"doc":"Returns True/False based on the event type"
},
{
"ref":"cvpysdk.exception",
"url":77,
"doc":"File for handling all the exceptions for the CVPySDK python package. EXCEPTION_DICT: A python dictionary for holding all the exception messages for a specific event or class. Any exceptions to be raised from the SDK in a module should be added to this dictionary. where, - the key is the module name or the class name where the exception is raised - the value is a dictionary: - key is a unique ID to identify the exception message - value is the exception message | SDKException: Class inheriting the \"Exception\" Base class for raising a specific exception for the CVPySDK python package. The user should create an instance of the SDKException class:  SDKException(exception_module, exception_id, exception_message) where, - exception_module: the module in which the exception is being raised - key in the EXCEPTION_DICT - exception_id: unique ID which identifies the message for the Exception - exception_message: additional message to the exception - only applicable if the user wishes to provide an additional message to the exception along with the message already present as the value for the exception_module - exception_id pair Example:  raise SDKException('CVPySDK', '101') will raise the exception as: SDKException: Failed to Login with the credentials provided and,  raise SDKException('CVPySDK', '101', 'Please check the credentials') will raise: SDKException: Failed to Login with the credentials provided Please check the credentials where the user given message is appended to the original message joined by new line"
},
{
"ref":"cvpysdk.exception.SDKException",
"url":77,
"doc":"Exception class for raising exception specific to a module. Initialize the SDKException class instance for the exception. Args: exception_module (str)  name of the module where the exception was raised exception_id (str)  id of the exception specific to the exception_module exception_message (str)  additional message about the exception Returns: object - instance of the SDKException class of type Exception"
},
{
"ref":"cvpysdk.globalfilter",
"url":78,
"doc":"Main file for managing global filters for this commcell GlobalFilters and GlobalFilter are the only classes defined in this file GlobalFilters: Class for managing global filters for this commcell GlobalFilter: Class to represent one agent specific global filter GlobalFilters: __init__()  initializes global filter class object __repr__()  returns the string for the instance of the GlobalFilter class get()  returns the GlobalFilter object for specified filter name GlobalFilter: __init__()  initializes global filter object __repr__()  returns string representing this class _get_global_filters()  gets the global filters associated with commcell for specified filter _initialize_global_filters()  initializes GlobalFilter class objects _update()  updates the global filters list on commcell content()  returns the list of filters associated with this agent add()  adds the specified filter to global list overwrite()  overwrites existing global list with specified delete_all()  removes all the filters from global filters list refresh()  refresh the properties of the global filter"
},
{
"ref":"cvpysdk.globalfilter.GlobalFilters",
"url":78,
"doc":"Class for managing global filters for this commcell Initializes global filter object Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the GlobalFilter class"
},
{
"ref":"cvpysdk.globalfilter.GlobalFilters.get",
"url":78,
"doc":"Returns the global filter agent object for specified filter name Args: filter_name (str)  Global filter name for which the object is to be created Accepted values: WINDOWS/ UNIX/ NAS Returns: object - GlobalFilter object for specified global filter Raises: SDKException: if data type of input is invalid if specified global filter doesn't exist",
"func":1
},
{
"ref":"cvpysdk.globalfilter.GlobalFilter",
"url":78,
"doc":"Class to represent any one particular agent global filter Initializes global filter object Args: commcell_object (object)  commcell object agent_key (str)  agent key that shall be used in requests"
},
{
"ref":"cvpysdk.globalfilter.GlobalFilter.content",
"url":78,
"doc":"Treats filter content as read-only property"
},
{
"ref":"cvpysdk.globalfilter.GlobalFilter.add",
"url":78,
"doc":"Adds the filters list to the specified agent global filters list Args: filters_list (list)  list of filters to be added to this agent Raises: SDKException: if data type of input is invalid if failed to update global filter content if response received is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.globalfilter.GlobalFilter.overwrite",
"url":78,
"doc":"Overwrites the existing filters list with given filter list Args: filters_list (list)  list of filters to be replaced with existing Raises: SDKException: if data type of input is invalid if failed to update global filter content if response received is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.globalfilter.GlobalFilter.delete_all",
"url":78,
"doc":"Deletes all the filters from given agent filters list Raises: SDKException: if failed to update global filter content if response received is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.globalfilter.GlobalFilter.refresh",
"url":78,
"doc":"Refresh the properties of the GlobalFilter.",
"func":1
},
{
"ref":"cvpysdk.hac_clusters",
"url":79,
"doc":"File for performing hac cluster related operations on the commcell HACClusters and HACCluster are 2 classes defined in this file HACClusters: Class for representing all the hac clusters associated with the commcell HACCluster: Class for a instance of a single hac cluster of the commcell HACClusters       __init__()  initialize object of HAC clusters class associated with the commcell __str()  returns all the HAC clusters of the commcell __repr__()  returns the string to represent the instance __get_item()  returns the details of HAC cluster for given cloud name _get_all_clusters()  gets detail of all hac cluster associated to commcell _response_not_success()  raise exception when response is not 200 get()  return an HACCluster object for given cluster name has_cluster()  returns whether the hac cluster is present or not in the commcell add()  creates a new hac cluster to the commcell delete()  deletes the hac cluster associated to commcell refresh()  refresh the hac clusters details associated with commcell HACClusters Attributes            -  all_hac_clusters  returns the dictionary consisting of all the hac clusters associated with the commcell and there details HACCluster       __init__()  initialize object of IndexPool class __repr__()  returns the string to represent the instance _response_not_success()  raise exception when response is not 200 modify_node()  methods to modify the HAC cluster node properties node_info()  returns a dict consisting details of node present in the cluster refresh()  refresh the index pool details associated with commcell HACCluster Attributes            -  cluster_id  returns the cluster id for HAC cluster  cluster_name  returns the HAC cluster name  cloud_id  returns HAC cluster cloud id  node_names  returns a list of names of all HAC cluster nodes"
},
{
"ref":"cvpysdk.hac_clusters.HACClusters",
"url":79,
"doc":"Class for representing all the HAC clusters associated with the commcell. Initialize object of the HACClusters class Args: commcell_object (object)  instance of class Commcell Returns: object - instance of class HACClusters"
},
{
"ref":"cvpysdk.hac_clusters.HACClusters.has_cluster",
"url":79,
"doc":"Returns whether the HAC cluster with given name is present or not Args: hac_name (str)  hac cluster name Returns: boolean - True if hac cluster is associated with the commcell else returns False Raises: SDKException: Data type of the input(s) is not valid",
"func":1
},
{
"ref":"cvpysdk.hac_clusters.HACClusters.get",
"url":79,
"doc":"Returns instance of HACCluster class is cluster is found Args: hac_name (str/int)  hac cluster name or id Returns: object (HACCluster)  Instance of a single hac cluster Raises: SDKException: Data type of the input(s) is not valid HAC Cluster not found",
"func":1
},
{
"ref":"cvpysdk.hac_clusters.HACClusters.refresh",
"url":79,
"doc":"Refreshes properties for HACClusters class",
"func":1
},
{
"ref":"cvpysdk.hac_clusters.HACClusters.add",
"url":79,
"doc":"Creates a new HAC cluster Args: cloud_name (str)  hac cluster cloud name cloud_node_names (list)  string array of node names to be added to cluster Raises: SDKException: Data type of the input(s) is not valid. Response was not success. Response was empty. Returns: Object - Instance of class HACCluster",
"func":1
},
{
"ref":"cvpysdk.hac_clusters.HACClusters.delete",
"url":79,
"doc":"Deletes an existing HAC cluster Args: cloud_name (str)  HAC cluster cloud name to be deleted Raises: SDKException: Data type of the input(s) is not valid. Response was not success. Response was empty.",
"func":1
},
{
"ref":"cvpysdk.hac_clusters.HACClusters.all_hac_clusters",
"url":79,
"doc":"Returns the details of all HAC clusters associated with commcell"
},
{
"ref":"cvpysdk.hac_clusters.HACCluster",
"url":79,
"doc":"Class to perform HAC cluster operations on a specific HAC cluster Initializes the HACCluster class object Args: commcell_object (object)  Instance of commcell class cluster_name (str)  HAC cluster cloud name cluster_id (int)  HAC cluster cloud id default: None Returns: object - instance of the HACCluster class"
},
{
"ref":"cvpysdk.hac_clusters.HACCluster.refresh",
"url":79,
"doc":"Refreshes properties of the HAC cluster",
"func":1
},
{
"ref":"cvpysdk.hac_clusters.HACCluster.modify_node",
"url":79,
"doc":"Methods to modify the hac cluster node properties Args: node_name (str) - Client name for the node listener_port (int/str) - zkListenerPort address to be updated default - None Sample: '8090' or 8090 data_port (int/str) - zkDataPort address to be updated default - None Sample: '8091' or 8091 election_port (int/str) - zkElectionPort address to be updated default - None Sample: '8097' or 8097 data_dir (str) - zoo keeper data directory default - None Raises: SDKException: HAC zKeeper node not found Response was not success Returns: None",
"func":1
},
{
"ref":"cvpysdk.hac_clusters.HACCluster.node_info",
"url":79,
"doc":"Returns the hac cluster node information Args: node_name (str) - HAC cluster node name Returns: dict - dictionary containing details of the hac node Raises: SDKException: HAC zKeeper node not found",
"func":1
},
{
"ref":"cvpysdk.hac_clusters.HACCluster.cloud_id",
"url":79,
"doc":"Returns HAC cluster cloud id"
},
{
"ref":"cvpysdk.hac_clusters.HACCluster.node_names",
"url":79,
"doc":"Returns a list of HAC cluster node names"
},
{
"ref":"cvpysdk.hac_clusters.HACCluster.cluster_id",
"url":79,
"doc":"Returns the HAC cluster pseudo client id"
},
{
"ref":"cvpysdk.hac_clusters.HACCluster.cluster_name",
"url":79,
"doc":"Returns the HAC cluster cloud name"
},
{
"ref":"cvpysdk.identity_management",
"url":80,
"doc":"Main file for performing identity management operations IdentityManagementApps, IdentityManagementApp and SamlApp are the classes defined in this file IdentityManagementApps: Class for representing all the identity management apps in the commcell IdentityManagementApp: Class for representing a single identity management app in the commcell SamlApp: class for representing a single saml app in commcell IdentityManagementApps            __init__(commcell_object)  initialise object of identity management apps class of the commcell __str__()  returns all the apps identity management apps in the commcell __repr__()  returns the string for the instance of the identity management apps _get_apps()  gets all the identity management appsin the commcell get_local_identity_app  gets the local identity app of the commcell get_commcell_identity_apps  gets the list of commcell identity apps of the commcell delete_identity_app()  deletes the specified local identity app delete_saml_app()  deletes the specified saml app get_saml()  returns instance of SamlApp class configure_saml_app()  creates a saml app configure_local_identity_app()  sets up the local identity app for the specified commcell configure_commcell_app()  creates a commcell identity app for the specified commcell configure_openid_app()  creates a OpenID app for the specified commcell refresh()  refresh the apps in the commcell IdentityManagementApp            __init__()  initialize instance of the IdentityManagementApp instance __repr__()  return the appname name, the instance it is associated with _get_app_key()  gets the app key _get_app_details()  gets the details of the identity management app get_app_props()  returns a dict containing the properties of a third party app refresh()  refresh the details of the app SamlApp            __init__()  initialize instance of the SamlApp instance __repr__()  return the appname name, the instance it is associated with _get_saml_details()  gets details of saml app modify_saml_app()  modifies saml app refresh()  refresh the details of the saml app saml_app_details()  gets saml app details in dict get_saml_user_redirect_url()  gets redirect url of saml user SamlApp instance Attributes                is_saml_app_enabled  returns True if saml app is enabled, False otherwise  is_auto_create_user  returns True if auto create user flag is enabled, False otherwise  saml_app_default_user_groups - returns list of dict of default usergroups of saml app  saml_app_nameid_attribute  returns value of NameId attribute of saml app  saml_app_attribute_mappings  returns attribute mappings of saml app  saml_app_identity_provider_metadata - returns IDP metadata of saml app  saml_app_service_provider_metadata - returns SP metadata of saml app  saml_app_associations  returns saml app associations  is_company_saml_app  returns True if saml app is created for a company, False otherwise"
},
{
"ref":"cvpysdk.identity_management.IdentityManagementApps",
"url":80,
"doc":"Class for representing third party apps in the commcell Initialize object of third party apps class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of ThirdPartyApps class"
},
{
"ref":"cvpysdk.identity_management.IdentityManagementApps.get",
"url":80,
"doc":"Returns a identitymanagementapp object of the specified app name Args: app_name (str)  name of the app Returns: object - instance of IdentityManagementApp class for the given app name Raises: SDKException: if type of the app name argument is not string",
"func":1
},
{
"ref":"cvpysdk.identity_management.IdentityManagementApps.get_saml",
"url":80,
"doc":"Returns a SamlApp object of the specified app name Args: app_name (str)  name of the saml app Returns: object - instance of SamlApp class for the given app name Raises: SDKException: if type of the app name argument is not string",
"func":1
},
{
"ref":"cvpysdk.identity_management.IdentityManagementApps.get_local_identity_app",
"url":80,
"doc":"Returns the local identity app details for IDP commcell Returns: object - object of IdentityManangementApp class"
},
{
"ref":"cvpysdk.identity_management.IdentityManagementApps.get_commcell_identity_apps",
"url":80,
"doc":"Returns a list of commcell apps for the local commcell Returns: list - List containing commcell apps in the SP commcell [ app1_obj, app2_obj ]"
},
{
"ref":"cvpysdk.identity_management.IdentityManagementApps.all_apps",
"url":80,
"doc":"Returns the dictionary consisting of all the ID apps added to the Commcell. dict - consists of all the apps configured on the commcell { \"app1_name\": app1_id, \"app2_name\": app2_id }"
},
{
"ref":"cvpysdk.identity_management.IdentityManagementApps.delete_identity_app",
"url":80,
"doc":"Deletes the specified local identity app Args: app_name (str)  name of the app to be deleted Returns: bool - True if operation succeeds Raises: SDKException: if passed app not found if failure in response",
"func":1
},
{
"ref":"cvpysdk.identity_management.IdentityManagementApps.delete_saml_app",
"url":80,
"doc":"Deletes the specified saml app Args: app_name (string) name of the saml app Raises : SDK Exception : if failure in response if invalid response",
"func":1
},
{
"ref":"cvpysdk.identity_management.IdentityManagementApps.configure_saml_app",
"url":80,
"doc":"Creates a saml app Args: app_name (string) saml app name desc (string) saml app description idp_metadata (dict) idp_metadata = { 'entityId' :  , 'redirectUrl' :  , 'logoutUrl' :  , 'certificateData':  , 'SAMLProtocolVersion' : \"urn:oasis:names:tc:SAML:2.0:metadata\" } sp_metadata (dict) dict of serviceProviderEndpoint, autoGenerateSPMetaData, jksFileContents sp_metadata = { \"serviceProviderEndpoint\": \"https: test.mydomain:443/webconsole\", \"autoGenerateSPMetaData\": true, \"jksFileContents\":[] } associations (dict) dict of email suffixes, companies, domains and usergroups associations = { 'emails' = ['a.com', b.com'], 'companies' = [], 'domains' = [], 'usergroups'= [] } Returns: object - returns object of SamlApp class Raises: SDKException: if failure in response if invalid response",
"func":1
},
{
"ref":"cvpysdk.identity_management.IdentityManagementApps.configure_local_identity_app",
"url":80,
"doc":"Creates a local identity app by associating speccified users Args: user_list (list)  list of names of users to be associated with identity server Returns: object - returns object of IdentityManagementApp class Raises: SDKException: if failed to configure identity app",
"func":1
},
{
"ref":"cvpysdk.identity_management.IdentityManagementApps.configure_commcell_app",
"url":80,
"doc":"Creates a commcell app by associating speccified users Args: IDP_props (list)  dict containing properties of the IDP's identity app [ { \"name\": \"SP Certificate Data\", \"value: \"certificate1_str\" }, { \"name\": \"JKS Private Key\", \"value: \"key1_str\" }, { \"name\": \"CommcellId\", \"value\": \"id1\" }, { \"name\": \"RedirectUrl\", \"value\": \"url1\" } ] app_name (str)  GUID for the app user_assoc_list (list)  list of users for association user_mappings (dict)  dict containing mapping of IDP user to local user { \"idp1_user\": \"sp1_user\", \"idp2_user\": \"sp2_user\" } Returns: object - returns object of IdentityManagementApp class Raises: SDKException: if failed to configure identity app",
"func":1
},
{
"ref":"cvpysdk.identity_management.IdentityManagementApps.configure_openid_app",
"url":80,
"doc":"Adding OpenID app Args: appname (str) : Name of the app to be created props (list) : dict containing properties of the IDP's identity app [ { \"name\": \"clientId\", \"value\": \"13445\" }, { \"name\": \"clientSecret\", \"value\": \"ABC13567\" }, { \"name\": \"endPointUrl\", \"value\": \"https: test.okta.com/.well-known/openid-configuration\" }, { \"name\": \"webConsoleUrls\", \"values\": [ https: mydomain:443/webconsole ] } ] user_to_be_added (list) : list of users for association Raises: SDKException: if failed to configure identity app",
"func":1
},
{
"ref":"cvpysdk.identity_management.IdentityManagementApps.has_identity_app",
"url":80,
"doc":"Checks if an identity app exits in the commcell Args: app_name (str)  name of the identity app Returns: bool - boolean output whether the app exists in the commcell or not Raises: SDKException: if type of the app name argument is not string",
"func":1
},
{
"ref":"cvpysdk.identity_management.IdentityManagementApps.refresh",
"url":80,
"doc":"Refresh the apps associated with the Commcell.",
"func":1
},
{
"ref":"cvpysdk.identity_management.IdentityManagementApp",
"url":80,
"doc":"Class for performing operations on a specific identity management app Initialize the app class Args: commcell_object (object)  instance of the commcell class app_name (str)  name of the app app_key (str)  key of the app default: None app_dict (dict)  dict containing the properties of the app default: None Returns: object - instance of the IdentityManagementApp class"
},
{
"ref":"cvpysdk.identity_management.IdentityManagementApp.get_app_props",
"url":80,
"doc":"Returns a dict containing the properties of a third party app. Returns: dict - properties of the identity app Raises: SDKException: if response is not success",
"func":1
},
{
"ref":"cvpysdk.identity_management.IdentityManagementApp.refresh",
"url":80,
"doc":"Refresh the properties of the app.",
"func":1
},
{
"ref":"cvpysdk.identity_management.IdentityManagementApp.app_name",
"url":80,
"doc":"Treats the app name as a read-only attribute."
},
{
"ref":"cvpysdk.identity_management.IdentityManagementApp.app_key",
"url":80,
"doc":"Treats the app key as a read-only attribute."
},
{
"ref":"cvpysdk.identity_management.IdentityManagementApp.app_description",
"url":80,
"doc":"Treats the app description as a read-only attribute."
},
{
"ref":"cvpysdk.identity_management.IdentityManagementApp.app_type",
"url":80,
"doc":"Treats the app type as a read-only attribute."
},
{
"ref":"cvpysdk.identity_management.IdentityManagementApp.is_enabled",
"url":80,
"doc":"Treats the enabled peroperty as a read-only attribute."
},
{
"ref":"cvpysdk.identity_management.IdentityManagementApp.flags",
"url":80,
"doc":"Treats the app flags as a read-only attribute."
},
{
"ref":"cvpysdk.identity_management.SamlApp",
"url":80,
"doc":"Class for performing operations on a specific saml app Initialise SamlApp class Args: commcell (object) instance of commcell class appname (string) saml app name properties (dict) dict containing properties of saml app Default: None Returns: object - instnace of the SamlApp class"
},
{
"ref":"cvpysdk.identity_management.SamlApp.refresh",
"url":80,
"doc":"Refresh the saml app properties",
"func":1
},
{
"ref":"cvpysdk.identity_management.SamlApp.modify_saml_app",
"url":80,
"doc":"Modifies a saml app Args: req_body (json) saml app properties in json format Raises: SDKException: if failed to modify saml app if request is not successful",
"func":1
},
{
"ref":"cvpysdk.identity_management.SamlApp.get_saml_user_redirect_url",
"url":80,
"doc":"Get Redirect Url of SAML User Args: user_email (str) user email Returns : redirect url of user, None if redirect url is not found for the user Raises: SDKException: if failed to get redirect url if request is not successful",
"func":1
},
{
"ref":"cvpysdk.identity_management.SamlApp.saml_app_description",
"url":80,
"doc":"Treats the saml_app_description as a read-only attribute."
},
{
"ref":"cvpysdk.identity_management.SamlApp.is_saml_app_enabled",
"url":80,
"doc":"Treats the is_saml_app_enabled as a read-only attribute."
},
{
"ref":"cvpysdk.identity_management.SamlApp.is_auto_create_user",
"url":80,
"doc":"Treats the is_auto_create_user as a read-only attribute."
},
{
"ref":"cvpysdk.identity_management.SamlApp.saml_app_default_user_groups",
"url":80,
"doc":"Treats the saml_app_default_user_groups as a read-only attribute."
},
{
"ref":"cvpysdk.identity_management.SamlApp.saml_app_nameid_attribute",
"url":80,
"doc":"Treats the saml_app_nameid_attribute as a read-only attribute."
},
{
"ref":"cvpysdk.identity_management.SamlApp.saml_app_attribute_mappings",
"url":80,
"doc":"Treats the saml_app_attribute_mappings as a read-only attribute."
},
{
"ref":"cvpysdk.identity_management.SamlApp.saml_app_identity_provider_metadata",
"url":80,
"doc":"Treats the saml_app_identity_provider_metadata as a read-only attribute."
},
{
"ref":"cvpysdk.identity_management.SamlApp.saml_app_service_provider_metadata",
"url":80,
"doc":"Treats the saml_app_service_provider_metadata as a read-only attribute."
},
{
"ref":"cvpysdk.identity_management.SamlApp.saml_app_associations",
"url":80,
"doc":"Treats the saml_app_associations as a read-only attribute."
},
{
"ref":"cvpysdk.identity_management.SamlApp.is_company_saml_app",
"url":80,
"doc":"Treats the is_company_saml_app as a read-only attribute. Returns True if saml app is created for a company, False otherwise"
},
{
"ref":"cvpysdk.index_pools",
"url":81,
"doc":"File for performing index pool related operations on the commcell IndexPools and IndexPool are 2 classes defined in this file IndexPools: Class for representing all the index pools associated with the commcell IndexPool: Class for a instance of a single index pool of the commcell IndexPools       __init__()  initialize object of IndexPools class associated with the commcell __str()  returns all the Index pools of the commcell __repr__()  returns the string to represent the instance __getitem__()  returns the details of index pool for given pool name _get_all_index_pools()  gets detail of all index pools using REST API call _response_not_success()  raise exception when response is not 200 get()  return an IndexPool object for given pool name has_pool()  returns whether the index pool is present or not in the commcell add()  creates a new Index pool to the commcell delete()  deletes the index pool associated to commcell refresh()  refresh the index pools details associated with commcell IndexPools Attributes            -  all_index_pools  returns the dictionary consisting of all the index pools associated with the commcell and there details IndexPool     = __init__()  initialize object of IndexPool class __repr__()  returns the string to represent the instance _response_not_success()  raise exception when response is not 200 modify_node()  modify/add a node to the index pool node_info()  returns a dict consisting details of node present in the pool refresh()  refresh the index pool details associated with commcell IndexPool Attributes             pool_id  returns the pseudo client id for index pool cloud  cloud_id  returns the cloud id for index pool  node_names  returns a list of names of all the nodes present in pool  hac_cluster  returns the hac cluster name  pool_name  returns the client name for index pool"
},
{
"ref":"cvpysdk.index_pools.IndexPools",
"url":81,
"doc":"Class for representing all the Index pools associated with the commcell Initialize object of the IndexPools class Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of IndexPools class"
},
{
"ref":"cvpysdk.index_pools.IndexPools.refresh",
"url":81,
"doc":"Refreshes the properties of IndexPools class",
"func":1
},
{
"ref":"cvpysdk.index_pools.IndexPools.all_index_pools",
"url":81,
"doc":"Returns a dict consisting details of all index pools Returns: dict - dictionary consisting details for all index pools Sample: {  :  ,  :  }"
},
{
"ref":"cvpysdk.index_pools.IndexPools.get",
"url":81,
"doc":"Returns the IndexPool class object with given pool_name Args: pool_name (int/str)  Index pool name present in commcell Returns: object - instance of IndexPool class Raises: SDKExecption: Data type of the input(s) is not valid Index pool not found",
"func":1
},
{
"ref":"cvpysdk.index_pools.IndexPools.has_pool",
"url":81,
"doc":"Returns whether a index pool is present in the commcell or not Args: pool_name (str)  Index pool name Returns: bool - True if index pool with given pool_name is present else False",
"func":1
},
{
"ref":"cvpysdk.index_pools.IndexPools.add",
"url":81,
"doc":"Creates a new Index pool within the commcell Args: pool_name (str)  Name for the index pool node_names (list)  List of strings of all the index pool node names hac_name (str)  Name of the HAC cluster to be used while creating pool Raises: SDKExecption: Data type of the input(s) is not valid. Response was not success. Response was empty. Returns: object - Returns a object of class IndexPool",
"func":1
},
{
"ref":"cvpysdk.index_pools.IndexPools.delete",
"url":81,
"doc":"Deletes an existing index pool cloud from commcell Args: pool_name (str)  Index pool cloud name Returns: None Raises: SDKExecption: Data type of the input(s) is not valid. Response was not success. Response was empty.",
"func":1
},
{
"ref":"cvpysdk.index_pools.IndexPool",
"url":81,
"doc":"Class for performing index pool operations on a specific index pool Initializes the IndexPool class instance Args: commcell_obj (object)  Instance of class Commcell pool_name (str)  Index pool name pool_id (int)  Index pool client id default: None Returns: object - instance of the IndexPool class"
},
{
"ref":"cvpysdk.index_pools.IndexPool.refresh",
"url":81,
"doc":"Refreshes properties of IndexPool class",
"func":1
},
{
"ref":"cvpysdk.index_pools.IndexPool.node_info",
"url":81,
"doc":"Returns the index pool node information Args: node_name (str)  index pool node name Returns: dict - dictionary consisting details of index pool node Raises: SDKException: Index pool node not found",
"func":1
},
{
"ref":"cvpysdk.index_pools.IndexPool.modify_node",
"url":81,
"doc":"Method to modify the pool node details Args: node_name (str)  index pool node name operation_type (int)  operation type (1, 2, 3) 1 - Adds a new node 2 - Removes existing node 3 - Edits the existing node (default) node_params (list)  list of all the properties for the index pool node for example: [{ \"name\":  , \"value\":  }, ] Raises: SDKException: Response was not success. Response was empty.",
"func":1
},
{
"ref":"cvpysdk.index_pools.IndexPool.pool_id",
"url":81,
"doc":"Returns the index pool client id"
},
{
"ref":"cvpysdk.index_pools.IndexPool.cloud_id",
"url":81,
"doc":"Returns the index pool cloud id"
},
{
"ref":"cvpysdk.index_pools.IndexPool.pool_name",
"url":81,
"doc":"Returns index pool name"
},
{
"ref":"cvpysdk.index_pools.IndexPool.node_names",
"url":81,
"doc":"Returns a list of index pool node names"
},
{
"ref":"cvpysdk.index_pools.IndexPool.hac_cluster",
"url":81,
"doc":"Returns the hac cluster name assigned to the index pool"
},
{
"ref":"cvpysdk.index_server",
"url":82,
"doc":"File for performing index server related operations on the commcell IndexServers, IndexServer and _Roles are 3 classes defined in this file IndexServers: Class for representing all the index servers associated with the commcell IndexServer: Class for a instance of a single index server of the commcell _Roles: Class for storing all the cloud role details \"IndexServerOSType\" is the enum class used to represent os type of IS IndexServers       __init__()  initialize object of IndexServers class associated with the commcell __str()  returns all the index servers of the commcell __repr__()  returns the string to represent the instance __len__()  returns the number of index servers associated _get_index_servers()  gets all the index server associated with the commcell _response_not_success()  raise exception when response is not 200 _get_all_roles()  creates an instance of _Roles class has()  returns whether the index server is present or not get()  returns a IndexServer object for given cloud name create()  creates a index server within the commcell delete()  deletes a index server associated with commcell update_roles_data()  fetches the cloud roles data from commcell get_properties()  returns a dict of data of index server for the given cloud name refresh()  refresh the index servers associated with commcell prune_orphan_datasources()  Deletes all the orphan datasources IndexServers Attributes            -  all_index_servers  returns the dictionary consisting of all the index servers associated with the commcell and there details  roles_data  returns the list of cloud roles details IndexServer      = __init()__  initializes the object with the specified commcell object, index server name and the cloud id __repr__()  returns the index server's name, the instance is associated with _get_cloud_id()  gets the cloud id _get_properties()  gets all the properties of the index server refresh()  refresh all the properties of client update_roles_data()  fetches the cloud roles data from commcell modify()  to modify the index server node details change_plan()  changes the plan of a given index server update_role()  to update the roles assigned to cloud delete_docs_from_core()  Deletes the docs from the given core name on index server depending on the select dict passed hard_commit  do hard commit on specified index server solr core get_health_indicators()  get health indicators for index server node by client name get_all_cores  gets all the cores in index server _create_solr_query()  Create solr search query based on inputs provided execute_solr_query()  Creates solr url based on input and executes it on solr on given core get_index_node()  returns an Index server node object for given node name get_os_info()  returns the OS type for the Index server get_plan_info()  Returns the plan information of the index server __form_field_query()  returns the query with the key and value passed IndexServer Attributes             properties  returns the properties of this index server  roles_data  returns all the available cloud roles data  host_name  returns the host name for the index server  internal_cloud_name  returns the internal cloud name  client_name  returns the client name for index server  server_url  returns the content indexing server url  type  returns the type of the index server  base_port  returns the base port of this index server  client_id  returns the client id for this index server  roles  returns the array of roles installed with the index server within the commcell  cloud_id  returns the cloud id of the index server  server_type  returns the server type of the index server  engine_name  returns the engine name that is index server name  index_server_client_id  returns the index server client id  role_display_name  display name of roles  is_cloud  returns boolean True if the Index server is cloud else returns False  node_count  returns the number of Index server nodes  os_info  returns the OS type for the Index server  plan_name  Returns the plan name associated with index server  fs_collection  Returns the multinode collection name of File System Index IndexNode     = __init__()  initializes the class with commcell object Index server cloud id and Node client name refresh()  refreshes the attributes modify()  to modify the index server node details IndexNode Attributes            node_name  returns Index server node client name  node_id  returns Index server node client id  solr_port  returns port number Solr is running on the Index server node  solr_url  returns Solr URL for Index server node  roles  returns the array of roles installed with the index server within the commcell  index_location  returns Index directory for the Index server Node  jvm_memory  returns Solr JVM memory for the Index server Node _Roles    __init__()  initializes the class with commcell object refresh()  refreshes the attributes _get_all_roles()  fetches the cloud roles data from commcell get_role_id()  returns role id for given role name update_roles_data()  fetches the cloud roles data from commcell _Roles Attributes         -  roles_data  returns the list of details of all cloud roles"
},
{
"ref":"cvpysdk.index_server.IndexServers",
"url":82,
"doc":"Class for representing all the index servers associated with the commcell. Initialize object of the IndexServers class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the IndexServers class"
},
{
"ref":"cvpysdk.index_server.IndexServers.all_index_servers",
"url":82,
"doc":"Returns the details of all the index server for associated commcell. Returns: dict - dictionary consisting details of all the index servers associated with commcell Sample - {  : { \"engineName\" :  , \"internalCloudName\" :  ,  . },  : { \"engineName\" :  , \"cloudID\" :  ,  . } }"
},
{
"ref":"cvpysdk.index_server.IndexServers.roles_data",
"url":82,
"doc":"Returns the details of all the cloud roles data Returns: list - list of dictionary containing details of the cloud roles"
},
{
"ref":"cvpysdk.index_server.IndexServers.refresh",
"url":82,
"doc":"Refresh the properties of IndexServers class",
"func":1
},
{
"ref":"cvpysdk.index_server.IndexServers.update_roles_data",
"url":82,
"doc":"Synchronises all the cloud roles details with the commcell",
"func":1
},
{
"ref":"cvpysdk.index_server.IndexServers.get_properties",
"url":82,
"doc":"Returns all details of a index server with the cloud name Args: cloud_name (str)  cloud name of index server Returns: dict - dict consisting details of the index server",
"func":1
},
{
"ref":"cvpysdk.index_server.IndexServers.has",
"url":82,
"doc":"Returns True if the index server with given name is present in commcell. Args: cloud_name (str)  the engine name of index server Returns: boolean - True if index server with given name as is_name is associated with the commcell else returns False Raises: SDKExecption: Data type of the input(s) is not valid",
"func":1
},
{
"ref":"cvpysdk.index_server.IndexServers.get",
"url":82,
"doc":"Returns IndexServer object if a index server is found. Args: cloud_data (int/str)  cloud name or cloud ID of index server Returns: object (IndexServer)  Instance on index server with the engine name or cloud id as item Raises: SDKException: Index Server not found. Data type of the input(s) is not valid.",
"func":1
},
{
"ref":"cvpysdk.index_server.IndexServers.create",
"url":82,
"doc":"Creates an index server within the commcell Args: index_server_node_names (list)  client names for index server node index_server_name (str)  name for the index server index_directory (list)  list of index locations for the index server nodes respectively For example: [ ] - same index location for all the nodes [ ,  ,  ] - different index location for index server with 3 nodes index_server_roles (list)  list of role names to be assigned index_pool_name (str)  name for the index pool to used by cloud index server cloud_param (list)  list of custom parameters to be parsed into the json for index server meta info [ { \"name\":  , \"value\":  } ] is_cloud (bool)  if true then creates a cloud mode index server Raises: SDKException: Data type of the input(s) is not valid. Response was not success. Response was empty.",
"func":1
},
{
"ref":"cvpysdk.index_server.IndexServers.delete",
"url":82,
"doc":"Deletes / removes an index server from the commcell Args: cloud_name (str)  cloud name of index server to be removed from the commcell Raises: SDKException: Data type of the input(s) is not valid. Response was not success. Response was empty.",
"func":1
},
{
"ref":"cvpysdk.index_server.IndexServers.prune_orphan_datasources",
"url":82,
"doc":"Deletes all the orphan datasources Raises: SDKException: if failed to prune the orphan datasources If response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.index_server.IndexServerOSType",
"url":82,
"doc":"Enum class for Index Server OS Type"
},
{
"ref":"cvpysdk.index_server.IndexServerOSType.WINDOWS",
"url":82,
"doc":""
},
{
"ref":"cvpysdk.index_server.IndexServerOSType.UNIX",
"url":82,
"doc":""
},
{
"ref":"cvpysdk.index_server.IndexServerOSType.MIXED",
"url":82,
"doc":""
},
{
"ref":"cvpysdk.index_server.IndexServer",
"url":82,
"doc":"Class for performing index server operations for a specific index server Initialize the IndexServer class instance. Args: commcell_obj (object)  instance of the Commcell class name (str)  name of the index server cloud_id (int)  cloud id of the index server default: None Returns: object - instance of the IndexServer class"
},
{
"ref":"cvpysdk.index_server.IndexServer.refresh",
"url":82,
"doc":"Refresh the index server properties",
"func":1
},
{
"ref":"cvpysdk.index_server.IndexServer.update_roles_data",
"url":82,
"doc":"Synchronize the cloud roles data with the commcell",
"func":1
},
{
"ref":"cvpysdk.index_server.IndexServer.modify",
"url":82,
"doc":"Modifies the properties of an index server Args: index_location (str)  index server data directory node_name (str)  index server node name node_params (dict)  parameters to be passed [ { \"name\" :  , \"value\" :  } ] Raises: SDKException: Response was not success. Response was empty.",
"func":1
},
{
"ref":"cvpysdk.index_server.IndexServer.change_plan",
"url":82,
"doc":"Modifies the plan used by an index server Args: plan_name (str)  Name of the plan to be used for the index server Raises: SDKException: Response was not success. Response was empty. if plan with given name doesn't exist",
"func":1
},
{
"ref":"cvpysdk.index_server.IndexServer.update_role",
"url":82,
"doc":"Updates a role of an Index Server Args: props (list)  array of dictionaries consisting details of the roles such as role name and operation type. [{ \"roleName\":  (str) \"operationType\": 1 or 2 (int) 1 for adding a role 2 for removing a role }] Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.index_server.IndexServer.delete_docs_from_core",
"url":82,
"doc":"Deletes the docs from the given core name on index server depending on the select dict passed Args: core_name (str)  name of the solr core select_dict (dict)  dict with query to delete specific documents default query - \" : \" (Deletes all the docs) Returns: None Raises: SDKException: if input data is not valid if index server is cloud, not implemented error if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.index_server.IndexServer.hard_commit",
"url":82,
"doc":"do hard commit for the given core name on index server Args: core_name (str)  name of the solr core Returns: None Raises: SDKException: if input data is not valid if index server is cloud, not implemented error if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.index_server.IndexServer.get_health_indicators",
"url":82,
"doc":"Get health indicators for index server node by client name Args: client_name (str)  name of the client node Returns: (response(str  str json object Raises: SDKException: if input data is not valid if client name is not passed for index server cloud if response is not success if response is empty",
"func":1
},
{
"ref":"cvpysdk.index_server.IndexServer.get_all_cores",
"url":82,
"doc":"gets all cores & core details from index server Args: client_name (str)  name of the client node  Applicable only for solr cloud mode or multi node Index Server Returns: (list,dict)  list containing core names  dict containing details about cores Raises: SDKException: if input data is not valid if client name is not passed for index server cloud if response is not success if response is empty",
"func":1
},
{
"ref":"cvpysdk.index_server.IndexServer.execute_solr_query",
"url":82,
"doc":"Creates solr url based on input and executes it on solr on given core/collection Args: core_name (str)  Core name/collection name where we want to query solr_client (str)  Index Server client name to execute solr query Default : None (picks first client on index server) select_dict (dictionary)  Dictionary containing search criteria and value. Acts as 'q' field in solr query Example : 1. General Criteria to filter results - {\"jid\": 1024, \"datatype\": 2,clid: 2} 2. Keyword Searches on solr - {'keyword': 'SearchKeyword'} 3. For multiple value searches on single field - {'cvowner': ['xxx','yyy']} 4. For single value searches on multiple fields - {('cvowner','cvreaddisp') : 'xxx'} attr_list (set)  Column names to be returned in results. Acts as 'fl' in solr query Example (For Exchange Mailbox IDA, below fields are there in solr) : { 'msgclass', 'ccsmtp', 'fmsmtp', 'folder' } op_params (dictionary)  Other params and values for solr query. Do not mention 'wt' param as it is always json Example : {\"rows\": 0} Returns: content of the response Raises: SDKException: if unable to send request if response is not success",
"func":1
},
{
"ref":"cvpysdk.index_server.IndexServer.get_index_node",
"url":82,
"doc":"Returns an Index server node object for given node name Args: node_name (str)  Index server node name Returns: IndexNode class object Raises: SDKException: if node not found for the given node name",
"func":1
},
{
"ref":"cvpysdk.index_server.IndexServer.get_plan_info",
"url":82,
"doc":"Gets the plan information of the index server Returns: dict - containing the plan information",
"func":1
},
{
"ref":"cvpysdk.index_server.IndexServer.get_os_info",
"url":82,
"doc":"Returns the OS type for the Index server",
"func":1
},
{
"ref":"cvpysdk.index_server.IndexServer.plan_name",
"url":82,
"doc":"Returns the plan name associated with index server Returns: str - name of the plan"
},
{
"ref":"cvpysdk.index_server.IndexServer.os_info",
"url":82,
"doc":"Returns the OS type for the Index server"
},
{
"ref":"cvpysdk.index_server.IndexServer.is_cloud",
"url":82,
"doc":"Returns true if the Index server is cloud and false if not"
},
{
"ref":"cvpysdk.index_server.IndexServer.nodes_count",
"url":82,
"doc":"Returns the count of Index server nodes"
},
{
"ref":"cvpysdk.index_server.IndexServer.roles_data",
"url":82,
"doc":"Returns the cloud roles data"
},
{
"ref":"cvpysdk.index_server.IndexServer.properties",
"url":82,
"doc":"Returns the index server properties"
},
{
"ref":"cvpysdk.index_server.IndexServer.host_name",
"url":82,
"doc":"Returns a list of host names of all index server nodes"
},
{
"ref":"cvpysdk.index_server.IndexServer.cloud_name",
"url":82,
"doc":"Returns the internal cloud name of index server"
},
{
"ref":"cvpysdk.index_server.IndexServer.client_name",
"url":82,
"doc":"Returns a list of client names of all index server nodes"
},
{
"ref":"cvpysdk.index_server.IndexServer.server_url",
"url":82,
"doc":"Returns a list of Solr url of all index server nodes"
},
{
"ref":"cvpysdk.index_server.IndexServer.type",
"url":82,
"doc":"Returns the type of index server"
},
{
"ref":"cvpysdk.index_server.IndexServer.base_port",
"url":82,
"doc":"Returns a list of base ports of all index server nodes"
},
{
"ref":"cvpysdk.index_server.IndexServer.client_id",
"url":82,
"doc":"Returns a list client ids of all index server nodes"
},
{
"ref":"cvpysdk.index_server.IndexServer.roles",
"url":82,
"doc":"Returns a list of roles of index server"
},
{
"ref":"cvpysdk.index_server.IndexServer.role_display_name",
"url":82,
"doc":"Returns the roles display name of index server"
},
{
"ref":"cvpysdk.index_server.IndexServer.cloud_id",
"url":82,
"doc":"Returns the cloud id of index server"
},
{
"ref":"cvpysdk.index_server.IndexServer.server_type",
"url":82,
"doc":"Returns the server type of index server"
},
{
"ref":"cvpysdk.index_server.IndexServer.engine_name",
"url":82,
"doc":"Returns the engine name of index server"
},
{
"ref":"cvpysdk.index_server.IndexServer.index_server_client_id",
"url":82,
"doc":"Returns the index server client id of index server"
},
{
"ref":"cvpysdk.index_server.IndexServer.fs_collection",
"url":82,
"doc":"Returns the multinode collection name of File System Index Returns: str  File System index multinode collection name"
},
{
"ref":"cvpysdk.index_server.IndexNode",
"url":82,
"doc":"Class for Index server node object Initialize the IndexNode class Args: commcell_obj (object)  commcell object index_server_name (int)  Index server name node_name (str)  Index server node client name"
},
{
"ref":"cvpysdk.index_server.IndexNode.refresh",
"url":82,
"doc":"Refresh the index node properties",
"func":1
},
{
"ref":"cvpysdk.index_server.IndexNode.node_name",
"url":82,
"doc":"Returns Index server node client name"
},
{
"ref":"cvpysdk.index_server.IndexNode.node_id",
"url":82,
"doc":"Returns Index server node client id"
},
{
"ref":"cvpysdk.index_server.IndexNode.solr_port",
"url":82,
"doc":"Returns port number Solr is running on the Index server node"
},
{
"ref":"cvpysdk.index_server.IndexNode.solr_url",
"url":82,
"doc":"Returns Solr URL for Index server node"
},
{
"ref":"cvpysdk.index_server.IndexNode.roles",
"url":82,
"doc":"Returns the array of roles installed with the index server within the commcell"
},
{
"ref":"cvpysdk.index_server.IndexNode.index_location",
"url":82,
"doc":"Returns Index directory for the Index server Node"
},
{
"ref":"cvpysdk.index_server.IndexNode.jvm_memory",
"url":82,
"doc":"Returns Solr JVM memory for the Index server Node"
},
{
"ref":"cvpysdk.instance",
"url":83,
"doc":"Main file for performing instance operations. Instances and Instance are 2 classes defined in this file. Instances: Class for representing all the instances associated with a specific agent Instance: Class for a single instance selected for an agent, and to perform operations on that instance Instances: __init__(agent_object)  initialise object of Instances class associated with the specified agent __str__()  returns all the instances associated with the agent __repr__()  returns the string for the object of the Instances class __len__()  returns the number of instances associated to the Agent __getitem__()  returns the name of the instance for the given instance ID or the details for the given instance name _get_instances()  gets all the instances associated with the agent specified all_instances()  returns the dict of all the instances has_instance(instance_name)  checks if a instance exists with the given name or not get(instance_name)  returns the Instance class object of the input backup set name _process_add_response()  to process the add instance request using API call add_sap_hana_instance()  method to add new sap hana instance add_informix_instance()  adds new Informix Instance to given Client delete()  deletes the instance specified by the instance_name from the agent. add_sybase_instance()  To add sybase server instance add_big_data_apps_instance()  To add an instance with the big data apps agent specified add_cloud_storage_instance()  Method to add a new cloud storage instance add_salesforce_instance()  Method to add a new salesforce instance add_postgresql_instance()  Method to add a new postgresql instance _set_general_properties_json()  setter for general cloud properties while adding a new cloud storage instance _set_instance_properties_json()  setter for cloud storage instance properties while adding a new cloud storage instance refresh()  refresh the instances associated with the agent add_mysql_instance()  Method to add new mysql Instance Instance: __init__()  initialise object of Instance with the specified instance name and id, and associated to the specified agent __repr__()  return the instance name, the object is associated with _get_instance_id()  method to get the instance id, if not specified in __init__ _get_instance_properties()  method to get the properties of the instance _process_update_response()  updates the instance properties _process_restore_response()  processes the restore request sent to server and returns the restore job object _filter_paths()  filters the path as per the OS, and the Agent _impersonation_json()  setter for impersonation Property _restore_browse_option_json()  setter for browse option property in restore _restore_commonOptions_json()  setter for common options property in restore _restore_destination_json()  setter for destination options property in restore _restore_fileoption_json()  setter for file option property in restore _restore_virtual_rst_option_json  setter for the virtualServer restore option in restore JSON _restore_destination_json()  setter for destination property in restore _restore_volume_rst_option_json()  setter for the volumeRst restore option in restore JSON _restore_json()  returns the apppropriate JSON request to pass for either Restore In-Place or Out-of-Place operation _restore_in_place()  Restores the files/folders specified in the input paths list to the same location _restore_out_of_place()  Restores the files/folders specified in the input paths list to the input client, at the specified destination location _task()  the task dict used while restore/backup job _restore_sub_task()  the restore job specific sub task dict used to form restore json _process_update_request()  to process the request using API call _get_instance_properties_json()  returns the instance properties update_properties()  to update the instance properties instance_id()  id of this instance instance_name()  name of this instance browse()  browse the content of the instance find()  find content in the instance refresh()  refresh the properties of the instance"
},
{
"ref":"cvpysdk.instance.Instances",
"url":83,
"doc":"Class for getting all the instances associated with a client. Initialize object of the Instances class. Args: agent_object (object)  instance of the Agent class Returns: object - instance of the Instances class"
},
{
"ref":"cvpysdk.instance.Instances.all_instances",
"url":83,
"doc":"Returns dict of all the instances associated with the agent dict - consists of all instances of the agent { \"instance1_name\": instance1_id, \"instance2_name\": instance2_id }"
},
{
"ref":"cvpysdk.instance.Instances.has_instance",
"url":83,
"doc":"Checks if a instance exists for the agent with the input instance name. Args: instance_name (str)  name of the instance Returns: bool - boolean output whether the instance exists for the agent or not Raises: SDKException: if type of the instance name argument is not string",
"func":1
},
{
"ref":"cvpysdk.instance.Instances.get",
"url":83,
"doc":"Returns a instance object of the specified instance name. Args: instance_name (str/int)  name or ID of the instance Returns: object - instance of the Instance class for the given instance name Raises: SDKException: if type of the instance name argument is not string or Int if no instance exists with the given name",
"func":1
},
{
"ref":"cvpysdk.instance.Instances.add_informix_instance",
"url":83,
"doc":"Adds new Informix Instance to given Client Args: Dictionary of informix instance creation options: Example: informix_options = { 'instance_name':  , 'onconfig_file':  , 'sql_host_file':  , 'informix_dir':  , 'user_name':  , 'domain_name':  , 'password':  , 'storage_policy':  , 'description':'created from automation' } Returns: object - instance of the Instance class Raises: SDKException: if None value in informix options if Informix instance with same name already exists if given storage policy does not exists in commcell",
"func":1
},
{
"ref":"cvpysdk.instance.Instances.add_sap_hana_instance",
"url":83,
"doc":"Adds new sap hana instance to given client Args: sid (str)  Database SID hana_client_name(str)  Client where the hana server exists db_user_name (str)  postgres user name db_password (str)  DB password storage_policy (str)  Storage Policy name Returns: object - instance of the Instance class Raises: SDKException: if None value in sap hana options if sap hana instance with same name already exists if given storage policy does not exists in commcell",
"func":1
},
{
"ref":"cvpysdk.instance.Instances.delete",
"url":83,
"doc":"Deletes the instance specified by the instance_name from the agent. Args: instance_name (str)  name of the instance to remove from the agent Raises: SDKException: if type of the instance name argument is not string if failed to delete instance if response is empty if response is not success if no instance exists with the given name",
"func":1
},
{
"ref":"cvpysdk.instance.Instances.add_sybase_instance",
"url":83,
"doc":"Method to Add new Sybase Instance to given Client Args: Dictionary of sybase instance creation options: Example: sybase_options = { 'instance_name':  , 'sybase_ocs':  , 'sybase_ase':  , 'backup_server':  , 'sybase_home':  , 'config_file':  , 'enable_auto_discovery': True, 'shared_memory_directory':  , 'storage_policy':  , 'sa_username':  , 'sa_password':  , 'localadmin_username':  , 'localadmin_password':  , 'masterkey_password': } Raises: SDKException: if None value in sybase options if Sybase instance with same name already exists if given storage policy does not exists in commcell",
"func":1
},
{
"ref":"cvpysdk.instance.Instances.add_db2_instance",
"url":83,
"doc":"Method to Add new Db2 Instance to given Client Args: Dictionary of db2 instance creation options: Example: db2_options = { 'instance_name': 'db2inst1', 'data_storage_policy': 'data_sp', 'log_storage_policy': 'log_sp', 'command_storage_policy': 'cmd_sp', 'home_directory':'/home/db2inst1', 'password':'db2inst1', 'user_name':'db2inst1' } Raises: SDKException: if None value in db2 options if db2 instance with same name already exists if given storage policy does not exists in commcell",
"func":1
},
{
"ref":"cvpysdk.instance.Instances.add_big_data_apps_instance",
"url":83,
"doc":"Method to add big data apps instance to the given client. distributed_options { \"instanceName\": \"ClusterInstance\" \"MasterNode\" : $MASTER_NODE$ (Optional based on cluster Type. If not present set it to  ) \"dataAccessNodes\": [ { \"clientName\": \"DataClient1\" } ] } Raises: SDKException: if None value in Distributed options if Big Data Apps instance with same name already exists if cannot retrieve cluster type from default Instance",
"func":1
},
{
"ref":"cvpysdk.instance.Instances.add_cloud_storage_instance",
"url":83,
"doc":"Returns the JSON request to pass to the API for adding a cloud storage instance Args: cloud_options (dict)  Options needed for adding a new cloud storage instance. Example: Cloud : S3 cloud_options = { 'instance_name': 'S3', 'description': 'instance for s3', 'storage_policy':'cs_sp', 'number_of_streams': 2, 'access_node': 'CS', 'accesskey':'xxxxxxxx', 'secretkey':'yyyyyyyy', 'cloudapps_type': 's3' } Cloud : Google Cloud cloud_options = { 'instance_name': 'google_test', 'description': 'instance for google', 'storage_plan':'cs_sp', 'number_of_streams': 2, 'access_node': 'CS', 'cloudapps_type': 'google_cloud' 'host_url':'storage.googleapis.com', 'access_key':'xxxxxx', 'secret_key':'yyyyyy' } Cloud : Azure Datalake Gen2 cloud_options = { 'instance_name': 'TestAzureDL', 'storage_plan':'cs_sp', 'access_node': 'CS', 'description': None, 'accountname': 'xxxxxx', 'accesskey': 'xxxxxx', 'number_of_streams': 1, 'cloudapps_type': 'azureDL' } Cloud : Amazon RDS cloud_options = { 'instance_name': 'RDS', 'storage_plan': 'cs_sp', 'access_node': 'CS', 'access_key': 'xxxxx', 'secret_key': 'xxxxx', 'cloudapps_type': 'amazon_rds' } Cloud : Amazon Redshift cloud_options = { 'instance_name': 'Redshift', 'storage_plan': 'cs_sp', 'access_node': 'CS', 'access_key': 'xxxxx', 'secret_key': 'xxxxx', 'cloudapps_type': 'amazon_redshift' } Cloud : Amazon Document DB cloud_options = { 'instance_name': 'DocumentDB', 'storage_plan': 'cs_sp', 'access_node': 'CS', 'access_key': 'xxxxxx', 'secret_key': 'xxxxxx', 'cloudapps_type': 'amazon_docdb' } Returns: dict  JSON request to pass to the API Raises : SDKException : if cloud storage instance with same name already exists if given storage policy does not exist in commcell Cloud : Amazon DynamoDB cloud_options = { 'instance_name': 'DynamoDB', 'storage_plan': 'cs_sp', 'access_node': 'CS', 'access_key': 'xxxxxx', 'secret_key': 'xxxxxx', 'cloudapps_type': 'amazon_dynamodb' } Returns: dict  JSON request to pass to the API Raises : SDKException : if cloud storage instance with same name already exists if given storage policy does not exist in commcell",
"func":1
},
{
"ref":"cvpysdk.instance.Instances.add_salesforce_instance",
"url":83,
"doc":"Adds a new salesforce instance. Args: instance_name (str)  instance_name access_node (str)  access node name salesforce_options (dict)  salesforce options { \"login_url\": 'salesforce login url', \"consume_id\": 'salesforce consumer key', \"consumer_secret\": 'salesforce consumer secret', \"salesforce_user_name\": 'salesforce login user', \"salesforce_user_password\": 'salesforce user password', \"salesforce_user_token\": 'salesforce user token' } db_options (dict)  database options to configure sync db { \"db_enabled\": 'True or False', \"db_type\": 'SQLSERVER or POSTGRESQL', \"db_host_name\": 'database hostname', \"db_instance\": 'database instance name', \"db_name\": 'database name', \"db_port\": 'port of the database', \"db_user_name\": 'database user name', \"db_user_password\": 'database user password' }  kwargs (dict)  dict of keyword arguments as follows download_cache_path (str)  download cache path mutual_auth_path (str)  mutual auth cert path storage_policy (str)  storage policy streams (int)  number of streams Returns: object - instance of the instance class for this new instance Raises: SDKException: if instance with given name already exists if failed to add the instance if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instance.Instances.add_postgresql_instance",
"url":83,
"doc":"Adds new postgresql instance to given client Args: instance_name (str)  instance_name kwargs (dict)  dict of keyword arguments as follows: storage_policy (str)  storage policy port (int or str)  port or end point postgres_user_name (str)  postgres user name postgres_password (str)  postgres password version (str)  postgres version maintenance_db (str)  maintenance db binary_directory (str)  postgres binary location lib_directory (str)  postgres lib location archive_log_directory (str)  postgres archive log location Returns: object - instance of the Instance class Raises: SDKException: if None value in mysql options if mysql instance with same name already exists if given storage policy does not exists in commcell",
"func":1
},
{
"ref":"cvpysdk.instance.Instances.add_mysql_instance",
"url":83,
"doc":"Adds new mysql Instance to given Client Args: instance_name (str)  instance_name mysql_options (dict)  dict of keyword arguments as follows: Example: database_options = { 'enable_auto_discovery': True, 'storage_policy': 'sai-sp', 'port': 'hotsname:port', 'mysql_user_name': 'mysqlusername' 'mysql_password': 'password', 'version': '5.7', 'binary_directory':  , 'config_file':  , 'log_data_directory':  , 'data_directory':  , 'description': \"Automation created instance\" } Returns: object - instance of the Instance class Raises: SDKException: if None value in mysql options if mysql instance with same name already exists if given storage policy does not exists in commcell",
"func":1
},
{
"ref":"cvpysdk.instance.Instances.add_oracle_instance",
"url":83,
"doc":"Adds new oracle instance for the given client Args: instance_name (str)  instance_name (Oracle SID) oracle_options (dict)  dict of keyword arguments as follows: log_storage_policy (str)  log storage policy cmdline_storage_policy (str)  Commandline data storage policy oracle_domain_name (str)  Domain name- only for windows oracle_user_name (str)  oracle OS user name oracle_password (str)  oracle OS user password oracle_home (str)  oracle home path tns_admin (str)  tns admin path connect_string (dict)  Credentials to connect to Oracle DB { \"username\":  , (str)  User to connect to Oracle DB \"password\":  , (str)  Password \"service_name\":  (str)  Oracle SID or service name } catalog_connect (dict) Credentials to connect to catalog { \"userName\":  , (str)  Catalog DB user name \"password\";  , (str)  Password of catalog user \"domainName\":  (str)  SID of catalog database } Returns: object - instance of the Instance class Raises: SDKException: if instance with same name exists already if required options are not provided Given storage policies do not exist in Commcell",
"func":1
},
{
"ref":"cvpysdk.instance.Instances.refresh",
"url":83,
"doc":"Refresh the instances associated with the Agent of the selected Client.",
"func":1
},
{
"ref":"cvpysdk.instance.Instance",
"url":83,
"doc":"Class for performing instance operations for a specific instance. Initialise the instance object. Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instance.Instance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instance.Instance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instance.Instance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instance.Instance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instance.Instance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instance.Instance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instance.Instance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instance.Instance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances",
"url":84,
"doc":"Initialize Instances for the SDK."
},
{
"ref":"cvpysdk.instances.aadinstance",
"url":85,
"doc":"File for operating on a Azure AD Instance. AzureAdInstance is the only class defined in this file. AzureAdInstance: Derived class from Instance Base class, representing a Azure Ad Instance, and to perform operations on that instance AzureAdInstance: _restore_in_palce overwrite common in place restore function"
},
{
"ref":"cvpysdk.instances.aadinstance.AzureAdInstance",
"url":85,
"doc":"Class for Azure Ad instance Initialise the instance object. Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.aadinstance.AzureAdInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.aadinstance.AzureAdInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.aadinstance.AzureAdInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.aadinstance.AzureAdInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.aadinstance.AzureAdInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.aadinstance.AzureAdInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.aadinstance.AzureAdInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.aadinstance.AzureAdInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.bigdataappsinstance",
"url":86,
"doc":"File for operating with the a Big Data Apps Instance. BigDataAppsInstance is the only class defined in this file. BigDataAppsInstance: Derived class from Instance Base class, representing a bigdata apps instance, and to perform operations on that instance BigDataAppsInstance          = __new__()  Method to create object based on specific bigdatapps instance type"
},
{
"ref":"cvpysdk.instances.bigdataappsinstance.BigDataAppsInstance",
"url":86,
"doc":"Class for representing an Instance of the BigDataApps agent Initialise the instance object. Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.bigdataappsinstance.BigDataAppsInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.bigdataappsinstance.BigDataAppsInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.bigdataappsinstance.BigDataAppsInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.bigdataappsinstance.BigDataAppsInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.bigdataappsinstance.BigDataAppsInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.bigdataappsinstance.BigDataAppsInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.bigdataappsinstance.BigDataAppsInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.bigdataappsinstance.BigDataAppsInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.cainstance",
"url":87,
"doc":"File for operating on a Cloud Apps Instance. CloudAppsInstance is the only class defined in this file. CloudAppsInstance: Derived class from Instance Base class, representing a cloud apps instance, and to perform operations on that instance  Note: GoogleInstance class is used for OneDrive as well. CloudAppsInstance: __new__()  Method to create object based on specific cloud apps instance type Usage   = To add a new Instance for Cloud Apps agent, please follow these steps: 1. Add the module for the new instance type under the location:  /cvpysdk/instances/cloudapps , with the module name   _instance.py (e.g. \"google_instance.py\", \"salesforce_instance.py\")  . Create a class for your instance type and inherit the CloudAppsInstance class.  . Add the import statement inside the __new__ method.  NOTE: If you add the import statement at the top, it'll cause cyclic import, and the call will fail  . After adding the import statement: - In the  instance_type dict - Add the cloud apps instance type as the key, and the class as its value"
},
{
"ref":"cvpysdk.instances.cainstance.CloudAppsInstance",
"url":87,
"doc":"Class for representing an Instance of the Cloud Apps agent. Initialise the instance object. Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.cainstance.CloudAppsInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.cainstance.CloudAppsInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.cainstance.CloudAppsInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.cainstance.CloudAppsInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cainstance.CloudAppsInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cainstance.CloudAppsInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.cainstance.CloudAppsInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.cainstance.CloudAppsInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps",
"url":88,
"doc":"Initialize Cloud Apps Instances for the SDK."
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance",
"url":89,
"doc":"File for operating on a amazon instances. AmazonRDSInstance, AmazonRedshiftInstance, AmazonDocumentDBInstance, AmazonDynamoDBInstance are the classes defined in this file. AmazonRDSInstance: Derived class from CloudDatabaseInstance Base class, representing a Cloud Database instance of type Amazon RDS and to perform operations on that instance AmazonRDSInstance: __init__()  Initializes amazon rds instance object with associated agent_object, instance name and instance id _process_browse_request()  Process the response received from browse request _restore_json()  Generates Restore json with restore options AmazonRedshiftInstance: Derived class from CloudDatabaseInstance Base class, representing a Cloud Database instance of type Amazon Redshift and to perform operations on that instance AmazonRedshiftInstance: __init__()  Initializes amazon redshift instance object with associated agent_object, instance name and instance id _process_browse_request()  Process the response received from browse request _restore_json()  Generates Restore json with restore options AmazonDocumentDBInstance: Derived class from CloudDatabaseInstance Base class, representing a Cloud Database instance of type Amazon DocumentDB and to perform operations on that instance AmazonDocumentDBInstance __init__()  Initializes amazon documentdb instance object with associated agent_object, instance name and instance id _process_browse_request()  Process the response received from browse request _restore_json()  Generates Restore json with restore options AmazonDynamoDBInstance: Derived class from CloudDatabaseInstance Base class, representing a Cloud Database instance of type Amazon DynamoDB and to perform operations on that instance AmazonDynamoDBInstance: _restore_json()  Generates Restore json with restore option"
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonRDSInstance",
"url":89,
"doc":"Class for representing an Instance of Amazon RDS Initializes the object of the AmazonRDSInstance class Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonRDSInstance.ca_instance_type",
"url":90,
"doc":"Returns the CloudApps instance type as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonRDSInstance.browse",
"url":90,
"doc":"Browses the content of cloud database instance args: Dictionary of browse options Example: { 'start_time': 0, 'end_time': 1570808875, 'include_aged_data': 0, 'copy_precedence': 0, } kwargs: keyword argument of browse options Example: { start_time: 0, end_time: 1570808875, include_aged_data: 0, copy_precedence: 0, } Returns: dict - Browse response json",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonRDSInstance.restore",
"url":90,
"doc":"Restores the content of this instance content Args: destination : Destination cluster name we want to restore to. source : Source snapshot we want to restore from. options : Restore options needed to submit a restore request. Example: Restore of amazon redshift instance cluster from snapshot { destination : 'cluster', source : 'snapshot', options : { 'allowVersionUpgrade' : true, 'publicallyAccessible' : true, 'restoreTags' : false, 'enableDeletionProtection': false, 'availabilityZone': 'us-east-2a', 'targetParameterGroup': 'param', 'targetSubnetGroup': 'subnet', 'nodeType': 'dc-large-8', 'targetPort': 2990, 'numberOfNodes': 1 } } Returns: object - instance of the Job class for this restore job",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonRDSInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonRDSInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonRDSInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonRDSInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonRDSInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonRDSInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonRDSInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonRedshiftInstance",
"url":89,
"doc":"Class for representing an Instance of the Amazon Redshift Initializes the object of the AmazonRedshiftInstance class Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonRedshiftInstance.ca_instance_type",
"url":90,
"doc":"Returns the CloudApps instance type as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonRedshiftInstance.browse",
"url":90,
"doc":"Browses the content of cloud database instance args: Dictionary of browse options Example: { 'start_time': 0, 'end_time': 1570808875, 'include_aged_data': 0, 'copy_precedence': 0, } kwargs: keyword argument of browse options Example: { start_time: 0, end_time: 1570808875, include_aged_data: 0, copy_precedence: 0, } Returns: dict - Browse response json",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonRedshiftInstance.restore",
"url":90,
"doc":"Restores the content of this instance content Args: destination : Destination cluster name we want to restore to. source : Source snapshot we want to restore from. options : Restore options needed to submit a restore request. Example: Restore of amazon redshift instance cluster from snapshot { destination : 'cluster', source : 'snapshot', options : { 'allowVersionUpgrade' : true, 'publicallyAccessible' : true, 'restoreTags' : false, 'enableDeletionProtection': false, 'availabilityZone': 'us-east-2a', 'targetParameterGroup': 'param', 'targetSubnetGroup': 'subnet', 'nodeType': 'dc-large-8', 'targetPort': 2990, 'numberOfNodes': 1 } } Returns: object - instance of the Job class for this restore job",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonRedshiftInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonRedshiftInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonRedshiftInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonRedshiftInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonRedshiftInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonRedshiftInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonRedshiftInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonDocumentDBInstance",
"url":89,
"doc":"Class for representing an Instance of the Amazon DocumentDB Initializes the object of the AmazonDocumentDBInstance class Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonDocumentDBInstance.ca_instance_type",
"url":90,
"doc":"Returns the CloudApps instance type as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonDocumentDBInstance.browse",
"url":90,
"doc":"Browses the content of cloud database instance args: Dictionary of browse options Example: { 'start_time': 0, 'end_time': 1570808875, 'include_aged_data': 0, 'copy_precedence': 0, } kwargs: keyword argument of browse options Example: { start_time: 0, end_time: 1570808875, include_aged_data: 0, copy_precedence: 0, } Returns: dict - Browse response json",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonDocumentDBInstance.restore",
"url":90,
"doc":"Restores the content of this instance content Args: destination : Destination cluster name we want to restore to. source : Source snapshot we want to restore from. options : Restore options needed to submit a restore request. Example: Restore of amazon redshift instance cluster from snapshot { destination : 'cluster', source : 'snapshot', options : { 'allowVersionUpgrade' : true, 'publicallyAccessible' : true, 'restoreTags' : false, 'enableDeletionProtection': false, 'availabilityZone': 'us-east-2a', 'targetParameterGroup': 'param', 'targetSubnetGroup': 'subnet', 'nodeType': 'dc-large-8', 'targetPort': 2990, 'numberOfNodes': 1 } } Returns: object - instance of the Job class for this restore job",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonDocumentDBInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonDocumentDBInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonDocumentDBInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonDocumentDBInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonDocumentDBInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonDocumentDBInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonDocumentDBInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonDynamoDBInstance",
"url":89,
"doc":"Class for representing an Instance of the Amazon DynamoDB Initializes the object of the CloudDatabaseInstance class Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonDynamoDBInstance.ca_instance_type",
"url":90,
"doc":"Returns the CloudApps instance type as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonDynamoDBInstance.browse",
"url":90,
"doc":"Browses the content of cloud database instance args: Dictionary of browse options Example: { 'start_time': 0, 'end_time': 1570808875, 'include_aged_data': 0, 'copy_precedence': 0, } kwargs: keyword argument of browse options Example: { start_time: 0, end_time: 1570808875, include_aged_data: 0, copy_precedence: 0, } Returns: dict - Browse response json",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonDynamoDBInstance.restore",
"url":90,
"doc":"Restores the content of this instance content Args: destination : Destination cluster name we want to restore to. source : Source snapshot we want to restore from. options : Restore options needed to submit a restore request. Example: Restore of amazon redshift instance cluster from snapshot { destination : 'cluster', source : 'snapshot', options : { 'allowVersionUpgrade' : true, 'publicallyAccessible' : true, 'restoreTags' : false, 'enableDeletionProtection': false, 'availabilityZone': 'us-east-2a', 'targetParameterGroup': 'param', 'targetSubnetGroup': 'subnet', 'nodeType': 'dc-large-8', 'targetPort': 2990, 'numberOfNodes': 1 } } Returns: object - instance of the Job class for this restore job",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonDynamoDBInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonDynamoDBInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonDynamoDBInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonDynamoDBInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonDynamoDBInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonDynamoDBInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.amazon_instance.AmazonDynamoDBInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_database_instance",
"url":90,
"doc":"File for operating on a cloud database instance. CloudDatabaseInstance is the only class defined in this file. CloudDatabaseInstance: Derived class from CloudAppsInstance Base class, representing a Cloud Database instance( Amazon RDS,Redshift,DocumentDB and DynamoDB), and to perform operations on that instance CloudDatabaseInstance: __init__()  Initializes cloud database instance object with associated agent_object, instance name and instance id _get_instance_properties()  Retrieves cloud database related instance properties _browse_request_json()  Retrieves and sets browse request json based on browse options _process_browse_response()  Process the response received from browse request browse()  Browse and returns the contents of this instance backup restore()  Submits a restore request based on restore options"
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_database_instance.CloudDatabaseInstance",
"url":90,
"doc":"Class for representing an Instance of the Cloud Database such as Amazon RDS/Redshift/DocumentDB/DynamoDB/Cloud Spanner Initializes the object of the CloudDatabaseInstance class Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_database_instance.CloudDatabaseInstance.ca_instance_type",
"url":90,
"doc":"Returns the CloudApps instance type as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_database_instance.CloudDatabaseInstance.browse",
"url":90,
"doc":"Browses the content of cloud database instance args: Dictionary of browse options Example: { 'start_time': 0, 'end_time': 1570808875, 'include_aged_data': 0, 'copy_precedence': 0, } kwargs: keyword argument of browse options Example: { start_time: 0, end_time: 1570808875, include_aged_data: 0, copy_precedence: 0, } Returns: dict - Browse response json",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_database_instance.CloudDatabaseInstance.restore",
"url":90,
"doc":"Restores the content of this instance content Args: destination : Destination cluster name we want to restore to. source : Source snapshot we want to restore from. options : Restore options needed to submit a restore request. Example: Restore of amazon redshift instance cluster from snapshot { destination : 'cluster', source : 'snapshot', options : { 'allowVersionUpgrade' : true, 'publicallyAccessible' : true, 'restoreTags' : false, 'enableDeletionProtection': false, 'availabilityZone': 'us-east-2a', 'targetParameterGroup': 'param', 'targetSubnetGroup': 'subnet', 'nodeType': 'dc-large-8', 'targetPort': 2990, 'numberOfNodes': 1 } } Returns: object - instance of the Job class for this restore job",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_database_instance.CloudDatabaseInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_database_instance.CloudDatabaseInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_database_instance.CloudDatabaseInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_database_instance.CloudDatabaseInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_database_instance.CloudDatabaseInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_database_instance.CloudDatabaseInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_database_instance.CloudDatabaseInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_storage_instance",
"url":91,
"doc":"File for operating on a cloud storage instance. CloudStorageInstance is the only class defined in this file. CloudStorageInstance: Derived class from CloudAppsInstance Base class, representing a Cloud Storage instance(S3,Azure,Oraclecloud and Openstack), and to perform operations on that instance CloudStorageInstance: _get_instance_properties()  Instance class method overwritten to add cloud apps instance properties as well _generate_json()  Returns the JSON request to pass to the API as per the options selected by the user restore_in_place()  restores the files/folders specified in the input paths list to the same location. restore_out_of_place()  restores the files/folders specified in the input paths list to the input client, at the specified destination location. restore_to_fs()  restores the files/folders specified in the input paths list to the input fs client, at the specified destination location. _set_destination_options_json()  setter for cloud apps destination options in restore JSON _set_restore_options_json()  setter for cloudapps restore options in restore JSON _set_proxy_credential_json()  Method to construct the proxy credentials json for out of place restore restore_using_proxy()  To perform restore to different cloud using proxy passing explicit credentials of destination cloud"
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_storage_instance.CloudStorageInstance",
"url":91,
"doc":"Class for representing an Instance of the cloud storage instance type. Initializes the object of the CloudStorageInstance class. Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_storage_instance.CloudStorageInstance.google_host_url",
"url":91,
"doc":"Returns google cloud URL as read only attribute Returns: (str) - string representing host URL of goole cloud"
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_storage_instance.CloudStorageInstance.google_access_key",
"url":91,
"doc":"Returns google cloud account access key as read only attribute Returns: (str) - string representing google cloud account access key"
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_storage_instance.CloudStorageInstance.ca_instance_type",
"url":91,
"doc":"Returns the CloudApps instance type as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_storage_instance.CloudStorageInstance.host_url",
"url":91,
"doc":"Returns the host URL property as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_storage_instance.CloudStorageInstance.access_key",
"url":91,
"doc":"Returns the access key property as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_storage_instance.CloudStorageInstance.account_name",
"url":91,
"doc":"Returns the account name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_storage_instance.CloudStorageInstance.access_keyid",
"url":91,
"doc":"Returns the access key ID property as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_storage_instance.CloudStorageInstance.server_name",
"url":91,
"doc":"Returns the server name property as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_storage_instance.CloudStorageInstance.username",
"url":91,
"doc":"Returns the username property as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_storage_instance.CloudStorageInstance.endpointurl",
"url":91,
"doc":"Returns the endpoint URL property as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_storage_instance.CloudStorageInstance.client_name",
"url":91,
"doc":"Returns client name of this instance Returns: (str) - client name as registered in the commcell"
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_storage_instance.CloudStorageInstance.access_node",
"url":91,
"doc":"Returns the access node of this instance as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_storage_instance.CloudStorageInstance.restore_in_place",
"url":91,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True copy_precedence (int)  copy precedence value of storage policy copy default: None no_of_streams (int)  number of streams for restore default : 2 Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_storage_instance.CloudStorageInstance.restore_out_of_place",
"url":91,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destination location. Args: paths (list)  list of full paths of files/folders to restore destination_client (str)  name of the client to which the files are to be restored. destination_instance_name(str)  name of the instance to which the files are to be restored. destination_path (str)  location where the files are to be restored in the destination instance. overwrite (bool)  unconditional overwrite files during restore default: True copy_precedence (int)  copy precedence value of storage policy copy default: None no_of_streams (int)  number of streams for restore default : 2 kwargs (dict)  dict of keyword arguments as follows from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None no_image (bool)  restore deleted items default: False Returns: object - instance of the Job class for this restore job Raises: SDKException: if client is not a string or Client object if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_storage_instance.CloudStorageInstance.restore_to_fs",
"url":91,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destination location. Args: paths (list)  list of full paths of files/folders to restore destination_path (str)  location where the files are to be restored in the destination instance. destination_client (str)  name of the fs client to which the files are to be restored. default: None for restores to backup or proxy client. overwrite (bool)  unconditional overwrite files during restore default: True copy_precedence (int)  copy precedence value of storage policy copy default: None no_of_streams (int)  number of streams for restore default : 2 Returns: object - instance of the Job class for this restore job Raises: SDKException: if client is not a string or client object if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_storage_instance.CloudStorageInstance.restore_using_proxy",
"url":91,
"doc":"To perform restore to different cloud using proxy passing explicit credentials of destination cloud Args: destination_client_proxy (str)  name of proxy machine having cloud connector package paths (list)  list of full paths of files/folders to restore destination_path (str)  location where the files are to be restored in the destination instance. overwrite (bool)  unconditional overwrite files during restore default: True copy_precedence (int)  copy precedence value of storage policy copy default: None destination_cloud (dict(dict  dict of dict representing cross cloud credentials Sample dict(dict) : destination_cloud = { 'google_cloud': { 'google_host_url':'storage.googleapis.com', 'google_access_key':'xxxxxx', 'google_secret_key':'yyyyyy' } } destination_cloud = { 'amazon_s3': { 's3_host_url':'s3.amazonaws.com', 's3_access_key':'xxxxxx', 's3_secret_key':'yyyyyy' } } destination_cloud = { 'azure_blob': { 'azure_host_url':'blob.core.windows.net', 'azure_account_name':'xxxxxx', 'azure_access_key':'yyyyyy' } } Returns: object - instance of the Job class for this restore job Raises: SDKException: if destination cloud credentials empty if destination cloud has more than one vendor details if unsupported destination cloud for restore is chosen if client is not a string or Client object if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_storage_instance.CloudStorageInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_storage_instance.CloudStorageInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_storage_instance.CloudStorageInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_storage_instance.CloudStorageInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_storage_instance.CloudStorageInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_storage_instance.CloudStorageInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_storage_instance.CloudStorageInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.cloud_storage_instance.CloudStorageInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.dynamics365_instance",
"url":92,
"doc":"File for performing operations on a MS Dynamics 365 Instance. MSDynamics365Instance is the only class defined in this file. MSDynamics365Instance: Class derived from CloudAppsInstance Base class and representing a Dynamics 365 CRM instance, MSDynamics365Instance:  Methods  _get_instance_properties()  Instance class method overwritten to fetch cloud apps instance properties _get_instance_properties_json()  Returns the instance properties json discover_content()  Discover content for the Dynamics 365 Instance  Properties  access_node  Name of the access node that the instance is associated with idx_app_type  Returns the App type of the MS Dynamics 365 instance"
},
{
"ref":"cvpysdk.instances.cloudapps.dynamics365_instance.MSDynamics365Instance",
"url":92,
"doc":"Class for representing an Instance of the MSDynamics365 instance type. Initialise the instance object. Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.cloudapps.dynamics365_instance.MSDynamics365Instance.access_node",
"url":92,
"doc":"Returns the name of the access node for this MS Dynamics 365 instance"
},
{
"ref":"cvpysdk.instances.cloudapps.dynamics365_instance.MSDynamics365Instance.idx_app_type",
"url":92,
"doc":"Returns the App type of the MS Dynamics 365 instance"
},
{
"ref":"cvpysdk.instances.cloudapps.dynamics365_instance.MSDynamics365Instance.discover_content",
"url":92,
"doc":"Run Discovery for a MS Dynamics 365 Instance Arguments: environment_discovery (bool) Whether to run discovery for Dynamics 365 environments If True Discovery will run for Dynamics 365 environments If False Table level discovered content would be run Returns: discovered_content (dict) Dictionary of the discovered content",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.dynamics365_instance.MSDynamics365Instance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.dynamics365_instance.MSDynamics365Instance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.cloudapps.dynamics365_instance.MSDynamics365Instance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.cloudapps.dynamics365_instance.MSDynamics365Instance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.dynamics365_instance.MSDynamics365Instance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.dynamics365_instance.MSDynamics365Instance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.dynamics365_instance.MSDynamics365Instance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.dynamics365_instance.MSDynamics365Instance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.google_instance",
"url":93,
"doc":"File for operating on a Google Instance. GoogleInstance is the only class defined in this file. GoogleInstance: Derived class from CloudAppsInstance Base class, representing a Google (GMail/GDrive) and OneDrive instance, and to perform operations on that instance GoogleInstance: _prepare_restore_json_v2()  Utility function to prepare user level restore json for OneDrive for bussiness clients _get_instance_properties()  Instance class method overwritten to add cloud apps instance properties as well restore_out_of_place()  runs out-of-place restore for the instance modify_index_server()  Method to modify the index server modify_accessnodes()  Method to modify accessnodes"
},
{
"ref":"cvpysdk.instances.cloudapps.google_instance.GoogleInstance",
"url":93,
"doc":"Class for representing an Instance of the GMail/Gdrive instance type. Initialise the instance object. Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.cloudapps.google_instance.GoogleInstance.ca_instance_type",
"url":93,
"doc":"Returns the CloudApps instance type"
},
{
"ref":"cvpysdk.instances.cloudapps.google_instance.GoogleInstance.manage_content_automatically",
"url":93,
"doc":"Returns the CloudApps Manage Content Automatically property"
},
{
"ref":"cvpysdk.instances.cloudapps.google_instance.GoogleInstance.auto_discovery_status",
"url":93,
"doc":"Treats the Auto discovery property as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.google_instance.GoogleInstance.auto_discovery_mode",
"url":93,
"doc":"Returns the Auto discovery mode property"
},
{
"ref":"cvpysdk.instances.cloudapps.google_instance.GoogleInstance.app_email_id",
"url":93,
"doc":"Returns the service account mail id"
},
{
"ref":"cvpysdk.instances.cloudapps.google_instance.GoogleInstance.google_admin_id",
"url":93,
"doc":"Returns the Google admin mail id"
},
{
"ref":"cvpysdk.instances.cloudapps.google_instance.GoogleInstance.key_file_path",
"url":93,
"doc":"Returns the service account key file path"
},
{
"ref":"cvpysdk.instances.cloudapps.google_instance.GoogleInstance.google_client_id",
"url":93,
"doc":"Returns the service account client id"
},
{
"ref":"cvpysdk.instances.cloudapps.google_instance.GoogleInstance.onedrive_client_id",
"url":93,
"doc":"Returns the OneDrive app client id"
},
{
"ref":"cvpysdk.instances.cloudapps.google_instance.GoogleInstance.onedrive_tenant",
"url":93,
"doc":"Returns the OneDrive tenant id"
},
{
"ref":"cvpysdk.instances.cloudapps.google_instance.GoogleInstance.proxy_client",
"url":93,
"doc":"Returns the proxy client name to this instance"
},
{
"ref":"cvpysdk.instances.cloudapps.google_instance.GoogleInstance.restore_out_of_place",
"url":93,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None to_disk (bool)  If True, restore to disk will be performed Returns: object - instance of the Job class for this restore job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.google_instance.GoogleInstance.enable_auto_discovery",
"url":93,
"doc":"Enables auto discovery on instance. Args: mode (str)  Auto Discovery mode Valid Values: REGEX GROUP",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.google_instance.GoogleInstance.modify_index_server",
"url":93,
"doc":"Method to modify the index server Arguments: modified_index_server (str) new index server name",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.google_instance.GoogleInstance.modify_accessnodes",
"url":93,
"doc":"Method to modify accessnodes Arguments: modified_accessnodes_list (list)  list of new accessnodes modified_user_name (str)  new user account name modified_user_password (str)  new user account password",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.google_instance.GoogleInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.google_instance.GoogleInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.cloudapps.google_instance.GoogleInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.cloudapps.google_instance.GoogleInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.google_instance.GoogleInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.google_instance.GoogleInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.google_instance.GoogleInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.google_instance.GoogleInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.onedrive_instance",
"url":94,
"doc":"File for operating on a OneDrive Instance. OneDriveInstance is the only class defined in this file. OneDriveInstance: Derived class from CloudAppsInstance Base class, representing a OneDrive instance,and to perform operations on that instance OneDriveInstance: _prepare_advsearchgrp_onedrivev2  Utility function to prepare advsearchgrp json for restore job for OneDrive for business clients _prepare_findquery_onedrivev2  Utility function to prepare findquery json for restore job for OneDrive for business clients _prepare_restore_json_v2()  Utility function to prepare user level restore json for OneDrive for business clients _get_instance_properties()  Instance class method overwritten to add cloud apps instance properties as well restore_out_of_place()  runs out-of-place restore for the instance"
},
{
"ref":"cvpysdk.instances.cloudapps.onedrive_instance.OneDriveInstance",
"url":94,
"doc":"Class for representing an Instance of the OneDrive instance type. Initialise the instance object. Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.cloudapps.onedrive_instance.OneDriveInstance.ca_instance_type",
"url":94,
"doc":"Returns the CloudApps instance type"
},
{
"ref":"cvpysdk.instances.cloudapps.onedrive_instance.OneDriveInstance.manage_content_automatically",
"url":94,
"doc":"Returns the CloudApps Manage Content Automatically property"
},
{
"ref":"cvpysdk.instances.cloudapps.onedrive_instance.OneDriveInstance.auto_discovery_status",
"url":94,
"doc":"Treats the Auto discovery property as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.onedrive_instance.OneDriveInstance.auto_discovery_mode",
"url":94,
"doc":"Returns the Auto discovery mode property"
},
{
"ref":"cvpysdk.instances.cloudapps.onedrive_instance.OneDriveInstance.onedrive_client_id",
"url":94,
"doc":"Returns the OneDrive app client id"
},
{
"ref":"cvpysdk.instances.cloudapps.onedrive_instance.OneDriveInstance.onedrive_tenant",
"url":94,
"doc":"Returns the OneDrive tenant id"
},
{
"ref":"cvpysdk.instances.cloudapps.onedrive_instance.OneDriveInstance.proxy_client",
"url":94,
"doc":"Returns the proxy client name to this instance"
},
{
"ref":"cvpysdk.instances.cloudapps.onedrive_instance.OneDriveInstance.restore_out_of_place",
"url":94,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None to_disk (bool)  If True, restore to disk will be performed Returns: object - instance of the Job class for this restore job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.onedrive_instance.OneDriveInstance.enable_auto_discovery",
"url":94,
"doc":"Enables auto discovery on instance. Args: mode (str)  Auto Discovery mode Valid Values: REGEX GROUP",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.onedrive_instance.OneDriveInstance.modify_index_server",
"url":94,
"doc":"Method to modify the index server Arguments: modified_index_server (str) new index server name",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.onedrive_instance.OneDriveInstance.modify_accessnodes",
"url":94,
"doc":"Method to modify accessnodes Arguments: modified_accessnodes_list (list)  list of new accessnodes modified_user_name (str)  new user account name modified_user_password (str)  new user account password",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.onedrive_instance.OneDriveInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.onedrive_instance.OneDriveInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.cloudapps.onedrive_instance.OneDriveInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.cloudapps.onedrive_instance.OneDriveInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.onedrive_instance.OneDriveInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.onedrive_instance.OneDriveInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.onedrive_instance.OneDriveInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.onedrive_instance.OneDriveInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.salesforce_instance",
"url":95,
"doc":"File for operating on a Salesforce Instance. SalesforceInstance is the only class defined in this file. SalesforceeInstance: Derived class from CloudAppsInstance Base class, representing a Salesforce instance, and to perform operations on that instance SalesforceInstance: _restore_json()  Returns the JSON request to pass to the API as per the options selected by the user restore_to_file_system()  Runs object level restore to file system and returns object of Job or Schedule class restore_to_database()  Runs object level restore to database and returns object of Job or Schedule class restore_to_salesforce_from_database()  Runs restore to Salesforce from database and returns object of Job or Schedule class restore_to_salesforce_from_media()  Runs restore to Salesforce from database and returns object of Job or Schedule class metadata_restore_to_file_system()  Runs metadata restore to file system and returns object of Job or Schedule class metadata_restore_to_salesforce()  Runs metadata restore to Salesforce and returns object of Job or Schedule class SalesforceInstance Attributes:  ca_instance_type  Returns the instance type of this cloud apps instance  organization_id  Returns the Salesforce organization id  login_url  Returns the login url of Salesforce organization  consumer_id  Returns the Consumer Id of the Salesforce connected app used to authenticate with Salesforce by this instance  proxy_client  Returns the name of the access node. Returns None if client group is configured as access node"
},
{
"ref":"cvpysdk.instances.cloudapps.salesforce_instance.SalesforceInstance",
"url":95,
"doc":"Class for representing an Instance of the Salesforce instance type. Initialise the instance object. Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.cloudapps.salesforce_instance.SalesforceInstance.ca_instance_type",
"url":95,
"doc":"Returns the instance type of this cloud apps instance Returns: (str): Instance Type"
},
{
"ref":"cvpysdk.instances.cloudapps.salesforce_instance.SalesforceInstance.organization_id",
"url":95,
"doc":"Returns the Salesforce organization id Returns: (str): Organization Id Raises: SDKException: if attribute could not be fetched"
},
{
"ref":"cvpysdk.instances.cloudapps.salesforce_instance.SalesforceInstance.login_url",
"url":95,
"doc":"Returns the login url of Salesforce organization Returns: (str): Login URL Raises: SDKException: if attribute could not be fetched"
},
{
"ref":"cvpysdk.instances.cloudapps.salesforce_instance.SalesforceInstance.consumer_id",
"url":95,
"doc":"Returns the Consumer Id of the Salesforce connected app used to authenticate with Salesforce by this instance Returns: (str): Consumer Id Raises: SDKException: if attribute could not be fetched"
},
{
"ref":"cvpysdk.instances.cloudapps.salesforce_instance.SalesforceInstance.proxy_client",
"url":95,
"doc":"Returns the name of the access node. Returns: (str): Access Node Raises: SDKException: if attribute could not be fetched if access node is a client group"
},
{
"ref":"cvpysdk.instances.cloudapps.salesforce_instance.SalesforceInstance.access_node",
"url":95,
"doc":"Returns a dictionary containing clientName and clientId or clientGroupName and clientGroupId depending on whether a single client or a client group is configured as access node. Returns: (dict): Dictionary containing access node name and id Raises: SDKException: if attribute could not be fetched"
},
{
"ref":"cvpysdk.instances.cloudapps.salesforce_instance.SalesforceInstance.restore_to_file_system",
"url":95,
"doc":"Runs object level restore to file system and returns object of Job or Schedule class. For out of place restore, pass both client and path_to_store_csv parameters. By default, will restore to access node and download cache path. Args:  kwargs (dict): Restore options including { paths (list[str]): List of files and objects to restore like ['/Files/filename', '/Objects/object_name'] (Default is ['/Files/', '/Objects/'] which selects all files and objects for restore), client (str): Name of destination client (Default is access node), path_to_store_csv (str): path on destination client to restore to (Default is download cache path), from_time (str): time to restore contents after like YYYY-MM-DD HH:MM:SS (Default is None), to_time (str): time to restore contents before like YYYY-MM-DD HH:MM:SS (Default is None), no_of_streams (int): Number of streams to use for restore (Default is 2), dependent_restore_level (int): restore children option (Default is 0) 0  No Children 1  Immediate Children -1  All Children, restore_parent_type (str): restore parents option (Default is 'NONE') 'NONE'  No Parents 'ALL'  All Parents } Returns: object: Object of Job or Schedule class Raises: SDKException: if paths is given but is not a list if client parameter is not given and the access node configured with this instance is a client group if either client or path_to_store_csv is given but not both are present if client or path_to_store_csv are not strings",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.salesforce_instance.SalesforceInstance.restore_to_database",
"url":95,
"doc":"Runs object level restore to database and returns object of Job or Schedule class Args: db_type (str): Type of database out of 'POSTGRESQL' or 'SQLSERVER' db_host_name (str): Hostname of database server db_name (str): Database name where objects will be restored db_user_name (str): Username of database user db_password (str): Password of database user  kwargs (dict): Other restore options including { paths (list[str]): List of files and objects to restore like ['/Files/filename', '/Objects/object_name'] (Default is ['/Objects/'] which selects all objects for restore), db_instance (str): Database instance for SQL Server, db_port (int): Port of database server (Default is 5432 for POSTGRESQL and 1433 for SQLSERVER), from_time (str): time to restore contents after like YYYY-MM-DD HH:MM:SS (Default is None), to_time (str): time to restore contents before like YYYY-MM-DD HH:MM:SS (Default is None), no_of_streams (int): Number of streams to use for restore (Default is 2), path_to_store_csv (str): path to use as staging folder (Default is download cache path), dependent_restore_level (int): restore children option (Default is 0) 0  No Children 1  Immediate Children -1  All Children, restore_parent_type (str): restore parents option (Default is 'NONE') 'NONE'  No Parents 'ALL'  All Parents } Returns: object: Object of Job or Schedule class Raises: SDKException: if required parameters are not of the correct type if db_type is 'SQLSERVER' but db_instance is not given/ is not a string if paths is given but is not a list",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.salesforce_instance.SalesforceInstance.restore_to_salesforce_from_database",
"url":95,
"doc":"Runs restore to Salesforce from database and returns object of Job or Schedule class. For out of place restore, pass the client, instance and backupset parameters. If database parameters are not passed, sync db will be used. Args:  kwargs (dict): Other restore options including { paths (list[str]): List of files and objects to restore like ['/Files/filename', '/Objects/object_name'] (Default is ['/Files/', '/Objects/'] which selects all files and objects for restore), client (str): Name of destination client (Default is source client), instance (str): Name of destination instance (Default is source instance), backupset (str): Name of destination backupset (Default is source backupset), db_type (str): Type of database out of 'POSTGRESQL' or 'SQLSERVER', db_host (str): Hostname of database server, db_name (str): Database name where objects will be restored, db_user_name (str): Username of database user, db_password (str): Password of database user, db_instance (str): Database instance for SQL Server, db_port (int): Port of database server (Default is 5432 for POSTGRESQL and 1433 for SQLSERVER), from_time (str): time to restore contents after like YYYY-MM-DD HH:MM:SS (Default is None), to_time (str): time to restore contents before like YYYY-MM-DD HH:MM:SS (Default is None), no_of_streams (int): Number of streams to use for restore (Default is 2), path_to_store_csv (str): path to use as staging folder (Default is download cache path), dependent_restore_level (int): restore children option (Default is 0) 0  No Children 1  Immediate Children -1  All Children, restore_parent_type (str): restore parents option (Default is 'NONE') 'NONE'  No Parents 'ALL'  All Parents } Returns: object: Object of Job or Schedule class Raises: SDKException: if paths is given but is not a list if any database parameters are given but not all are present if database parameters are not all strings if db_type is 'SQLSERVER' but db_instance is not given/ is not a string if either client, instance or backupset are given but not all three are present if client, instance and backupset are not strings",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.salesforce_instance.SalesforceInstance.restore_to_salesforce_from_media",
"url":95,
"doc":"Runs restore to Salesforce from database and returns object of Job or Schedule class. For out of place restore, pass the client, instance and backupset parameters. If database parameters are not passed, sync db will be used as staging db. Args:  kwargs (dict): Other restore options including { paths (list[str]): List of files and objects to restore like ['/Files/filename', '/Objects/object_name'] (Default is ['/Files/', '/Objects/'] which selects all files and objects for restore), client (str): Name of destination client (Default is source client), instance (str): Name of destination instance (Default is source instance), backupset (str): Name of destination backupset (Default is source backupset), db_type (str): Type of database out of 'POSTGRESQL' or 'SQLSERVER', db_host (str): Hostname of database server, db_name (str): Database name where objects will be restored, db_user_name (str): Username of database user, db_password (str): Password of database user, db_instance (str): Database instance for SQL Server, db_port (int): Port of database server (Default is 5432 for POSTGRESQL and 1433 for SQLSERVER), from_time (str): time to restore contents after like YYYY-MM-DD HH:MM:SS (Default is None), to_time (str): time to restore contents before like YYYY-MM-DD HH:MM:SS (Default is None), no_of_streams (int): Number of streams to use for restore (Default is 2), path_to_store_csv (str): path to use as staging folder (Default is download cache path), dependent_restore_level (int): restore children option (Default is 0) 0  No Children 1  Immediate Children -1  All Children, restore_parent_type (str): restore parents option (Default is 'NONE') 'NONE'  No Parents 'ALL'  All Parents } Returns: object: Object of Job or Schedule class Raises: SDKException: if paths is given but is not a list if any database parameters are given but not all are present if database parameters are not all strings if db_type is 'SQLSERVER' but db_instance is not given/ is not a string if either client, instance or backupset are given but not all three are present if client, instance and backupset are not strings",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.salesforce_instance.SalesforceInstance.metadata_restore_to_file_system",
"url":95,
"doc":"Runs metadata restore to file system and returns object of Job or Schedule class. For out of place restore, pass both client and path_to_store_csv parameters. By default, will restore to access node and download cache path. Args:  kwargs (dict): Other restore options including { paths (list[str]): List of metadata components to restore like ['/Metadata/unpackaged/objects/Account.object', '/Metadata/unpackaged/profiles/Admin.profile'] (Default is ['/Metadata/unpackaged/'] which selects all metdata components for restore), client (str): Name of destination client (Default is access node), path_to_store_csv (str): path on destination client to restore to (Default is download cache path), from_time (str): time to restore contents after like YYYY-MM-DD HH:MM:SS (Default is None), to_time (str): time to restore contents before like YYYY-MM-DD HH:MM:SS (Default is None), no_of_streams (int): Number of streams to use for restore (Default is 2), dependent_restore_level (int): restore children option (Default is 0) 0  No Children 1  Immediate Children -1  All Children, restore_parent_type (str): restore parents option (Default is 'NONE') 'NONE'  No Parents 'ALL'  All Parents } Returns: object: Object of Job or Schedule class Raises: SDKException: if paths is given but is not a list if client parameter is not given and the access node configured with this instance is a client group if either client or path_to_store_csv is given but not both are present if client or path_to_store_csv are not strings",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.salesforce_instance.SalesforceInstance.metadata_restore_to_salesforce",
"url":95,
"doc":"Runs metadata restore to Salesforce and returns object of Job or Schedule class. For out of place restore, pass client, instance and backupset parameters. Args:  kwargs (dict): Other restore options including { paths (list[str]): List of metadata components to restore like ['/Metadata/unpackaged/objects/Account.object', '/Metadata/unpackaged/profiles/Admin.profile'] (Default is ['/Metadata/unpackaged/'] which selects all metdata components for restore), client (str): Name of destination client (Default is source client), instance (str): Name of destination instance (Default is source instance), backupset (str): Name of destination backupset (Default is source backupset), from_time (str): time to restore contents after like YYYY-MM-DD HH:MM:SS (Default is None), to_time (str): time to restore contents before like YYYY-MM-DD HH:MM:SS (Default is None), no_of_streams (int): Number of streams to use for restore (Default is 2), path_to_store_csv (str): path to use as staging folder (Default is download cache path), dependent_restore_level (int): restore children option (Default is 0) 0  No Children 1  Immediate Children -1  All Children, restore_parent_type (str): restore parents option (Default is 'NONE') 'NONE'  No Parents 'ALL'  All Parents } Returns: object: Object of Job or Schedule class Raises: SDKException: if paths is given but is not a list if either client, instance or backupset are given but not all three are present if client, instance and backupset are not strings",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.salesforce_instance.SalesforceInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.salesforce_instance.SalesforceInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.cloudapps.salesforce_instance.SalesforceInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.cloudapps.salesforce_instance.SalesforceInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.salesforce_instance.SalesforceInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.salesforce_instance.SalesforceInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.salesforce_instance.SalesforceInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.salesforce_instance.SalesforceInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.spanner_instance",
"url":96,
"doc":"File for operating on a Google Cloud Spanner Instance. GoogleSpannerInstance is the only class defined in this file. GoogleSpannerInstance: Derived class from CloudAppsInstance Base class, representing a Google Cloud Spanner instance, and to perform operations on that instance GoogleSpannerInstance: _get_instance_properties()  Instance class method overwritten to add cloud apps instance properties as well GoogleSpannerInstance Attributes: instance_type  Returns the GoogleSpannerInstance instance type spanner_instance_id  Returns the cloud service account client id proxy_client  Returns the proxy client name to this instance staging_path  Returns the instance staging path project_id  Returns the cloud spanner project id"
},
{
"ref":"cvpysdk.instances.cloudapps.spanner_instance.GoogleSpannerInstance",
"url":96,
"doc":"Class for representing an Instance of the Google Cloud Spanner instance type. Initialise the instance object. Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.cloudapps.spanner_instance.GoogleSpannerInstance.instance_type",
"url":96,
"doc":"Returns: int: CloudAppsInstance instance type"
},
{
"ref":"cvpysdk.instances.cloudapps.spanner_instance.GoogleSpannerInstance.spanner_instance_id",
"url":96,
"doc":"Returns: str: Google service account instance id"
},
{
"ref":"cvpysdk.instances.cloudapps.spanner_instance.GoogleSpannerInstance.proxy_client",
"url":96,
"doc":"Returns the proxy client name to this instance str: Client name of proxy associated to cloud account"
},
{
"ref":"cvpysdk.instances.cloudapps.spanner_instance.GoogleSpannerInstance.staging_path",
"url":96,
"doc":"Returns the instance staging path str: Cloud spanner staging path of instance"
},
{
"ref":"cvpysdk.instances.cloudapps.spanner_instance.GoogleSpannerInstance.project_id",
"url":96,
"doc":"Returns the cloud project id str: Cloud spanner project id"
},
{
"ref":"cvpysdk.instances.cloudapps.spanner_instance.GoogleSpannerInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.spanner_instance.GoogleSpannerInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.cloudapps.spanner_instance.GoogleSpannerInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.cloudapps.spanner_instance.GoogleSpannerInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.spanner_instance.GoogleSpannerInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.spanner_instance.GoogleSpannerInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.spanner_instance.GoogleSpannerInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.spanner_instance.GoogleSpannerInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.teams_instance",
"url":97,
"doc":"File for operating on a Teams Instance. TeamsInstance is the only class defined in this file. TeamsInstance: Derived class from CloudAppsInstance Base class, representing Office 365 Teams. TeamsInstance: _get_instance_properties()  Gets the properties of this machine. _get_instance_properties_json()  Returns the instance properties json. discover()  Launches Discovery and returns the discovered teams. _restore_json()  Returns JSON request to pass to API as per the options selected by the user. _cloud_apps_restore_json()  Returns JSON for Cloud Apps related properties. restore_out_of_place()  Restore a team to another location. update_instance()  Update Instance properties."
},
{
"ref":"cvpysdk.instances.cloudapps.teams_instance.TeamsInstance",
"url":97,
"doc":"Class for representing an Instance of Office 365 Teams. Initialise the instance object. Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.cloudapps.teams_instance.TeamsInstance.discover",
"url":97,
"doc":"Launches Discovery and returns the discovered teams. Args: discovery_type (int)  TYpe of the discovery Example: Teams 12, users refresh_cache  Refreshes Discover cache information. default: True Returns: dict  Returns dictionary with team email ID as key and team properties as value. Raises: SDKException: If discovery failed to launch. If response is empty. If response is not success.",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.teams_instance.TeamsInstance.restore_out_of_place",
"url":97,
"doc":"Restore a team to another location. Args: source_team (str)  The email ID of the team that needs to be restored. destination_team (str)  The email ID of the team to be restored to. Returns: obj  Instance of Restore job. Raises: SDKException: If restore failed to run. If response is empty. If response is not success.",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.teams_instance.TeamsInstance.update_instance",
"url":97,
"doc":"Update Instance properties. Args: request_json (dict)  Dict of instance properties. Returns: response of the request Raises: SDKException: If update failed. If response is empty. If response is not success.",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.teams_instance.TeamsInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.teams_instance.TeamsInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.cloudapps.teams_instance.TeamsInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.cloudapps.teams_instance.TeamsInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.teams_instance.TeamsInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.cloudapps.teams_instance.TeamsInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.teams_instance.TeamsInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.cloudapps.teams_instance.TeamsInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.db2instance",
"url":98,
"doc":"File for operating on a DB2 Instance. DB2Instance is the only class defined in this file. DB2Instance: Derived class from Instance Base class, representing a DB2 instance, and to perform operations on that instance DB2Instance:       _restore_destination_json()  setter for the Db2 Destination options in restore JSON _db2_restore_options_json()  setter for the db2 options of in restore JSON _restore_json()  returns the JSON request to pass to the API as per the options selected by the user restore_entire_database()  Restores the db2 database restore_out_of_place()  runs the out of place restore for given backupset restore_table_level()  Table level restore function DB2Instance instance Attributes:                  version  returns db2 version  home_directory  returns db2 home directory  user_name  returns db2 user name  data_backup_storage_policy  returns data backup storage policy  command_line_storage_policy  returns commandline storage policy  log_backup_storage_policy  returns log backup storage policy"
},
{
"ref":"cvpysdk.instances.db2instance.DB2Instance",
"url":98,
"doc":"Derived class from Instance Base class, representing a DB2 instance, and to perform operations on that Instance. Initialise the instance object. Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.db2instance.DB2Instance.version",
"url":98,
"doc":"returns db2 version Returns: (str)  db2 version value in string"
},
{
"ref":"cvpysdk.instances.db2instance.DB2Instance.home_directory",
"url":98,
"doc":"returns db2 home directory Returns: (str) - string of db2_home"
},
{
"ref":"cvpysdk.instances.db2instance.DB2Instance.user_name",
"url":98,
"doc":"returns db2 user name Returns: (str) - String containing db2 user"
},
{
"ref":"cvpysdk.instances.db2instance.DB2Instance.data_backup_storage_policy",
"url":98,
"doc":"returns data backup storage policy Returns: (str)  Storage policy name from db2 instance level"
},
{
"ref":"cvpysdk.instances.db2instance.DB2Instance.command_line_storage_policy",
"url":98,
"doc":"returns commandline storage policy Returns: (str)  Command line sp name from db2 instance level"
},
{
"ref":"cvpysdk.instances.db2instance.DB2Instance.log_backup_storage_policy",
"url":98,
"doc":"returns log backup storage policy Returns: (str)  Log backup SP name from instance level"
},
{
"ref":"cvpysdk.instances.db2instance.DB2Instance.restore_entire_database",
"url":98,
"doc":"Restores the db2 database Args: dest_client_name (str)  destination client name dest_instance_name (str)  destination db2 instance name of destination on destination client dest_database_name (str)  destination database name restore_type (str)  db2 restore type default: \"ENTIREDB\" recover_db (bool)  recover database flag default: True restore_incremental (bool)  Restore incremental flag default: True restore_data (bool)  Restore data or not default: True copy_precedence (int)  Copy precedence to perform restore from default : None roll_forward (bool)  Rollforward database or not default: True restore_logs (bool) - Restore the logs or not default: True Returns: object - instance of the Job class for this restore job Raises: SDKException: if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.db2instance.DB2Instance.restore_out_of_place",
"url":98,
"doc":"Restores the DB2 data/log files specified in the input paths list to the same location. Args: dest_client_name (str)  destination client name where files are to be restored dest_instance_name (str)  destination db2 instance name of destination client dest_backupset_name (str)  destination db2 backupset name of destination client target_path (str)  Destination DB restore path copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None redirect_enabled (bool)  boolean to specify if redirect restore is enabled default: False redirect_storage_group_path (dict)  Path specified for each storage group in advanced restore options in order to perform redirect restore format: {'Storage Group Name': 'Redirect Path'} default: None redirect_tablespace_path (dict)  Path specified for each tablespace in advanced restore options in order to perform redirect restore format: {'Tablespace name': 'Redirect Path'} default: None destination_path (str)  destinath path for restore default: None restore_data (bool)  Restore data or not Returns: object - instance of the Job class for this restore job Raises: SDKException: if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.db2instance.DB2Instance.restore_table_level",
"url":98,
"doc":"Performs DB2 table level restore Args: aux_client_name (str)  auxiliary client name where files are to be restored aux_instance_name (str)  auxiliary instance name where files are to be restored aux_backupset_name (str)  auxiliary backupset name where files are to be restored dest_client_name (str)  destination client name where files are to be restored dest_instance_name (str)  destination db2 instance name of destination client dest_backupset_name (str)  destination db2 backupset name of destination client target_path (str)  Destination DB restore path src_backupset_name (str)  Source Backupset Name staging_path (str)  Staging Path user_name (str)  Destination User name password (str)  Destination User Password tables_path (list)  List of tables path Example: Unix: ['/+tblview+/instance_name/database_name/schema_name/table_name/ '] Windows: [\"\\+tblview+\\instance_name\\database_name\\schema_name\\table_name\\ \"] copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None rollForward (bool)  Rollforward or not default: True destination_path (str)  destinath path for restore default: None server_port (int)  Server Port Destination instance default: 50000 generateAuthorizationDDL (bool)  Generate Authorization DDL default: False extractDDLStatements (bool)  Extracts DDL statement or not default: True clearAuxiliary (bool)  Cleanup auxilliary or not default: True dropTable (bool)  Drop table for import default: False Returns: object - instance of the Job class for this restore job Raises: SDKException: if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.db2instance.DB2Instance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.db2instance.DB2Instance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.db2instance.DB2Instance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.db2instance.DB2Instance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.db2instance.DB2Instance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.db2instance.DB2Instance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.db2instance.DB2Instance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.db2instance.DB2Instance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.dbinstance",
"url":99,
"doc":"File for operating on a Database Server Instances DatabaseInstance is the only class defined in this file. DatabaseInstance: Derived class from Instance Base class, representing a Database server instance, and to perform operations on that instance DatabaseInstance: __init__()  initialise object of Database Instance associated with the specified agent _get_restore_to_disk_json()  Creates restore json for app free restore _get_source_item_app_free()  Generates list of source items based on job ids for app free restore"
},
{
"ref":"cvpysdk.instances.dbinstance.DatabaseInstance",
"url":99,
"doc":"Derived class from Instance Base class, representing database instance, and to perform operations on that instance. Initializes the object of Sybase Instance class Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default None Returns : object - instance of the Sybase Instance class"
},
{
"ref":"cvpysdk.instances.dbinstance.DatabaseInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.dbinstance.DatabaseInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.dbinstance.DatabaseInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.dbinstance.DatabaseInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.dbinstance.DatabaseInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.dbinstance.DatabaseInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.dbinstance.DatabaseInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.dbinstance.DatabaseInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.hanainstance",
"url":100,
"doc":"File for operating on a SAP HANA Instance. SAPHANAInstance is the only class defined in this file. SAPHANAInstance: Derived class from Instance Base class, representing a hana server instance, and to perform operations on that instance SAPHANAInstance: sps_version()  returns the SPS version of the instance instance_number()  returns the instance number of SAP HANA sql_location_directory()  returns the SQL location directory of the Instance instance_db_username()  returns the db username of the instance db_instance_client()  returns the SAP HANA client associated with the instance hdb_user_storekey()  returns the HDB user store key if its set _restore_request_json()  returns the restore request json _get_hana_restore_options()  returns the dict containing destination SAP HANA instance names for the given client restore()  runs the restore job for specified instance"
},
{
"ref":"cvpysdk.instances.hanainstance.SAPHANAInstance",
"url":100,
"doc":"Derived class from Instance Base class, representing a SAP HANA instance, and to perform operations on that Instance. Initialize the subclient object Args: agent_object (object): instance of the agent class instance_name (str): name of the instance instance_id (int): ID of the instance"
},
{
"ref":"cvpysdk.instances.hanainstance.SAPHANAInstance.sps_version",
"url":100,
"doc":"Returns the sps version of the HANA instance Returns: sps version"
},
{
"ref":"cvpysdk.instances.hanainstance.SAPHANAInstance.instance_number",
"url":100,
"doc":"Returns the instance number of the HANA instance Returns: instance number"
},
{
"ref":"cvpysdk.instances.hanainstance.SAPHANAInstance.sql_location_directory",
"url":100,
"doc":"Returns the isql location directory of the HANA instance Returns: SQL location directory"
},
{
"ref":"cvpysdk.instances.hanainstance.SAPHANAInstance.instance_db_username",
"url":100,
"doc":"Returns the username of the HANA instance database Returns: instance db username"
},
{
"ref":"cvpysdk.instances.hanainstance.SAPHANAInstance.db_instance_client",
"url":100,
"doc":"Returns the client name of the HANA instance Returns: db instance client name"
},
{
"ref":"cvpysdk.instances.hanainstance.SAPHANAInstance.hdb_user_storekey",
"url":100,
"doc":"Returns the hdb user store key of the HANA instance Returns: hdb user store key"
},
{
"ref":"cvpysdk.instances.hanainstance.SAPHANAInstance.restore",
"url":100,
"doc":"Restores the databases specified in the input paths list. Args: pseudo_client (str)  HANA client to restore the database at instance (str)  destination instance to restore the db at backupset_name (str)  backupset name of the instance to be restored. If the instance is a single DB instance then the backupset name is  default . default: default backup_prefix (str)  prefix of the backup job default: None point_in_time (str)  time to which db should be restored to default: None initialize_log_area (bool)  boolean to specify whether to initialize the new log area after restore default: False use_hardware_revert (bool)  boolean to specify whether to do a hardware revert in restore default: False clone_env (bool)  boolean to specify whether the database should be cloned or not default: False check_access (bool)  check access during restore or not default: True destination_instance_dir (str)  HANA data directory for snap cross instance restore or cross machine restores default: None ignore_delta_backups (bool)  whether to ignore delta backups during restore or not default: True no_of_streams (int)  number of streams to be used for restore default: 2 Returns: object - instance of the Job class for this restore job Raises: SDKException: if instance is not a string or object if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.hanainstance.SAPHANAInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.hanainstance.SAPHANAInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.hanainstance.SAPHANAInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.hanainstance.SAPHANAInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.hanainstance.SAPHANAInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.hanainstance.SAPHANAInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.hanainstance.SAPHANAInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.hanainstance.SAPHANAInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.informixinstance",
"url":101,
"doc":"File for operating on a Informix Instance. InformixInstance is the only class defined in this file. InformixInstance: Derived class from Instance Base class, representing an Informix instance, and to perform operations on that instance InformixInstance:         = __init__()  initialize object of the Instances class _get_instance_properties()  gets the properties of this instance _get_instance_properties_json()  gets all the instance related properties of Informix instance _restore_json()  returns the JSON request to pass to the API as per the options selected by the user restore_in_place()  restores the informix data/log files specified in the input paths list to the same location restore_out_of_place()  restores the informix data/log files specified in the input paths list to the different location _restore_informix_option_json()  setter for the Informix option in restore JSON _restore_destination_option_json()  setter for the destination restore option in restore JSON InformixInstance instance Attributes                    informix_directory  returns the informix directory path of informix server  informix_user  returns the informix username  on_config_file  returns the on config file name of informix server  sql_host_file  returns the sql host file path of informix server  log_storage_policy_name  returns the log backup storage policy name  log_storage_policy_id  returns the log backup storage policy id  command_line_sp_name  returns command line storage policy name  command_line_sp_id  returns command line storage policy id"
},
{
"ref":"cvpysdk.instances.informixinstance.InformixInstance",
"url":101,
"doc":"Class to represent a standalone Informix Instance Initialize object of the Instances class. Args: agent_object (object)  instance of the Agent class instance_name  Name of the instance instance_id  ID of the instance Returns: object - instance of the Instances class"
},
{
"ref":"cvpysdk.instances.informixinstance.InformixInstance.informix_directory",
"url":101,
"doc":"Returns the informix directory path of informix server"
},
{
"ref":"cvpysdk.instances.informixinstance.InformixInstance.informix_user",
"url":101,
"doc":"Returns the informix username"
},
{
"ref":"cvpysdk.instances.informixinstance.InformixInstance.on_config_file",
"url":101,
"doc":"Returns the on config file name of informix server."
},
{
"ref":"cvpysdk.instances.informixinstance.InformixInstance.sql_host_file",
"url":101,
"doc":"Returns the sql host file path of informix server."
},
{
"ref":"cvpysdk.instances.informixinstance.InformixInstance.log_storage_policy_name",
"url":101,
"doc":"Returns the log backup storage policy name"
},
{
"ref":"cvpysdk.instances.informixinstance.InformixInstance.log_storage_policy_id",
"url":101,
"doc":"Returns the log backup storage policy id"
},
{
"ref":"cvpysdk.instances.informixinstance.InformixInstance.command_line_sp_name",
"url":101,
"doc":"Returns command line storage policy name"
},
{
"ref":"cvpysdk.instances.informixinstance.InformixInstance.command_line_sp_id",
"url":101,
"doc":"Returns command line storage policy id"
},
{
"ref":"cvpysdk.instances.informixinstance.InformixInstance.restore_in_place",
"url":101,
"doc":"Restores the informix data/log files specified in the input paths list to the same location. Args: path (list)  List of dbspaces to be restored restore_type (str)  Restore type for informix instance copy_precedence (int)  Copy precedence associted with storage policy physical_restore (bool)  Physical restore flag logical_restore (bool)  Logical restore flag Accepted Values: ENTIRE INSTANCE/WHOLE SYSTEM restore_option_type (str)  Restore option type for Informix instance Accepted values: NORMAL/POINT_IN_TIME/UPTO_LOGICAL_LOG to_time (str)  time range to perform point in time restore Accepted Format: YYYY-MM-DD HH:MM:SS upto_log (int)  logical log number to perform restore upto that log Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.informixinstance.InformixInstance.restore_out_of_place",
"url":101,
"doc":"Restores the informix data/log files specified in the input paths list to the different location. Args: path (list)  List of dbspaces to be restored dest_client_name (str)  Name of the destination client dest_instance_name (str)  name of destination instance restore_type (str)  Restore type for informix instance copy_precedence (int)  Copy precedence associted with storage policy physical_restore (bool)  Physical restore flag logical_restore (bool)  Logical restore flag Accepted Values: ENTIRE INSTANCE/WHOLE SYSTEM Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.informixinstance.InformixInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.informixinstance.InformixInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.informixinstance.InformixInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.informixinstance.InformixInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.informixinstance.InformixInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.informixinstance.InformixInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.informixinstance.InformixInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.informixinstance.InformixInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.lndbinstance",
"url":102,
"doc":"File for operating on a Lotus Notes Database Agent Instance. LNDBInstance is the only class defined in this file. LNDBInstance: restore_in_place()  performs an in place restore of the subclient restore_out_of_place()  performs an out of place restore of the subclient _restore_common_options_json()  setter for the Common options in restore JSON _restore_json()  returns the JSON request to pass to the API as per the options selected by the user"
},
{
"ref":"cvpysdk.instances.lndbinstance.LNDBInstance",
"url":102,
"doc":"Derived class from Instance Base class, representing an LNDB instance, and to perform operations on that instance. Initialise the instance object. Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.lndbinstance.LNDBInstance.restore_in_place",
"url":102,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None common_options_dict (dict)  dictionary for all the common options options: unconditionalOverwrite : overwrite the files during restore even if they exist recoverWait : Specifies whether this restore operation must wait until resources become available if a database recovery is already taking place recoverZap : Specifies whether the IBM Domino must change the DBIID associated with the restored database recoverZapReplica : Specifies whether the restore operation changes the replica id of the restored database recoverZapIfNecessary : Specifies whether the IBM Domino can change the DBIID associated with the restored database if necessary doNotReplayTransactLogs : option to skip restoring or replaying logs Disaster Recovery special options: skipErrorsAndContinue : enables a data recovery operation to continue despite media errors disasterRecovery : run disaster recovery lndb_restore_options (dict)  dictionary for all options specific to an lndb restore options: disableReplication : disable relpication on database disableBackgroundAgents : disable background agents Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.lndbinstance.LNDBInstance.restore_out_of_place",
"url":102,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None common_options_dict (dict)  dictionary for all the common options options: unconditionalOverwrite : overwrite the files during restore even if they exist recoverWait : Specifies whether this restore operation must wait until resources become available if a database recovery is already taking place recoverZap : Specifies whether the IBM Domino must change the DBIID associated with the restored database recoverZapReplica : Specifies whether the restore operation changes the replica id of the restored database recoverZapIfNecessary : Specifies whether the IBM Domino can change the DBIID associated with the restored database if necessary doNotReplayTransactLogs : option to skip restoring or replaying logs Disaster Recovery special options: skipErrorsAndContinue : enables a data recovery operation to continue despite media errors disasterRecovery : run disaster recovery lndb_restore_options (dict)  dictionary for all options specific to an lndb restore options: disableReplication : disable relpication on database disableBackgroundAgents : disable background agents Returns: object - instance of the Job class for this restore job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.lndbinstance.LNDBInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.lndbinstance.LNDBInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.lndbinstance.LNDBInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.lndbinstance.LNDBInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.lndbinstance.LNDBInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.lndbinstance.LNDBInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.lndbinstance.LNDBInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.lndbinstance.LNDBInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.lotusnotes",
"url":103,
"doc":"Initialize Lotus Notes Instances for the SDK."
},
{
"ref":"cvpysdk.instances.lotusnotes.lndbinstance",
"url":104,
"doc":"File for operating on a Lotus Notes Database Agent Instance. LNDBInstance is the only class defined in this file. LNDBInstance: restore_in_place()  performs an in place restore of the subclient restore_out_of_place()  performs an out of place restore of the subclient _restore_common_options_json()  setter for the Common options in restore JSON _restore_json()  returns the JSON request to pass to the API as per the options selected by the user"
},
{
"ref":"cvpysdk.instances.lotusnotes.lndbinstance.LNDBInstance",
"url":104,
"doc":"Derived class from LNInstance Base class, representing an LNDB instance, and to perform operations on that instance. Initialise the instance object. Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.lotusnotes.lndbinstance.LNDBInstance.restore_in_place",
"url":104,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None common_options_dict (dict)  dictionary for all the common options options: unconditionalOverwrite : overwrite the files during restore even if they exist recoverWait : Specifies whether this restore operation must wait until resources become available if a database recovery is already taking place recoverZap : Specifies whether the IBM Domino must change the DBIID associated with the restored database recoverZapReplica : Specifies whether the restore operation changes the replica id of the restored database recoverZapIfNecessary : Specifies whether the IBM Domino can change the DBIID associated with the restored database if necessary doNotReplayTransactLogs : option to skip restoring or replaying logs Disaster Recovery special options: skipErrorsAndContinue : enables a data recovery operation to continue despite media errors disasterRecovery : run disaster recovery lndb_restore_options (dict)  dictionary for all options specific to an lndb restore options: disableReplication : disable relpication on database disableBackgroundAgents : disable background agents Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.lotusnotes.lndbinstance.LNDBInstance.restore_out_of_place",
"url":104,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None common_options_dict (dict)  dictionary for all the common options options: unconditionalOverwrite : overwrite the files during restore even if they exist recoverWait : Specifies whether this restore operation must wait until resources become available if a database recovery is already taking place recoverZap : Specifies whether the IBM Domino must change the DBIID associated with the restored database recoverZapReplica : Specifies whether the restore operation changes the replica id of the restored database recoverZapIfNecessary : Specifies whether the IBM Domino can change the DBIID associated with the restored database if necessary doNotReplayTransactLogs : option to skip restoring or replaying logs Disaster Recovery special options: skipErrorsAndContinue : enables a data recovery operation to continue despite media errors disasterRecovery : run disaster recovery lndb_restore_options (dict)  dictionary for all options specific to an lndb restore options: disableReplication : disable relpication on database disableBackgroundAgents : disable background agents Returns: object - instance of the Job class for this restore job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.lotusnotes.lndbinstance.LNDBInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.lotusnotes.lndbinstance.LNDBInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.lotusnotes.lndbinstance.LNDBInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.lotusnotes.lndbinstance.LNDBInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.lotusnotes.lndbinstance.LNDBInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.lotusnotes.lndbinstance.LNDBInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.lotusnotes.lndbinstance.LNDBInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.lotusnotes.lndbinstance.LNDBInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.lotusnotes.lndminstance",
"url":105,
"doc":"File for operating on a Lotus Notes Database Agent Instance. LNDOCInstance is the only class defined in this file. LNDOCInstance: _commonoption_restore_json  setter for the Common options in restore JSON restore_in_place()  performs an in place restore of the subclient restore_out_of_place()  performs an out of place restore of the subclient"
},
{
"ref":"cvpysdk.instances.lotusnotes.lndminstance.LNDMInstance",
"url":105,
"doc":"Derived class from LNInstance Base class, representing an LNDOC instance, and to perform operations on that instance. Initialise the instance object. Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.lotusnotes.lndminstance.LNDMInstance.restore_in_place",
"url":105,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None common_options_dict (dict)  dictionary for all the common options options: append : append documents to the database default: False skip : skip if already present default: False unconditionalOverwrite : overwrite the documents default: False restoreOnlyStubExists : restore only if it is a stub default: False Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.lotusnotes.lndminstance.LNDMInstance.restore_out_of_place",
"url":105,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None common_options_dict (dict)  dictionary for all the common options options: append : append documents to the database default: False skip : skip if already present default: False unconditionalOverwrite : overwrite the documents default: False restoreOnlyStubExists : restore only if it is a stub default: False Returns: object - instance of the Job class for this restore job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.lotusnotes.lndminstance.LNDMInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.lotusnotes.lndminstance.LNDMInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.lotusnotes.lndminstance.LNDMInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.lotusnotes.lndminstance.LNDMInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.lotusnotes.lndminstance.LNDMInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.lotusnotes.lndminstance.LNDMInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.lotusnotes.lndminstance.LNDMInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.lotusnotes.lndminstance.LNDMInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.lotusnotes.lndocinstance",
"url":106,
"doc":"File for operating on a Lotus Notes Database Agent Instance. LNDOCInstance is the only class defined in this file. LNDOCInstance: _restore_common_options_json()  setter for the Common options in restore JSON restore_in_place()  performs an in place restore of the subclient restore_out_of_place()  performs an out of place restore of the subclient"
},
{
"ref":"cvpysdk.instances.lotusnotes.lndocinstance.LNDOCInstance",
"url":106,
"doc":"Derived class from Instance Base class, representing an LNDOC instance, and to perform operations on that instance. Initialise the instance object. Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.lotusnotes.lndocinstance.LNDOCInstance.restore_in_place",
"url":106,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None common_options_dict (dict)  dictionary for all the common options options: unconditionalOverwrite : overwrite the files during restore even if they exist recoverWait : Specifies whether this restore operation must wait until resources become available if a database recovery is already taking place recoverZap : Specifies whether the IBM Domino must change the DBIID associated with the restored database recoverZapReplica : Specifies whether the restore operation changes the replica id of the restored database recoverZapIfNecessary : Specifies whether the IBM Domino can change the DBIID associated with the restored database if necessary doNotReplayTransactLogs : option to skip restoring or replaying logs Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.lotusnotes.lndocinstance.LNDOCInstance.restore_out_of_place",
"url":106,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None common_options_dict (dict)  dictionary for all the common options options: overwriteDBLinks : overwrite the db links default: False overwriteDesignDoc : overwrite design documents default: False overwriteDataDoc : overwrite the data documents default: False dbLinksOnly : overwrite the db links only default: False Returns: object - instance of the Job class for this restore job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.lotusnotes.lndocinstance.LNDOCInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.lotusnotes.lndocinstance.LNDOCInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.lotusnotes.lndocinstance.LNDOCInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.lotusnotes.lndocinstance.LNDOCInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.lotusnotes.lndocinstance.LNDOCInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.lotusnotes.lndocinstance.LNDOCInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.lotusnotes.lndocinstance.LNDOCInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.lotusnotes.lndocinstance.LNDOCInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.lotusnotes.lninstance",
"url":107,
"doc":"Main file for operating on all Lotus Notes Instances. LNInstance is the only class defined in this file. LNInstance: restore_in_place()  performs an in place restore restore_out_of_place()  performs an out of place restore"
},
{
"ref":"cvpysdk.instances.lotusnotes.lninstance.LNInstance",
"url":107,
"doc":"Derived class from Instance Base class, representing an LNDOC instance, and to perform operations on that instance. Initialise the instance object. Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.lotusnotes.lninstance.LNInstance.restore_in_place",
"url":107,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None common_options_dict (dict)  dictionary for all the common options options: unconditionalOverwrite : overwrite the files during restore even if they exist recoverWait : Specifies whether this restore operation must wait until resources become available if a database recovery is already taking place recoverZap : Specifies whether the IBM Domino must change the DBIID associated with the restored database recoverZapReplica : Specifies whether the restore operation changes the replica id of the restored database recoverZapIfNecessary : Specifies whether the IBM Domino can change the DBIID associated with the restored database if necessary doNotReplayTransactLogs : option to skip restoring or replaying logs Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.lotusnotes.lninstance.LNInstance.restore_out_of_place",
"url":107,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None common_options_dict (dict)  dictionary for all the common options options: overwriteDBLinks : overwrite the db links default: False overwriteDesignDoc : overwrite design documents default: False overwriteDataDoc : overwrite the data documents default: False dbLinksOnly : overwrite the db links only default: False Returns: object - instance of the Job class for this restore job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.lotusnotes.lninstance.LNInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.lotusnotes.lninstance.LNInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.lotusnotes.lninstance.LNInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.lotusnotes.lninstance.LNInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.lotusnotes.lninstance.LNInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.lotusnotes.lninstance.LNInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.lotusnotes.lninstance.LNInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.lotusnotes.lninstance.LNInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.mysqlinstance",
"url":108,
"doc":"File for operating on a MYSQL Instance. MYSQLInstance is the only class defined in this file. MYSQLInstance: Derived class from Instance Base class, representing an MYSQL instance, and to perform operations on that instance MYSQLInstance:        _get_instance_properties()  method to get the properties of the instance _restore_json()  returns the apppropriate JSON request to pass for Restore In-Place restore_in_place()  Restores the mysql data/log files specified in the input paths list to the same location _restore_browse_option_json()  setter for browse option property in restore _restore_common_options_json()  setter for common options property in restore _restore_destination_json()  setter for destination options property in restore _restore_fileoption_json()  setter for file option property in restore _restore_admin_option_json()  setter for admin option property in restore _restore_mysql_option_json()  setter for MySQL restore option property in restore MYSQLInstance instance Attributes:                   port  Returns the MySQL Server Port number  mysql_username  Returns the MySQL Server username  nt_username  Returns the MySQL Server nt username  config_file  Returns the MySQL Server Config File location  binary_directory  Returns the MySQL Server Binary File location  version  Returns the MySQL Server version number  log_data_directory  Returns the MySQL Server log data directory  log_backup_sp_details  Returns the MySQL Server Log backup SP details  command_line_sp_details  Returns the MySQL Server commandline SP details  autodiscovery_enabled  Returns the MySQL Server auto discovery enabled flag  xtrabackup_bin_path  Returns the MySQL Server xtrabackup bin path  is_xtrabackup_enabled  Returns the MySQL Server xtrabackup enabled flag  proxy_options  Returns the MySQL Server proxy options  mysql_enterprise_backup_binary_path  Returns the MySQL Enterprise backup binary path details  no_lock_status  Returns the No Lock check box status for MySQL Instance  ssl_enabled  Returns(boolean) True/False based on SSL status"
},
{
"ref":"cvpysdk.instances.mysqlinstance.MYSQLInstance",
"url":108,
"doc":"Class to represent a standalone MYSQL Instance Initialise the Subclient object. Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the MYSQLInstance class"
},
{
"ref":"cvpysdk.instances.mysqlinstance.MYSQLInstance.port",
"url":108,
"doc":"Returns the MySQL Server Port number. Returns: (str)  MySql server port number"
},
{
"ref":"cvpysdk.instances.mysqlinstance.MYSQLInstance.mysql_username",
"url":108,
"doc":"Returns the MySQL Server username. Returns: (str)  MySql server SA username"
},
{
"ref":"cvpysdk.instances.mysqlinstance.MYSQLInstance.nt_username",
"url":108,
"doc":"Returns the MySQL Server nt username. Returns: (str)  MySql server NT username"
},
{
"ref":"cvpysdk.instances.mysqlinstance.MYSQLInstance.config_file",
"url":108,
"doc":"Returns the MySQL Server Config File location. Returns: (str)  MySql server config file location"
},
{
"ref":"cvpysdk.instances.mysqlinstance.MYSQLInstance.binary_directory",
"url":108,
"doc":"Returns the MySQL Server Binary File location. Returns: (str)  MySql server binary directory"
},
{
"ref":"cvpysdk.instances.mysqlinstance.MYSQLInstance.version",
"url":108,
"doc":"Returns the MySQL Server version number. Returns: (str)  MySql server version"
},
{
"ref":"cvpysdk.instances.mysqlinstance.MYSQLInstance.log_data_directory",
"url":108,
"doc":"Returns the MySQL Server log data directory. Returns: (str)  MySql server log directory path"
},
{
"ref":"cvpysdk.instances.mysqlinstance.MYSQLInstance.log_backup_sp_details",
"url":108,
"doc":"Returns the MySQL Server Log backup SP details Returns: (dict)  MySql server log backup storage policy information"
},
{
"ref":"cvpysdk.instances.mysqlinstance.MYSQLInstance.command_line_sp_details",
"url":108,
"doc":"Returns the MySQL Server commandline SP details. Returns: (dict)  MySql server commnadline storage policy information"
},
{
"ref":"cvpysdk.instances.mysqlinstance.MYSQLInstance.autodiscovery_enabled",
"url":108,
"doc":"Returns the MySQL Server auto discovery enabled flag Returns: (bool)  True if auto discovery enabled False if auto discovery not enabled"
},
{
"ref":"cvpysdk.instances.mysqlinstance.MYSQLInstance.xtrabackup_bin_path",
"url":108,
"doc":"Returns the MySQL Server xtrabackup bin path Returns: (str)  MySql server xtrabackup binary path"
},
{
"ref":"cvpysdk.instances.mysqlinstance.MYSQLInstance.is_xtrabackup_enabled",
"url":108,
"doc":"Returns the MySQL Server xtrabackup enabled flag Returns: (bool)  True if xtrabackup is enabled False if xtrabackup is not enabled"
},
{
"ref":"cvpysdk.instances.mysqlinstance.MYSQLInstance.proxy_options",
"url":108,
"doc":"Returns the MySQL Server proxy options Returns: (dict)  MySql server proxy information"
},
{
"ref":"cvpysdk.instances.mysqlinstance.MYSQLInstance.mysql_enterprise_backup_binary_path",
"url":108,
"doc":"Returns the MySQL Enterprise backup binary path detail Return Type: dict"
},
{
"ref":"cvpysdk.instances.mysqlinstance.MYSQLInstance.no_lock_status",
"url":108,
"doc":"Returns the status of No Lock Checkbox in MySQL Instance Returns: (bool)  True if No Lock checkbox is enabled False if No Lock checkbox is disabled"
},
{
"ref":"cvpysdk.instances.mysqlinstance.MYSQLInstance.ssl_enabled",
"url":108,
"doc":"Returns(boolean) True/False based on SSL status"
},
{
"ref":"cvpysdk.instances.mysqlinstance.MYSQLInstance.restore_in_place",
"url":108,
"doc":"Restores the mysql data/log files specified in the input paths list to the same location. Args: path (list)  list of database/databases to be restored default: None staging (str)  staging location for mysql logs during restores default: None dest_client_name (str)  destination client name where files are to be restored default: None dest_instance_name (str)  destination mysql instance name of destination client default: None data_restore (bool)  for data only/data+log restore default: True log_restore (bool)  for log only/data+log restore default: False overwrite (bool)  unconditional overwrite files during restore default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None media_agent (str)  media agent associated default: None table_level_restore (bool)  Table level restore flag default: False clone_env (bool)  boolean to specify whether the database should be cloned or not default: False clone_options (dict)  clone restore options passed in a dict default: None Accepted format: { \"stagingLocaion\": \"/gk_snap\", \"forceCleanup\": True, \"port\": \"5595\", \"libDirectory\":  , \"isInstanceSelected\": True, \"reservationPeriodS\": 3600, \"user\":  , \"binaryDirectory\": \"/usr/bin\" } redirect_enabled (bool)  boolean to specify if redirect restore is enabled default: False redirect_path (str)  Path specified in advanced restore options in order to perform redirect restore default: None browse_jobid (int)  Browse jobid to browse and restore from default: None Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.mysqlinstance.MYSQLInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.mysqlinstance.MYSQLInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.mysqlinstance.MYSQLInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.mysqlinstance.MYSQLInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.mysqlinstance.MYSQLInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.mysqlinstance.MYSQLInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.mysqlinstance.MYSQLInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.mysqlinstance.MYSQLInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.oracleinstance",
"url":109,
"doc":"File for operating on a Oracle Instance. OracleInstance is the only class defined in this file. OracleInstance: Derived class from Instance Base class, representing an oracle instance, and to perform operations on that instance OracleInstance: __init__()  Constructor for the class restore_to_disk  Performs restore to disk(app free restore) _get_instance_properties()  gets the properties of this instance _get_instance_properties_json()  gets all the instance related properties of Oracle instance _restore_common_options_json()  Setter for the Common options in restore JSON _restore_destination_json()  Setter for the Oracle destination options in restore JSON _get_live_sync_oracleopt_json()  Constructs JSON with oracle agent specific options for configuring live sync _live_sync_restore_json()  Constructs oracle live sync restore JSON by combining common and agent specific options create_live_sync_schedule()  Creates live sync schedule for the given destination oracle instance configure_data_masking_policy()  Configures data masking policy with given parameters get_masking_policy_id()  To get policy id of given data masking policy standalone_data_masking()  Launch standalone data masking job on given instance delete_data_masking_policy()  Deletes given data masking policy _get_browse_options  To get browse options for oracle instance _process_browse_response  To process browse response log_stream()  Getter for fetching archive log stream count oracle_home()  Getter for $ORACLE_HOME of this instance version()  Getter for oracle database version is_catalog_enabled()  Getter to check if catalog is enabled for backups catalog_user()  Getter for getting catalog user catalog_db()  Getter for catalog database name archive_log_dest()  Getter for archivelog destination os_user()  Getter for OS user owning oracle software cmd_sp()  Getter for command line storage policy log_sp()  Getter for log storage policy is_autobackup_on()  Getter to check if autobackup is enabled db_user()  Getter for SYS database user name tns_name()  Getter for TNS connect string dbid()  Getter for getting DBID of database restore()  Performs restore on the instance _restore_db_dump_option_json()  setter for the oracle dbdump Restore option in restore JSON _restore_oracle_option_json()  setter for the oracle Restore option in restore JSON _restore_json()  returns the JSON request to pass to the API as per the options selected by the user restore_in_place()  restore for oracle logical dump"
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance",
"url":109,
"doc":"Class to represent a standalone Oracle Instance Constructor for the class Args: agent_object  instance of the Agent class instance_name  name of the instance instance_id  id of the instance"
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.restore_to_disk",
"url":109,
"doc":"Perform restore to disk [Application free restore] for Oracle Args: destination_client (str)  destination client name destination_path: (str)  destination path backup_job_ids (list)  list of backup job IDs to be used for disk restore user_name (str)  impersonation user name to restore to destination client password (str)  impersonation user password Returns: object - Job containing restore details Raises: SDKException if backup_job_ids not given as list of items",
"func":1
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.log_stream",
"url":109,
"doc":"Getter to fetch log stream count at instance level Returns: int  log stream count atinstance level"
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.create_live_sync_schedule",
"url":109,
"doc":"Runs full backup on source oracle instance and Creates live sync schdule for the given destination oracle instance Args: dest_client (str)  The destination client name for live sync dest_instance (str)  The destination instance name for live sync schedule_name (str)  The name of the live sync schedule to be created  kwargs (dict)  dict of keyword arguments as follows: redirect_path (str)  Path on destination client to redirect tablespaces and datafiles Returns: (object)  The job object of the baseline backup that will be replicated",
"func":1
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.configure_data_masking_policy",
"url":109,
"doc":"Configures data masking policy with given parameters Args: policy_name (str)  string representing policy name table_list_of_dict list(dict)  list containing one dict item representing rules for single table Sample list Tables: [ { \"name\":\"schema_name.table_name\", \"columns\": [ {\"name\":\"column_name\", \"type\":\"algorithm_type\"}, \"arguments\":[list of strings]\u2026] } ] Sample : [ { \"name\":\"HR.NUMNEW\", \"columns\":[{\"name\":\"N1\",\"type\":0},{\"name\":\"N2\",\"type\":2, \"arguments\":[\"1000\",\"2000\"]}] }, { \"name\":\"HR.CHANGE\", \"columns\":[{\"name\":\"C1\",\"type\":1},{\"name\":\"C2\",\"type\":1}] } ] schema_name , table_name, column_name: str Column type key in main dict takes list of dict as value : This list of dict represents each column name and type of algorithm and arguments if any for that algorithm arguments : list of strings Choose appropriate algorithm type and pass necessary arguments based on column type Algorithm Arguments mandatory Arguments Format Algorithm type number Shuffling NA NA 0 Numeric Range [min, max] [\"1000\",\"2000\"] 2 Numeric Variance [variance percentage] [\"50\"] 3 FPE NA NA 1 Fixed String string_to_replace [\"string_to_replace\"] 4 Supported Algorithms : Column Type Algorithms Supported Numeric Shuffling, FPE, Numeric Range, Numeric Variance Char Shuffling , FPE , Fixed String Varchar Shuffling , FPE , Fixed String",
"func":1
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.get_masking_policy_id",
"url":109,
"doc":"Returns policy id of given data masking policy Args: policy_name (str)  data masking policy name Returns: policy_id (int)  data masking policy ID",
"func":1
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.delete_data_masking_policy",
"url":109,
"doc":"Deletes given data masking policy Args: policy_name (str)  data masking policy name to be deleted Returns: bool  returns true when deletion succeeds Raises: Exception When deletion of policy fails When Invalid policy name under given instance is provided",
"func":1
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.standalone_data_masking",
"url":109,
"doc":"Launch standalone data masking job on given instance Args: policy_name (str)  data masking policy name destination_client (str)  destination client in which destination instance exists destination_instance (str)  destination instance to which masking to be applied Returns: object  Job containing data masking job details Raises: SDKException if policy ID retrieved is None",
"func":1
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.oracle_home",
"url":109,
"doc":"getter for oracle home Returns: string - string of oracle_home"
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.is_catalog_enabled",
"url":109,
"doc":"Getter to check if catalog has been enabled Returns: Bool - True if catalog is enabled. Else False."
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.catalog_user",
"url":109,
"doc":"Getter for catalog user Returns: string - String containing catalog user Raises: SDKException: if not set if catalog is not enabled"
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.catalog_db",
"url":109,
"doc":"Getter for catalog database Returns: string - String containing catalog database Raises: SDKException: if not set if catalog is not enabled"
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.os_user",
"url":109,
"doc":"Getter for oracle software owner Returns: string - string of oracle software owner"
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.version",
"url":109,
"doc":"Getter for oracle version Returns: string - string of oracle instance version"
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.archive_log_dest",
"url":109,
"doc":"Getter for the instance's archive log dest Returns: string - string for archivelog location"
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.cmd_sp",
"url":109,
"doc":"Getter for Command Line storage policy Returns: string - string for command line storage policy"
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.log_sp",
"url":109,
"doc":"Oracle Instance's Log Storage Poplicy Returns: string  string containing log storage policy"
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.is_autobackup_on",
"url":109,
"doc":"Getter to check whether autobackup is set to ON Returns: Bool - True if autobackup is set to ON. Else False."
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.db_user",
"url":109,
"doc":"Getter to get the database user used to log into the database Returns: Oracle database user for the instance"
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.tns_name",
"url":109,
"doc":"Getter to get the TNS Names of the database Returns: string  TNS name of the instance configured Raises: SDKException: if not set"
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.dbid",
"url":109,
"doc":"Getter to get the DBID of the database instance Returns: DBID of the oracle database"
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.tablespaces",
"url":109,
"doc":"Getter for listing out all tablespaces for the instance Returns: list  list containing tablespace names for the database"
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.browse",
"url":109,
"doc":"Overridden method to browse oracle database tablespaces",
"func":1
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.backup",
"url":109,
"doc":"Uses the default subclient to backup the database Args: subclient_name (str)  name of subclient to use default: default",
"func":1
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.restore",
"url":109,
"doc":"Perform restore full/partial database using latest backup or backup copy Args: files (dict)  fileOption for restore destination_client (str)  destination client name common_options (dict)  dictionary containing common options default: None browse_option (dict)  dictionary containing browse options oracle_options (dict)  dictionary containing other oracle options default: By default it restores the controlfile and datafiles from latest backup Example:{ \"resetLogs\": 1, \"switchDatabaseMode\": True, \"noCatalog\": True, \"restoreControlFile\": True, \"recover\": True, \"recoverFrom\": 3, \"restoreData\": True, \"restoreFrom\": 3 } tag (str)  Type of the restore to be performed default: None destination_instance(str)  destination instance name default: None (in place restore) streams (int)  number of streams for restore default: 2 Returns: object  Job containing restore details Raises: SDKException: If oracle options can't be set If destination_client can't be set",
"func":1
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.restore_in_place",
"url":109,
"doc":"Restores the oracle logical dump data/log files specified in the input paths list to the same location. Args: db_password (str)  password for oracle database path (list)  list of database/databases to be restored dest_client_name (str)  destination client name where files are to be restored dest_instance_name (str)  destination postgres instance name of destination client dest_path (str)  destinath path for restore default: None Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.oracleinstance.OracleInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.postgresinstance",
"url":110,
"doc":"File for operating on a POSTGRESQL Instance. PostgreSQLInstance is the only class defined in this file. PostgreSQLInstance: Derived class from Instance Base class, representing a postgres server instance, and to perform operations on that instance PostgreSQLInstance:          = _get_instance_properties()  Gets the properties of this instance _get_instance_properties_json()  Gets all the instance related properties of PostgreSQL instance. _restore_json()  returns the JSON request to pass to the API as per the options selected by the user _restore_common_options_json()  setter for the common options in restore JSON _restore_destination_json()  setter for the Destination options in restore JSON _restore_postgres_option_json()  setter for the postgres restore option in restore JSONRe restore_in_place()  Restores the postgres data/log files specified in the input paths list to the same location change_sa_password()  Changes postgresql user password PostgreSQLInstance instance Attributes                     postgres_bin_directory  returns the postgres bin directory of postgres server  postgres_lib_directory  returns the lib directory of postgres server  postgres_archive_log_directory  returns the postgres archive log directory of postgres server  log_storage_policy  returns the log storage policy for the instance  postgres_server_user_name  returns the postgres server user name of postgres server  postgres_server_port_number  returns the postgres server port number of postgres server  maintenance_database  returns the maintenance database associated with postgres server  postgres_version  returns the postgres server version  standby_instance_name  Returns the standby instance name  standby_instance_id  Returns the standby instance id  use_master_for_log_backup  Returns True if master is used for log backup  use_master_for_data_backup  Returns True if master is used for data backup  archive_delete  Returns True if archive delete is enabled for instance  postgres_ssl_status  Returns True/False based on if ssl is enabled or not  postgres_ssl_ca_file  Returns SSL CA file path  postgres_ssl_key_file  Returns SSL key file path  postgres_ssl_cert_file  Returns SSL cert file path"
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance",
"url":110,
"doc":"Derived class from Instance Base class, representing a POSTGRESQL instance, and to perform operations on that Instance. Initialize object of the Instances class. Args: agent_object (object)  instance of the Agent class Returns: object - instance of the Instances class"
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.postgres_bin_directory",
"url":110,
"doc":"Returns the bin directory of postgres server Return Type: str"
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.postgres_lib_directory",
"url":110,
"doc":"Returns the lib directory of postgres server Return Type: str"
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.postgres_archive_log_directory",
"url":110,
"doc":"Returns the archive log directory of postgres server Return Type: str"
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.log_storage_policy",
"url":110,
"doc":"Returns the log storage policy for the instance Return Type: str Default: None"
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.postgres_server_user_name",
"url":110,
"doc":"Returns the username of postgres server Return Type: str"
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.postgres_server_port_number",
"url":110,
"doc":"Returns the port number associated with postgres server Return Type: str"
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.maintenance_database",
"url":110,
"doc":"Returns the maintenance database associated with postgres server Return Type: str"
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.postgres_version",
"url":110,
"doc":"Returns the postgres server version Return Type: str"
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.archive_delete",
"url":110,
"doc":"Returns True if archive delete enabled. False if not Return Type: bool"
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.standby_instance_name",
"url":110,
"doc":"Returns the standby instance name Return Type: str"
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.standby_instance_id",
"url":110,
"doc":"Returns the standby instance id Return Type: str"
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.is_standby_enabled",
"url":110,
"doc":"Returns True if standby enabled. False if not Return Type: bool"
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.use_master_for_log_backup",
"url":110,
"doc":"Returns True if master is used for log backup Return Type: bool"
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.use_master_for_data_backup",
"url":110,
"doc":"Returns True if master is used for data backup Return Type: bool"
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.postgres_ssl_status",
"url":110,
"doc":"Returns True/False based on if ssl is enabled or not"
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.postgres_ssl_ca_file",
"url":110,
"doc":"Returns: str - ssl ca file path"
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.postgres_ssl_key_file",
"url":110,
"doc":"Returns: str - ssl key file path"
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.postgres_ssl_cert_file",
"url":110,
"doc":"Returns:str - ssl cert file path"
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.change_sa_password",
"url":110,
"doc":"Changes postgresql user password Args: value (bool)  PostgreSQL password",
"func":1
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.restore_in_place",
"url":110,
"doc":"Restores the postgres data/log files specified in the input paths list to the same location. Args: path (list)  list of database/databases to be restored dest_client_name (str)  destination client name where files are to be restored dest_instance_name (str)  destination postgres instance name of destination client backupset_name (str)  destination postgres backupset name of destination client backupset_flag (bool)  flag to indicate fsbased backup overwrite (bool)  unconditional overwrite files during restore default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None clone_env (bool)  boolean to specify whether the database should be cloned or not default: False clone_options (dict)  clone restore options passed in a dict default: None Accepted format: { \"stagingLocaion\": \"/gk_snap\", \"forceCleanup\": True, \"port\": \"5595\", \"libDirectory\": \"/opt/PostgreSQL/9.6/lib\", \"isInstanceSelected\": True, \"reservationPeriodS\": 3600, \"user\": \"postgres\", \"binaryDirectory\": \"/opt/PostgreSQL/9.6/bin\" } media_agent (str)  media agent name default: None table_level_restore (bool)  boolean to specify if the restore operation is table level default: False staging_path (str)  staging path location for table level restore default: None no_of_streams (int)  number of streams to be used by volume level restore default: None volume_level_restore (bool)  volume level restore flag default: False redirect_enabled (bool)  boolean to specify if redirect restore is enabled default: False redirect_path (str)  Path specified in advanced restore options in order to perform redirect restore default: None restore_to_disk (bool)  restore to disk flag default: False restore_to_disk_job (int)  backup job id to restore to disk default: None destination_path (str)  destinath path for restore default: None revert (bool)  boolean to specify whether to do a hardware revert in restore default: False Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.postgresinstance.PostgreSQLInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.saporacleinstance",
"url":111,
"doc":"File for operating on a SAP Oracle Instance. SAPOracleInstance is the only class defined in this file. SAPOracleInstance: Derived class from Instance Base class, representing a SAPOracle instance, and to perform operations on that instance SAPOracleInstance: __init__()  Constructor for the class oracle_home()  Getter for $ORACLE_HOME of this instance sapdata_home()  Getter for $SAPDATA_HOME of this instance sapexepath()  Getter for $SAPEXE of this instance os_user()  Getter for OS user owning oracle software cmd_sp()  Getter for command line storage policy log_sp()  Getter for log storage policy db_user()  Getter for SYS database user name saporacle_db_connectstring()  Getter for getting oracle database connect string saporacle_blocksize()  Getter for getting blocksize value saporacle_sapsecurestore()  Getter for getting sapsecure store option saporacle_archivelogbackupstreams()  Getter for getting archivelog backup streams saporacle_instanceid()  Getter for getting InstanceId saporacle_snapbackup_enable()  Getter for getting Snap backup enabled or not saporacle_snapengine_name()  Getter for getting snap enginename _restore_request_json()  returns the restore request json _process_restore_response()  processes response received for the Restore request restore_in_place()  runs the restore job for specified instance restore_outof_place()  runs the restore job for specified client and instance"
},
{
"ref":"cvpysdk.instances.saporacleinstance.SAPOracleInstance",
"url":111,
"doc":"Derived class from Instance Base class, representing a SAPOracle instance, and to perform operations on that Instance. Constructor for the class Args: agent_object  instance of the Agent class instance_name  name of the instance instance_id  id of the instance"
},
{
"ref":"cvpysdk.instances.saporacleinstance.SAPOracleInstance.oracle_home",
"url":111,
"doc":"getter for oracle home Returns: string - string of oracle_home"
},
{
"ref":"cvpysdk.instances.saporacleinstance.SAPOracleInstance.sapdata_home",
"url":111,
"doc":"getter for sapdata home Returns: string - string of sapdata_home"
},
{
"ref":"cvpysdk.instances.saporacleinstance.SAPOracleInstance.sapexepath",
"url":111,
"doc":"getter for sapexepath Returns: string - string of sapexepath"
},
{
"ref":"cvpysdk.instances.saporacleinstance.SAPOracleInstance.os_user",
"url":111,
"doc":"Getter for oracle software owner Returns: string - string of oracle software owner"
},
{
"ref":"cvpysdk.instances.saporacleinstance.SAPOracleInstance.cmd_sp",
"url":111,
"doc":"Getter for Command Line storage policy Returns: string - string for command line storage policy"
},
{
"ref":"cvpysdk.instances.saporacleinstance.SAPOracleInstance.log_sp",
"url":111,
"doc":"Oracle Instance's Log Storage Poplicy Returns: string  string containing log storage policy"
},
{
"ref":"cvpysdk.instances.saporacleinstance.SAPOracleInstance.saporacle_db_user",
"url":111,
"doc":"Returns: Oracle database user for the instance"
},
{
"ref":"cvpysdk.instances.saporacleinstance.SAPOracleInstance.saporacle_db_connectstring",
"url":111,
"doc":"Returns: Oracle database connect string for the instance"
},
{
"ref":"cvpysdk.instances.saporacleinstance.SAPOracleInstance.saporacle_blocksize",
"url":111,
"doc":"Returns: blocksize for the instance"
},
{
"ref":"cvpysdk.instances.saporacleinstance.SAPOracleInstance.saporacle_sapsecurestore",
"url":111,
"doc":"Returns: sapsecurestore option for the instance"
},
{
"ref":"cvpysdk.instances.saporacleinstance.SAPOracleInstance.saporacle_archivelogbackupstreams",
"url":111,
"doc":"Returns: archivelogbackupstreams option for the instance"
},
{
"ref":"cvpysdk.instances.saporacleinstance.SAPOracleInstance.saporacle_instanceid",
"url":111,
"doc":"Returns: saporacle_instanceid option for the instance"
},
{
"ref":"cvpysdk.instances.saporacleinstance.SAPOracleInstance.saporacle_snapbackup_enable",
"url":111,
"doc":"Returns: saporacle_snapbackup_enable option for the instance"
},
{
"ref":"cvpysdk.instances.saporacleinstance.SAPOracleInstance.saporacle_snapengine_name",
"url":111,
"doc":"Returns: saporacle_snapengine_name option for the instance"
},
{
"ref":"cvpysdk.instances.saporacleinstance.SAPOracleInstance.restore_in_place",
"url":111,
"doc":"perform inplace restore and recover of sap oracle database Args: destination_client (str)  destination client name where saporacle client package exists if this value not provided,it will automatically use source backup client destination_instance (str)  destination instance name where saporacle client package exists if this value not provided,it will automatically use source backup instance sap_options (dict) backupset_name (str)  backupset name of the instance to be restored. If the instance is a single DB instance then the backupset name is  default . default: default restoreData (bool)  RestoreData if true mean restore data is selected. true - restore data selected false - restore data unselected default:true streams (int) : no of streams to use for restore default:2 copyPrecedence (int) : copy number to use for restore default:0 archiveLog (bool) : Restore archive log true - restore archive log selected false - restore archive log unselected default: True recover (bool) : recover database true - recover database selected false - recover database unselected default: True switchDatabaseMode (bool) : switchDatabaseMode option true - switchDatabaseMode selected false - switchDatabaseMode unselected default: True restoreControlFile (bool) : restoreControlFile option true - restoreControlFile selected false - restoreControlFile unselected default: True partialRestore (bool) : partialRestore option true - partialRestore selected false - partialRestore unselected default: False openDatabase (bool) : openDatabase option true - openDatabase selected false - openDatabase unselected default: True resetLogs (bool) : resetLogs option true - resetLogs selected false - resetLogs unselected default: True point_in_time (str) : date to use for restore and recover database format: dd/MM/YYYY gets content from 01/01/1970 if not specified default: 0 backupValidationOnly (bool) : backupValidationOnly option true - backupValidationOnly selected false - backupValidationOnly unselected default: False restoreTablespace (bool) : restoreTablespace option true - restoreTablespace selected false - restoreTablespace unselected default: False noCatalog (bool) : noCatalog option true - noCatalog selected false - noCatalog unselected default: True sourceItem (list) : sourceItem means browse options for sap oracle restores /+BROWSE+ - means both data and logs are selected /+BROWSE+DATA -data only selected /+BROWSE+LOG -log only selected default: /+BROWSE+ databaseCopy (bool) : databaseCopy option true - databaseCopy selected false - databaseCopy unselected default: False archiveLogBy (str) : for restore archive log options, default means restore archivelogall is selected default: default Raises: SDKException: if failed to browse content if response is empty if response is not success if destination client does not exist on commcell if destination instance does not exist on commcell",
"func":1
},
{
"ref":"cvpysdk.instances.saporacleinstance.SAPOracleInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.saporacleinstance.SAPOracleInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.saporacleinstance.SAPOracleInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.saporacleinstance.SAPOracleInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.saporacleinstance.SAPOracleInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.saporacleinstance.SAPOracleInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.saporacleinstance.SAPOracleInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.saporacleinstance.SAPOracleInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.sharepointinstance",
"url":112,
"doc":"SharepointInstance is the only class defined in this file. SharepointInstance : Derived class from Instance Base class, representing a Sharepoint Instance, and to perform operations on that instance SharepointInstance: _restore_common_options_json()  setter for common options property in restore _restore_json()  Method which creates json for a restore job _restore_v1_json()  Method which creates json for v1 client for a restore job"
},
{
"ref":"cvpysdk.instances.sharepointinstance.SharepointInstance",
"url":112,
"doc":"Class representing a sharepoint instance, and to perform operations on that instance Initialise the instance object. Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.sharepointinstance.SharepointInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.sharepointinstance.SharepointInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.sharepointinstance.SharepointInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.sharepointinstance.SharepointInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.sharepointinstance.SharepointInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.sharepointinstance.SharepointInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.sharepointinstance.SharepointInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.sharepointinstance.SharepointInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.splunkinstance",
"url":113,
"doc":"File for operating on Splunk Instance SplunkInstance is the only class defined in this file. SplunkInstance: Derived class from BigDataAppsInstance, representing a splunk instance, and to perform operations on that instance SplunkInstance        _restore_json()  Method which creates json for a restore job"
},
{
"ref":"cvpysdk.instances.splunkinstance.SplunkInstance",
"url":113,
"doc":"Class representing a splunk instance, and to perform operations on that instance Initialise the instance object. Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.splunkinstance.SplunkInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.splunkinstance.SplunkInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.splunkinstance.SplunkInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.splunkinstance.SplunkInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.splunkinstance.SplunkInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.splunkinstance.SplunkInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.splunkinstance.SplunkInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.splunkinstance.SplunkInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.sqlinstance",
"url":114,
"doc":"File for operating on a SQL Server Instance. SQLServerInstance is the only class defined in this file. SQLServerInstance: Derived class from Instance Base class, representing a sql server instance, and to perform operations on that instance SQLServerInstance: _get_instance_properties()  gets the instance related properties of SQL instance. _get_instance_properties_json()  gets all the instance related properties of SQL instance. _restore_request_json()  returns the restore request json _process_restore_response()  processes response received for the Restore request _get_sql_restore_options()  returns the dict containing destination sql server names _run_backup()  runs full backup for this subclients and appends the job object to the return list _process_browse_request()  processes response received for Browse request _recoverypoint_request_json()  returns a json to be sent to server to create a recovery point get_recovery_points()  lists all the recovery points _process_recovery_point_request()  starts the recovery point job and process the response backup()  runs full backup for all subclients associated with this instance browse()  gets the content of the backup for this instance browse_in_time()  gets the content of the backup for this instance in the time range specified restore()  runs the restore job for specified restore_to_destination_server()  restores the database on destination server create_recovery_point()  creates a recovery point on destination server table_level_restore()  starts the table level restore job _table_level_restore_request_json()  returns a json to be sent to the server for table level restore job mssql_instance_prop()  sets instance properties for the mssql instance vss_option()  enables or disables VSS option on SQL instance vdi_timeout()  sets the SQL VDI timeout value on SQL instance impersonation()  sets impersonation on SQL instance with local system account or provided credentials _get_ag_groups()  gets available Availability Groups from the primary replica and returns it _get_ag_group_replicas()  gets replicas list from the Availability Group and returns it create_sql_ag()  creates a new SQL Availability Group client and instance SQLServerInstance Attributes: mssql_instance_prop  returns the mssql instance properties ag_group_name  returns the Availability Group Name ag_primary_replica  returns the Availability Group Primary Replica ag_replicas_list  returns the Availability Group Replicas List ag_listener_list  returns the Availability Group Listener List"
},
{
"ref":"cvpysdk.instances.sqlinstance.SQLServerInstance",
"url":114,
"doc":"Derived class from Instance Base class, representing a SQL Server instance, and to perform operations on that Instance. Initialise the instance object. Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.sqlinstance.SQLServerInstance.ag_group_name",
"url":114,
"doc":"Returns the Availability Group Name"
},
{
"ref":"cvpysdk.instances.sqlinstance.SQLServerInstance.ag_primary_replica",
"url":114,
"doc":"Returns the Availability Group Primary Replica"
},
{
"ref":"cvpysdk.instances.sqlinstance.SQLServerInstance.ag_replicas_list",
"url":114,
"doc":"Returns the Availability Group Replicas List"
},
{
"ref":"cvpysdk.instances.sqlinstance.SQLServerInstance.ag_listener_list",
"url":114,
"doc":"Returns the Availability Group Listener List"
},
{
"ref":"cvpysdk.instances.sqlinstance.SQLServerInstance.backup",
"url":114,
"doc":"Run full backup job for all subclients in this instance. Returns: list - list containing the job objects for the full backup jobs started for the subclients in the backupset",
"func":1
},
{
"ref":"cvpysdk.instances.sqlinstance.SQLServerInstance.browse",
"url":114,
"doc":"Gets the list of the backed up databases for this instance. Args: get_full_details (bool) - if True returns dict with all databases with last full backupjob details, default false Returns: list - list of all databases dict - database names along with details like backup created time and database version Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.sqlinstance.SQLServerInstance.browse_in_time",
"url":114,
"doc":"Gets the list of the backed up databases for this instance in the given time frame. Args: from_date (str): date to get the contents after. Format: dd/MM/YYYY Gets contents from 01/01/1970 if not specified. Defaults to None. to_date (str): date to get the contents before. Format: dd/MM/YYYY Gets contents till current day if not specified. Defaults to None. Returns: list - list of all databases dict - database names along with details like backup created timen and database version Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.sqlinstance.SQLServerInstance.get_recovery_points",
"url":114,
"doc":"lists all the recovery points. returns: object (list) - list of all the recovery points and clones",
"func":1
},
{
"ref":"cvpysdk.instances.sqlinstance.SQLServerInstance.create_recovery_point",
"url":114,
"doc":"stats a granular restore or recovery point job and creates a on demand restore of a database agrs: database_name (str) : Name of the database for granular restore new_database_name (str) : Name of the newly created database database default: None creates a database with original dbname+  destination_instance (str): Destination server(instance) name. default None .creates a database in the same instance expire_days (int) : days for which the database will be available default 1 day. snap (bool) : create recovery point for the snap setup dafault False returns: object (Job) : instance of the Job class for this restore job recovery point Id (int) : id to uniquely access the recovery point recovery_point_name (str) : name of the database created",
"func":1
},
{
"ref":"cvpysdk.instances.sqlinstance.SQLServerInstance.table_level_restore",
"url":114,
"doc":"Starts a table level restore Args: src_db_name(str) : Name of the source database tables_to_restore(list) : List of tables to restore destination_db_name(str) : Destination database name rp_name(str) : Name of recovery point include_child_tables(bool) : Includes all child tables in restore. include_parent_tables(bool) : Includes all parent tables in restore. Returns: job : Instance of Job class for this restore job",
"func":1
},
{
"ref":"cvpysdk.instances.sqlinstance.SQLServerInstance.restore",
"url":114,
"doc":"Restores the databases specified in the input paths list. Args: content_to_restore (list): List of databases to restore. drop_connections_to_databse (bool): Drop connections to database. Defaults to False. overwrite (bool): Unconditional overwrite files during restore. Defaults to True. restore_path (str): Existing path on disk to restore. Defaults to None. to_time (str): Restore to time. Defaults to None. sql_recover_type (str): Type of sql recovery state. (STATE_RECOVER, STATE_NORECOVER, STATE_STANDBY) Defaults to STATE_RECOVER. sql_restore_type (str): Type of sql restore state. (DATABASE_RESTORE, STEP_RESTORE, RECOVER_ONLY) Defaults to DATABASE_RESTORE. undo_path (str): File path for undo path for sql standby restores. Defaults to None. restricted_user (bool): Restore database in restricted user mode. Defaults to None. destination_instance (str): Destination instance to restore too. Defaults to None. Returns: object - instance of the Job class for this restore job Raises: SDKException: if content_to_restore is not a list if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.sqlinstance.SQLServerInstance.restore_to_destination_server",
"url":114,
"doc":"Restores the databases specified in the input paths list. Args: content_to_restore (list): List of databases to restore. destination_server (str): Destination server(instance) name. drop_connections_to_databse (bool): Drop connections to database. Defaults to False. overwrite (bool): Unconditional overwrite files during restore. Defaults to True. restore_path (str): Existing path on disk to restore. Default to None. Returns: object - instance of the Job class for this restore job Raises: SDKException: if content_to_restore is not a list if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.instances.sqlinstance.SQLServerInstance.mssql_instance_prop",
"url":114,
"doc":"getter for sql server instance properties"
},
{
"ref":"cvpysdk.instances.sqlinstance.SQLServerInstance.vss_option",
"url":114,
"doc":"Enables or disables VSS option on SQL instance Args: value (bool)  Boolean value whether to set VSS option on or off",
"func":1
},
{
"ref":"cvpysdk.instances.sqlinstance.SQLServerInstance.vdi_timeout",
"url":114,
"doc":"Sets the SQL VDI timeout value on SQL instance Args: value (int)  value of vdi timeout for sql vdi operations",
"func":1
},
{
"ref":"cvpysdk.instances.sqlinstance.SQLServerInstance.impersonation",
"url":114,
"doc":"Sets impersonation on SQL instance with local system account or provided credentials. Args: enable (bool)  boolean value whether to set impersonation credentials (str, optional)  credentials to set for impersonation. Defaults to local system account if enabled is True and credential name not provided.",
"func":1
},
{
"ref":"cvpysdk.instances.sqlinstance.SQLServerInstance.create_sql_ag",
"url":114,
"doc":"Creates a new SQL Availability Group client and instance. Args: client_name (str)  name to use for Availability Group client ag_group_name (str)  name of the Availability Group to create credentials (str, optional)  name of credentials to use as impersonation Default is no impersonation if credentials name is not provided. Returns: object - instance of the Instance class for the newly created Availability Group Raises: SDKException: if Availability Group for given primary replica does not exist if Availability Group client/instance fails to be created. if Credentials for impersonation does not exist",
"func":1
},
{
"ref":"cvpysdk.instances.sqlinstance.SQLServerInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.sqlinstance.SQLServerInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.sqlinstance.SQLServerInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.sqlinstance.SQLServerInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.sqlinstance.SQLServerInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.sqlinstance.SQLServerInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.sqlinstance.SQLServerInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.sybaseinstance",
"url":115,
"doc":"File for operating on a Sybase Instance. SybaseInstance is the only class defined in this file. SybaseInstance: Derived class from Instance Base class, representing an sybase instance, and to perform operations on that instance SybaseInstance: __init__()  initialise object of Sybase Instance associated with the specified agent _get_sybase_restore_json()  Private Method to construct restore JSON for individual database restore _get_sybase_full_restore_json()  Private Method to construct restore JSON for fullserver restore _get_single_database_json()  Private Method to construct restore JSON for individual database restore _get_server_content()  Private Method to construct restore JSON for individual database when we have rename device options _restore_common_options_json()  setter for common options property in restore _restore_destination_json()  setter for destination options property in restore _restore_sybase_option_json()  setter for Sybase restore option property in restore sybase_home()  returns string of sybase_home Property of Sybase instance sybase_instance_name()  returns sybase instance name without any case change is_discovery_enabled()  returns bool value of autodiscovery option at given sybase instance level localadmin_user()  returns string of localadmin_user of given sybase instance sa_user()  returns string of sybase sa_user of given sybase instance version()  returns string of given sybase server version backup_server()  returns string of backup_server for given sybase instance sybase_ocs()  returns string of sybase_ocs for given sybase instance sybase_ase()  returns string of sybase_ase for given sybase instance sybase_blocksize()  returns integer of block size for given sybase instance sybase_configfile()  returns string of sybase_configfile for given sybase instance sybase_sharedmemory_directory()  returns string of sybase_memory_directory for given sybase instance restore_sybase_server()  Performs full sybase server restore restore_database()  Performs individual databases restore restore_to_disk()  Perform restore to disk [Application free restore] for sybase"
},
{
"ref":"cvpysdk.instances.sybaseinstance.SybaseInstance",
"url":115,
"doc":"Class to represent a standalone Sybase Instance Initializes the object of Sybase Instance class Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default None Returns : (object) - instance of the Sybase Instance class"
},
{
"ref":"cvpysdk.instances.sybaseinstance.SybaseInstance.sybase_home",
"url":115,
"doc":"Returns sybase home Returns: (str) - string representing sybase home"
},
{
"ref":"cvpysdk.instances.sybaseinstance.SybaseInstance.sybase_instance_name",
"url":115,
"doc":"Returns sybase instance name with actual case without any conversion Returns: (str) - string representing sybase instance name"
},
{
"ref":"cvpysdk.instances.sybaseinstance.SybaseInstance.is_discovery_enabled",
"url":115,
"doc":"Returns autodiscovery enable status Returns: bool - boolean value beased on autodiscovery enable status. True - returns True if autodiscovery is enabled False - returns False if autodiscosvery is not enabled"
},
{
"ref":"cvpysdk.instances.sybaseinstance.SybaseInstance.localadmin_user",
"url":115,
"doc":"Returns for local admin user Returns: (str) - string representing local admin user"
},
{
"ref":"cvpysdk.instances.sybaseinstance.SybaseInstance.sa_user",
"url":115,
"doc":"Returns for sa username Returns: (str) - string representing sa username"
},
{
"ref":"cvpysdk.instances.sybaseinstance.SybaseInstance.version",
"url":115,
"doc":"Returns for sybase version Returns: (str) - string representing sybase version"
},
{
"ref":"cvpysdk.instances.sybaseinstance.SybaseInstance.backup_server",
"url":115,
"doc":"Returns for backup server Returns: (str) - string representing backup server"
},
{
"ref":"cvpysdk.instances.sybaseinstance.SybaseInstance.sybase_ocs",
"url":115,
"doc":"Returns for sybase ocs Returns: (str) - string representing sybase OCS"
},
{
"ref":"cvpysdk.instances.sybaseinstance.SybaseInstance.sybase_ase",
"url":115,
"doc":"Returns for sybase ase Returns: (str) - string representing sybase ASE"
},
{
"ref":"cvpysdk.instances.sybaseinstance.SybaseInstance.sybase_blocksize",
"url":115,
"doc":"Returns for sybase blocksize Returns: (int) - integer representing block size value"
},
{
"ref":"cvpysdk.instances.sybaseinstance.SybaseInstance.sybase_configfile",
"url":115,
"doc":"Returns for sybase configfile Returns: (str) - string representing sybase config file"
},
{
"ref":"cvpysdk.instances.sybaseinstance.SybaseInstance.sybase_sharedmemory_directory",
"url":115,
"doc":"Returns for sybase shared memory directory Returns: (str) - string representing sybase sybase shared memory directory"
},
{
"ref":"cvpysdk.instances.sybaseinstance.SybaseInstance.client_name",
"url":115,
"doc":"Returns client name of this instance Returns: (str) - client name as registered in the commcell"
},
{
"ref":"cvpysdk.instances.sybaseinstance.SybaseInstance.restore_sybase_server",
"url":115,
"doc":"Performs Full sybase server restore Args: destination_client_name (str)  sybase destination client for restore default : None destination_instance_name (str)  sybase destination instance for restore default : None point_in_time (bool)  determines point_in_time restore or not default:False timevalue (str)  for point_in_time based restore format: YYYY-MM-DD HH:MM:SS default : None rename_databases (bool)  determines whether renamedatabase option chosen default:False device_options (dict(dict  dict of dict for each database with device and database rename options default : None copy_precedence (int)  copy precedence of storage policy default: 0 Note: Also This is dict of dict having sourcedatabasenamead Key and set of another dict options as value corresponding to that source Database. Also if you wouldn't want to pass value for particular option , mark it none Dict format : \"sourceDBname\":\"dict options\" Example: device_options = {} \"db1\": { \"datadevicename\":\"testdata\", \"newdatadevicename\":\"testdatanew\", \"newdatadevicepath\":\"/opt/sap/data/testdatanew.dat\", \"logdevicename\":\"testlog\", \"newlogdevicename\":\"testlognew\", \"newlogdevicepath\":\"/opt/sap/data/testlognew.dat\", \"newdatabasename\": \"db1new\" }, \"model\": { \"datadevicename\":None, \"newdatadevicename\":None, \"newdatadevicepath\":None, \"logdevicename\":None, \"newlogdevicename\":None, \"newlogdevicepath\":None, \"newdatabasename\": \"modelnew\" } } Note : Devices corresponding to System database cannot be renamed Returns: (object) - Job containing restore details",
"func":1
},
{
"ref":"cvpysdk.instances.sybaseinstance.SybaseInstance.restore_database",
"url":115,
"doc":"Performs individual database restores Args: destination_client_name (str)  destination client for restore default : None destination_instance_name (str)  destination instance for restore default : None database_list (list)  list of databases for restore timevalue (str)  for point_in_time based restore format: YYYY-MM-DD HH:MM:SS default : None sybase_create_device (bool)  determines whether to create device for database restore default:False rename_databases (bool)  determines whether renamedatabase option chosen default:False device_options (dict(dict  dict of dict for each database with device and database rename options default : None copy_precedence (int)  copy precedence of storage policy default: 0 Note : Also This is dict of dict having sourcedatabasename as Key and set of another dict options as value corresponding to that source Database. Also if you wouldn't want to pass value for particular option , mark it none Example: device_options = { \"db1\": { \"datadevicename\":\"testdata\", \"newdatadevicename\":\"testdatanew\", \"newdatadevicepath\":\"/opt/sap/data/testdatanew.dat\", \"logdevicename\":\"testlog\", \"newlogdevicename\":\"testlognew\", \"newlogdevicepath\":\"/opt/sap/data/testlognew.dat\", \"newdatabasename\": \"db1new\" }, \"db2\": { \"datadevicename\":None, \"newdatadevicename\":None, \"newdatadevicepath\":\"/opt/sap/data/testdatanew.dat\", \"logdevicename\":\"testlog\", \"newlogdevicename\":\"testlognew\", \"newlogdevicepath\":\"/opt/sap/data/testlognew.dat\", \"newdatabasename\": None } } Returns: (object) - Job containing restore details Raises: SDKException if databaselist is empty",
"func":1
},
{
"ref":"cvpysdk.instances.sybaseinstance.SybaseInstance.restore_to_disk",
"url":115,
"doc":"Perform restore to disk [Application free restore] for sybase Args: destination_client (str)  destination client name destination_path: (str)  destination path backup_job_ids (list)  list of backup job IDs to be used for disk restore user_name (str)  impersonation user name to restore to destination client password (str)  impersonation user password Returns: (object) - Job containing restore details Raises: SDKException if backup_job_ids not given as list of items",
"func":1
},
{
"ref":"cvpysdk.instances.sybaseinstance.SybaseInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.sybaseinstance.SybaseInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.sybaseinstance.SybaseInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.sybaseinstance.SybaseInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.sybaseinstance.SybaseInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.sybaseinstance.SybaseInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.sybaseinstance.SybaseInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.sybaseinstance.SybaseInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver",
"url":116,
"doc":"Initialize Instances for the SDK."
},
{
"ref":"cvpysdk.instances.virtualserver.alibaba_cloud",
"url":117,
"doc":"File for operating on a Virtual Server Alibaba Cloud Instance. AlibabaCloudInstance is the only class defined in this file. AlibabaCloudInstance: Derived class from VirtualServer Base class, representing a Alibaba Cloud instance, and to perform operations on that instance AlibabaCloudInstance: __init__(agent_object,instance_name,instance_id)  initialize object of Alibaba Cloud Instance object associated with the VirtualServer Instance _get_instance_properties()  VirtualServer Instance class method overwritten to get Alibaba Cloud Specific instance properties as well _set_instance_properties()  Alibaba Cloud Instance class method to set Alibaba Cloud Specific instance properties"
},
{
"ref":"cvpysdk.instances.virtualserver.alibaba_cloud.AlibabaCloudInstance",
"url":117,
"doc":"Class for representing an Alibaba cloud instance of the Virtual Server agent. Initialize the Instance object for the given Virtual Server instance. Args: agent (object)  the instance of the agent class instance_name (str)  the name of the instance instance_id (int)  the instance id"
},
{
"ref":"cvpysdk.instances.virtualserver.alibaba_cloud.AlibabaCloudInstance.server_host_name",
"url":117,
"doc":"return the Alibaba Cloud endpoint Returns: _server_host_name (str)  the hostname of the Alibaba cloud server"
},
{
"ref":"cvpysdk.instances.virtualserver.alibaba_cloud.AlibabaCloudInstance.server_name",
"url":117,
"doc":"returns the list of all associated clients with the instance Returns: _server_name (str)  the list of all proxies associated to the instance"
},
{
"ref":"cvpysdk.instances.virtualserver.alibaba_cloud.AlibabaCloudInstance.instance_username",
"url":117,
"doc":"returns the username of the instance Returns: _username (str)  the user name of the Alibaba cloud endpoint"
},
{
"ref":"cvpysdk.instances.virtualserver.alibaba_cloud.AlibabaCloudInstance.associated_clients",
"url":118,
"doc":"Treats the clients associated to this instance as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.alibaba_cloud.AlibabaCloudInstance.co_ordinator",
"url":118,
"doc":"Returns the Co_ordinator of this instance it is read-only attribute"
},
{
"ref":"cvpysdk.instances.virtualserver.alibaba_cloud.AlibabaCloudInstance.frel",
"url":118,
"doc":"Returns the FREL associated at the instance level Returns: string : frel client name Raises: SDKException: if failed to fetch properties if response is empty if response is not success"
},
{
"ref":"cvpysdk.instances.virtualserver.alibaba_cloud.AlibabaCloudInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.alibaba_cloud.AlibabaCloudInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.virtualserver.alibaba_cloud.AlibabaCloudInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.virtualserver.alibaba_cloud.AlibabaCloudInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.alibaba_cloud.AlibabaCloudInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.alibaba_cloud.AlibabaCloudInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.alibaba_cloud.AlibabaCloudInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.alibaba_cloud.AlibabaCloudInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.amazon_web_services",
"url":119,
"doc":"File for operating on a Virtual Server Amazon Instance. AmazonInstance is the only class defined in this file. AmazonInstance: Derived class from VirtualServer Base class, representing a Amazon instance, and to perform operations on that instance AmazonInstance: __init__(agent_object,instance_name,instance_id)  initialize object of amazon Instance object associated with the VirtualServer Instance"
},
{
"ref":"cvpysdk.instances.virtualserver.amazon_web_services.AmazonInstance",
"url":119,
"doc":"Class for representing an Instance of the Virtual Server agent. Initialise the instance object. Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.virtualserver.amazon_web_services.AmazonInstance.server_name",
"url":119,
"doc":"getter for the domain name in the AWS vendor json"
},
{
"ref":"cvpysdk.instances.virtualserver.amazon_web_services.AmazonInstance.server_host_name",
"url":119,
"doc":"getter for the domain name in the AWS vendor json"
},
{
"ref":"cvpysdk.instances.virtualserver.amazon_web_services.AmazonInstance.associated_clients",
"url":118,
"doc":"Treats the clients associated to this instance as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.amazon_web_services.AmazonInstance.co_ordinator",
"url":118,
"doc":"Returns the Co_ordinator of this instance it is read-only attribute"
},
{
"ref":"cvpysdk.instances.virtualserver.amazon_web_services.AmazonInstance.frel",
"url":118,
"doc":"Returns the FREL associated at the instance level Returns: string : frel client name Raises: SDKException: if failed to fetch properties if response is empty if response is not success"
},
{
"ref":"cvpysdk.instances.virtualserver.amazon_web_services.AmazonInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.amazon_web_services.AmazonInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.virtualserver.amazon_web_services.AmazonInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.virtualserver.amazon_web_services.AmazonInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.amazon_web_services.AmazonInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.amazon_web_services.AmazonInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.amazon_web_services.AmazonInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.amazon_web_services.AmazonInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.azure",
"url":120,
"doc":"File for operating on a Virtual Server Azure Instance. AzureInstance is the only class defined in this file. AzureInstance: Derived class from VirtualServer Base class, representing a Azure instance, and to perform operations on that instance AzureInstance: _init_(self, agent, name, iid)  initialize object of azure Instance object associated with the VirtualServer Instance _get_instance_properties()  VirtualServer Instance class method overwritten to get Azure classic Specific instance properties as well"
},
{
"ref":"cvpysdk.instances.virtualserver.azure.AzureInstance",
"url":120,
"doc":"Class for representing an Instance of the Virtual Server agent. Initialize the Instance object for the given Virtual Server instance. Args: class_object (agent_object,instance_name,instance_id)  instance of the Agent class, instance name, instance id"
},
{
"ref":"cvpysdk.instances.virtualserver.azure.AzureInstance.server_name",
"url":120,
"doc":"getter for the domain name in the Hyper-V json"
},
{
"ref":"cvpysdk.instances.virtualserver.azure.AzureInstance.server_host_name",
"url":120,
"doc":"getter for the domain name in the vmware vendor json"
},
{
"ref":"cvpysdk.instances.virtualserver.azure.AzureInstance.associated_clients",
"url":118,
"doc":"Treats the clients associated to this instance as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.azure.AzureInstance.co_ordinator",
"url":118,
"doc":"Returns the Co_ordinator of this instance it is read-only attribute"
},
{
"ref":"cvpysdk.instances.virtualserver.azure.AzureInstance.frel",
"url":118,
"doc":"Returns the FREL associated at the instance level Returns: string : frel client name Raises: SDKException: if failed to fetch properties if response is empty if response is not success"
},
{
"ref":"cvpysdk.instances.virtualserver.azure.AzureInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.azure.AzureInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.virtualserver.azure.AzureInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.virtualserver.azure.AzureInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.azure.AzureInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.azure.AzureInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.azure.AzureInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.azure.AzureInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.azure_resource_manager",
"url":121,
"doc":"File for operating on a Virtual Server Azure Resource Manager Instance. AzureResoureceManagerInstance is the only class defined in this file. AzureResoureceManagerInstance: Derived class from VirtualServer Base class, representing a Azure Resource Manager instance, and to perform operations on that instance __init__(self, agent,_name,iid)  initialize object of azure RM Instance object associated with the VirtualServer Instance _get_instance_properties()  VirtualServer Instance class method overwritten to get azure RM Specific instance properties as well _get_instance_properties_json()  get the all instance related properties of this subclient."
},
{
"ref":"cvpysdk.instances.virtualserver.azure_resource_manager.AzureRMInstance",
"url":121,
"doc":"AzureResoureceManagerInstance: __init__(agent_object,instance_name,instance_id)  initialize object of azure resource manager Instance object associated with the VirtualServer Instance Initialize the Instance object for the given Virtual Server instance. Args: class_object (agent_object,instance_name,instance_id)  instance of the Agent class, instance name, instance id"
},
{
"ref":"cvpysdk.instances.virtualserver.azure_resource_manager.AzureRMInstance.server_name",
"url":121,
"doc":"getter for the domain name in the Hyper-V json"
},
{
"ref":"cvpysdk.instances.virtualserver.azure_resource_manager.AzureRMInstance.server_host_name",
"url":121,
"doc":"getter for the domain name in the vmware vendor json"
},
{
"ref":"cvpysdk.instances.virtualserver.azure_resource_manager.AzureRMInstance.associated_clients",
"url":118,
"doc":"Treats the clients associated to this instance as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.azure_resource_manager.AzureRMInstance.co_ordinator",
"url":118,
"doc":"Returns the Co_ordinator of this instance it is read-only attribute"
},
{
"ref":"cvpysdk.instances.virtualserver.azure_resource_manager.AzureRMInstance.frel",
"url":118,
"doc":"Returns the FREL associated at the instance level Returns: string : frel client name Raises: SDKException: if failed to fetch properties if response is empty if response is not success"
},
{
"ref":"cvpysdk.instances.virtualserver.azure_resource_manager.AzureRMInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.azure_resource_manager.AzureRMInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.virtualserver.azure_resource_manager.AzureRMInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.virtualserver.azure_resource_manager.AzureRMInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.azure_resource_manager.AzureRMInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.azure_resource_manager.AzureRMInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.azure_resource_manager.AzureRMInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.azure_resource_manager.AzureRMInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.azure_stack",
"url":122,
"doc":"File for operating on a Virtual Server Azure Stack Instance. AzureStackInstance is the only class defined in this file. AzureStackInstance: Derived class from VirtualServer Base class, representing a Azure Stack instance, and to perform operations on that instance __init__(self, agent,_name,iid)  initialize object of azure Stack Instance object associated with the VirtualServer Instance _get_instance_properties()  VirtualServer Instance class method overwritten to get azure Stack Specific instance properties as well _get_instance_properties_json()  get the all instance related properties of this subclient."
},
{
"ref":"cvpysdk.instances.virtualserver.azure_stack.AzureStackInstance",
"url":122,
"doc":"Class for representing Azure stack instance of the Virtual Server agent Initialize the Instance object for the given Virtual Server instance Args: agent (object)  the instance of the agent class name (str)  the name of the instance iid (int)  the instance id"
},
{
"ref":"cvpysdk.instances.virtualserver.azure_stack.AzureStackInstance.server_host_name",
"url":122,
"doc":"return the associated clients with the instance"
},
{
"ref":"cvpysdk.instances.virtualserver.azure_stack.AzureStackInstance.subscriptionid",
"url":122,
"doc":"returns the subcriptionID of the instance"
},
{
"ref":"cvpysdk.instances.virtualserver.azure_stack.AzureStackInstance.applicationid",
"url":122,
"doc":"returns the applciationID of the instance"
},
{
"ref":"cvpysdk.instances.virtualserver.azure_stack.AzureStackInstance.server_name",
"url":118,
"doc":"returns the PseudoClient Name of the associated isntance"
},
{
"ref":"cvpysdk.instances.virtualserver.azure_stack.AzureStackInstance.associated_clients",
"url":118,
"doc":"Treats the clients associated to this instance as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.azure_stack.AzureStackInstance.co_ordinator",
"url":118,
"doc":"Returns the Co_ordinator of this instance it is read-only attribute"
},
{
"ref":"cvpysdk.instances.virtualserver.azure_stack.AzureStackInstance.frel",
"url":118,
"doc":"Returns the FREL associated at the instance level Returns: string : frel client name Raises: SDKException: if failed to fetch properties if response is empty if response is not success"
},
{
"ref":"cvpysdk.instances.virtualserver.azure_stack.AzureStackInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.azure_stack.AzureStackInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.virtualserver.azure_stack.AzureStackInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.virtualserver.azure_stack.AzureStackInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.azure_stack.AzureStackInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.azure_stack.AzureStackInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.azure_stack.AzureStackInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.azure_stack.AzureStackInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.fusioncompute",
"url":123,
"doc":"File for operating on a Virtual Server Fusion Compute Instance. FusionComputeInstance is the only class defined in this file. FusionComputeInstance: Derived class from VirtualServer Base class, representing a Fusion Compute instance, and to perform operations on that instance HyperVInstance: __init__(agent_object,instance_name,instance_id)  initialize object of FusionCompute Instance object associated with the VirtualServer Instance _get_instance_properties()  VirtualServer Instance class method overwritten to get Fusion Compute Specific instance properties as well _set_instance_properties()  Fusion Compute Instance class method to set Fusion Compute Specific instance properties"
},
{
"ref":"cvpysdk.instances.virtualserver.fusioncompute.FusionComputeInstance",
"url":123,
"doc":"Class for representing a Fusion Compute of the Virtual Server agent. Initialize the Instance object for the given Virtual Server instance. Args: class_object (agent_object,instance_name,instance_id)  instance of the Agent class, instance name, instance id"
},
{
"ref":"cvpysdk.instances.virtualserver.fusioncompute.FusionComputeInstance.server_host_name",
"url":123,
"doc":"return the Fusion compute VRM associated with the PseudoClient"
},
{
"ref":"cvpysdk.instances.virtualserver.fusioncompute.FusionComputeInstance.server_name",
"url":123,
"doc":"getter for the domain name in the vmware vendor json"
},
{
"ref":"cvpysdk.instances.virtualserver.fusioncompute.FusionComputeInstance.associated_clients",
"url":118,
"doc":"Treats the clients associated to this instance as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.fusioncompute.FusionComputeInstance.co_ordinator",
"url":118,
"doc":"Returns the Co_ordinator of this instance it is read-only attribute"
},
{
"ref":"cvpysdk.instances.virtualserver.fusioncompute.FusionComputeInstance.frel",
"url":118,
"doc":"Returns the FREL associated at the instance level Returns: string : frel client name Raises: SDKException: if failed to fetch properties if response is empty if response is not success"
},
{
"ref":"cvpysdk.instances.virtualserver.fusioncompute.FusionComputeInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.fusioncompute.FusionComputeInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.virtualserver.fusioncompute.FusionComputeInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.virtualserver.fusioncompute.FusionComputeInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.fusioncompute.FusionComputeInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.fusioncompute.FusionComputeInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.fusioncompute.FusionComputeInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.fusioncompute.FusionComputeInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.google_cloud_platform",
"url":124,
"doc":"File for operating on a Virtual Server Amazon Instance. GoogleCloudInstance is the only class defined in this file. GoogleCloudInstance: Derived class from VirtualServer Base class, representing a Google Cloud Platform instance, and to perform operations on that instance GoogleCloudInstance: __init__(agent_object,instance_name,instance_id)  initialize object of Google Cloud Platform Instance object associated with the VirtualServer Instance"
},
{
"ref":"cvpysdk.instances.virtualserver.google_cloud_platform.GoogleCloudInstance",
"url":124,
"doc":"Class for representing an Instance of the Virtual Server agent. Initialise the instance object. Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.virtualserver.google_cloud_platform.GoogleCloudInstance.server_name",
"url":124,
"doc":"getter for the domain name in the Google Cloud vendor json"
},
{
"ref":"cvpysdk.instances.virtualserver.google_cloud_platform.GoogleCloudInstance.server_host_name",
"url":124,
"doc":"getter for the domain name in the Google CLoyd vendor json"
},
{
"ref":"cvpysdk.instances.virtualserver.google_cloud_platform.GoogleCloudInstance.associated_clients",
"url":118,
"doc":"Treats the clients associated to this instance as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.google_cloud_platform.GoogleCloudInstance.co_ordinator",
"url":118,
"doc":"Returns the Co_ordinator of this instance it is read-only attribute"
},
{
"ref":"cvpysdk.instances.virtualserver.google_cloud_platform.GoogleCloudInstance.frel",
"url":118,
"doc":"Returns the FREL associated at the instance level Returns: string : frel client name Raises: SDKException: if failed to fetch properties if response is empty if response is not success"
},
{
"ref":"cvpysdk.instances.virtualserver.google_cloud_platform.GoogleCloudInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.google_cloud_platform.GoogleCloudInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.virtualserver.google_cloud_platform.GoogleCloudInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.virtualserver.google_cloud_platform.GoogleCloudInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.google_cloud_platform.GoogleCloudInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.google_cloud_platform.GoogleCloudInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.google_cloud_platform.GoogleCloudInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.google_cloud_platform.GoogleCloudInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.hyperv",
"url":125,
"doc":"File for operating on a Virtual Server Hyper-V Instance. HyperVInstance is the only class defined in this file. HyperVInstance: Derived class from VirtualServer Base class, representing a Hypeer-V instance, and to perform operations on that instance HyperVInstance: __init__(agent_object,instance_name,instance_id)  initialize object of hyper-v Instance object associated with the VirtualServer Instance _get_instance_properties()  VirtualServer Instance class method overwritten to get Hyper-V Specific instance properties as well _set_instance_properties()  Hyper-V Instance class method to set Hyper-V Specific instance properties"
},
{
"ref":"cvpysdk.instances.virtualserver.hyperv.HyperVInstance",
"url":125,
"doc":"Class for representing an Hyper-V of the Virtual Server agent. Initialize the Instance object for the given Virtual Server instance. Args: class_object (agent_object,instance_name,instance_id)  instance of the Agent class, instance name, instance id"
},
{
"ref":"cvpysdk.instances.virtualserver.hyperv.HyperVInstance.server_name",
"url":125,
"doc":"getter for the domain name in the Hyper-V json"
},
{
"ref":"cvpysdk.instances.virtualserver.hyperv.HyperVInstance.server_host_name",
"url":125,
"doc":"getter for the domain name in the vmware vendor json"
},
{
"ref":"cvpysdk.instances.virtualserver.hyperv.HyperVInstance.associated_clients",
"url":118,
"doc":"Treats the clients associated to this instance as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.hyperv.HyperVInstance.co_ordinator",
"url":118,
"doc":"Returns the Co_ordinator of this instance it is read-only attribute"
},
{
"ref":"cvpysdk.instances.virtualserver.hyperv.HyperVInstance.frel",
"url":118,
"doc":"Returns the FREL associated at the instance level Returns: string : frel client name Raises: SDKException: if failed to fetch properties if response is empty if response is not success"
},
{
"ref":"cvpysdk.instances.virtualserver.hyperv.HyperVInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.hyperv.HyperVInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.virtualserver.hyperv.HyperVInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.virtualserver.hyperv.HyperVInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.hyperv.HyperVInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.hyperv.HyperVInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.hyperv.HyperVInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.hyperv.HyperVInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.kubernetes",
"url":126,
"doc":"File for operating on a Virtual Server Kubernetes Instance. KubernetesInstance is the only class defined in this file. KubernetesInstance: Derived class from VirtualServer Base class, representing a Kubernetes instance, and to perform operations on that instance KubernetesInstance: __init__( agent_object, instance_name, instance_id)  initialize object of vmware Instance object associated with the VirtualServer Instance _get_instance_properties()  VirtualServer Instance class method overwritten to get vmware specific instance properties _get_instance_properties_json()  get the all instance(vmware) related properties of this subclient server_host_name()  getter for server hostname server_name()  getter for server name"
},
{
"ref":"cvpysdk.instances.virtualserver.kubernetes.KubernetesInstance",
"url":126,
"doc":"Class for representing VMWare instance of the Virtual Server agent. Initialize the Instance object for the given Virtual Server instance. Args: agent_object (object)  instance of the Agent class instance_name (str)  instance name instance_id (int)  instance id"
},
{
"ref":"cvpysdk.instances.virtualserver.kubernetes.KubernetesInstance.server_host_name",
"url":126,
"doc":"getter for the domain name in the Kubernetes vendor json"
},
{
"ref":"cvpysdk.instances.virtualserver.kubernetes.KubernetesInstance.server_name",
"url":126,
"doc":"getter for the domain name in the Kubernetes vendor json"
},
{
"ref":"cvpysdk.instances.virtualserver.kubernetes.KubernetesInstance.associated_clients",
"url":118,
"doc":"Treats the clients associated to this instance as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.kubernetes.KubernetesInstance.co_ordinator",
"url":118,
"doc":"Returns the Co_ordinator of this instance it is read-only attribute"
},
{
"ref":"cvpysdk.instances.virtualserver.kubernetes.KubernetesInstance.frel",
"url":118,
"doc":"Returns the FREL associated at the instance level Returns: string : frel client name Raises: SDKException: if failed to fetch properties if response is empty if response is not success"
},
{
"ref":"cvpysdk.instances.virtualserver.kubernetes.KubernetesInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.kubernetes.KubernetesInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.virtualserver.kubernetes.KubernetesInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.virtualserver.kubernetes.KubernetesInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.kubernetes.KubernetesInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.kubernetes.KubernetesInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.kubernetes.KubernetesInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.kubernetes.KubernetesInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.null",
"url":127,
"doc":""
},
{
"ref":"cvpysdk.instances.virtualserver.null.NullSubclient",
"url":127,
"doc":"Class for representing an Instance of the Virtual Server agent. Initialise the instance object. Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.virtualserver.null.NullSubclient.server_name",
"url":118,
"doc":"returns the PseudoClient Name of the associated isntance"
},
{
"ref":"cvpysdk.instances.virtualserver.null.NullSubclient.associated_clients",
"url":118,
"doc":"Treats the clients associated to this instance as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.null.NullSubclient.co_ordinator",
"url":118,
"doc":"Returns the Co_ordinator of this instance it is read-only attribute"
},
{
"ref":"cvpysdk.instances.virtualserver.null.NullSubclient.frel",
"url":118,
"doc":"Returns the FREL associated at the instance level Returns: string : frel client name Raises: SDKException: if failed to fetch properties if response is empty if response is not success"
},
{
"ref":"cvpysdk.instances.virtualserver.null.NullSubclient.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.null.NullSubclient.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.virtualserver.null.NullSubclient.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.virtualserver.null.NullSubclient.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.null.NullSubclient.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.null.NullSubclient.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.null.NullSubclient.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.null.NullSubclient.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.nutanix_ahv",
"url":128,
"doc":"File for operating on a Virtual Server Nutanix AHV Instance. nutanixinstance is the only class defined in this file. nutanixinstance: Derived class from VirtualServer Base class, representing a Nutanix AHV instance, and to perform operations on that instance __init__(self, agent,_name,iid)  initialize object of Nutanix AHV Instance object associated with the VirtualServer Instance _get_instance_properties()  VirtualServer Instance class method overwritten to get nutanix AHV Specific instance properties as well _get_instance_properties_json()  get the all instance related properties of this subclient."
},
{
"ref":"cvpysdk.instances.virtualserver.nutanix_ahv.nutanixinstance",
"url":128,
"doc":"Class for representing Nutanix AHV instance of the Virtual Server agent Initialize the Instance object for the given Virtual Server instance Args: agent (object)  the instance of the agent class name (str)  the name of the instance iid (int)  the instance id"
},
{
"ref":"cvpysdk.instances.virtualserver.nutanix_ahv.nutanixinstance.server_host_name",
"url":128,
"doc":"return the associated clients with the instance"
},
{
"ref":"cvpysdk.instances.virtualserver.nutanix_ahv.nutanixinstance.nutanix_cluster",
"url":128,
"doc":"returns the nutanix cluster of the instance"
},
{
"ref":"cvpysdk.instances.virtualserver.nutanix_ahv.nutanixinstance.username",
"url":128,
"doc":"returns the username of the nuatnix cluster"
},
{
"ref":"cvpysdk.instances.virtualserver.nutanix_ahv.nutanixinstance.server_name",
"url":118,
"doc":"returns the PseudoClient Name of the associated isntance"
},
{
"ref":"cvpysdk.instances.virtualserver.nutanix_ahv.nutanixinstance.associated_clients",
"url":118,
"doc":"Treats the clients associated to this instance as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.nutanix_ahv.nutanixinstance.co_ordinator",
"url":118,
"doc":"Returns the Co_ordinator of this instance it is read-only attribute"
},
{
"ref":"cvpysdk.instances.virtualserver.nutanix_ahv.nutanixinstance.frel",
"url":118,
"doc":"Returns the FREL associated at the instance level Returns: string : frel client name Raises: SDKException: if failed to fetch properties if response is empty if response is not success"
},
{
"ref":"cvpysdk.instances.virtualserver.nutanix_ahv.nutanixinstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.nutanix_ahv.nutanixinstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.virtualserver.nutanix_ahv.nutanixinstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.virtualserver.nutanix_ahv.nutanixinstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.nutanix_ahv.nutanixinstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.nutanix_ahv.nutanixinstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.nutanix_ahv.nutanixinstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.nutanix_ahv.nutanixinstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.openstack",
"url":129,
"doc":"File for operating on a Virtual Server VMware Instance. OpenStackinstance is the only class defined in this file. OpenStackInstance: Derived class from VirtualServer Base class, representing a Openstack instance, and to perform operations on that instance OpenStackInstance: __init__( agent_object, instance_name, instance_id)  initialize object of vmware Instance object associated with the VirtualServer Instance _get_instance_properties()  VirtualServer Instance class method overwritten to get openstack specific instance properties _get_instance_properties_json()  get the all instance(vmware) related properties of this subclient"
},
{
"ref":"cvpysdk.instances.virtualserver.openstack.OpenStackInstance",
"url":129,
"doc":"Class for representing VMWare instance of the Virtual Server agent. Initialize the Instance object for the given Virtual Server instance. Args: agent_object (object)  instance of the Agent class instance_name (str)  instance name instance_id (int)  instance id"
},
{
"ref":"cvpysdk.instances.virtualserver.openstack.OpenStackInstance.server_host_name",
"url":129,
"doc":"getter for the domain name in the vmware vendor json"
},
{
"ref":"cvpysdk.instances.virtualserver.openstack.OpenStackInstance.server_name",
"url":129,
"doc":"getter for the domain name in the vmware vendor json"
},
{
"ref":"cvpysdk.instances.virtualserver.openstack.OpenStackInstance.associated_clients",
"url":118,
"doc":"Treats the clients associated to this instance as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.openstack.OpenStackInstance.co_ordinator",
"url":118,
"doc":"Returns the Co_ordinator of this instance it is read-only attribute"
},
{
"ref":"cvpysdk.instances.virtualserver.openstack.OpenStackInstance.frel",
"url":118,
"doc":"Returns the FREL associated at the instance level Returns: string : frel client name Raises: SDKException: if failed to fetch properties if response is empty if response is not success"
},
{
"ref":"cvpysdk.instances.virtualserver.openstack.OpenStackInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.openstack.OpenStackInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.virtualserver.openstack.OpenStackInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.virtualserver.openstack.OpenStackInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.openstack.OpenStackInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.openstack.OpenStackInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.openstack.OpenStackInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.openstack.OpenStackInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.oraclevm",
"url":130,
"doc":"File for operating on a Virtual Server OracleVM Instance. OracleVMInstance is the only class defined in this file. OracleVMInstance: Derived class from VirtualServer Base class, representing a OracleVM instance, and to perform operations on that instance OracleVMInstance: __init__( agent_object, instance_name, instance_id)  initialize object of oraclevm Instance object associated with the VirtualServer Instance _get_instance_properties()  VirtualServer Instance class method overwritten to get oraclevm specific instance properties _get_instance_properties_json()  get the all instance(oraclevm) related properties of this subclient"
},
{
"ref":"cvpysdk.instances.virtualserver.oraclevm.OracleVMInstance",
"url":130,
"doc":"Class for representing VMWare instance of the Virtual Server agent. Initialize the Instance object for the given Virtual Server instance. Args: agent_object (object)  instance of the Agent class instance_name (str)  instance name instance_id (int)  instance id"
},
{
"ref":"cvpysdk.instances.virtualserver.oraclevm.OracleVMInstance.server_host_name",
"url":130,
"doc":"getter for the domain name in the OracleVM vendor json"
},
{
"ref":"cvpysdk.instances.virtualserver.oraclevm.OracleVMInstance.server_name",
"url":130,
"doc":"return the Oracle client associated with the PseudoClient"
},
{
"ref":"cvpysdk.instances.virtualserver.oraclevm.OracleVMInstance.associated_clients",
"url":118,
"doc":"Treats the clients associated to this instance as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.oraclevm.OracleVMInstance.co_ordinator",
"url":118,
"doc":"Returns the Co_ordinator of this instance it is read-only attribute"
},
{
"ref":"cvpysdk.instances.virtualserver.oraclevm.OracleVMInstance.frel",
"url":118,
"doc":"Returns the FREL associated at the instance level Returns: string : frel client name Raises: SDKException: if failed to fetch properties if response is empty if response is not success"
},
{
"ref":"cvpysdk.instances.virtualserver.oraclevm.OracleVMInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.oraclevm.OracleVMInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.virtualserver.oraclevm.OracleVMInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.virtualserver.oraclevm.OracleVMInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.oraclevm.OracleVMInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.oraclevm.OracleVMInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.oraclevm.OracleVMInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.oraclevm.OracleVMInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud",
"url":131,
"doc":"File for operating on a Virtual Server Oracle Cloud Instance. OracleCloudInstance is the only class defined in this file. OracleCloudInstance: Derived class from VirtualServer Base class, representing a Oracle Cloud instance, and to perform operations on that instance OracleCloudInstance: __init__(agent_object,instance_name,instance_id)  initialize object of Oracle Cloud Instance object associated with the VirtualServer Instance _get_instance_properties()  VirtualServer Instance class method overwritten to get Oracle Cloud Specific instance properties as well _set_instance_properties()  Oracle Cloud Instance class method to set Oracle Cloud Specific instance properties"
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud.OracleCloudInstance",
"url":131,
"doc":"Class for representing an Hyper-V of the Virtual Server agent. Initialize the Instance object for the given Virtual Server instance. Args: agent (object)  the instance of the agent class instance_name (str)  the name of the instance instance_id (int)  the instance id"
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud.OracleCloudInstance.server_host_name",
"url":131,
"doc":"return the Oracle Cloud endpoint Returns: _server_host_name (str)  the hostname of the oracle cloud server"
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud.OracleCloudInstance.server_name",
"url":131,
"doc":"returns the list of all associated clients with the instance Returns: _server_name (str)  the list of all proxies associated to the instance"
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud.OracleCloudInstance.instance_username",
"url":131,
"doc":"returns the username of the instance Returns: _username (str)  the user name of the oracle cloud endpoint"
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud.OracleCloudInstance.associated_clients",
"url":118,
"doc":"Treats the clients associated to this instance as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud.OracleCloudInstance.co_ordinator",
"url":118,
"doc":"Returns the Co_ordinator of this instance it is read-only attribute"
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud.OracleCloudInstance.frel",
"url":118,
"doc":"Returns the FREL associated at the instance level Returns: string : frel client name Raises: SDKException: if failed to fetch properties if response is empty if response is not success"
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud.OracleCloudInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud.OracleCloudInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud.OracleCloudInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud.OracleCloudInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud.OracleCloudInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud.OracleCloudInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud.OracleCloudInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud.OracleCloudInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud_infrastructure",
"url":132,
"doc":"File for operating on a Virtual Server VMware Instance. VMwareInstance is the only class defined in this file. VMwareInstance: Derived class from VirtualServer Base class, representing a VMware instance, and to perform operations on that instance VMwareInstance: __init__( agent_object, instance_name, instance_id)  initialize object of vmware Instance object associated with the VirtualServer Instance _get_instance_properties()  VirtualServer Instance class method overwritten to get vmware specific instance properties _get_instance_properties_json()  get the all instance(vmware) related properties of this subclient"
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud_infrastructure.OracleCloudInfrastructureInstance",
"url":132,
"doc":"Class for representing VMWare instance of the Virtual Server agent. Initialize the Instance object for the given Virtual Server instance. Args: agent_object (object)  instance of the Agent class instance_name (str)  instance name instance_id (int)  instance id"
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud_infrastructure.OracleCloudInfrastructureInstance.server_host_name",
"url":132,
"doc":"getter for the domain name in the vmware vendor json"
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud_infrastructure.OracleCloudInfrastructureInstance.server_name",
"url":132,
"doc":"getter for the domain name in the vmware vendor json"
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud_infrastructure.OracleCloudInfrastructureInstance.associated_clients",
"url":118,
"doc":"Treats the clients associated to this instance as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud_infrastructure.OracleCloudInfrastructureInstance.co_ordinator",
"url":118,
"doc":"Returns the Co_ordinator of this instance it is read-only attribute"
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud_infrastructure.OracleCloudInfrastructureInstance.frel",
"url":118,
"doc":"Returns the FREL associated at the instance level Returns: string : frel client name Raises: SDKException: if failed to fetch properties if response is empty if response is not success"
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud_infrastructure.OracleCloudInfrastructureInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud_infrastructure.OracleCloudInfrastructureInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud_infrastructure.OracleCloudInfrastructureInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud_infrastructure.OracleCloudInfrastructureInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud_infrastructure.OracleCloudInfrastructureInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud_infrastructure.OracleCloudInfrastructureInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud_infrastructure.OracleCloudInfrastructureInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.oracle_cloud_infrastructure.OracleCloudInfrastructureInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.red_hat_virtualization",
"url":133,
"doc":"File for operating on a Virtual Server VMware Instance. RhevInstance is the only class defined in this file. RhevInstance: Derived class from VirtualServer Base class, representing a VMware instance, and to perform operations on that instance RhevInstance: __init__( agent_object, instance_name, instance_id)  initialize object of Rhev Instance object associated with the RhevInstance Instance _get_instance_properties()  Rhev Instance class method overwritten to get vmware specific instance properties _get_instance_properties_json()  get the all instance(rhev) related properties of this subclient"
},
{
"ref":"cvpysdk.instances.virtualserver.red_hat_virtualization.RhevInstance",
"url":133,
"doc":"Class for representing RHEV instance of the Virtual Server agent. Initialize the Instance object for the given Virtual Server instance. Args: agent_object (object)  instance of the Agent class instance_name (str)  instance name instance_id (int)  instance id"
},
{
"ref":"cvpysdk.instances.virtualserver.red_hat_virtualization.RhevInstance.server_host_name",
"url":133,
"doc":"getter for the domain name in the vmware vendor json"
},
{
"ref":"cvpysdk.instances.virtualserver.red_hat_virtualization.RhevInstance.server_name",
"url":133,
"doc":"getter for the domain name in the vmware vendor json"
},
{
"ref":"cvpysdk.instances.virtualserver.red_hat_virtualization.RhevInstance.associated_clients",
"url":118,
"doc":"Treats the clients associated to this instance as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.red_hat_virtualization.RhevInstance.co_ordinator",
"url":118,
"doc":"Returns the Co_ordinator of this instance it is read-only attribute"
},
{
"ref":"cvpysdk.instances.virtualserver.red_hat_virtualization.RhevInstance.frel",
"url":118,
"doc":"Returns the FREL associated at the instance level Returns: string : frel client name Raises: SDKException: if failed to fetch properties if response is empty if response is not success"
},
{
"ref":"cvpysdk.instances.virtualserver.red_hat_virtualization.RhevInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.red_hat_virtualization.RhevInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.virtualserver.red_hat_virtualization.RhevInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.virtualserver.red_hat_virtualization.RhevInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.red_hat_virtualization.RhevInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.red_hat_virtualization.RhevInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.red_hat_virtualization.RhevInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.red_hat_virtualization.RhevInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.vcloud_director",
"url":134,
"doc":"File for operating on a Virtual Server Vcloud Instance. vcloudInstance is the only class defined in this file. vcloudInstance: Derived class from VirtualServer Base class, representing a Vcloud instance, and to perform operations on that instance vcloudInstance: __init__( agent_object, instance_name, instance_id)  initialize object of Vcloud Instance object associated with the VirtualServer Instance _get_instance_properties()  VirtualServer Instance class method overwritten to get vcloud specific instance properties _get_instance_properties_json()  get the all instance(vcloud) related properties of this subclient"
},
{
"ref":"cvpysdk.instances.virtualserver.vcloud_director.vcloudInstance",
"url":134,
"doc":"Class for representing VCloud instance of the Virtual Server agent. Initialize the Instance object for the given Virtual Server instance. Args: agent_object (object)  instance of the Agent class instance_name (str)  instance name instance_id (int)  instance id"
},
{
"ref":"cvpysdk.instances.virtualserver.vcloud_director.vcloudInstance.server_host_name",
"url":134,
"doc":"getter for the domain name in the Vcloud vendor json"
},
{
"ref":"cvpysdk.instances.virtualserver.vcloud_director.vcloudInstance.server_name",
"url":134,
"doc":"getter for the domain name in the Vcloud vendor json"
},
{
"ref":"cvpysdk.instances.virtualserver.vcloud_director.vcloudInstance.associated_clients",
"url":118,
"doc":"Treats the clients associated to this instance as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.vcloud_director.vcloudInstance.co_ordinator",
"url":118,
"doc":"Returns the Co_ordinator of this instance it is read-only attribute"
},
{
"ref":"cvpysdk.instances.virtualserver.vcloud_director.vcloudInstance.frel",
"url":118,
"doc":"Returns the FREL associated at the instance level Returns: string : frel client name Raises: SDKException: if failed to fetch properties if response is empty if response is not success"
},
{
"ref":"cvpysdk.instances.virtualserver.vcloud_director.vcloudInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.vcloud_director.vcloudInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.virtualserver.vcloud_director.vcloudInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.virtualserver.vcloud_director.vcloudInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.vcloud_director.vcloudInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.vcloud_director.vcloudInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.vcloud_director.vcloudInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.vcloud_director.vcloudInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.vmware",
"url":135,
"doc":"File for operating on a Virtual Server VMware Instance. VMwareInstance is the only class defined in this file. VMwareInstance: Derived class from VirtualServer Base class, representing a VMware instance, and to perform operations on that instance VMwareInstance: __init__( agent_object, instance_name, instance_id)  initialize object of vmware Instance object associated with the VirtualServer Instance _get_instance_properties()  VirtualServer Instance class method overwritten to get vmware specific instance properties _get_instance_properties_json()  get the all instance(vmware) related properties of this subclient"
},
{
"ref":"cvpysdk.instances.virtualserver.vmware.VMwareInstance",
"url":135,
"doc":"Class for representing VMWare instance of the Virtual Server agent. Initialize the Instance object for the given Virtual Server instance. Args: agent_object (object)  instance of the Agent class instance_name (str)  instance name instance_id (int)  instance id"
},
{
"ref":"cvpysdk.instances.virtualserver.vmware.VMwareInstance.server_host_name",
"url":135,
"doc":"getter for the domain name in the vmware vendor json"
},
{
"ref":"cvpysdk.instances.virtualserver.vmware.VMwareInstance.server_name",
"url":135,
"doc":"getter for the domain name in the vmware vendor json"
},
{
"ref":"cvpysdk.instances.virtualserver.vmware.VMwareInstance.associated_clients",
"url":118,
"doc":"Treats the clients associated to this instance as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.vmware.VMwareInstance.co_ordinator",
"url":118,
"doc":"Returns the Co_ordinator of this instance it is read-only attribute"
},
{
"ref":"cvpysdk.instances.virtualserver.vmware.VMwareInstance.frel",
"url":118,
"doc":"Returns the FREL associated at the instance level Returns: string : frel client name Raises: SDKException: if failed to fetch properties if response is empty if response is not success"
},
{
"ref":"cvpysdk.instances.virtualserver.vmware.VMwareInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.vmware.VMwareInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.virtualserver.vmware.VMwareInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.virtualserver.vmware.VMwareInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.vmware.VMwareInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.vmware.VMwareInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.vmware.VMwareInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.vmware.VMwareInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.xen",
"url":136,
"doc":"File for operating on a Virtual Server Fusion Compute Instance. XenInstance is the only class defined in this file. XenInstance: Derived class from VirtualServer Base class, representing a Fusion Compute instance, and to perform operations on that instance HyperVInstance: __init__(agent_object,instance_name,instance_id)  initialize object of FusionCompute Instance object associated with the VirtualServer Instance _get_instance_properties()  VirtualServer Instance class method overwritten to get Fusion Compute Specific instance properties as well _set_instance_properties()  Fusion Compute Instance class method to set Fusion Compute Specific instance properties"
},
{
"ref":"cvpysdk.instances.virtualserver.xen.Xen",
"url":136,
"doc":"Class for representing an Hyper-V of the Virtual Server agent. Initialize the Instance object for the given Virtual Server instance. Args: class_object (agent_object,instance_name,instance_id)  instance of the Agent class, instance name, instance id"
},
{
"ref":"cvpysdk.instances.virtualserver.xen.Xen.server_host_name",
"url":136,
"doc":"getter for the domain name in the vmware vendor json"
},
{
"ref":"cvpysdk.instances.virtualserver.xen.Xen.server_name",
"url":136,
"doc":"getter for the domain name in the vmware vendor json"
},
{
"ref":"cvpysdk.instances.virtualserver.xen.Xen.associated_clients",
"url":118,
"doc":"Treats the clients associated to this instance as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.xen.Xen.co_ordinator",
"url":118,
"doc":"Returns the Co_ordinator of this instance it is read-only attribute"
},
{
"ref":"cvpysdk.instances.virtualserver.xen.Xen.frel",
"url":118,
"doc":"Returns the FREL associated at the instance level Returns: string : frel client name Raises: SDKException: if failed to fetch properties if response is empty if response is not success"
},
{
"ref":"cvpysdk.instances.virtualserver.xen.Xen.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.xen.Xen.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.virtualserver.xen.Xen.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.virtualserver.xen.Xen.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.xen.Xen.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.virtualserver.xen.Xen.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.xen.Xen.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.virtualserver.xen.Xen.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.vminstance",
"url":137,
"doc":"File for operating on a Virtual Server VMInstance Instance. VMInstance is the only class defined in this file. VMInstance: Derived class from Instance Base class, representing a VMInstance, and to perform operations on that instance VMInstance: __init__( agent_object, instance_name, instance_id)  initialize object of VMInstance object associated with the Instance Instance"
},
{
"ref":"cvpysdk.instances.vminstance.VMInstance",
"url":137,
"doc":"Class for representing VMWare instance of the Virtual Server agent. Initialize the Instance object for the given Virtual Server instance. Args: agent_object (object)  instance of the Agent class instance_name (str)  instance name instance_id (int)  instance id"
},
{
"ref":"cvpysdk.instances.vminstance.VMInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.vminstance.VMInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.vminstance.VMInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.vminstance.VMInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.vminstance.VMInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.vminstance.VMInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.vminstance.VMInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.vminstance.VMInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.instances.vsinstance",
"url":118,
"doc":"File for operating on a Virtual Server Instance. VirualServerInstance is the only class defined in this file. VirtualServerInstance: Derived class from Instance Base class, representing a virtual server instance, and to perform operations on that instance VirtualServerInstance: __new__  Decides which instance object needs to be created __init__  initialise object of vsinstance class associated with the specified agent, instance name and instance id _get_instance_properties()  Instance class method overwritten to add virtual server instance properties as well associated_clients  getter or setter for the associated clients co_ordinator  getter frel  setter or getter for the FREL client To add a new Virtual Instance, create a class in a new module under virtualserver sub package The new module which is created has to named in the following manner: 1. Name the module with the name of the Virtual Server without special characters 2.Spaces alone must be replaced with underscores('_') For eg: The Virtual Server 'Red Hat Virtualization' is named as 'red_hat_virtualization.py' The Virtual Server 'Hyper-V' is named as 'hyperv.py'"
},
{
"ref":"cvpysdk.instances.vsinstance.VirtualServerInstance",
"url":118,
"doc":"Class for representing an Instance of the Virtual Server agent. Initialise the instance object. Args: agent_object (object)  instance of the Agent class instance_name (str)  name of the instance instance_id (str)  id of the instance default: None Returns: object - instance of the Instance class"
},
{
"ref":"cvpysdk.instances.vsinstance.VirtualServerInstance.server_name",
"url":118,
"doc":"returns the PseudoClient Name of the associated isntance"
},
{
"ref":"cvpysdk.instances.vsinstance.VirtualServerInstance.associated_clients",
"url":118,
"doc":"Treats the clients associated to this instance as a read-only attribute."
},
{
"ref":"cvpysdk.instances.vsinstance.VirtualServerInstance.co_ordinator",
"url":118,
"doc":"Returns the Co_ordinator of this instance it is read-only attribute"
},
{
"ref":"cvpysdk.instances.vsinstance.VirtualServerInstance.frel",
"url":118,
"doc":"Returns the FREL associated at the instance level Returns: string : frel client name Raises: SDKException: if failed to fetch properties if response is empty if response is not success"
},
{
"ref":"cvpysdk.instances.vsinstance.VirtualServerInstance.update_properties",
"url":83,
"doc":"Updates the instance properties Args: properties_dict (dict)  instance properties dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.instances.vsinstance.VirtualServerInstance.properties",
"url":83,
"doc":"Returns the instance properties"
},
{
"ref":"cvpysdk.instances.vsinstance.VirtualServerInstance.name",
"url":83,
"doc":"Returns the Instance Display name"
},
{
"ref":"cvpysdk.instances.vsinstance.VirtualServerInstance.instance_id",
"url":83,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.instances.vsinstance.VirtualServerInstance.instance_name",
"url":83,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.instances.vsinstance.VirtualServerInstance.browse",
"url":83,
"doc":"Browses the content of the Instance. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.vsinstance.VirtualServerInstance.find",
"url":83,
"doc":"Searches a file/folder in the backed up content of the instance, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if there are more than one backupsets in the instance Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.instances.vsinstance.VirtualServerInstance.refresh",
"url":83,
"doc":"Refresh the properties of the Instance.",
"func":1
},
{
"ref":"cvpysdk.internetoptions",
"url":138,
"doc":"File for setting internet options InternetOptions: class for setting Internet options in CommServe __init__(Commcell_object)  initialise with object of CommCell __repr__()  returns the string to represent the instance of the InternetOptions class set_internet_gateway_client(clientname)  sets Internet gateway with provided client set_metrics_internet_gateway()  sets metrics server as internet gateway set_no_gateway()  Removes internet gateway set_http_proxy(servername, port) sets HTTP proxy enabled with the provided server name and port disable_http_proxy()  Removes HTTP proxy set_http_authentication(username, pwd)  sets authentication to HTTP proxy disable_http_authentication()  Removes HTTP authentication refresh()  refresh the internet options set_gateway_for_sendlogs  - sets internet gateway for sendlog files"
},
{
"ref":"cvpysdk.internetoptions.InternetOptions",
"url":138,
"doc":"Class for setting Internet options in CommServe"
},
{
"ref":"cvpysdk.internetoptions.InternetOptions.set_internet_gateway_client",
"url":138,
"doc":"set internet gateway with the client name provided. Args: client_name (str): client to be used as internet gateway cloud_metrics (bool): True to enable gateway for cloud metrics private_metrics(bool): True to enable gateway for Private metrics Raises: SDKException: if client doesnt exist in CommServe",
"func":1
},
{
"ref":"cvpysdk.internetoptions.InternetOptions.set_gateway_for_sendlogs",
"url":138,
"doc":"set internet gateway with the client name provided for sendlogs. Args: client_name (str): client to be used as internet gateway Raises: SDKException: if client doesnt exist in CommServe",
"func":1
},
{
"ref":"cvpysdk.internetoptions.InternetOptions.set_metrics_internet_gateway",
"url":138,
"doc":"sets metrics server as internet gateway",
"func":1
},
{
"ref":"cvpysdk.internetoptions.InternetOptions.set_no_gateway",
"url":138,
"doc":"Removes internet gateway",
"func":1
},
{
"ref":"cvpysdk.internetoptions.InternetOptions.set_http_proxy",
"url":138,
"doc":"sets HTTP proxy enabled with the provided server name and port Args: servername (str): hostname or IP of the HTTP proxy server port (int): HTTP proxy server port Raises: SDKException: if proxy server name and port are empty",
"func":1
},
{
"ref":"cvpysdk.internetoptions.InternetOptions.disable_http_proxy",
"url":138,
"doc":"Removes HTTP proxy",
"func":1
},
{
"ref":"cvpysdk.internetoptions.InternetOptions.set_http_authentication",
"url":138,
"doc":"sets authentication to HTTP proxy Args: username: username for proxy server pwd: password for proxy server",
"func":1
},
{
"ref":"cvpysdk.internetoptions.InternetOptions.disable_http_authentication",
"url":138,
"doc":"Removes HTTP authentication",
"func":1
},
{
"ref":"cvpysdk.internetoptions.InternetOptions.refresh",
"url":138,
"doc":"Refresh the Internet Options.",
"func":1
},
{
"ref":"cvpysdk.job",
"url":68,
"doc":"Main file for performing operations on a job. JobController: Class for managing jobs on this commcell JobManagement: Class for performing Job Management operations Job: Class for keeping track of a job and perform various operations on it. JobController       = __init__(commcell_object)  initializes the instance of JobController class associated with the specified commcell __str__()  returns the string representation of the active jobs on this commcell __repr__()  returns the string representation of the object of this class, with the commcell it is associated with _get_jobs_list()  executes the request, and parses and returns the jobs response _get_jobs_request_json( options)  Returns the request json for the jobs request _modify_all_jobs(operation_type=None)  executes a request on the server to suspend/resume/kill all the jobs on the commserver. all_jobs()  returns all the jobs on this commcell active_jobs()  returns the dict of active jobs and their details finished_jobs()  retutns the dict of finished jobs and their details get()  returns the Job class instance for the given job id kill_all_jobs()  Kills all jobs on the commcell resume_all_jobs()  Resumes all jobs on the commcell suspend_all_jobs()  Suspends all jobs on the commcell JobManagement        __init__(commcell_object)  initialise object of the JobManagement class _set_jobmanagement_settings()  sets the jobmanagement settings _refresh()  refresh the job management settings set_general_settings(settings)  sets the general settings of job management set_priority_settings(settings)  sets the priority settings of job management set_restart_settings(settings)  sets the restart settings of job management set_update_settings(settings)  sets the update settings of job management job_priority_precedence  gets the job priority precedence job_priority_precedence(priority_type)  sets the job priority precedence property start_phase_retry_interval  gets the start phase retry interval in (minutes) start_phase_retry_interval(minutes)  sets the start phase retry interval property state_update_interval_for_continuous_data_replicator  gets the start phase retry interval in (minutes) state_update_interval_for_continuous_data_replicator(minutes)  sets the state update interval for continuous data replicator allow_running_jobs_to_complete_past_operation_window  gets the allow running jobs to complete past operation window(True/False) allow_running_jobs_to_complete_past_operation_window(flag)  sets the allow running jobs to complete past operation window job_alive_check_interval_in_minutes  gets the job alive check interval in (minutes) job_alive_check_interval_in_minutes(minutes)  sets the job alive check interval in minutes queue_scheduled_jobs  gets the queue scheduled jobs(True/False) queue_scheduled_jobs(flags)  sets the queue scheduled jobs enable_job_throttle_at_client_level  gets the enable job throttle at client level (True/False) enable_job_throttle_at_client_level(flag)  sets the enable job throttle at client level enable_multiplexing_for_db_agents  gets the enable multiplexing for db agents (True/False) enable_multiplexing_for_db_agents(flag)  sets the enable multiplexing for db agents queue_jobs_if_conflicting_jobs_active  gets the queue jobs if conflicting jobs active (True/False) queue_jobs_if_conflicting_jobs_active(flag)  sets the queue jobs if conflicting jobs active queue_jobs_if_activity_disabled  gets the queue jobs if activity disabled (True/False) queue_jobs_if_activity_disabled(flag)  sets the queue jobs if activity disabled backups_preempts_auxilary_copy  gets the backups preempts auxilary copy (True/False) backups_preempts_auxilary_copy(flag)  sets the backups preempts auxilary copy restore_preempts_other_jobs  gets the restore preempts other jobs (True/False) restore_preempts_other_jobs(flag)  sets the restore preempts other jobs enable_multiplexing_for_oracle  gets the enable multiplexing for oracle (True/False) enable_multiplexing_for_oracle(flag)  sets the enable multiplexing for oracle job_stream_high_water_mark_level  gets the job stream high water mark level job_stream_high_water_mark_level(level)  sets the job stream high water mark level backups_preempts_other_backups  gets the backups preempts other backups (True/False) backups_preempts_other_backups(flag)  sets the backups preempts other backups do_not_start_backups_on_disabled_client  gets the do not start backups on disabled client(True/False) do_not_start_backups_on_disabled_client(flag)  sets the do not start backups on disabled client get_restart_setting(jobtype)  gets the restart settings of a specific jobtype get_priority_setting(jobtype)  gets the priority setting of a specific jobtype get_update_setting(jobtype)  gets the update settings of a specific jobtype get_restart_settings  gets the restart settings of job management get_priority_settings  gets the priority settings of job management get_update_settings  gets the update settings of job management Job  = __init__()  initializes the instance of Job class associated with the specified commcell of job with id: 'job_id' __repr__()  returns the string representation of the object of this class, with the job id it is associated with _is_valid_job()  checks if the job with the given id is a valid job or not _get_job_summary()  gets the summary of the job with the given job id _get_job_details()  gets the details of the job with the given job id _initialize_job_properties() initializes the properties of the job _wait_for_status()  waits for 6 minutes or till the job status is changed to given status, whichever is earlier wait_for_completion()  waits for the job to finish, (job.is_finished  True) is_finished()  checks for the status of the job. Returns True if finished, else False pause()  suspend the job resume()  resumes the job resubmit()  to resubmit the job kill()  kills the job refresh()  refresh the properties of the Job advanced_job_details()  Returns advanced properties for the job get_events()  returns the commserv events for the job get_child_jobs()  Returns the child jobs Job instance Attributes            -  job.is_finished  specifies whether the job is finished or not (True / False)  job.client_name  returns the name of the client, job is running for  job.agent_name  returns the name of the agent, job is running for  job.instance_name  returns the name of the instance, job is running for  job.backupset_name  returns the name of the backupset, job is running for  job.subclient_name  returns the name of the subclient, job is running for  job.status  returns the current status of the job (Completed / Suspended / Waiting /  . / etc.) http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm please refer status section in above doc link for complete list of status available  job.job_id  returns the id of the job  job.job_type  returns the type of the job  job.backup_level  returns the backup level (if applicable), otherwise None  job.start_time  returns the start time of the job  job.end_time  returns the end time of the job  job.delay_reason  reason why the job was delayed  job.pending_reason  reason if job went into pending state  job.phase  returns the current phase of the job  job.summary  returns the dictionary consisting of the full summary of the job  job.attempts  returns the dictionary consisting of the attempt details of the job  job.username  returns the username with which the job started  job.userid  returns the userid with which the job started  job.details  returns the dictionary consisting of the full details of the job  job.num_of_files_transferred  returns the current number of files transferred for the job.  job.state  returns the current state of the job. ErrorRule     = _get_xml_for_rule()  Returns the XML for a given rule's dictionary of key value pairs. add_error_rule()  Add new error rules as well as update existing rules. _modify_job_status_on_errors()  Internally used to enable or disable job status on errors. enable()  Enable an error rule for a specific iDA using _modify_job_status_on_errors. disable()  Disable an error rule for a specific iDA using _modify_job_status_on_errors."
},
{
"ref":"cvpysdk.job.JobController",
"url":68,
"doc":"Class for controlling all the jobs associated with the commcell. Initialize instance of the JobController class to get the details of Commcell Jobs. Args: commcell_object (object)  instance of Commcell class to get the jobs of Returns: None"
},
{
"ref":"cvpysdk.job.JobController.all_jobs",
"url":68,
"doc":"Returns the dict consisting of all the jobs executed on the Commcell within the number of hours specified in lookup time value. Args: client_name (str)  name of the client to filter out the jobs for default: None, get all the jobs lookup_time (int)  get all the jobs executed within the number of hours default: 5 Hours job_filter (str)  type of jobs to filter for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available default: None options (dict)  dict of key-word arguments Available Options: limit (int)  total number of jobs list that are to be returned default: 20 offset (int)  value from which starting job to be returned is counted default: 0 show_aged_job (bool)  boolean specifying whether to include aged jobs in the result or not default: False hide_admin_jobs (bool)  boolean specifying whether to exclude admin jobs from the result or not default: False clients_list (list)  list of clients to return the jobs for default: [] job_type_list (list)  list of job operation types default: [] job_summary (str)  To return the basic job summary or full job summary default: basic accepted values: ['basic', 'full'] Returns: dict - dictionary consisting of the job IDs matching the given criteria as the key, and their details as its value Raises: SDKException: if client name is given, and no client exists with the given name",
"func":1
},
{
"ref":"cvpysdk.job.JobController.active_jobs",
"url":68,
"doc":"Returns the dict consisting of all the active jobs currently being executed on the Commcell within the number of hours specified in lookup time value. Args: client_name (str)  name of the client to filter out the jobs for default: None, get all the jobs lookup_time (int)  get all the jobs executed within the number of hours default: 1 Hour(s) job_filter (str)  type of jobs to filter for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available default: None options (dict)  dict of key-word arguments Available Options: limit (int)  total number of jobs list that are to be returned default: 20 offset (int)  value from which starting job to be returned is counted default: 0 show_aged_job (bool)  boolean specifying whether to include aged jobs in the result or not default: False hide_admin_jobs (bool)  boolean specifying whether to exclude admin jobs from the result or not default: False clients_list (list)  list of clients to return the jobs for default: [] job_type_list (list)  list of job operation types default: [] job_summary (str)  To return the basic job summary or full job summary default: basic accepted values: ['basic', 'full'] entity (dict)  dict containing entity details to which associated jobs has to be fetched Example : To fetch job details of particular data source id \"entity\": { \"dataSourceId\": 2575 } Returns: dict - dictionary consisting of the job IDs matching the given criteria as the key, and their details as its value Raises: SDKException: if client name is given, and no client exists with the given name",
"func":1
},
{
"ref":"cvpysdk.job.JobController.finished_jobs",
"url":68,
"doc":"Returns the dict consisting of all the finished jobs on the Commcell within the number of hours specified in lookup time value. Args: client_name (str)  name of the client to filter out the jobs for default: None, get all the jobs ir-respective of client lookup_time (int)  get all the jobs executed within the number of hours default: 24 Hours job_filter (str)  type of jobs to filter for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available default: None options (dict)  dict of key-word arguments Available Options: limit (int)  total number of jobs list that are to be returned default: 20 offset (int)  value from which starting job to be returned is counted default: 0 show_aged_job (bool)  boolean specifying whether to include aged jobs in the result or not default: False hide_admin_jobs (bool)  boolean specifying whether to exclude admin jobs from the result or not default: False clients_list (list)  list of clients to return the jobs for default: [] job_type_list (list)  list of job operation types default: [] job_summary (str)  To return the basic job summary or full job summary default: basic accepted values: ['basic', 'full'] entity (dict)  dict containing entity details to which associated jobs has to be fetched Example : To fetch job details of particular data source id \"entity\": { \"dataSourceId\": 2575 } Returns: dict - dictionary consisting of the job IDs matching the given criteria as the key, and their details as its value Raises: SDKException: if client name is given, and no client exists with the given name",
"func":1
},
{
"ref":"cvpysdk.job.JobController.suspend_all_jobs",
"url":68,
"doc":"Suspends all the jobs on the commserver",
"func":1
},
{
"ref":"cvpysdk.job.JobController.resume_all_jobs",
"url":68,
"doc":"Resumes all the jobs on the commserver",
"func":1
},
{
"ref":"cvpysdk.job.JobController.kill_all_jobs",
"url":68,
"doc":"Kills all the jobs on the commserver",
"func":1
},
{
"ref":"cvpysdk.job.JobController.get",
"url":68,
"doc":"Returns the job object for the given job id. Args: job_id (int)  id of the job to create Job class instance for Returns: object - Job class object for the given job id Raises: SDKException: if no job with specified job id exists",
"func":1
},
{
"ref":"cvpysdk.job.JobManagement",
"url":68,
"doc":"Class for performing job management operations. Initialize instance of JobManagement class for performing operations on jon management settings. Args: commcell_object (object)  instance of Commcell class. Returns: None"
},
{
"ref":"cvpysdk.job.JobManagement.error_rules",
"url":68,
"doc":""
},
{
"ref":"cvpysdk.job.JobManagement.refresh",
"url":68,
"doc":"calls the private method _get_jobmanagement_settings()",
"func":1
},
{
"ref":"cvpysdk.job.JobManagement.set_general_settings",
"url":68,
"doc":"sets general settings of job management. Note : dedicated setters and getters are provided for general settings. Args: settings (dict)  Following key/value pairs can be set. { \"allowRunningJobsToCompletePastOperationWindow\": False, \"jobAliveCheckIntervalInMinutes\": 5, \"queueScheduledJobs\": False, \"enableJobThrottleAtClientLevel\": False, \"enableMultiplexingForDBAgents\": False, \"queueJobsIfConflictingJobsActive\": False, \"queueJobsIfActivityDisabled\": False, \"backupsPreemptsAuxilaryCopy\": False, \"restorePreemptsOtherJobs\": False, \"enableMultiplexingForOracle\": False, \"jobStreamHighWaterMarkLevel\": 500, \"backupsPreemptsOtherBackups\": False, \"doNotStartBackupsOnDisabledClient\": False } Returns: None Raises: SDKException: if input is not valid type",
"func":1
},
{
"ref":"cvpysdk.job.JobManagement.set_priority_settings",
"url":68,
"doc":"sets priority settings for jobs and agents type. Args: settings (list)  list of dictionaries with following format. [ { \"type_of_operation\": 1, \"combinedPriority\": 10, \"jobTypeName\": \"Information Management\" }, { \"type_of_operation\": 2, \"combinedPriority\": 10, \"appTypeName\": \"Windows File System\" }, { \"type_of_operation\": 1, \"combinedPriority\": 10, \"jobTypeName\": \"Auxiliary Copy\" } ] We have priority settings fro jobtype and agenttype NOTE : for setting, priority for jobtype the 'type_of_operation' must be set to 1 and name of the job type must be specified as below format. ex :- \"jobTypeName\": \"Information Management\" NOTE : for setting, priority for agenttype the 'type_of_operation' must be set to 2 and name of the job type must be specified as below format ex :- \"appTypeName\": \"Windows File System\" Returns: None Raises: SDKException: if input is not valid type",
"func":1
},
{
"ref":"cvpysdk.job.JobManagement.set_restart_settings",
"url":68,
"doc":"sets restart settings for jobs. Args: settings (list)  list of dictionaries with following format [ { \"killRunningJobWhenTotalRunningTimeExpires\": False, \"maxRestarts\": 10, \"enableTotalRunningTime\": False, \"restartable\": False, \"jobTypeName\": \"File System and Indexing Based (Data Protection)\", \"restartIntervalInMinutes\": 20, \"preemptable\": True, \"totalRunningTime\": 21600, \"jobType\": 6 }, { \"killRunningJobWhenTotalRunningTimeExpires\": False, \"maxRestarts\": 144, \"enableTotalRunningTime\": False, \"restartable\": False, \"jobTypeName\": \"File System and Indexing Based (Data Recovery)\", \"restartIntervalInMinutes\": 20, \"preemptable\": False, \"totalRunningTime\": 21600, \"jobType\": 7 } ] Returns: None Raises: SDKException: if input is not valid type",
"func":1
},
{
"ref":"cvpysdk.job.JobManagement.set_update_settings",
"url":68,
"doc":"sets update settings for jobs Args: settings (list)  list of dictionaries with following format [ { \"appTypeName\": \"Windows File System\", \"recoveryTimeInMinutes\": 20, \"protectionTimeInMinutes\": 20 }, { \"appTypeName\": \"Windows XP 64-bit File System\", \"recoveryTimeInMinutes\": 20, \"protectionTimeInMinutes\": 20, } ] Returns: None Raises: SDKException: if input is not valid type",
"func":1
},
{
"ref":"cvpysdk.job.JobManagement.job_priority_precedence",
"url":68,
"doc":"gets the job priority precedence Returns: (str)  type of job priority precedence is set."
},
{
"ref":"cvpysdk.job.JobManagement.start_phase_retry_interval",
"url":68,
"doc":"gets the start phase retry interval in (minutes) Returns: (int)  interval in minutes."
},
{
"ref":"cvpysdk.job.JobManagement.state_update_interval_for_continuous_data_replicator",
"url":68,
"doc":"gets the state update interval for continuous data replicator in (minutes) Returns: (int)  interval in minutes"
},
{
"ref":"cvpysdk.job.JobManagement.allow_running_jobs_to_complete_past_operation_window",
"url":68,
"doc":"Returns True if option is enabled else returns false"
},
{
"ref":"cvpysdk.job.JobManagement.job_alive_check_interval_in_minutes",
"url":68,
"doc":"gets the job alive check interval in (minutes) Returns: (int)  interval in minutes"
},
{
"ref":"cvpysdk.job.JobManagement.queue_scheduled_jobs",
"url":68,
"doc":"Returns True if option is enabled else returns false"
},
{
"ref":"cvpysdk.job.JobManagement.enable_job_throttle_at_client_level",
"url":68,
"doc":"Returns True if option is enabled else returns false"
},
{
"ref":"cvpysdk.job.JobManagement.enable_multiplexing_for_db_agents",
"url":68,
"doc":"Returns True if option is enabled else returns False"
},
{
"ref":"cvpysdk.job.JobManagement.queue_jobs_if_conflicting_jobs_active",
"url":68,
"doc":"Returns True if option is enabled else returns false"
},
{
"ref":"cvpysdk.job.JobManagement.queue_jobs_if_activity_disabled",
"url":68,
"doc":"Returns True if option is enabled else returns False"
},
{
"ref":"cvpysdk.job.JobManagement.backups_preempts_auxilary_copy",
"url":68,
"doc":"Returns True if option is enabled else returns False"
},
{
"ref":"cvpysdk.job.JobManagement.restore_preempts_other_jobs",
"url":68,
"doc":"Returns True if option is enabled else returns False"
},
{
"ref":"cvpysdk.job.JobManagement.enable_multiplexing_for_oracle",
"url":68,
"doc":"Returns True if option is enabled else returns False"
},
{
"ref":"cvpysdk.job.JobManagement.job_stream_high_water_mark_level",
"url":68,
"doc":"gets the job stream high water mark level"
},
{
"ref":"cvpysdk.job.JobManagement.backups_preempts_other_backups",
"url":68,
"doc":"Returns True if option is enabled else returns False"
},
{
"ref":"cvpysdk.job.JobManagement.do_not_start_backups_on_disabled_client",
"url":68,
"doc":"Returns True if option is enabled else returns False"
},
{
"ref":"cvpysdk.job.JobManagement.get_restart_setting",
"url":68,
"doc":"restart settings associated to particular jobtype can be obtained Args: jobtype (str)  settings of the jobtype to get Available jobtypes: \"Disaster Recovery backup\" \"Auxiliary Copy\" \"Data Aging\" \"Download/Copy Updates\" \"Offline Content Indexing\" \"Information Management\" \"File System and Indexing Based (Data Protection)\" \"File System and Indexing Based (Data Recovery)\" \"Exchange DB (Data Protection)\" \"Exchange DB (Data Recovery)\" \"Informix DB (Data Protection)\" \"Informix DB (Data Recovery)\" \"Lotus Notes DB (Data Protection)\" \"Lotus Notes DB (Data Recovery)\" \"Oracle DB (Data Protection)\" \"Oracle DB (Data Recovery)\" \"SQL DB (Data Protection)\" \"SQL DB (Data Recovery)\" \"MYSQL (Data Protection)\"  \"MYSQL (Data Recovery)\" \"Sybase DB (Data Protection)\" \"Sybase DB (Data Recovery)\" \"DB2 (Data Protection)\" \"DB2 (Data Recovery)\" \"CDR (Data Management)\" \"Media Refresh\" \"Documentum (Data Protection)\" \"Documentum (Data Recovery)\" \"SAP for Oracle (Data Protection)\" \"SAP for Oracle (Data Recovery)\" \"PostgreSQL (Data Protection)\" \"PostgreSQL (Data Recovery)\" \"Other (Data Protection)\" \"Other (Data Recovery)\" \"Workflow\" \"DeDup DB Reconstruction\" \"CommCell Migration Export\" \"CommCell Migration Import\" \"Install Software\" \"Uninstall Software\" \"Data Verification\" \"Big Data Apps (Data Protection)\" \"Big Data Apps (Data Recovery)\" \"Cloud Apps (Data Protection)\" \"Cloud Apps (Data Recovery)\" \"Virtual Server (Data Protection)\" \"Virtual Server (Data Recovery)\" \"SAP for Hana (Data Protection)\" \"SAP for Hana (Data Recovery)\" Returns: dict  settings of the specific job type as follows { \"jobTypeName\": \"File System and Indexing Based (Data Protection)\", \"restartable\": true, \"maxRestarts\": 10, \"restartIntervalInMinutes\": 20, \"enableTotalRunningTime\": false, \"totalRunningTime\": 25200, \"killRunningJobWhenTotalRunningTimeExpires\": false, \"preemptable\": true, } Raises: SDKException: if input is not valid type",
"func":1
},
{
"ref":"cvpysdk.job.JobManagement.get_priority_setting",
"url":68,
"doc":"priority settings associated to particular jobtype can be obtained Args: jobtype (str)  settings of jobtype to get Available values: jobtypename: \"Information Management\" \"Auxiliary Copy\" \"Media Refresh\" \"Data Verification\" \"Persistent Recovery\" \"Synth Full\" apptypename: \"Windows File System\" \"Windows XP 64-bit File System\" \"Windows 2003 32-bit File System\" \"Windows 2003 64-bit File System\" \"Active Directory\" \"Windows File Archiver\" \"File Share Archiver\" \"Image Level\" \"Exchange Mailbox (Classic)\" \"Exchange Mailbox Archiver\" \"Exchange Compliance Archiver\" \"Exchange Public Folder\" \"Exchange Database\" \"SharePoint Database\" \"SharePoint Server Database\" \"SharePoint Document\" \"SharePoint Server\" \"Novell Directory Services\" \"GroupWise DB\" \"NDMP\" \"Notes Document\" \"Unix Notes Database\" \"MAC FileSystem\" \"Big Data Apps\" \"Solaris File System\" \"Solaris 64bit File System\" \"FreeBSD\" \"HP-UX File System\" \"HP-UX 64bit File System\" \"AIX File System\" \"Unix Tru64 64-bit File System\" \"Linux File System\" \"Sybase Database\" \"Oracle Database\" \"Oracle RAC\" \"Informix Database\" \"DB2\" \"DB2 on Unix\" \"SAP for Oracle\" \"SAP for MAX DB\" \"ProxyHost on Unix\" \"ProxyHost\" \"Image Level On Unix\" \"OSSV Plug-in on Windows\" \"OSSV Plug-in on Unix\" \"Unix File Archiver\" \"SQL Server\" \"Data Classification\" \"OES File System on Linux\" \"Centera\" \"Exchange PF Archiver\" \"Domino Mailbox Archiver\" \"MS SharePoint Archiver\" \"Content Indexing Agent\" \"SRM Agent For Windows File Systems\" \"SRM Agent For UNIX File Systems\" \"DB2 MultiNode\" \"MySQL\" \"Virtual Server\" \"SharePoint Search Connector\" \"Object Link\" \"PostgreSQL\" \"Sybase IQ\" \"External Data Connector\" \"Documentum\" \"Object Store\" \"SAP HANA\" \"Cloud Apps\" \"Exchange Mailbox\" Returns: dict  settings of a specific jobtype ex: { \"jobTypeName\": \"Information Management\", \"combinedPriority\": 0, \"type_of_operation\": 1 } or settings of a specific apptype ex: { \"appTypeName\": \"Windows File System\", \"combinedPriority\": 6, \"type_of_operation\": 2 } Raises: SDKException: if input is not valid type",
"func":1
},
{
"ref":"cvpysdk.job.JobManagement.get_update_setting",
"url":68,
"doc":"update settings associated to particular jobtype can be obtained Args: jobtype (str)  settings of jobtype to get Available jobtype Check get_priority_setting(self, jobtype) method documentation. Returns: dict - settings of a jobtype { \"appTypeName\": \"Windows File System\", \"recoveryTimeInMinutes\": 20, \"protectionTimeInMinutes\": 20 } Raises: SDKException: if input is not valid type",
"func":1
},
{
"ref":"cvpysdk.job.JobManagement.general_settings",
"url":68,
"doc":"gets the general settings. Returns: (dict)  The general settings"
},
{
"ref":"cvpysdk.job.JobManagement.restart_settings",
"url":68,
"doc":"gets the restart settings. Returns: (dict)  The restart settings."
},
{
"ref":"cvpysdk.job.JobManagement.priority_settings",
"url":68,
"doc":"gets the priority settings. Returns: (dict)  The priority settings."
},
{
"ref":"cvpysdk.job.JobManagement.update_settings",
"url":68,
"doc":"gets the update settings. Returns: (dict)  The update settings."
},
{
"ref":"cvpysdk.job.JobManagement.set_job_error_threshold",
"url":68,
"doc":"Args: error_threshold_dict (dict) : A dictionary of following key/value pairs can be set. Returns: None",
"func":1
},
{
"ref":"cvpysdk.job.Job",
"url":68,
"doc":"Class for performing client operations for a specific client. Initialise the Job class instance. Args: commcell_object (object)  instance of the Commcell class job_id (str / int)  id of the job Returns: object - instance of the Job class Raises: SDKException: if job id is not an integer if job is not a valid job, i.e., does not exist in the Commcell"
},
{
"ref":"cvpysdk.job.Job.wait_for_completion",
"url":68,
"doc":"Waits till the job is not finished; i.e.; till the value of job.is_finished is not True. Kills the job and exits, if the job has been in Pending / Waiting state for more than the timeout value. In case of job failure job status and failure reason can be obtained using status and delay_reason property Args: timeout (int)  minutes after which the job should be killed and exited, if the job has been in Pending / Waiting state default: 30  kwargs (str)  accepted optional arguments return_timeout (int)  minutes after which the method will return False. Returns: bool - boolean specifying whether the job had finished or not True - if the job had finished successfully False - if the job was killed/failed",
"func":1
},
{
"ref":"cvpysdk.job.Job.is_finished",
"url":68,
"doc":"Checks whether the job has finished or not. Returns: bool - boolean that represents whether the job has finished or not"
},
{
"ref":"cvpysdk.job.Job.client_name",
"url":68,
"doc":"Treats the client name as a read-only attribute."
},
{
"ref":"cvpysdk.job.Job.agent_name",
"url":68,
"doc":"Treats the agent name as a read-only attribute."
},
{
"ref":"cvpysdk.job.Job.instance_name",
"url":68,
"doc":"Treats the instance name as a read-only attribute."
},
{
"ref":"cvpysdk.job.Job.backupset_name",
"url":68,
"doc":"Treats the backupset name as a read-only attribute."
},
{
"ref":"cvpysdk.job.Job.subclient_name",
"url":68,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.job.Job.status",
"url":68,
"doc":"Treats the job status as a read-only attribute. http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm please refer status section in above doc link for complete list of status available"
},
{
"ref":"cvpysdk.job.Job.job_id",
"url":68,
"doc":"Treats the job id as a read-only attribute."
},
{
"ref":"cvpysdk.job.Job.job_type",
"url":68,
"doc":"Treats the job type as a read-only attribute."
},
{
"ref":"cvpysdk.job.Job.backup_level",
"url":68,
"doc":"Treats the backup level as a read-only attribute."
},
{
"ref":"cvpysdk.job.Job.start_time",
"url":68,
"doc":"Treats the start time as a read-only attribute."
},
{
"ref":"cvpysdk.job.Job.start_timestamp",
"url":68,
"doc":"Treats the unix start time as a read-only attribute."
},
{
"ref":"cvpysdk.job.Job.end_timestamp",
"url":68,
"doc":"Treats the unix end time as a read-only attribute"
},
{
"ref":"cvpysdk.job.Job.end_time",
"url":68,
"doc":"Treats the end time as a read-only attribute."
},
{
"ref":"cvpysdk.job.Job.delay_reason",
"url":68,
"doc":"Treats the job delay reason as a read-only attribute."
},
{
"ref":"cvpysdk.job.Job.pending_reason",
"url":68,
"doc":"Treats the job pending reason as a read-only attribute."
},
{
"ref":"cvpysdk.job.Job.phase",
"url":68,
"doc":"Treats the job current phase as a read-only attribute."
},
{
"ref":"cvpysdk.job.Job.attempts",
"url":68,
"doc":"Returns job attempts data as read-only attribute"
},
{
"ref":"cvpysdk.job.Job.summary",
"url":68,
"doc":"Treats the job full summary as a read-only attribute."
},
{
"ref":"cvpysdk.job.Job.username",
"url":68,
"doc":"Treats the username as a read-only attribute."
},
{
"ref":"cvpysdk.job.Job.userid",
"url":68,
"doc":"Treats the userid as a read-only attribute."
},
{
"ref":"cvpysdk.job.Job.details",
"url":68,
"doc":"Treats the job full details as a read-only attribute."
},
{
"ref":"cvpysdk.job.Job.size_of_application",
"url":68,
"doc":"Treats the size of application as a read-only attribute."
},
{
"ref":"cvpysdk.job.Job.media_size",
"url":68,
"doc":"Treats the size of media as a read-only attribute Returns: integer - size of media or data written"
},
{
"ref":"cvpysdk.job.Job.num_of_files_transferred",
"url":68,
"doc":"Treats the number of files transferred as a read-only attribute."
},
{
"ref":"cvpysdk.job.Job.state",
"url":68,
"doc":"Treats the job state as a read-only attribute."
},
{
"ref":"cvpysdk.job.Job.task_details",
"url":68,
"doc":"Returns: (dict) A dictionary of job task details"
},
{
"ref":"cvpysdk.job.Job.pause",
"url":68,
"doc":"Suspends the job. Args: wait_for_job_to_pause (bool)  wait till job status is changed to Suspended default: False Raises: SDKException: if failed to suspend job if response is not success",
"func":1
},
{
"ref":"cvpysdk.job.Job.resume",
"url":68,
"doc":"Resumes the job. Args: wait_for_job_to_resume (bool)  wait till job status is changed to Running default: False Raises: SDKException: if failed to resume job if response is not success",
"func":1
},
{
"ref":"cvpysdk.job.Job.resubmit",
"url":68,
"doc":"Resubmits the job Args: start_suspended (bool) - whether to start the new job in suspended state or not default: None, the new job starts same as this job started Returns: object - Job class object for the given job id Raises: SDKException: if job is already running if response is not success",
"func":1
},
{
"ref":"cvpysdk.job.Job.kill",
"url":68,
"doc":"Kills the job. Args: wait_for_job_to_kill (bool)  wait till job status is changed to Killed default: False Raises: SDKException: if failed to kill job if response is not success",
"func":1
},
{
"ref":"cvpysdk.job.Job.refresh",
"url":68,
"doc":"Refresh the properties of the Job.",
"func":1
},
{
"ref":"cvpysdk.job.Job.advanced_job_details",
"url":68,
"doc":"Returns advanced properties for the job Args: infoType (object)  job detail type to be passed from AdvancedJobDetailType enum from the constants Returns: dict - dictionary with advanced details of the job info type given Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.job.Job.get_events",
"url":68,
"doc":"gets the commserv events associated with this job Args: None Returns: list - list of job events Example : [ { \"severity\": 3, \"eventCode\": \"318769020\", \"jobId\": 4547, \"acknowledge\": 0, \"eventCodeString\": \"19:1916\", \"subsystem\": \"JobManager\", \"description\": \"Data Analytics operation has completed with one or more errors.\", \"id\": 25245, \"timeSource\": 1600919001, \"type\": 0, \"clientEntity\": { \"clientId\": 2, \"clientName\": \"xyz\", \"displayName\": \"xyz\" } }, { \"severity\": 6, \"eventCode\": \"318767961\", \"jobId\": 4547, \"acknowledge\": 0, \"eventCodeString\": \"19:857\", \"subsystem\": \"clBackup\", \"description\": \"Failed to send some items to Index Engine\", \"id\": 25244, \"timeSource\": 1600918999, \"type\": 0, \"clientEntity\": { \"clientId\": 33, \"clientName\": \"xyz\", \"displayName\": \"xyz\" } } ]",
"func":1
},
{
"ref":"cvpysdk.job.Job.get_vm_list",
"url":68,
"doc":"Gets the list of all VMs associated to the job Returns: list of VM dictionaries VM: { \"Size\":0, \"AverageThroughput\":0, \"UsedSpace\":0, \"ArchivedByCurrentJob\":false, \"jobID\":0, \"CBTStatus\": , \"BackupType\":0, \"totalFiles\":0, \"Status\":2, \"CurrentThroughput\":0, \"Agent\":\"proxy\", \"lastSyncedBkpJob\":0, \"GUID\":\"live sync pair guid\", \"HardwareVersion\":\"vm h/w\", \"restoredSize\":1361912, \"FailureReason\": , \"BackupStartTime\":0, \"TransportMode\":\"nbd\", \"projectId\": , \"syncStatus\":3, \"PoweredOffSince\":0, \"OperatingSystem\":\"Microsoft Windows Server 2012 (64-bit)\", \"backupLevel\":0, \"destinationVMName\":\"drvm1\", \"successfulCIedFiles\":0, \"GuestSize\":0, \"failedCIedFiles\":0, \"vmName\":\"vm1\", \"ToolsVersion\":\"Not running\", \"clientId\":3280, \"Host\":\"1.1.1.1\", \"StubStatus\":0, \"BackupEndTime\":0, \"PoweredOffByCurrentJob\":false }",
"func":1
},
{
"ref":"cvpysdk.job.Job.get_child_jobs",
"url":68,
"doc":"Get the child jobs details for the current job Returns: _jobs_list (list): List of child jobs",
"func":1
},
{
"ref":"cvpysdk.key_management_server",
"url":139,
"doc":"Main file for performing Key Management Server operations on commcell This file has all the classes related to Key Management Server operations. KeyManagementServerConstants  Abstract class to define the key management server related constancts KeyManagementServers  Class for representing all the KMS in the commcell. KeyManagementServer  Class for representing a single KMS in the commcell. KeyManagementServerConstants Attributes                    =  _KMS_TYPE  dictionary of key management server types  _KMS_AUTHENTICATION_TYPE  dictionary of key management server authentication KeyManagementServers Attributes               _kms_dict  a name-indexed dictionary of KeyManagementServer objects KeyManagementServers:         = __init__()  initializes KeyManagementServers class object _get_kms_dict()  fetches the dictionary of all Key Management Servers get()  gets a specific Key Management Server object get_all_kms()  gets the dictionary of all Key Management Servers refresh()  refreshes the dictionary of Key Management Servers delete()  deletes a Key Management Server has_kms()  checks if the Key Management Server exists or not add_aws_kms()  configures AWS Key Management Server with key based authentication _add_aws_kms_with_cred_file()  configures AWS KMS with credential file based authentication _add_aws_kms_with_iam()  configures AWS KMS with IAM based authentication _add_azure_key_vault_certificate_auth()  Configure Azure Key Management Server with AD-app certificate based authentication _add_azure_key_vault_iam_auth()  Configure Azure Key Management Server with IAM managed identity based authentication _add_kmip_certificate()  Configure KMIP supported Key Management Server with certificate based authentication _kms_api_call()  call KMS API KeyManagementServer:         = __init__()  initializes KeyManagementServer class object _get_name_from_type()  returns the type name for type id KeyManagementServer Attributes               name  name of the Key Management Server  id  id of the Key Management Server  type_id  type id of the Key Management Server  type_name  type name of the Key Management Server"
},
{
"ref":"cvpysdk.key_management_server.KeyManagementServerConstants",
"url":139,
"doc":"Helper class that provides a standard way to create an ABC using inheritance."
},
{
"ref":"cvpysdk.key_management_server.KeyManagementServers",
"url":139,
"doc":"Class for representing all the KMS in the commcell. Initializes KeyManagementServers class object Args: commcell (object)  instance of commcell"
},
{
"ref":"cvpysdk.key_management_server.KeyManagementServers.get",
"url":139,
"doc":"Gets a specific Key Management Server object Args: kms_name (str)  The Key Management Server to get Returns: kms (object)  The KeyManagementServer object Raises SDKException: If kms_name is not str If Key Management Server not found",
"func":1
},
{
"ref":"cvpysdk.key_management_server.KeyManagementServers.get_all_kms",
"url":139,
"doc":"Gets the name-indexed dictionary of all Key Management Servers Returns: the name-indexed dictionary of Key Management Server info { name1: { name: name1, id: id1, type_id: type_id1, },  . }",
"func":1
},
{
"ref":"cvpysdk.key_management_server.KeyManagementServers.refresh",
"url":139,
"doc":"Refreshes the dictionary of Key Management Servers",
"func":1
},
{
"ref":"cvpysdk.key_management_server.KeyManagementServers.delete",
"url":139,
"doc":"Deletes a Key Management Server Args: kms_name (string)  name of the Key Management Server Raises SDKException: If API response code is not successfull If response JSON is empty If errorCode is not part of the response JSON",
"func":1
},
{
"ref":"cvpysdk.key_management_server.KeyManagementServers.has_kms",
"url":139,
"doc":"Check if the Key Management Server exist or not Args: kms_name (str)  name of the Key Management Server Returns: result (bool)  whether Key Management Server exists or not Raises SDKException: If kms_name is not string",
"func":1
},
{
"ref":"cvpysdk.key_management_server.KeyManagementServers.add",
"url":139,
"doc":"Method to add Key Management Server Args: kms_details (dictionary)  dictionary with KMS details input dictionary for creating AWS KMS without access node ( key based authentication ) kms_details = { \"KEY_PROVIDER_TYPE\": \"KEY_PROVIDER_AWS_KMS\", \"KMS_NAME\": \"KMS1\" , \"AWS_ACCESS_KEY\": , \"AWS_SECRET_KEY\":  , \"AWS_REGION_NAME\": \"Asia Pacific (Mumbai)\",  Optional Value. Default is \"Asia Pacific (Mumbai)\" \"KEY_PROVIDER_AUTH_TYPE\": \"AWS_KEYS\" } input dictionary for creating AWS KMS with access node ( key based authentication ) kms_details = { \"KEY_PROVIDER_TYPE\": \"KEY_PROVIDER_AWS_KMS\", \"AWS_REGION_NAME\": \"US East (Ohio)\",  Optional Value. Default is \"Asia Pacific (Mumbai)\" \"ACCESS_NODE_NAME\":  , \"KMS_NAME\":  , \"KEY_PROVIDER_AUTH_TYPE\":  , \"AWS_ACCESS_KEY\":  , \"AWS_SECRET_KEY\":   Base64 encoded } input dictionary for creating AWS KMS with access node ( key based authentication ) and by enabling Bring Your Own Key. kms_details = { \"KEY_PROVIDER_TYPE\": \"KEY_PROVIDER_AWS_KMS\", \"AWS_REGION_NAME\": \"US East (Ohio)\",  Optional Value. Default is \"Asia Pacific (Mumbai)\" \"ACCESS_NODE_NAME\":  , \"KMS_NAME\":  , \"KEY_PROVIDER_AUTH_TYPE\": \"AWS_KEYS\", \"AWS_ACCESS_KEY\":  , \"AWS_SECRET_KEY\":  ,  Base64 encoded \"BringYourOwnKey\": True, \"KEYS\": [] } input dictionary for creating AWS KMS with access node ( credential template file based authentication ) kms_details = { \"KEY_PROVIDER_TYPE\": \"KEY_PROVIDER_AWS_KMS\", \"AWS_REGION_NAME\": \"US East (Ohio)\",  Optional Value. Default is \"Asia Pacific (Mumbai)\" \"ACCESS_NODE_NAME\":  , \"KMS_NAME\": \"AWS_KMS_NAME\", \"KEY_PROVIDER_AUTH_TYPE\": \"AWS_CREDENTIALS_FILE\", \"AWS_CREDENTIALS_FILE_PROFILE_NAME\":  } input dictionary for creating AWS KMS with access Node ( IAM based authentication ) kms_details = { \"KEY_PROVIDER_TYPE\": \"KEY_PROVIDER_AWS_KMS\", \"ACCESS_NODE_NAME\":  , \"KMS_NAME\":  , \"KEY_PROVIDER_AUTH_TYPE\": \"AWS_IAM\" } input dictionary for creating Azure KMS with access Node ( certificate based authentication ) kms_details = { \"KEY_PROVIDER_TYPE\": \"KEY_PROVIDER_AZURE_KEY_VAULT\", \"ACCESS_NODE_NAME\":  , \"KMS_NAME\":  , \"KEY_PROVIDER_AUTH_TYPE\": \"AZURE_KEY_VAULT_CERTIFICATE\", \"AZURE_KEY_VAULT_KEY_LENGTH\":2048,  Optional Value. Default is 3072 \"AZURE_KEY_VAULT_NAME\": , \"AZURE_TENANT_ID\": , \"AZURE_APP_ID\": , \"AZURE_CERTIFICATE_PATH\": , \"AZURE_CERTIFICATE_THUMBPRINT\": , \"AZURE_CERTIFICATE_PASSWORD\":  ,  Base64 encoded } input dictionary for creating Azure KMS with access Node ( IAM managed identity based authentication ) kms_details = { \"KEY_PROVIDER_TYPE\": \"KEY_PROVIDER_AZURE_KEY_VAULT\", \"ACCESS_NODE_NAME\":  , \"KMS_NAME\":  , \"KEY_PROVIDER_AUTH_TYPE\": \"AZURE_KEY_VAULT_IAM\", \"AZURE_KEY_VAULT_NAME\": , } input dictionary for creating Azure KMS without access Node ( certificate based authentication ) kms_details = { \"KEY_PROVIDER_TYPE\": \"KEY_PROVIDER_AZURE_KEY_VAULT\", \"KMS_NAME\":  , \"KEY_PROVIDER_AUTH_TYPE\": \"AZURE_KEY_VAULT_CERTIFICATE\", \"AZURE_KEY_VAULT_NAME\": , \"AZURE_TENANT_ID\":  , \"AZURE_APP_ID\":  , \"AZURE_CERTIFICATE_PATH\":  , \"AZURE_CERTIFICATE_THUMBPRINT\":  , \"AZURE_CERTIFICATE_PASSWORD\":  ,  Base64 encoded } input dictionary for creating KMIP KMS with access Node ( certificate based authentication ) kms_details = { \"KEY_PROVIDER_TYPE\": \"KEY_PROVIDER_KMIP\", \"ACCESS_NODE_NAME\":  , \"KMS_NAME\":  , \"KEY_PROVIDER_AUTH_TYPE\": \"KMIP_CERTIFICATE\", \"KMIP_CERTIFICATE_PATH\":  , \"KMIP_CERTIFICATE_KEY_PATH\":  , \"KMIP_CA_CERTIFICATE_PATH\":  , \"KMIP_CERTIFICATE_PASS\":  ,  Base64 encoded \"KMIP_HOST\":  , \"KMIP_PORT\":  , \"KMIP_ENC_KEY_LENGTH\":256  Optional Value. Default is 256 } input dictionary for Azure KMS with access Node ( certificate based authentication ) with Bring Your Own Key enabled self.kms_details = { \"KEY_PROVIDER_TYPE\": \"KEY_PROVIDER_AZURE_KEY_VAULT\", \"ACCESS_NODE_NAME\":  , \"KMS_NAME\": \"MyKMS\", \"KEY_PROVIDER_AUTH_TYPE\": \"AZURE_KEY_VAULT_CERTIFICATE\", \"AZURE_KEY_VAULT_KEY_LENGTH\": 2072, \"AZURE_KEY_VAULT_NAME\":  , \"AZURE_TENANT_ID\":  , \"AZURE_APP_ID\":  , \"AZURE_CERTIFICATE_PATH\":  , \"AZURE_CERTIFICATE_THUMBPRINT\":  , \"AZURE_CERTIFICATE_PASSWORD\":  ,  Base64 encoded \"BringYourOwnKey\": True, \"KEYS\": [\"KeyID1/KeyVersion1\", \"KeyID2/KeyVersion2\", \"KeyID3/KeyVersion3\"] }",
"func":1
},
{
"ref":"cvpysdk.key_management_server.KeyManagementServers.add_aws_kms",
"url":139,
"doc":"Configure AWS Key Management Server Args: kms_name (string)  name of the Key Management Server aws_access_key (string)  AWS access key aws_secret_key (string)  AWS secret key, base64 encoded aws_region_name (string)  AWS region defaults to \"Asia Pacific (Mumbai)\" kms_details ( dictionary ) - Dictionary with AWS KMS details Raises SDKException: If inputs are wrong data type If API response is not successful If the API response JSON is empty If error code on API response JSON is not 0",
"func":1
},
{
"ref":"cvpysdk.key_management_server.KeyManagementServer",
"url":139,
"doc":"Class for representing a single KMS in the commcell. Initializes the KeyManagementServer object Args: commcell (object)  instance of commcell name (str)  The name of Key Management Server id (int)  The id of Key Management Server type_id (int)  The type id of Key Management Server Raises SDKException: If input type is invalid for any param"
},
{
"ref":"cvpysdk.license",
"url":140,
"doc":"File for License operations. LicenseDetails : Class for representing license details information LicenseDetails: __init__(Commcell_object)  initialise with object of CommCell _get_detailed_licenses()  Gets all types of license details associated to the commcell object _get_capacity_details()  GET request to get capacity licenses property _get_complete_oi_licenses()  GET request to get OI licenses property _get_virtualization_licenses()  GET request to get virtualization licenses property _get_user_licenses()  GET request to get user licenses property _get_activate_licenses()  GET request to get activate licenses property _get_metallic_licenses()  GET request to get metallic licenses property _get_other_licenses()  GET request to get other licenses property _get_license_details  GET request to get detailed license information refresh()  Updates License object with the latest configuration LicenseDetails Attributes             - commcell_id  Returns the CommCell Id in decimal value commcell_id_hex  Returns the hexadecimal value of commcell id cs_hostname  Returns the csHostName Or Address of CommCell license_ipaddress  Returns the license Ip Address oem_name  Returns the oem_name license_mode  Returns the license mode of license registration_code  Returns the registration code of CommCell serial_number  Returns the serial number of CommCell expiry_date  Returns the expiry date of License capacity_licenses  Returns dictionary with the capacity licenses complete_oi_licenses  Returns dictionary with the complete oi licenses virtualization_licenses  Returns dictionary with the virtualization licenses user_licenses  Returns dictionary with the user licenses activate_licenses  Returns dictionary with the activate licenses metallic_licenses  Returns dictionary with the metallic licenses other_licenses  Returns dictionary with the other licenses"
},
{
"ref":"cvpysdk.license.LicenseDetails",
"url":140,
"doc":"Class for accessing license details information Initialize object of the LicenseDetails class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the LicenseDetails class"
},
{
"ref":"cvpysdk.license.LicenseDetails.refresh",
"url":140,
"doc":"Updates metrics object with the latest configuration",
"func":1
},
{
"ref":"cvpysdk.license.LicenseDetails.commcell_id",
"url":140,
"doc":"Returns the CommCell Id in decimal value"
},
{
"ref":"cvpysdk.license.LicenseDetails.commcell_id_hex",
"url":140,
"doc":"Returns the hexadecimal value of commcell id"
},
{
"ref":"cvpysdk.license.LicenseDetails.cs_hostname",
"url":140,
"doc":"Returns the csHostName Or Address of CommCell"
},
{
"ref":"cvpysdk.license.LicenseDetails.license_ipaddress",
"url":140,
"doc":"Returns the license Ip Address"
},
{
"ref":"cvpysdk.license.LicenseDetails.oem_name",
"url":140,
"doc":"Returns the oem_name"
},
{
"ref":"cvpysdk.license.LicenseDetails.license_mode",
"url":140,
"doc":"Returns the license mode of license"
},
{
"ref":"cvpysdk.license.LicenseDetails.registration_code",
"url":140,
"doc":"Returns the registration code of CommCell"
},
{
"ref":"cvpysdk.license.LicenseDetails.serial_number",
"url":140,
"doc":"Returns the serial number of CommCell"
},
{
"ref":"cvpysdk.license.LicenseDetails.expiry_date",
"url":140,
"doc":"Returns the expiry date of License"
},
{
"ref":"cvpysdk.license.LicenseDetails.capacity_licenses",
"url":140,
"doc":"Returns dictionary with the capacity licenses"
},
{
"ref":"cvpysdk.license.LicenseDetails.complete_oi_licenses",
"url":140,
"doc":"Returns dictionary with the complete oi licenses"
},
{
"ref":"cvpysdk.license.LicenseDetails.virtualization_licenses",
"url":140,
"doc":"Returns dictionary with the virtualization licenses"
},
{
"ref":"cvpysdk.license.LicenseDetails.user_licenses",
"url":140,
"doc":"Returns dictionary with the user licenses"
},
{
"ref":"cvpysdk.license.LicenseDetails.activate_licenses",
"url":140,
"doc":"Returns dictionary with the activate licenses"
},
{
"ref":"cvpysdk.license.LicenseDetails.metallic_licenses",
"url":140,
"doc":"Returns dictionary with the metallic licenses"
},
{
"ref":"cvpysdk.license.LicenseDetails.other_licenses",
"url":140,
"doc":"Returns dictionary with the other licenses"
},
{
"ref":"cvpysdk.metallic",
"url":141,
"doc":"Main file for performing Metallic Integration steps with existing commcell . This file has all the classes related to Metallic Integration Operations. Metallic: Class for representing all the metallic integration steps Metallic: __init__(commcell_object)  initialize the Metallic class instance for the commcell _metallic_commcell_object()  returns the metallic commcell object metallic_subscribe()  linking on metallic side _cv_metallic_subscribe()  linking on commvault side is_metallic_registered()  returns boolean value true - if metallic is subscribed for a user false - if metallic is not subscribed for a user metallic_completed_solutions()  returns all the completed solutions on linked company of metalic metallic_unsubscribe()  unlinking on metallic side _cv_metallic_unsubscibe()  unlinking on commvault side _get_eligible_metallic_commcells()  gets the eligible metallic commcells for the logged in user Metallic instance Attributes:  cloudservices_details  returns cloudServices details if metallic service is registered in onprem/ MSP commcell  cloud_hostname  returns cloud commcell hostname"
},
{
"ref":"cvpysdk.metallic.Metallic",
"url":141,
"doc":"Class for representing Metallic related operations. Intializes object of the Metallic class. Args: commcell_object (object) -instance of the commcell class Returns: object - instance of the Metallic class"
},
{
"ref":"cvpysdk.metallic.Metallic.metallic_subscribe",
"url":141,
"doc":"Adds a new Monitoring Policy to the Commcell. Args: cloud_webconsole_hostname (str)  hostname of the cloud cloud_username (str)  username of the cloud cloud_password (str)  password of the cloud msp_company_name (str or object)  name of the company or company object default: None Raises: SDKException: if metallic is already subscribed if inputs are not valid if failed to subscribe to metallic if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.metallic.Metallic.is_metallic_registered",
"url":141,
"doc":"This function says whether metallic is registered for a user or not. Args: username (str)  name of the user to which we need to check if metallic is registered Returns: Boolean  True if metallic is returned in response False if metallic is not returned in response Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.metallic.Metallic.metallic_completed_solutions",
"url":141,
"doc":"This function returns the completed solutions for metallic. Returns: dict of completed solutions Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.metallic.Metallic.metallic_unsubscribe",
"url":141,
"doc":"This function is for unsubscribing metallic Raises: SDKException: if failed to unsubcribe on metallic if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.metallic.Metallic.cloud_hostname",
"url":141,
"doc":"Returns cloudhostname"
},
{
"ref":"cvpysdk.metallic.Metallic.cloudservices_details",
"url":141,
"doc":"Get cloudServices details if metallic service is registered in onprem/ MSP commcell Returns: cloudservices_details (dict)  { 'cloudServices': [ { 'associatedCompany': { 'companyAlias': ' ', 'GUID': ' ' }, 'cloudService': { 'redirectUrl': ' ', 'commcellName': ' ' } } ] }"
},
{
"ref":"cvpysdk.metricsreport",
"url":142,
"doc":"File for performing Metrics operations. _Metrics : Class for representing all common operations on Metrics Reporting PrivateMetrics : Class for representing Private Metrics and performing operations on it. PublicMetrics : Class for representing Public Metrics and performing operations on it. use method save_config() or upload_now() to save the updated configurations. Metrics: __init__(Commcell_object, isprivate) initialise with object of CommCell and flag to specificy metrics Type __repr__()  returns the string to represent the instance of the Metrics class enable_health()  enables Health service disable_health()  disables Health service enable_activity()  enables Activity service disable_activity()  disables Activity service enable_audit()  enables Audit service disable_audit()  disables Audit service disable_chargeback()  disables Chargeback service enable_post_upgrade_check()  enables enable_post_upgrade_check Service enable_all_services()  enables All Service in metrics disable_all_services()  disables All Service enable_metrics()  enables Metrics Service disable_metrics()  disables Metrics Service in CommServe set_upload_freq()  updates the upload frequency set_data_collection_window  updates the data collection window remove_data_collection_window removes data collection window set_all_clientgroup()  updates metrics configuration with all client groups set_clientgroups()  sets the client groups for metrics save_config()  updates the configuration of Metrics, this must be called to save the configuration changes made in this object upload_now()  Performs Upload Now operation of metrics wait_for_download_completion() waits for metrics download operation to complete wait_for_collection_completion waits for metrics collection operation to complete wait_for_upload_completion()  waits for metrics upload operation to complete wait_for_uploadnow_completion() waits for complete metrics operation to complete get_possible_uploaded_filenames gives the possible names for the uploaded files refresh()  refresh the properties and config of the Metrics Server get_uploaded_filename()  Gets last uploaded file name get_uploaded_zip_filename()  Gets last uploaded zip file name PrivateMetrics: __init__(Commcell_object)  initialise with object of CommCell update_url(hostname)  Updates Metrics URL for download and upload enable_chargeback(daily, weekly, monthly)  enables chargeback service PublicMetrics: __init__(Commcell_object)  initialise with object of CommCell enable_chargeback()  enables chargeback service enable_upgrade_readiness()  Enables pre upgrade readiness service disable_upgrade_readiness()  disables pre upgrade readiness service enable_proactive_support()  Enables Proactive Support service disable_proactive_support()  disables Proactive Support service enable_cloud_assist()  Enables Cloud Assist service disable_cloud_assist()  disables Cloud Assist service"
},
{
"ref":"cvpysdk.metricsreport.PrivateMetrics",
"url":142,
"doc":"Class for operations in private Metrics reporting Initialize object of the UserGroups class. Args: commcell_object (object)  instance of the Commcell class type  1 for private, 0 for public Returns: object - instance of the UserGroups class"
},
{
"ref":"cvpysdk.metricsreport.PrivateMetrics.downloadurl",
"url":142,
"doc":"Returns download URL of private metrics"
},
{
"ref":"cvpysdk.metricsreport.PrivateMetrics.uploadurl",
"url":142,
"doc":"Returns Upload URL of private metrics"
},
{
"ref":"cvpysdk.metricsreport.PrivateMetrics.private_metrics_server_name",
"url":142,
"doc":""
},
{
"ref":"cvpysdk.metricsreport.PrivateMetrics.update_url",
"url":142,
"doc":"updates private Metrics URL in CommServe Args: hostname (str): Metrics server hostname port (int): port of webconsole e.g.; 80 for http and 443 for https protocol (str): http or https default: http",
"func":1
},
{
"ref":"cvpysdk.metricsreport.PrivateMetrics.enable_chargeback",
"url":142,
"doc":"Enables Chargeback service as per the daily,weekly and Monthly arguments passes Args: daily (bool): enables daily chargeback weekly (bool): enables weekly chargeback monthly(bool): enables Monthly chargeback",
"func":1
},
{
"ref":"cvpysdk.metricsreport.PrivateMetrics.enable_forwarding",
"url":142,
"doc":"Enables forwarding Args: forwarding_url: Webconsole url where metrics data to be forwarded",
"func":1
},
{
"ref":"cvpysdk.metricsreport.PrivateMetrics.disable_forwarding",
"url":142,
"doc":"Disables forwarding",
"func":1
},
{
"ref":"cvpysdk.metricsreport.CloudMetrics",
"url":142,
"doc":"Class for operations in Cloud Metrics reporting Initialize object of the UserGroups class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the UserGroups class"
},
{
"ref":"cvpysdk.metricsreport.CloudMetrics.randomization_minutes",
"url":142,
"doc":""
},
{
"ref":"cvpysdk.metricsreport.CloudMetrics.enable_chargeback",
"url":142,
"doc":"Enables Chargeback service",
"func":1
},
{
"ref":"cvpysdk.metricsreport.CloudMetrics.enable_upgrade_readiness",
"url":142,
"doc":"Enables pre upgrade readiness service",
"func":1
},
{
"ref":"cvpysdk.metricsreport.CloudMetrics.disable_upgrade_readiness",
"url":142,
"doc":"disables pre upgrade readiness service",
"func":1
},
{
"ref":"cvpysdk.metricsreport.CloudMetrics.enable_proactive_support",
"url":142,
"doc":"Enables Proactive Support service",
"func":1
},
{
"ref":"cvpysdk.metricsreport.CloudMetrics.disable_proactive_support",
"url":142,
"doc":"disables Proactive Support service",
"func":1
},
{
"ref":"cvpysdk.metricsreport.CloudMetrics.enable_cloud_assist",
"url":142,
"doc":"Enables Cloud Assist service and proactive support if not already enabled",
"func":1
},
{
"ref":"cvpysdk.metricsreport.CloudMetrics.disable_cloud_assist",
"url":142,
"doc":"disables Cloud Assist service",
"func":1
},
{
"ref":"cvpysdk.metricsreport.CloudMetrics.set_randomization_minutes",
"url":142,
"doc":"Sets the randomization value in gxglobal param Args: minutes (int): randomization value in minutes",
"func":1
},
{
"ref":"cvpysdk.metricsreport.LocalMetrics",
"url":142,
"doc":"class for operation in localmetrics"
},
{
"ref":"cvpysdk.metricsreport.LocalMetrics.refresh",
"url":142,
"doc":"updates metrics object with the latest configuration",
"func":1
},
{
"ref":"cvpysdk.metricsreport.LocalMetrics.last_upload_time",
"url":142,
"doc":"get last upload time"
},
{
"ref":"cvpysdk.metricsreport.LocalMetrics.nextup_load_time",
"url":142,
"doc":"get the next upload time"
},
{
"ref":"cvpysdk.monitoring",
"url":143,
"doc":"Main file for performing Monitoring related operations on the commcell. This file has all the classes related to Monitoring operations. MonitoringPolicies: Class for representing all the monitoring policies configured in the commcell. MonitoringPolicy: Class for representing a single monitoring policy configured in the commcell. MonitoringPolicies: __init__(commcell_object)  initialize the MonitoringPolicies class instance for the commcell __str__()  returns all the monitoring policies associated with the commcell __repr__()  returns the string for the instance of the MonitoringPolicy class _get_monitoring_policies()  gets all the monitoring policies of the commcell has_monitoring_policy()  checks if a monitoring policy exists with the given name or not _get_analytics_servers()  returns all the analytics servers associated with the commcell has_analytics_server()  checks if a analytics server exists with the given name or not _get_templates()  returns all the templates associated with the commcell has_template()  checks if a template exists with the given name or not get()  Returns a MonitoringPolicy object of the specified monitoring policy name add()  adds a new monitoring policy to the commcell delete()  deletes a monitoring policy refresh()  refreshes the MonitoringPolicies/Templates and Analytics Servers associated to the commcell Attributes       all_analytics_servers  returns the dictionary consisting of all the analytics servers that are associated with the commcell and their information such as cloudid and analyticsserver name  all_templates  returns the dictionary consisting of all the templates that are associated with the commcell and their information such as templateid and templatename  all_monitoring_policies  returns the dictionary consisting of all the monitoring policies that are associated with the commcell and their information such as monitoringpolicyid and name MonitoringPolicy: __init__(commcell_object, monitoring_policy_name, monitoring_policy_id)  initializes the instance of MonitoringPolicy class for a specific MonitoringPolicy of the commcell __repr__()  returns a string representation of the MonitoringPolicy instance _get_monitoring_policy_id()  gets the id of the MonitoringPolicy instance from the commcell run()  starts a Monitoring Policy job and returns a job object Attributes       monitoring_policy_name  returns the monitoringpolicy name  monitoring_policy_id  returnd the id of monitoringpolicy"
},
{
"ref":"cvpysdk.monitoring.MonitoringPolicies",
"url":143,
"doc":"Class for representing all the Monitoring Policies configured in the commcell. Intializes object of the MonitoringPolicies class. Args: commcell_object (object) -instance of the commcell class Returns: object - instance of the MonitoringPolicies class"
},
{
"ref":"cvpysdk.monitoring.MonitoringPolicies.all_analytics_servers",
"url":143,
"doc":"Returns the dictionary consisting of all the analytics servers and their info. dict - consists of all analytics servers in the commcell { \"analytics_server_1\":cloud_id1, \"analytics_server_2\":cloud_id2 }"
},
{
"ref":"cvpysdk.monitoring.MonitoringPolicies.all_templates",
"url":143,
"doc":"Returns the dictionary consisting of all the templates and their info. dict - consists of all templates in the commcell { \"template_name1\":{ \"id\":template_id1, \"type\":template_type }, \"template_name2\":{ \"id\":template_id2, \"type\":template_type } }"
},
{
"ref":"cvpysdk.monitoring.MonitoringPolicies.all_monitoring_policies",
"url":143,
"doc":"Returns the dictionary consisting of all the monitoringpolicies and their info. dict - consists of all the monitoringpolicies in the commcell { \"monitoring_policy_name1\":monitoring_policy_id1, \"monitoring_policy_name2\":monitoring_policy_id2 }"
},
{
"ref":"cvpysdk.monitoring.MonitoringPolicies.has_monitoring_policy",
"url":143,
"doc":"checks if a moniotoring policy exists in the commcell with the provided name Args: monitoring_policy_name (str)  name of the monitoring policy Returns: bool - boolean output whether the monitoring policy exists in the commcell or not Raises: SDKException: if type of the monitoring_policy_name is not string",
"func":1
},
{
"ref":"cvpysdk.monitoring.MonitoringPolicies.has_analytics_server",
"url":143,
"doc":"Checks if a analytics server exists in the commcell with the input analytics server name Args: analytics_server_name (str)  name of the analytics server Returns: bool - boolean output whether the analytics server exists in the commcell or not Raises: SDKException: if type of the analytics server name is not string",
"func":1
},
{
"ref":"cvpysdk.monitoring.MonitoringPolicies.has_template",
"url":143,
"doc":"Checks if a template exists in the commcell with the input template name. Args: template_name(str)  name of the template Returns: bool- boolean output whether the template exists in the commcell or not Raises: SDKException: if type of the library name argument is not string",
"func":1
},
{
"ref":"cvpysdk.monitoring.MonitoringPolicies.get",
"url":143,
"doc":"Returns a MonitoringPolicy object of the specified monitoring policy name. Args: monitoring_policy_name (str) - name of the monitoring policy Returns: object - instance of the MonitoringPolicy class for the given policy name Raises: SDKException: if type of the monitoring policy name argument is not string if no monitoring policy exists with the given name",
"func":1
},
{
"ref":"cvpysdk.monitoring.MonitoringPolicies.add",
"url":143,
"doc":"Adds a new Monitoring Policy to the Commcell. Args: monitoring_policy_name (str)  name of the new monitoring policy to add template_name (str)  name of the template that has to be used analytics_server_name (str)  name of the Analytics Server with LM role client_name (str)  client from which data has to be picked content (str)  content to be used for running the policy win_flag (bool)  For executing Text based WindowsEvents Policy policy_type (int)  type of policy to be created 0 - index server 1 - event raiser kwargs  continuousMode - true/false, conditionsXML - criteria for policy Raises: SDKException: if template doesn't exists if Analytics Server doesn't exists if Client doesn't exists if creation of Monitoring Policy fails if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.monitoring.MonitoringPolicies.delete",
"url":143,
"doc":"Deletes the monitoring policy from the commcell. Args: monitoring_policy_name(str)  name of the monitoring policy to delete Raises: SDKException: if type of the monitoring policy name argument is not string if failed to delete monitoring policy if response is empty if response is not succcess",
"func":1
},
{
"ref":"cvpysdk.monitoring.MonitoringPolicies.refresh",
"url":143,
"doc":"Refreshes the monitoring policies/analytics servers and templates associated with the commcell",
"func":1
},
{
"ref":"cvpysdk.monitoring.MonitoringPolicy",
"url":143,
"doc":"\"Class for performing monitoring policy operations for a specific monitoring policy Initialise the Monitoring Policy class instance."
},
{
"ref":"cvpysdk.monitoring.MonitoringPolicy.monitoring_policy_name",
"url":143,
"doc":"Treats the monitoring policy name as read only attribute."
},
{
"ref":"cvpysdk.monitoring.MonitoringPolicy.monitoring_policy_id",
"url":143,
"doc":"Treats the monitoring policy id as read only attribute."
},
{
"ref":"cvpysdk.monitoring.MonitoringPolicy.run",
"url":143,
"doc":"Runs the Monitoring Policy job",
"func":1
},
{
"ref":"cvpysdk.name_change",
"url":144,
"doc":"Main file for doing Name Change operations. OperationType: Class with the supported hostname change operations NameChange: Class for doing operations for Name Change operations on clients and commcell. NameChange: __init__(class_object)  initialise object of the NameChange class hostname()  gets the current hostname of the client or commserver hostname(parameters_dict)  sets the hostname from client or commserver level display_name()  gets the display name of the client or commserver display_name(display_name)  sets the display name of the client or commserver client_name()  gets the name of the client client_name(client_name)  sets the name of the client domain_name()  gets the commserver hostname domain_name(domains_dict)  sets the new domain name for the clients _client_name_change_op()  performs client namechange based on the setters _commcell_name_change_op(parameters_dict)  performs commserver namechange based on the setters get_clients_for_name_change_post_ccm()  gets all the clients available for name change post commcell migration name_change_post_ccm(parameters_dict)  perfoms name change for migrated clients post commcell migration"
},
{
"ref":"cvpysdk.name_change.OperationType",
"url":144,
"doc":"Operation Types supported to get schedules of particular optype"
},
{
"ref":"cvpysdk.name_change.OperationType.COMMSERVER_HOSTNAME_REMOTE_CLIENTS",
"url":144,
"doc":""
},
{
"ref":"cvpysdk.name_change.OperationType.COMMSERVER_HOSTNAME_AFTER_DR",
"url":144,
"doc":""
},
{
"ref":"cvpysdk.name_change.OperationType.CLIENT_HOSTNAME",
"url":144,
"doc":""
},
{
"ref":"cvpysdk.name_change.OperationType.COMMSERVER_HOSTNAME",
"url":144,
"doc":""
},
{
"ref":"cvpysdk.name_change.NameChange",
"url":144,
"doc":"Class for doing Name Change operations on clients and commcell Initializes an instance of the NameChange class to perform Name Change operations. Args: class_object (object)  instance of the client/commcell class"
},
{
"ref":"cvpysdk.name_change.NameChange.hostname",
"url":144,
"doc":"Gets the client hostname or commserver hostname Returns: str - client hostname or commserver hostname"
},
{
"ref":"cvpysdk.name_change.NameChange.domain_name",
"url":144,
"doc":"Gets the commserver hostname Returns: str - commserver hostname"
},
{
"ref":"cvpysdk.name_change.NameChange.display_name",
"url":144,
"doc":"Gets the display name of the client or commserver Returns: str - client or commserver display name"
},
{
"ref":"cvpysdk.name_change.NameChange.client_name",
"url":144,
"doc":"Gets the client name Returns: str - client name"
},
{
"ref":"cvpysdk.name_change.NameChange.get_clients_for_name_change_post_ccm",
"url":144,
"doc":"Gets clients available for name change after commcell migration. Raises: SDKException if the client namechange failed if the response is empty",
"func":1
},
{
"ref":"cvpysdk.name_change.NameChange.name_change_post_ccm",
"url":144,
"doc":"Performs the commcell namechange for clients post commcell migration Args: parameters_dict (dict)  contains old commcell hostname, new commcell hostname, Ids of clients on which name change is to be performed { \"sourceCommcellHostname\": \"source-1\" \"destinationCommcellHostname\": \"dest-1\" \"clientIds\": [\"id1\", \"id2\"] } Raises: SDKException if the client namechange failed if the response is empty",
"func":1
},
{
"ref":"cvpysdk.network",
"url":145,
"doc":"Main file for performing network related operations on a client/client group Network: __init__(class_object)  initialize object of the Network class _get_network_properties()  returns all the existing network properties on a client/client group configure_network_settings  get the value for configureFirewallSettings configure_network_settings(val)  set the value for configureFirewallSettings trivial_config  get the value for isTrivialConfig trivial_config(val)  set the value for isTrivialConfig roaming_client  get the value for isRoamingClient roaming_client(val)  set the value for isRoamingClient tunnel_connection_port  get the tunnel connection port on the client/client group tunnel_connection_port(val)  set the tunnel connection port on the client/client group force_ssl  get the value for foreceSSL force_ssl(val)  set the value for foreceSSL tunnel_init_seconds  get the value for tunnelInitSeconds tunnel_init_seconds(val)  set the value for tunnelInitSeconds lockdown  get the value for lockdown lockdown(val)  set the value for lockdown bind_open_ports  get the value for bindOpenPortsOnly bind_open_ports(val)  set the value for bindOpenPortsOnly proxy  get the value for isDMZ proxy(val)  set the value for isDMZ keep_alive_seconds  get the value for keepAliveSeconds keep_alive_seconds(val)  set the value for keepAliveSeconds incoming_connections  get the list of incoming connections on the client/client group set_incoming_connections()  sets the incoming connections on the client/client group with the list of values provided additional_ports  get the list of additional ports on the client/client group set_additional_ports()  sets the range of additional ports on the client/client group provided as list and tunnel port outgoing_routes  get the list of outgoing routes on the client/client group set_outgoing_routes()  sets the outgoing routes on the client/client group with the list of values provided tppm_settings  get the list of tppm settings on the client set_tppm_settings(tppm_settings)  set the tppm on the client with the list of values provided _advanced_network_config()  set advanced network configuration on the client/client group"
},
{
"ref":"cvpysdk.network.Network",
"url":145,
"doc":"Class for performing network related operations on a client or client group Initialize the Network class object Args: class_object (object)  instance of the client/client group class"
},
{
"ref":"cvpysdk.network.Network.configure_network_settings",
"url":145,
"doc":"Gets the value for configure firewall settings :return: boolean - configureFirewallSettings"
},
{
"ref":"cvpysdk.network.Network.trivial_config",
"url":145,
"doc":"Gets the value for isTrivialConfig :return: boolean - isTrivialConfig"
},
{
"ref":"cvpysdk.network.Network.roaming_client",
"url":145,
"doc":"Gets the value for isRoamingClient :return: boolen - isRoamingClient"
},
{
"ref":"cvpysdk.network.Network.tunnel_connection_port",
"url":145,
"doc":"Gets the value for tunnel port on the client/client group :return: int - tunnelConnectionPort"
},
{
"ref":"cvpysdk.network.Network.force_ssl",
"url":145,
"doc":"Gets the value for forceSSL :return: boolean - forceSSL"
},
{
"ref":"cvpysdk.network.Network.tunnel_init_seconds",
"url":145,
"doc":"Gets the tunnel init seconds :return: int - tunnelInitSeconds"
},
{
"ref":"cvpysdk.network.Network.lockdown",
"url":145,
"doc":"Gets the value for lockdown :return: boolean - lockdown"
},
{
"ref":"cvpysdk.network.Network.bind_open_ports",
"url":145,
"doc":"Gets the value for bindOpenports only :return: boolean - bindOpenPortsOnly"
},
{
"ref":"cvpysdk.network.Network.proxy",
"url":145,
"doc":"Gets the value for isDMZ :return: boolean - isDMZ"
},
{
"ref":"cvpysdk.network.Network.keep_alive_seconds",
"url":145,
"doc":"Gets the value set for keep alive :return: int - keepAliveSeconds"
},
{
"ref":"cvpysdk.network.Network.incoming_connections",
"url":145,
"doc":"Gets all the incoming connections on a client :return: list - incoming connections"
},
{
"ref":"cvpysdk.network.Network.set_incoming_connections",
"url":145,
"doc":"Sets the incoming connections on a client/client group with the list of values provided Args: incoming_connections(list)  list of incoming connections should be a list of dict containing incoming connection type, entity name and entity type. [{'state':val,'entity':val,'isClient':val}] Example: [ { 'state': 'RESTRICTED', 'entity': 'centOS', 'isClient' : True }, { 'state': 'BLOCKED', 'entity': 'Edge Clients', 'isClient' : False } ] Raises: SDKException: if the required key is missing in the input value passed",
"func":1
},
{
"ref":"cvpysdk.network.Network.additional_ports",
"url":145,
"doc":"Gets the additional ports :return: list - ports"
},
{
"ref":"cvpysdk.network.Network.set_additional_ports",
"url":145,
"doc":"Sets additional incoming ports and tunnel port with the values provided as parameter Args: tunnel_port (int)  value to be set for tunnel port ports(list)  list of ports should be a list of dict containing start port and end port [{'startPort':val,'endPort':val}] Example: [ { 'startPort': 1024, 'endPort': 1030 }, { 'startPort': 2000, 'endPort':4000 } ] Raises: SDKException: if the required key is missing in the input value passed",
"func":1
},
{
"ref":"cvpysdk.network.Network.outgoing_routes",
"url":145,
"doc":"Gets the list of all outgoing routes :return: list - outgoing routes"
},
{
"ref":"cvpysdk.network.Network.set_outgoing_routes",
"url":145,
"doc":"Sets outgoing routes on the client with the list of values provided as parameter Args: outgoing_routes(list)  list of outgoing routes should be a list of dict containing route type, entity name, entity type, streams, gateway host, gateway port, tunnel connection protocol and remote proxy based on route type. For routeType: DIRECT [{'routeType':'DIRECT', 'remoteEntity':val , 'streams':val, 'isClient':val, 'forceAllDataTraffic': True, 'connectionProtocol' : 0}] For routeType: VIA_GATEWAY [{'routeType':'VIA_GATEWAY', 'remoteEntity':val, 'streams':val, 'gatewayPort':val, 'gatewayHost': val, 'isClient':val, 'forceAllDataTraffic': False, 'connectionProtocol' : 3}] For routeType: VIA_PROXY [{'routeType':'VIA_PROXY', 'remoteEntity':val, 'remoteProxy':val, 'isClient':val}] Valid values for connectionProtocol: 0: 'HTTP', 1: 'HTTPS', 2: 'HTTPS_AuthOnly', 3: 'RAW_PROTOCOL' Example: [ { 'routeType': 'DIRECT', 'remoteEntity':'Testcs' , 'streams': 1, 'isClient': True, 'forceAllDataTraffic' : True 'connectionProtocol' : 0 }, { 'routeType': 'VIA_GATEWAY', 'remoteEntity': 'centOS', 'streams': 2, 'gatewayPort': 443, 'gatewayHost': '1.2.3.4', 'isClient': True, 'forceAllDataTraffic' :False 'connectionProtocol' : 1 }, { 'routeType': 'VIA_PROXY', 'remoteEntity': 'Laptop Clients', 'remoteProxy': 'TemplateRHEL65_4', 'isClient': False } ] Raises: SDKException: if routeType is invalid in the input value passed if the required key is missing in the input value passed",
"func":1
},
{
"ref":"cvpysdk.network.Network.tppm_settings",
"url":145,
"doc":"Gets the list of tppm settings on a client :return: list - tppm settings"
},
{
"ref":"cvpysdk.network.Network.set_tppm_settings",
"url":145,
"doc":"Sets tppm on the client with the list of values provided as parameter Note: This is supported only on client level Args: tppm_settings(list)  list of tppm settings should be a list of dict containing tppm type, port number and proxy entity [{'tppmType':val, 'portNumber':val, 'proxyEntity':val}] Valid values for tppmType: 1. WEB_SERVER_FOR_IIS_SERVER 2. COMMSERVE 3. REPORTS 4. CUSTOM_REPORT_ENGINE Example: [ { 'tppmType': 'WEB_SERVER_FOR_IIS_SERVER', 'portNumber':9999, 'proxyEntity' : 'shezavm3' }, { 'tppmType': 'REPORTS', 'portNumber':8888, 'proxyEntity' : 'shezavm11' } ] Raises: SDKException: if tppmType is invalid in the input value passed if the required key is missing in the input value passed",
"func":1
},
{
"ref":"cvpysdk.network_throttle",
"url":146,
"doc":"Main file for performing network throttle related operations on a client/client group NetworkThrottle: __init__(class_object)  initialize object of the NetworkThrottle class _get_throttle_properties()  returns all the existing network throttle properties on a client/client group enable_network_throttle()  enables network throttling option on the client/client group share_bandwidth()  enables share bandwidth option on the client/client group remote_clients()  adds the remote clients for throttling on a client/client group remote_client_groups()  adds the remote client group for throttling on a client/client group throttle_schedules()  adds the throttling schedules with different options provided"
},
{
"ref":"cvpysdk.network_throttle.NetworkThrottle",
"url":146,
"doc":"Class for performing network throttle related operations on a client or client group Initialize the NetworkThrottle class object Args: class_object (object)  instance of the client/client group class"
},
{
"ref":"cvpysdk.network_throttle.NetworkThrottle.enable_network_throttle",
"url":146,
"doc":"Gets the value for enable network throttling"
},
{
"ref":"cvpysdk.network_throttle.NetworkThrottle.share_bandwidth",
"url":146,
"doc":"Gets the value for share bandwidth"
},
{
"ref":"cvpysdk.network_throttle.NetworkThrottle.remote_clients",
"url":146,
"doc":"Gets the associated client towards which throttling is configured"
},
{
"ref":"cvpysdk.network_throttle.NetworkThrottle.remote_client_groups",
"url":146,
"doc":"Gets the associated client groups towards which throttling is configured"
},
{
"ref":"cvpysdk.network_throttle.NetworkThrottle.throttle_schedules",
"url":146,
"doc":"Gets the throttle rules set on a client or client group"
},
{
"ref":"cvpysdk.network_topology",
"url":147,
"doc":"Main file for performing network topology operations. NetworkTopologies and NetworkTopology are 2 classes defined in this file. NetworkTopologies: Class for representing all the network topologies in the commcell NetworkTopology: class for a single topology in commcell NetworkTopologies: __init__(class_object)  initialize object of NetworkTopologies class associated with the commcell __repr__()  returns the string to represent the instance of the NetworkTopologies class all_network_topologies()  returns dict of all the network topologies in the commcell __len__()  returns the number of topologies associated with the Commcell add(topology_name)  adds a new network topology to the commcell get(topology_name)  returns the NetworkTopology class object of the input topology name delete(topology_name)  deletes the specified network topology from the commcell refresh()  refresh the network topologies associated with the commcell NetworkTopology: __init__(commcell_object, network_topology_name, network_topology_id=None)  initialize object of NetworkTopology class with the specified network topology name and id __repr__()  return the network topology name, the instance is associated with _get_network_topology_id()  method to get the network topology id if not specified _initialize_network_topology_properties() initializes the properties of this network topology update()  update properties of existing network topology network_topology_name()  updates new name for network topology description()  updates description for network topology network_topology_type()  updates network topology type firewall_groups()  updates client groups associated with the topology push_network_config()  performs a push network configuration on network topology refresh()  refresh the properties of network topology"
},
{
"ref":"cvpysdk.network_topology.NetworkTopologies",
"url":147,
"doc":"Class for getting all the network topologies associated with client groups in commcell. Initialize the NetworkTopologies object. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the NetworkTopologies class"
},
{
"ref":"cvpysdk.network_topology.NetworkTopologies.all_network_topologies",
"url":147,
"doc":"Returns dict of all the network topologies associated with the commcell dict - consists of all network topologies of the commcell { \"network_topology_name\": network_topology_id, \"network_topology_name\": network_topology_id }"
},
{
"ref":"cvpysdk.network_topology.NetworkTopologies.has_network_topology",
"url":147,
"doc":"Checks if a network topology exists in the commcell with the input network topology name. Args: network_topology_name (str)  name of network topology Returns: bool - boolean output whether the network topology exists in the commcell or not Raises: SDKException: if type of the network topology name argument is not string",
"func":1
},
{
"ref":"cvpysdk.network_topology.NetworkTopologies.verify_smart_topology_groups",
"url":147,
"doc":"Helper function to verify client groups while creating a smart topology Args: is_smartTopology(bool) - If the type of topology is a smart topology count_mneomic(int) - The number of mnemonic groups within the input Raises: SDKException",
"func":1
},
{
"ref":"cvpysdk.network_topology.NetworkTopologies.create_firewall_groups_list",
"url":147,
"doc":"Is a helper function which is used to create firewall groups list and count the number of mnemonic groups Args: client_groups(list of dict) - client group names and client group types example: [{'group_type':2, 'group_name': \"test1\", 'is_mnemonic': False }, {'group_type':1, 'group_name': \"test2\", 'is_mnemonic': False }, {'group_type':3, 'group_name': \"test3\", 'is_mnemonic': False }] Returns: Tuple - A tuple consisting of firewall_groups_list and number of mnemonic groups",
"func":1
},
{
"ref":"cvpysdk.network_topology.NetworkTopologies.add",
"url":147,
"doc":"Adds a new Network Topology to the Commcell. Args: network_topology_name (str)  name of the new network topology to add client_groups (list of dict)  client group names and client group types [{'group_type':2, 'group_name': \"test1\", 'is_mnemonic': False }, {'group_type':1, 'group_name': \"test2\", 'is_mnemonic': False }, {'group_type':3, 'group_name': \"test3\", 'is_mnemonic': False }]  kwargs (dict)  Key value pairs for supported arguments Supported argument values: use_wildcard (boolean)  option to use wildcard proxy for proxy type topology Default value: False is_smart_topology (boolean)  specified as true for smart topology must be set if one mnemonic group is present Default value: False topology_type (int)  to specify type of network topology topology_description (str)  to specify topology description display_type (int)  to specify display type for firewall extended properties Default value: 0 encrypt_traffic (int)  to specify whether encrypt traffic or not Default vaule: 0 number_of_streams (int)  to specify number of streams Default vaule: 1 region_id (int)  to sspecify region id Default value: 0 connection_protocol (int)  to specify the protocols Default vaule: 2 Possible input values: topology_type : 1  - for proxy topology 2  - for one-way topology 3  - for two-way topology display_type: 0  - servers 1  - laptops group_type for client_groups: 2: first client group in GUI screen 1: second client group in GUI screen 3: third client group in GUI screen is_mnemonic for client_groups: True: if the specified group is a mnemonic False: if the specified group is a client group Returns: object - instance of the NetworkTopology class created by this method Raises: SDKException: if topology creation fails if topology with same name already exists if client group specified is already a part of some topology",
"func":1
},
{
"ref":"cvpysdk.network_topology.NetworkTopologies.get",
"url":147,
"doc":"Returns the network topology object of the specified network topology name. Args: network_topology_name (str)  name of the network topology Returns: object - instance of the NetworkTopology class for the given network topology name Raises: SDKException: if type of the network topology name argument is not string if no network topology exists with the given name",
"func":1
},
{
"ref":"cvpysdk.network_topology.NetworkTopologies.delete",
"url":147,
"doc":"Deletes the Network Topology from the commcell. Args: network_topology_name (str)  name of the network topology Raises: SDKException: if type of the network topology name argument is not string if failed to delete the network topology if no network topology exists with the given name",
"func":1
},
{
"ref":"cvpysdk.network_topology.NetworkTopologies.refresh",
"url":147,
"doc":"Refresh the network topologies associated with the Commcell.",
"func":1
},
{
"ref":"cvpysdk.network_topology.NetworkTopology",
"url":147,
"doc":"Class for performing operations for a specific network topology. Initialize the NetworkTopology class instance. Args: commcell_object (object)  instance of the Commcell class network_topology_name (str)  name of the network topology network_topology_id (str)  id of the network topology default: None Returns: object - instance of the NetworkTopology class"
},
{
"ref":"cvpysdk.network_topology.NetworkTopology.update",
"url":147,
"doc":"Update the network topology properties of network topology. Args: firewall_groups(list of dict)  client group names and client group types [{'group_type':2, 'group_name': \"test1\", 'is_mnemonic': False }, {'group_type':1, 'group_name': \"test2\", 'is_mnemonic': False }, {'group_type':3, 'group_name': \"test3\", 'is_mnemonic': False }]  kwargs (dict)  Key value pairs for supported arguments Supported arguments: network_topology_name (str)  new name of the network topology description (str)  description for the network topology topology_type (int)  network topology type wildcard_proxy (boolean)  option to use wildcard proxy for proxy type topology is_smart_topology (boolean)  specified as true for smart topology encrypt_traffic (int)  to specify whether encrypt traffic or not Default vaule: 0 number_of_streams (int)  to specify number of streams Default vaule: 1 region_id (int)  to sspecify region id Default value: 0 connection_protocol (int)  to specify the protocols Default vaule: 2 Possible input values: topology_type : 1  - for proxy topology 2  - for one-way topology 3  - for two-way topology group_type for client_groups: 2: first client group in GUI screen 1: second client group in GUI screen 3: third client group in GUI screen is_mnemonic for client_groups: True: if the specified group is a mnemonic False: if the specified group is a client group Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.network_topology.NetworkTopology.network_topology_id",
"url":147,
"doc":"Treats the network topology id as a read-only attribute."
},
{
"ref":"cvpysdk.network_topology.NetworkTopology.network_topology_name",
"url":147,
"doc":"Treats the network topology name as a read-only attribute."
},
{
"ref":"cvpysdk.network_topology.NetworkTopology.description",
"url":147,
"doc":"Treats the network topology description as a read-only attribute."
},
{
"ref":"cvpysdk.network_topology.NetworkTopology.network_topology_type",
"url":147,
"doc":"Treats the network topology type as read-only attribute"
},
{
"ref":"cvpysdk.network_topology.NetworkTopology.extended_properties",
"url":147,
"doc":"Treats the extended properties as read-only attribute"
},
{
"ref":"cvpysdk.network_topology.NetworkTopology.firewall_groups",
"url":147,
"doc":"Treats the associated client groups as read only attribute"
},
{
"ref":"cvpysdk.network_topology.NetworkTopology.wildcard_proxy",
"url":147,
"doc":"Treats the use wildcard proxy option as read only attribute"
},
{
"ref":"cvpysdk.network_topology.NetworkTopology.push_network_config",
"url":147,
"doc":"Performs a push network configuration on network topology Raises: SDKException: if failed to push configuration on network topology if response is not success",
"func":1
},
{
"ref":"cvpysdk.network_topology.NetworkTopology.refresh",
"url":147,
"doc":"Refresh the properties of Network Topology",
"func":1
},
{
"ref":"cvpysdk.operation_window",
"url":148,
"doc":"File for performing Operation Window related operations on given Commcell entity. OperationWindow and OperationWindowDetails are 2 classes defined in this class. OperationWindow: Class for performing Operation Window related operations on given Commcell entity. OperationWindowDetails: Class for modifying an existing operation window OperationWindow:        = __init__()  Initialize instance of the OperationWindow class create_operation_window()  Creates a Operation rule on the given commcell entity delete_operation_window()  Deletes a Operation rule on the commcell entity(Using rule_id/name) list_operation_window()  Lists all the operation rule associated with given commcell entity get()  Returns instance of OperationWindowDetails class(Using rule_id/name) OperationWindowDetails:            __init__()  Initialize instance of OperationWindowDetails class modify_operation_window()  Modifies a Operation window _refresh()  Refreshes the properties of a rule _get_rule_properties()  Assigns the properties of an operation by getting the rule using rule id OperationWindowDetails Instance Attributes:                       name  Returns/Modifies the name of the operation window  start_date  Returns/Modifies the start date of the operation window  end_date  Returns/Modifies the end date of the operation window  operations  Returns/Modifies the operations of the operation window  day_of_week  Returns/Modifies the day of week of the operation window  start_time  Returns/Modifies the start time of the operation window  end_time  Returns/Modifies the end time of the operation window  rule_id  Returns rule id of the operation window  commcell_id  Returns commcell id of the entity object  clientgroup_id  Returns client group id of the entity object  client_id  Returns client id of the entity object  agent_id  Returns agent id of the entity object  instance_id  Returns instance id of the entity object  backupset_id  Returns backupset id of the entity object  subclient_id  Returns subclient id of the entity object  entity_level  Returns entity level of the entity object Example with client entity: from cvpysdk.commcell import Commcell commcell = Commcell( , username, password) client = commcell.clients.get( ) from cvpysdk.operation_window import OperationWindow client_operation_window = OperationWindow(client) client_operation_window.list_operation_window() client_operation_window_details = client_operation_window.create_operation_window(name=\"operation window example on clientLevel\") client_operation_window.delete_operation_window(rule_id=client_operation_window_details.rule_id) client_operation_window_details = client_operation_window.get(rule_id=client_operation_window_details.rule_id) client_operation_window_details.modify_operation_window(name=\"Modified operation window example on clientLevel\") Example for modifying a rule: client_operation_window = OperationWindow(client) rules = client_operation_window.list_operation_window() ruleId = rules[0]['ruleId'] client_operation_window_details = OperationWindowDetails(client, ruleId, client_operation_window.entity_details)  You can use get(OperationWindow) method to modify a rule too. client_operation_window_details.modify_operation_window(name=\"Modified operation window example on clientLevel\")"
},
{
"ref":"cvpysdk.operation_window.OperationWindow",
"url":148,
"doc":"Class for representing all operation window related operations Initialize the OperationWindow class instance for performing Operation Window related operations. Args: generic_entity_obj (object)  Commcell entity object Expected value : commcell/Client/Agent/Instance/BackupSet/Subclient/Clientgroup Instance Returns: object - instance of the OperationWindow class Raises: Exception: If invalid instance is passed"
},
{
"ref":"cvpysdk.operation_window.OperationWindow.create_operation_window",
"url":148,
"doc":"Creates operation rule on the initialized commcell entity Args: name (str)  Name of the Operation rule start_date (int)  The start date for the operation rule. Valid values are UNIX-style timestamps (seconds since January 1, 1970). default - current date end_date (int)  The end date for the operation rule. Valid values are UNIX-style timestamps (seconds since January 1, 1970). default - 365 days operations (list)  List of operations for which the operation window is created Acceptable Values: FULL_DATA_MANAGEMENT/NON_FULL_DATA_MANAGEMENT/SYNTHETIC_FULL/ DATA_RECOVERY/AUX_COPY/DR_BACKUP/DATA_VERIFICATION/ERASE_SPARE_MEDIA/ SHELF_MANAGEMENT/DELETE_DATA_BY_BROWSING/DELETE_ARCHIVED_DATA/ OFFLINE_CONTENT_INDEXING/ONLINE_CONTENT_INDEXING/SRM/INFORMATION_MANAGEMENT/ MEDIA_REFRESHING/DATA_ANALYTICS/DATA_PRUNING/BACKUP_COPY/CLEANUP_OPERATION week_of_the_month(list)  List of week of the month on which the operation rule applies to Acceptable Values: all/first/second/third/fourth/last default - None day_of_week (list)  List of days of the week on which the operation rule applies to Acceptable Values: sunday/ monday/ tuesday/ wednesday/ thursday/ friday/ saturday default- Weekdays start_time (int)  The start time for the \"do not run\" interval. Valid values are UNIX-style timestamps (seconds since January 1, 1970). default - 28800 (8 AM) Must specify one timestamp for start time for all the weekdays, otherwise make a list for each weekday mentioned in the day_of_week list. start_time (list)  The list of start timestamps for each weekday mentioned in the day_of_week list. end_time (int)  The end time for the \"do not run\" interval. Valid values are UNIX-style timestamps (seconds since January 1, 1970). default - 86400 (6 PM) Must specify one timestamp for end time for all the weekdays, otherwise make a list for each weekday mentioned in the day_of_week list. end_time (list)  The list of end timestamps for each weekday mentioned in the day_of_week list. Example: 1. day_of_week : [\"sunday\", \"thursday\", \"saturday\"] start_time : 28800 end_time : 86400 The above inputs specify that for all the three days mentioned, start_time and end_time of operation window would be same 2. day_of_week : [\"monday\",\"friday\"] start_time : [3600, 28800] end_time : [18000, 86400] The above input specify that on monday operation window starts at 3600 and ends at 18000 whereas on friday, the operation window starts at 28800 and ends at 86400 do_not_submit_job (bool)  doNotSubmitJob of the operation rule Returns: Returns the instance of created Operation window details Raises: SDKException: if the Operation window could not be created if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.operation_window.OperationWindow.delete_operation_window",
"url":148,
"doc":"Deletes the operation rule associated with given rule Id/Name. Args: rule_id (int)  Rule Id of the operation window name (str)  Name of the operation window Raises: SDKException: if the Operation window could not be deleted if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.operation_window.OperationWindow.list_operation_window",
"url":148,
"doc":"Lists the operation rules for the associated commcell entity. Returns: Returns the List of operation rules (dictionary) associated with given commcell entity Example  [{'ruleEnabled': True, 'doNotSubmitJob': False, 'endDate': 0, 'level': 0, 'name': 'Rule1', 'ruleId': 1, 'startDate': 0, 'operations': ['FULL_DATA_MANAGEMENT', 'NON_FULL_DATA_MANAGEMENT'], 'company': {'_type_': 61, 'providerId': 0, 'providerDomainName':  }, 'dayTime': [{'startTime': 28800, 'endTime': 64800, 'weekOfTheMonth': ['first','third'], 'dayOfWeek': ['sunday','monday']}]} ] Raises: SDKException: if the Operation rules could not be Listed if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.operation_window.OperationWindow.get",
"url":148,
"doc":"Returns the operation rule object for a given rule Args: rule_id (int)  Rule Id of an operation Window name (str)  Name of the operation window Returns: object - instance of the OperationWindowDetails class for the given operation window name/rule Raises: SDKException: if type of the operation window name argument is not string if no operation window exists with such name",
"func":1
},
{
"ref":"cvpysdk.operation_window.OperationWindowDetails",
"url":148,
"doc":"Helper class for modifying operation window Initialize the OperationWindowDetails class instance for modifying OperationWindow. Args: generic_entity_obj (object)  Commcell entity object Expected value : commcell/Client/Agent/Instance/BackupSet/Subclient/Clientgroup Entity rule_id (int)  Rule id of the operation window to be modified entity_details  Details related to the entity Usually gets initialized from OperationWindow class Returns: object - instance of the OperationWindowDetails class"
},
{
"ref":"cvpysdk.operation_window.OperationWindowDetails.modify_operation_window",
"url":148,
"doc":"Modifies the Operation rule. Args: modify_options(dict)  Arbitrary keyword arguments. modify_options Args: name (str)  Name of the Operation rule start_date (int)  The start date for the operation rule. Valid values are UNIX-style timestamps (seconds since January 1, 1970). default - current date end_date (int)  The end date for the operation rule. Valid values are UNIX-style timestamps (seconds since January 1, 1970). default - 365 days operations (list)  List of operations for which the operation window is created Acceptable Values: FULL_DATA_MANAGEMENT/NON_FULL_DATA_MANAGEMENT/SYNTHETIC_FULL/ DATA_RECOVERY/AUX_COPY/DR_BACKUP/DATA_VERIFICATION/ERASE_SPARE_MEDIA/ SHELF_MANAGEMENT/DELETE_DATA_BY_BROWSING/DELETE_ARCHIVED_DATA/ OFFLINE_CONTENT_INDEXING/ONLINE_CONTENT_INDEXING/SRM/INFORMATION_MANAGEMENT/ MEDIA_REFRESHING/DATA_ANALYTICS/DATA_PRUNING/BACKUP_COPY/CLEANUP_OPERATION week_of_the_month(list)  List of week of the month on which the operation rule applies to Acceptable Values: all/first/second/third/fourth/last default - None day_of_week (list)  List of days of the week on which the operation rule applies to Acceptable Values: sunday/ monday/ tuesday/ wednesday/ thursday/ friday/ saturday default- Weekdays start_time (int)  The start time for the \"do not run\" interval. Valid values are UNIX-style timestamps (seconds since January 1, 1970). default - 28800 (8 AM) Must specify one timestamp for start time for all the weekdays, otherwise make a list for each weekday mentioned in the day_of_week list. start_time (list)  The list of start timestamps for each weekday mentioned in the day_of_week list. end_time (int)  The end time for the \"do not run\" interval. Valid values are UNIX-style timestamps (seconds since January 1, 1970). default - 86400 (6 PM) Must specify one timestamp for end time for all the weekdays, otherwise make a list for each weekday mentioned in the day_of_week list. end_time (list)  The list of end timestamps for each weekday mentioned in the day_of_week list. Example: 1. day_of_week : [\"sunday\", \"thursday\", \"saturday\"] start_time : 28800 end_time : 86400 The above inputs specify that for all the three days mentioned, start_time and end_time of operation window would be same 2. day_of_week : [\"monday\",\"friday\"] start_time : [3600, 28800] end_time : [18000, 86400] The above input specify that on monday operation window starts at 3600 and ends at 18000 whereas on friday, the operation window starts at 28800 and ends at 86400 do_not_submit_job (bool)  doNotSubmitJob of the operation rule Raises: SDKException: if the Operation window could not be Modified if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.operation_window.OperationWindowDetails.do_not_submit_job",
"url":148,
"doc":"Treats do_not_submit_job as a read-only attribute."
},
{
"ref":"cvpysdk.operation_window.OperationWindowDetails.name",
"url":148,
"doc":"Treats name as a read-only attribute."
},
{
"ref":"cvpysdk.operation_window.OperationWindowDetails.start_date",
"url":148,
"doc":"Treats start_date as a read-only attribute."
},
{
"ref":"cvpysdk.operation_window.OperationWindowDetails.end_date",
"url":148,
"doc":"Treats end_date as a read-only attribute."
},
{
"ref":"cvpysdk.operation_window.OperationWindowDetails.operations",
"url":148,
"doc":"Treats opearations as a read-only attribute."
},
{
"ref":"cvpysdk.operation_window.OperationWindowDetails.week_of_the_month",
"url":148,
"doc":"Treats week_of_the_month as a read-only attribute."
},
{
"ref":"cvpysdk.operation_window.OperationWindowDetails.day_of_week",
"url":148,
"doc":"Treats day_of_week as a read-only attribute."
},
{
"ref":"cvpysdk.operation_window.OperationWindowDetails.start_time",
"url":148,
"doc":"Treats start_time as a read-only attribute."
},
{
"ref":"cvpysdk.operation_window.OperationWindowDetails.end_time",
"url":148,
"doc":"Treats end_time as a read-only attribute."
},
{
"ref":"cvpysdk.operation_window.OperationWindowDetails.rule_id",
"url":148,
"doc":"Treats rule_id as read-only attribute"
},
{
"ref":"cvpysdk.operation_window.OperationWindowDetails.commcell_id",
"url":148,
"doc":"Treats the commcell id as a read-only attribute."
},
{
"ref":"cvpysdk.operation_window.OperationWindowDetails.clientgroup_id",
"url":148,
"doc":"Treats the client group id as a read-only attribute."
},
{
"ref":"cvpysdk.operation_window.OperationWindowDetails.client_id",
"url":148,
"doc":"Treats the client id as a read-only attribute."
},
{
"ref":"cvpysdk.operation_window.OperationWindowDetails.agent_id",
"url":148,
"doc":"Treats the agent id as a read-only attribute."
},
{
"ref":"cvpysdk.operation_window.OperationWindowDetails.instance_id",
"url":148,
"doc":"Treats the instance id as a read-only attribute."
},
{
"ref":"cvpysdk.operation_window.OperationWindowDetails.backupset_id",
"url":148,
"doc":"Treats the backupset id as a read-only attribute."
},
{
"ref":"cvpysdk.operation_window.OperationWindowDetails.subclient_id",
"url":148,
"doc":"Treats the sub client id as a read-only attribute."
},
{
"ref":"cvpysdk.operation_window.OperationWindowDetails.entity_level",
"url":148,
"doc":"Treats the entity level as a read-only attribute."
},
{
"ref":"cvpysdk.organization",
"url":149,
"doc":"File for doing operations on an organization. This module has classes defined for doing operations for organizations:  . Add a new organization  . Delete an organization  . Enabling Auth Code  . Disabling Auth Code  . Get Auth Code  . Get the list of plans associated with the organization  . Update the plans associated with the organization  . Update the default plan of the organization  . Enabling Operator role for a user  . Disabling Operator role for a user This module now also supports remote operations added as part of Ring Routing project  . Enable fanout to view all organizations from associated service commcells  . Add new organization remotely to a service commcell  . Delete an organization in service commcell remotely  . Manage operators, tags of the organization remotely Organizations       = __init__(commcell_object)  initializes object of the Organizations class associated with the commcell __str__()  returns all the organizations associated with the commcell __repr__()  returns the string representation of an instance of this class __len__()  returns the number of organizations configured on the Commcell __getitem__()  returns the name of the organization for the organization Id or the details for the given organization name _get_organizations()  returns all organizations added to the commcell _get_headers()  returns headers required for remote operations has_organization()  checks whether the organization with given name exists or not add()  adds a new organization to the commcell add_remote_org()  adds a new organization to given service commcell get()  returns Organization class object for the specified input name get_remote_org()  returns RemoteOrganization class object for given input delete()  deletes an organization from the commcell or service commcell dissociate_plans()  disassociates plans from the organization refresh()  refresh the list of organizations in given commcell and/or service commcells Organizations Attributes              all_organizations  returns the dict consisting of organizations and their details  all_organizations_props  returns the dict consisting of organizations and their guid's  fanout  determines if remote operations will be performed, returns current fanout set Organization       __init__()  initializes instance of the Organization class for doing operations on the selected Organization __repr__()  returns the string representation of an instance of this class _get_organization_id()  gets the ID of the Organization _get_properties()  get the properties of the organization _get_company_usergroup()  get usergroups associated to a organization get_security_associations()  get the security associations for a organization _update_properties()  update the properties of the organization _update_properties_json()  update the values of organizationProperties tag in the properties JSON refresh()  refresh the properties of the organization enable_auth_code()  enable Auth Code generation for the organization disable_auth_code()  disable Auth Code generation for the organization add_users_as_operator()  assigns users as operator add_user_groups_as_operator()  assigns user groups as operator activate()  To activate the organization deactivate()  To deactivate the organization verify_owner_assignment_config()  Verifies that the ownership assignments settings are configured and set properly for company enable_auto_discover()  Enable autodiscover option for the oraganization disable_auto_discover()  Diable autodiscover option for the oraganization add_service_commcell_associations()  Adds the organization association on service commcell remove_service_commcell_associations() Removes the orgainization association on service commcell enable_tfa()  Enable tfa option for the organization disable_tfa()  Disable tfa option for the organization get_alerts()  get all the alerts associated to organization add_client_association()  Associates a client to an organization remove_client_association()  Removes the client from an organization enable_company_data_privacy()  enable company privacy to prevent admin access to company data disable_company_data_privacy()  To disable company privacy to prevent admin access to company data enable_owner_data_privacy()  To enable company privacy to allow owner to enable data privacy disable_owner_data_privacy()  To disable company privacy to allow owner to enable data privacy update_security_associations()  Updates Security Associations for user or usergroup on Organisation update_email_settings()  Updates Email settings for the organisation retire_offline_laptops()  Updates Company Laptops Retire / Delete settings passkey()  Handles Enable / Disable / Authorise / Change Passkey functionalities for Organisation allow_owners_to_enable_passkey()  Enables option to allow owners to enable / disable passkey Organization Attributes            - Following attributes are available for an instance of the Organization class:  organization_id  returns the id of the organization  organization_name  returns the name of the organization  description  returns the description for the organization  email_domain_names  returns the list of email domain names associated with the organization  domain_name  returns the primary domain associated with the organization  auth_code  returns the Auth Code for the Organization, if enabled  is_auth_code_enabled  returns boolean specifying whether Auth Code is enabled for the organization or not  machine_count  returns the count of machines associated with the organization  user_count  returns the count of users associated with the organization  contacts  returns the list of primary contacts for the organization  sender_name  returns email sender name  sender_email  returns email adress of sender  default_plan  returns the default plan associated with the organization  plans  returns the list of plans associated with the organization  operator_role  returns the operator role assigned to an user  tenant_operator  returns the operators associated with the organization  is_auto_discover_enabled  returns the autodiscover option for the Organization  is_backup_disabled  returns the backup activity status for the Organization  is_restore_disabled  returns the restore activity status for the Organization  is_login_disabled  returns the Login activity status for the Organization  password_age_days  returns the password age days for the Organization  is_download_software_from_internet_enabled  returns the status of download software option for the Organization  is_tfa_enabled  returns the status of tfa for the organization.  tfa_enabled_user_groups  returns list of user groups names for which tfa is enabled.  is_using_upn  returns if organization is using upn or not  reseller_enabled  returns if reseller is enabled or not  is_data_encryption_enabled  returns if owners are allowed to enable data encryption  infrastructure_type  returns infrastructure associated with a organization  auto_laptop_owners_enabled  returns if laptop owners are assigned automatically for an organization  supported_solutions  returns the supported solutions for an organization  job_start_time  returns the job start time associated with the organization  client_groups  returns clientgroups associated with the organization  file_exceptions  returns dictionary consisting Global File exceptions for the Organisation  sites  Returns Sites configured for Organisation  tags  Returns Tags associated with Organisation  isPasskeyEnabled  Returns True - If Passkey is enabled at Organisation level  isAuthrestoreEnabled  Returns True - If Authrestore is enabled at Organisation level  isAllowUserstoEnablePasskeyEnabled  Returns True - If users have rights to enable passkey  is_company_privacy_enabled  Returns True if the privacy is enabled for organization  is_owner_data_privacy_enabled  Returns True if the privacy is enabled for owner of client in organization  company_theme  Returns the company level theme if it exists  user_session_timeout  Returns the time after which user session expires for company users RemoteOrganization       __init__()  initializes instance of the RemoteOrganization class for doing remote operations on the selected Organization __repr__()  returns the string representation of an instance of this class _get_organization_id()  gets the local ID of the RemoteOrganization _get_properties()  get the properties of the organization by fanout refresh()  refresh the properties of the organization activate()  To activate the organization deactivate()  To deactivate the organization get_entity_counts()  To get the counts of associated entities for company Organization Attributes            - Following attributes are available for an instance of the RemoteOrganization class:  organization_id  returns the local id of the organization  organization_name  returns the name of the organization  homecell  returns the commserve name of the service commcell of this org  organization_name  returns the name of the organization  domain_name  returns the primary domain associated with the organization (alias)  reseller_enabled  returns if reseller is enabled or not  is_backup_disabled  returns the backup activity status for the Organization  is_restore_disabled  returns the restore activity status for the Organization  is_login_disabled  returns the Login activity status for the Organization  tags  Returns Tags associated with Organisation  operators  Returns Operators associated with this Organization"
},
{
"ref":"cvpysdk.organization.Organizations",
"url":149,
"doc":"Class for doing operations on Organizations like add / delete an organization, etc. Initializes an instance of the Organizations class to perform operations on a company. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the Organizations class"
},
{
"ref":"cvpysdk.organization.Organizations.all_organizations",
"url":149,
"doc":"Returns the dictionary consisting of all the organizations and their info. dict - consists of all the organizations configured on the commcell { \"organization1_name\": organization1_id, \"organization2_name\": organization2_id }"
},
{
"ref":"cvpysdk.organization.Organizations.all_organizations_props",
"url":149,
"doc":"Returns the dictionary consisting of all the organizations guid info and redirect URL if present. dict - consists of all the organizations configured on the commcell and/or service commcells { \"organization1_name\": { GUID : \"49DADF71-247E-4D59-8BD8-CF7BFDF7DB28\", redirect_url: \" \", home_commcell: \" \", count: 11 }, \"organization2_name\": { GUID : \"49DADF71-247E-4D59-8BD8-CF7BFDF7DB27\", redirect_url: None, home_commcell: \" \", count: 8 } }"
},
{
"ref":"cvpysdk.organization.Organizations.fanout",
"url":149,
"doc":"Returns status of fanout headers are enabled or not Returns: bool - True/False"
},
{
"ref":"cvpysdk.organization.Organizations.has_organization",
"url":149,
"doc":"Checks if an organization exists in the Commcell with the input organization name. Args: name (str)  name of the organization Returns: bool - boolean output whether the organization exists in the commcell or not Raises: SDKException: if type of the organization name argument is not string",
"func":1
},
{
"ref":"cvpysdk.organization.Organizations.add_remote_org",
"url":149,
"doc":"Adds a new organization with the given name to the Commcell. Args: name (str)  name of the organization to create email (str)  email of the primary contact contact_name (str)  name of the primary contact company_alias (str)  alias of the company email_domain (list)  list of email domains supported for the organization if no value is given, domain of the user creating the organization will be used default: None primary_domain (str)  custom primary domain for organization default: None default_plans (list)  list of default plans to be associated with the organization default: None send_email (bool)  If set to true, a welcome email is sent to the primary contact user. default: False target (str)  service commcell name where to add organization default: current commcell Returns: object - instance of the RemoteOrganization class Raises: SDKException: if organization with the given name already exists if inputs are not valid if failed to create the organization remotely if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.organization.Organizations.add",
"url":149,
"doc":"Adds a new organization with the given name to the Commcell. Args: name (str)  name of the organization to create email (str)  email of the primary contact contact_name (str)  name of the primary contact company_alias (str)  alias of the company email_domain (list)  list of email domains supported for the organization if no value is given, domain of the user creating the organization will be used default: None primary_domain (str)  custom primary domain for organization default: None default_plans (list)  list of default plans to be associated with the organization default: None service_commcells (list)  list of service commmcells to be associated with the organization default: None send_email (bool)  If set to true, a welcome email is sent to the primary contact user. default: False Returns: object - instance of the Organization class, for the newly created organization Raises: SDKException: if organization with the given name already exists if inputs are not valid if failed to create the organization if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.organization.Organizations.get",
"url":149,
"doc":"Returns an instance of the Organization class for the given organization name. Args: name (str)  name of the organization to get the instance of Returns: object - instance of the Organization class for the given organization name Raises: SDKException: if type of the organization name argument is not string if no organization exists with the given name",
"func":1
},
{
"ref":"cvpysdk.organization.Organizations.get_remote_org",
"url":149,
"doc":"Returns an instance of the RemoteOrganization class for the given organization name. Args: name (str)  name of the remote organization to get the instance of Returns: object - instance of the RemoteOrganization class for the given organization name Raises: SDKException: if type of the organization name argument is not string if no organization exists with the given name",
"func":1
},
{
"ref":"cvpysdk.organization.Organizations.delete",
"url":149,
"doc":"Deletes the organization with the given name from the Commcell. Args: name (str)  name of the organization to delete deactivate (bool)  Whether to deactivate organization before deleting, By default organization will be deactivated Returns: None - if the organization was removed successfully Raises: SDKException: if organization with the given name does not exists if failed to delete the organization if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.organization.Organizations.refresh",
"url":149,
"doc":"Refresh the list of organizations associated to the Commcell. Args: hard (bool)  flag to hard refresh mongo cache for this entity",
"func":1
},
{
"ref":"cvpysdk.organization.Organization",
"url":149,
"doc":"Class for performing operations on an Organization. Initialise the Client class instance. Args: commcell_object (object)  instance of the Commcell class organization_name (str)  name of the organization organization_id (str)  id of the organization default: None Returns: object - instance of the Organization class"
},
{
"ref":"cvpysdk.organization.Organization.is_using_upn",
"url":149,
"doc":"Returns if company uses UPN instead of Email"
},
{
"ref":"cvpysdk.organization.Organization.reseller_enabled",
"url":149,
"doc":"Returns if reseller is enabled"
},
{
"ref":"cvpysdk.organization.Organization.is_data_encryption_enabled",
"url":149,
"doc":"Returns if owners are allowed to enable data encryption"
},
{
"ref":"cvpysdk.organization.Organization.set_data_encryption_enabled",
"url":149,
"doc":"Sets property to allow owners to enable data encryption",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.infrastructure_type",
"url":149,
"doc":"Returns infrastructure type"
},
{
"ref":"cvpysdk.organization.Organization.auto_laptop_owners_enabled",
"url":149,
"doc":"Returns if laptop owners are assigned automatically"
},
{
"ref":"cvpysdk.organization.Organization.set_auto_laptop_owners",
"url":149,
"doc":"Sets the property in company to assign owners to laptop automatically Args: client_assign_type (int): client owner assignment type client_assign_value (str): client owner assignment value",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.supported_solutions",
"url":149,
"doc":"Returns the supported solutions supported solution from API is a integer value and it needs to be changed to a list"
},
{
"ref":"cvpysdk.organization.Organization.job_start_time",
"url":149,
"doc":"Returns the job start time for a company or 'System default' if not set"
},
{
"ref":"cvpysdk.organization.Organization.get_security_associations",
"url":149,
"doc":"Get the security associations for a organization Returns: (dict) { 'master': [ ['Array Management'], ['Create Role', 'Edit Role', 'Delete Role'], ['Master'] ], 'User2': [ ['View'] ] }",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.update_security_associations",
"url":149,
"doc":"Updates Security Associations Of an Organisation Args: userOrGroupName (str)  User or User Group name roleName (str)  eg : 'Alert Owner' or 'Tenant Admin' or 'Tenant Operator' e.t.c request_type (str)  eg : 'OVERWRITE' or 'UPDATE' or 'DELETE', Default will be OVERWRITE operation isUserGroup (bool)  True or False. set isUserGroup = True, If input is user group. Raises: SDKException: if Invalid User or User Group is passed as parameter if failed to update the properties of the organization if response is empty",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.name",
"url":149,
"doc":"Returns the Organization display name"
},
{
"ref":"cvpysdk.organization.Organization.organization_id",
"url":149,
"doc":"Returns the value of the id for this Organization."
},
{
"ref":"cvpysdk.organization.Organization.organization_name",
"url":149,
"doc":"Returns the value of the name for this Organization."
},
{
"ref":"cvpysdk.organization.Organization.description",
"url":149,
"doc":"Returns the description for this Organization."
},
{
"ref":"cvpysdk.organization.Organization.email_domain_names",
"url":149,
"doc":"Returns the value of the email domain names for this Organization."
},
{
"ref":"cvpysdk.organization.Organization.domain_name",
"url":149,
"doc":"Returns the value of the domain name for this Organization."
},
{
"ref":"cvpysdk.organization.Organization.auth_code",
"url":149,
"doc":"Returns the value of the Auth Code for this Organization."
},
{
"ref":"cvpysdk.organization.Organization.is_auth_code_enabled",
"url":149,
"doc":"Returns boolean whether Auth Code generation is enabled for this Organization or not."
},
{
"ref":"cvpysdk.organization.Organization.is_auto_discover_enabled",
"url":149,
"doc":"Returns boolen whether organization autodiscover attribute enabled for this organization."
},
{
"ref":"cvpysdk.organization.Organization.is_backup_disabled",
"url":149,
"doc":"Returns boolean whether backup is disabled for this organisation"
},
{
"ref":"cvpysdk.organization.Organization.is_restore_disabled",
"url":149,
"doc":"Returns boolean whether restore is disabled for this organisation"
},
{
"ref":"cvpysdk.organization.Organization.is_login_disabled",
"url":149,
"doc":"Returns boolean whether login is disabled for this organisation"
},
{
"ref":"cvpysdk.organization.Organization.password_age_days",
"url":149,
"doc":"Returns the password age days for the organisation"
},
{
"ref":"cvpysdk.organization.Organization.is_download_software_from_internet_enabled",
"url":149,
"doc":"Returns boolean indicating whether download software from the internet is enabled"
},
{
"ref":"cvpysdk.organization.Organization.shared_laptop",
"url":149,
"doc":"Returns boolean whether Shared Laptop Usage is enabled for this Organization or not."
},
{
"ref":"cvpysdk.organization.Organization.machine_count",
"url":149,
"doc":"Returns the count of machines added to this Organization."
},
{
"ref":"cvpysdk.organization.Organization.user_count",
"url":149,
"doc":"Returns the count of Users added to this Organization."
},
{
"ref":"cvpysdk.organization.Organization.contacts",
"url":149,
"doc":"Returns the Primary Contacts for this Organization."
},
{
"ref":"cvpysdk.organization.Organization.operators",
"url":149,
"doc":"Returns the list of operators and roles associated to this organization Returns: list - list of dicts containing operator details Example: [ { 'role': {name:' ', id: }, 'userGroup': {userGroupName:' ', userGroupId: } }, { 'role':{name:' ', id: }, 'user':{userName:' ', userId: } } ]"
},
{
"ref":"cvpysdk.organization.Organization.contacts_fullname",
"url":149,
"doc":"Returns Primary Contacts full name for the organization"
},
{
"ref":"cvpysdk.organization.Organization.default_plan",
"url":149,
"doc":"Returns the Default Plans associated to this Organization."
},
{
"ref":"cvpysdk.organization.Organization.plans",
"url":149,
"doc":"Returns the Plans associated to this Organization."
},
{
"ref":"cvpysdk.organization.Organization.plan_details",
"url":149,
"doc":"Returns the jobstarttime of a plan associated with a company"
},
{
"ref":"cvpysdk.organization.Organization.server_count",
"url":149,
"doc":"Returns the server count associated with a company"
},
{
"ref":"cvpysdk.organization.Organization.sender_name",
"url":149,
"doc":"Returns sender name"
},
{
"ref":"cvpysdk.organization.Organization.sender_email",
"url":149,
"doc":"Returns sender email"
},
{
"ref":"cvpysdk.organization.Organization.update_email_settings",
"url":149,
"doc":"Updates Email Settings of an organisation Args: email_settings (dict)  Dictionary consisting of sender name and email example: email_settings = { 'sender_name' : 'name', 'sender_email' : 'email' } Raises: SDKException: if sender_name or sender_email is missing in inputs",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.user_groups",
"url":149,
"doc":"Returns the user group associated with a company"
},
{
"ref":"cvpysdk.organization.Organization.organization_created_on",
"url":149,
"doc":"Returns the company creation time"
},
{
"ref":"cvpysdk.organization.Organization.file_exceptions",
"url":149,
"doc":"Returns the file exceptions for a company"
},
{
"ref":"cvpysdk.organization.Organization.is_global_file_exceptions_enabled",
"url":149,
"doc":"Returns if file exception is enabled"
},
{
"ref":"cvpysdk.organization.Organization.is_company_privacy_enabled",
"url":149,
"doc":"Returns true if company privacy is enabled"
},
{
"ref":"cvpysdk.organization.Organization.is_owner_data_privacy_enabled",
"url":149,
"doc":"Returns true if owner data privacy is enabled"
},
{
"ref":"cvpysdk.organization.Organization.user_session_timeout",
"url":149,
"doc":"Returns company user session timeout value"
},
{
"ref":"cvpysdk.organization.Organization.dissociate_plans",
"url":149,
"doc":"disassociates plans from the organization Args: value (list)  list of plans Returns: None",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.refresh",
"url":149,
"doc":"Refresh the properties of the Organization.",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.enable_auth_code",
"url":149,
"doc":"Executes the request on the server to enable Auth Code Generation for the Organization. Refresh the Auth Code if Auth Code generation is already enabled for the Organization. Args: None Returns: str - auth code generated from the server Raises: SDKException: if failed to enable auth code generation if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.disable_auth_code",
"url":149,
"doc":"Executes the request on the server to disable Auth Code Generation for the Organization. Args: None Returns: None Raises: SDKException: if failed to disable auth code generation if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.tenant_operator",
"url":149,
"doc":"Returns the operators associated to this organization"
},
{
"ref":"cvpysdk.organization.Organization.add_user_groups_as_operator",
"url":149,
"doc":"Update the local user_group as tenant operator of the company Args: user_group_list (list)  user group list request_type (str)  decides whether to UPDATE, DELETE or OVERWRITE user_group security association",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.add_users_as_operator",
"url":149,
"doc":"Update the local user as tenant operator of the company Args: user_list (list)  list of users request_type (Str)  decides whether to UPDATE, DELETE or OVERWRITE user security association",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.operator_role",
"url":149,
"doc":"Returns the operator role associated to this organization"
},
{
"ref":"cvpysdk.organization.Organization.activate",
"url":149,
"doc":"To activate the organization Args: None Returns: None Raises: SDKException: if failed to activate the organization if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.deactivate",
"url":149,
"doc":"To deactivate the organization Args: disable_backup (bool)  To disable backup default: True disable_restore (bool)  To disable restore default: True disable_login (bool)  To disable login default: True Returns: None Raises: SDKException: if failed to deactivate the organization if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.verify_owner_assignment_config",
"url":149,
"doc":"Verifies that the ownership assignments settings are configured and set properly for company Args: want_ownership_type (int)  Option number for ownership assignment type Raises: SDKException: if response is empty if response is not success if ownership assignment is not correct",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.enable_auto_discover",
"url":149,
"doc":"Enables autodiscover at company level Raises: SDKException: if failed to update enableAutoDiscovery property",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.disable_auto_discover",
"url":149,
"doc":"Disables autodiscover at company level Raises: SDKException: if failed to update enableAutoDiscovery property",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.add_service_commcell_associations",
"url":149,
"doc":"To add organization on service commcell Args: name (str)  name of the organization that has to be created on service commcell service_commcell (str)  name of the commcell where the company has to be created Raises: SDKException: if organization association to service commcell fails if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.remove_service_commcell_associations",
"url":149,
"doc":"To delete the organization association for service commcell Args: name (str)  name of the organization Raises: SDKException: if delete organization association to service commcell fails if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.add_client_association",
"url":149,
"doc":"To associate a client to an organization Args: client_name (str)  name of the client which has to be associated to organization Raises: SDKException: if client association to organization fails if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.remove_client_association",
"url":149,
"doc":"To de-associate a client to an organization Args: client_name (str)  name of the client which has to be associated to organization Raises: SDKException: if client de-association to organization fails if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.is_tfa_enabled",
"url":149,
"doc":"returns the status of two factor authentication (True/False)"
},
{
"ref":"cvpysdk.organization.Organization.tfa_enabled_user_groups",
"url":149,
"doc":"returns the list of user group names for which tfa is enabled. only for group inclusion tfa"
},
{
"ref":"cvpysdk.organization.Organization.enable_tfa",
"url":149,
"doc":"Enables two factor authentication for the oganization. Args: user_groups (list)  list of user group names for which tfa needs to be enabled. Returns: None",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.disable_tfa",
"url":149,
"doc":"Disables two factor authentication for the organization Returns: None",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.client_groups",
"url":149,
"doc":"returns all the clientgroups associated with the organization Returns: dict - consists of all clientgroups associated to an organization { \"clientgroup1_name\": clientgroup1_id, \"clientgroup2_name\": clientgroup2_id, } Raises: SDKException: if response is empty if response is not success"
},
{
"ref":"cvpysdk.organization.Organization.get_alerts",
"url":149,
"doc":"Get all the alerts associated to organization Args: org_id (int) : organization id Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.enable_company_data_privacy",
"url":149,
"doc":"To enable company privacy to prevent admin access to company data",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.disable_company_data_privacy",
"url":149,
"doc":"To disable company privacy to prevent admin access to company data",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.set_company_data_privacy",
"url":149,
"doc":"Method to set company data privacy Args: value (bool): True/False to enable/disable privacy Raises: SDKException: if disable company data privacy to service commcell fails if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.get_retire_laptop_properties",
"url":149,
"doc":"Returns: dict  Retire Laptop Properties of Organization example: { \"retireDevicesAfterDays\": 183, \"forceDeleteDevicesAfterDays\": -1 }"
},
{
"ref":"cvpysdk.organization.Organization.retire_offline_laptops",
"url":149,
"doc":"The number of days specified to retire laptops must be less than or equal to the number of days specified to delete laptops If delete_days is not specified, It will be set to 'Never' Args: retire_days (int)  Number of days to retire laptops delete_days (int)  Number of days to delete laptops Raises: SDKException If retire days is more than delete days",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.sites",
"url":149,
"doc":"Gets the site information of organisation Returns: sites (dict)  sites information of organisation"
},
{
"ref":"cvpysdk.organization.Organization.tags",
"url":149,
"doc":"Returns: tags (list)  List of dictionaries containing TAG values Raises: SDKException: if response is empty if response is not success"
},
{
"ref":"cvpysdk.organization.Organization.isPasskeyEnabled",
"url":149,
"doc":"Returns True if Passkey is enabled on company"
},
{
"ref":"cvpysdk.organization.Organization.isAuthrestoreEnabled",
"url":149,
"doc":"Returns True if Authrestore is enabled on company"
},
{
"ref":"cvpysdk.organization.Organization.isAllowUsersToEnablePasskeyEnabled",
"url":149,
"doc":"Returns True if it is enabled"
},
{
"ref":"cvpysdk.organization.Organization.company_theme",
"url":149,
"doc":"Returns: theme (dict) - the company level theme colors set, empty dict if no company level theme set Example: { loginAndBannerBg: ' 0B2E44', headerColor: ' DDE5ED', headerTextColor: ' 0B2E44', navBg: ' FFFFFF', navIconColor: ' 0b2e44', pageHeaderText: ' 0B2E44', actionBtnBg: ' 0B2E44', actionBtnText: ' eeeeee', linkText: ' 4B8DCC', iconColor: ' 0B2E44' }"
},
{
"ref":"cvpysdk.organization.Organization.passkey",
"url":149,
"doc":"\" Updates Passkey properties of an Organisation Args: current_password (str)  User Current Passkey to perform actions action (str)  'enable' | 'disable' | 'change passkey' | 'authorise' new_password (str)  Resetting existing Passkey Raises: SDKException: if invalid action is passed as a parameter if request fails to update passkey properties of an organisation if new password is missing while changing passkey",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.enable_owner_data_privacy",
"url":149,
"doc":"To enable company privacy to allow owner to enable data privacy",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.disable_owner_data_privacy",
"url":149,
"doc":"To disable company privacy to allow owner to enable data privacy",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.allow_owners_to_enable_passkey",
"url":149,
"doc":"Enable or Disable option to allow owners to enable privacy Args: flag (boolean)  True (Enable Passkey) or False (Disable Passkey)",
"func":1
},
{
"ref":"cvpysdk.organization.Organization.update_general_settings",
"url":149,
"doc":"Method to update properties of general settings in an organization Args: general_settings_dict (dict): general settings properties to be modified Eg. properties_dict = { \"newName\": \"string\", \"general\": { \"newAlias\": \"string\", \"emailSuffix\": \"string\", \"authcodeForInstallation\": true, \"twoFactorAuth\": { \"enable\": true, \"all\": true, \"userGroups\": [ { \"id\": 0, \"name\": \"string\" } ] }, \"resellerMode\": true, \"enableDataEncryption\": true, \"autoDiscoverApp\": true, \"infrastructureType\": \"RENTED_STORAGE\", \"supportedSolutions\": [ \"FILE_SERVER\" ], \"assignLaptopOwners\": \"LOGGED_IN_ACTIVE_DIRECTORY_USERS\", } } Raises: SDKException: if unable to update general settings if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.organization.RemoteOrganization",
"url":149,
"doc":"Class for performing remote operations on an Organization. Initialise the RemoteOrganization instance. Args: commcell_object (object)  instance of the Commcell class organization_name (str)  name of the organization organization_id (str)  id of the organization default: None homecell (str)  the belonging service commcell of this organization default: None Returns: object - instance of the RemoteOrganization class"
},
{
"ref":"cvpysdk.organization.RemoteOrganization.reseller_enabled",
"url":149,
"doc":"Returns if reseller is enabled Returns: bool - True if reseller mode is enabled for the company"
},
{
"ref":"cvpysdk.organization.RemoteOrganization.name",
"url":149,
"doc":"Returns the Organization display name Returns: str - name of this organization"
},
{
"ref":"cvpysdk.organization.RemoteOrganization.organization_id",
"url":149,
"doc":"Returns the value of the id for this Organization. Returns: str - id of this organization (in given commcell)"
},
{
"ref":"cvpysdk.organization.RemoteOrganization.homecell",
"url":149,
"doc":"Returns the service commcell name of this Organization. Returns: str - commserve name where this organization exists"
},
{
"ref":"cvpysdk.organization.RemoteOrganization.organization_name",
"url":149,
"doc":"Returns the value of the name for this Organization. Returns: str - organization name"
},
{
"ref":"cvpysdk.organization.RemoteOrganization.domain_name",
"url":149,
"doc":"Returns the value of the domain name for this Organization. Returns: str - alias name/domain name of this organization"
},
{
"ref":"cvpysdk.organization.RemoteOrganization.parent_company",
"url":149,
"doc":"Returns the parent company details dict of this organization (if it is child company). Returns: dict - parent company details Example: { '_type_':  , 'providerId':  , 'providerDomainName': ' ' }"
},
{
"ref":"cvpysdk.organization.RemoteOrganization.is_backup_disabled",
"url":149,
"doc":"Returns boolean whether backup is disabled for this organisation Returns: bool - True if backup is disabled"
},
{
"ref":"cvpysdk.organization.RemoteOrganization.is_restore_disabled",
"url":149,
"doc":"Returns boolean whether restore is disabled for this organisation Returns: bool - True if restore is disabled"
},
{
"ref":"cvpysdk.organization.RemoteOrganization.is_login_disabled",
"url":149,
"doc":"Returns boolean whether login is disabled for this organisation Returns: bool - True if login is disabled"
},
{
"ref":"cvpysdk.organization.RemoteOrganization.refresh",
"url":149,
"doc":"Refresh the properties of the Organization.",
"func":1
},
{
"ref":"cvpysdk.organization.RemoteOrganization.operators",
"url":149,
"doc":"Returns the list of operators and roles associated to this organization Returns: list - list of dicts containing operator details Example: [ { 'role': {name:' ', id: }, 'userGroup': {userGroupName:' ', userGroupId: } }, { 'role':{name:' ', id: }, 'user':{userName:' ', userId: } } ]"
},
{
"ref":"cvpysdk.organization.RemoteOrganization.activate",
"url":149,
"doc":"To activate the organization remotely Args: None Returns: None Raises: SDKException: if failed to activate the organization if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.organization.RemoteOrganization.deactivate",
"url":149,
"doc":"To deactivate the organization remotely Args: disable_backup (bool)  To disable backup default: True disable_restore (bool)  To disable restore default: True disable_login (bool)  To disable login default: True Returns: None Raises: SDKException: if failed to deactivate the organization if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.organization.RemoteOrganization.tags",
"url":149,
"doc":"Returns: tags (list)  List of dictionaries containing TAG values Example: [ { \"name\": \"key1\", \"value\": \"value1\" }, { \"name\": \"key2\", \"value\": \"value2\" } ] Raises: SDKException: if response is empty if response is not success"
},
{
"ref":"cvpysdk.organization.RemoteOrganization.get_entity_counts",
"url":149,
"doc":"Gets the entity type and counts for company's associated entities Returns: dict - entity as key and count as value {'total': 8, 'Alert definitions': 4, 'User': 1, 'User group': 2, 'Server group': 1} Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.plan",
"url":150,
"doc":"Main file for performing plan operations. Plans,PlanTypes and Plan are the classes defined in this file. Plans: Class for representing all the plans in the commcell PlanTypes : Class for representing plan types Plan: Class for representing a single plan of the commcell Plans   = __init__(commcell_object)  initialise object of plans class of the commcell __str__()  returns all the plans associated with the commcell __repr__()  returns the string for the instance of the plans class __len__()  returns the number of plans added to the Commcell __getitem__()  returns the name of the plan for the given plan Id or the details for the given plan name _get_plans()  gets all the plans associated with the commcell specified _get_plan_template()  gets the Plan subtype's JSON template add()  adds a new Plan to the CommCell has_plan()  checks if a plan exists with the given name or not get()  returns the instance of the Plans class delete()  deletes the plan from the commcell refresh()  refresh the plans associated with the commcell add_data_classification_plan()- Adds data classification plan to the commcell get_supported_solutions()  returns the supported solutions for plans add_exchange_plan()  Adds a new exchange plan to the commcell create_server_plan()  creates a new server plan to the commcell Attributes       all_plans  returns the dict consisting of plans and their details Plan   __init__()  initialise instance of the plan for the commcell __repr__()  return the plan name, the instance is associated with _get_plan_id()  method to get the plan id, if not specified in __init__ _get_plan_properties()  get the properties of this plan _update_plan_props()  method to update plan properties _get_associated_entities()  method to get list of entities associated to a plan derive_and_add()  add new plan by deriving from the parent Plan object plan_name  returns the name of the plan plan_id  returns the ID of the plan refresh()  refresh the properties of the plan associate_user()  associates users to the plan modify_schedule()  modifies the RPO schedules of the plan add_storage_copy()  adds a storage pool as a copy to the plan disable_full_schedule()  disables the full schedule of a plan share()  shares plan with given user by associating given role schedule()  create/delete schedule on DC Plan edit_plan()  edit plan options update_security_associations()  to update security associations of a plan get_plan_properties()  method to get the properties of the plan fetched via v4 API get_storage_copy_details()  method to get storage copy details get_storage_copy_id()  method to get storage copy id add_copy()  method to add a copy to the plan edit_copy()  method to edit a copy of the plan delete_copy()  method to delete a copy from the plan add_region()  method to add a region to the plan remove_region()  method to remove a region from the plan get_schedule_properties()  method to get the schedule properties of the plan add_schedule()  method to add a schedule to the plan edit_schedule()  method to edit a schedule of the plan delete_schedule()  method to delete a schedule from the plan edit_snapshot_options()  method to edit snapshot options of the plan update_backup_content()  method to update backup content of the plan Plan Attributes          plan_id  returns the id of the plan  plan_name  returns the name of the plan  sla_in_minutes  returns the SLA/RPO of the plan  plan_type  returns the type of the plan  subtype  returns the subtype of the plan  override_entities  returns the override restrictions of the plan  storage_policy  returns the storage policy of the plan  schedule_policies  returns the schedule policy of the plan  subclient_policy  returns the subclient policy of the plan  associated_entities  returns all the backup entities associated with the plan  operation_window  returns the incremental operation window set by the plan  full_operation_window  returns the full operation window set by the plan  associated_entities  returns all the entities associated with the plan  content_indexing_props  returns the DC plan related properties from the plan  applicable_solutions  returns applicable solutions configured on server plan"
},
{
"ref":"cvpysdk.plan.PlanTypes",
"url":150,
"doc":"Class Enum to represent different plan types"
},
{
"ref":"cvpysdk.plan.PlanTypes.Any",
"url":150,
"doc":""
},
{
"ref":"cvpysdk.plan.PlanTypes.DLO",
"url":150,
"doc":""
},
{
"ref":"cvpysdk.plan.PlanTypes.MSP",
"url":150,
"doc":""
},
{
"ref":"cvpysdk.plan.PlanTypes.FS",
"url":150,
"doc":""
},
{
"ref":"cvpysdk.plan.PlanTypes.SNAP",
"url":150,
"doc":""
},
{
"ref":"cvpysdk.plan.PlanTypes.VSA",
"url":150,
"doc":""
},
{
"ref":"cvpysdk.plan.PlanTypes.EXCHANGE",
"url":150,
"doc":""
},
{
"ref":"cvpysdk.plan.PlanTypes.DC",
"url":150,
"doc":""
},
{
"ref":"cvpysdk.plan.PlanTypes.EDISCOVERY",
"url":150,
"doc":""
},
{
"ref":"cvpysdk.plan.PlanTypes.ARCHIVER",
"url":150,
"doc":""
},
{
"ref":"cvpysdk.plan.Plans",
"url":150,
"doc":"Class for representing all the plans in the commcell. Initialize object of Plans class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of Plans class"
},
{
"ref":"cvpysdk.plan.Plans.all_plans",
"url":150,
"doc":"Returns the dictionary consisting of all the plans added to the Commcell. dict - consists of all the plans configured on the commcell { \"plan1_name\": plan1_id, \"plan2_name\": plan2_id }"
},
{
"ref":"cvpysdk.plan.Plans.filter_plans",
"url":150,
"doc":"Returns the dictionary consisting of specified type and company plans. Args: plan_type (str)  Type of plan ['DLO', 'Server', 'Laptop', 'Database', 'FSServer', 'FSIBMiVTL', 'Snap', 'VSAServer', 'VSAReplication', 'ExchangeUser', 'ExchangeJournal', 'Office365', 'Dynamics365', 'DataClassification', 'Archiver'] company_name (str)  To filter plans based on the company. For Commcell, company_name = 'Commcell'. Default will return all plans Returns: dict - consists of all the plans with specified types configured on the commcell { \"plan1_name\": plan1_id, \"plan2_name\": plan2_id } Raises: SDKException: if input data type is not valid if an invalid plan type is passed as a parameter if failed to get the response",
"func":1
},
{
"ref":"cvpysdk.plan.Plans.has_plan",
"url":150,
"doc":"Checks if a plan exists in the commcell with the input plan name. Args: plan_name (str)  name of the plan Returns: bool - boolean output whether the plan exists in the commcell or not Raises: SDKException: if type of the plan name argument is not string",
"func":1
},
{
"ref":"cvpysdk.plan.Plans.get",
"url":150,
"doc":"Returns a plan object of the specified plan name. Args: plan_name (str)  name of the plan Returns: object - instance of the Plan class for the the given plan name Raises: SDKException: if type of the plan name argument is not string if no plan exists with the given name",
"func":1
},
{
"ref":"cvpysdk.plan.Plans.delete",
"url":150,
"doc":"Deletes the plan from the commcell. Args: plan_name (str)  name of the plan to remove from the commcell Raises: SDKException: if type of the plan name argument is not string if failed to delete plan if response is empty if response is not success if no plan exists with the given name",
"func":1
},
{
"ref":"cvpysdk.plan.Plans.add_exchange_plan",
"url":150,
"doc":"Adds a new exchange plan to the commcell. Args: plan_name (str)  name of the new plan to add plan_sub_type (str)  Type of plan to add - ExchangeUser or ExchangeJournal Default: ExchangeUser kwargs (dict)  Optional parameters for creating a plan Accepted Values: retain_msgs_received_time (int)  Retain messages based on received time retain_msgs_deletion_time (int)  Retain messages based on deletion time enable_cleanup_archive_mailbox (bool)  Enable cleanup on archive mailbox cleanup_msg_older_than (int)  Cleanup messages older than cleanup_msg_larger_than (int)  Cleanup messages larger than enable_content_search (bool)  Enable content indexing enable_archive_on_archive_mailbox (bool)  Enable archive on archived mailbox create_stubs (bool)  Create stubs during cleanup prune_stubs (bool)  Prune stubs during cleanup prune_msgs (bool)  Prune messages during cleanup number_of_days_src_pruning (int)  Number of days for source pruning include_msgs_older_than (int)  Include messages older than for archiving include_msgs_larger_than (int)  Inlcude messages larger than for archiving Returns: Plan object of the created plan Raises: SDKException: if input parameters are incorrect if Plan already exists if error in creating the plan",
"func":1
},
{
"ref":"cvpysdk.plan.Plans.create_server_plan",
"url":150,
"doc":"Method to create a server plan using V4 API Args: plan_name (str)  Name of the plan to create backup_destinations (list/dict)  List of dictionaries representing backup destinations. Each dictionary should contain the following keys: - 'storage_name' (str): Name of the storage. - 'retentionPeriodDays' (int): Retention days for the copy (Default: 30 days) - 'backupDestinationName' (str): Name of the copy (Default: 'Primary') - 'region_name' (str, optional): Name of the region To create elastic plans, region_name should be specified for all the copies Examples:  specify just storage and rest use default values {\"storage_name\": \"Backup Storage\"}  specify storage name and retention period {\"storage_name\": \"Backup Storage\", \"retentionPeriodDays\": 30}  create plan with aux copies [ {\"storage_name\": \"Backup Storage 1\"}, {\"storage_name\": \"Backup Storage 2\", \"backupDestinationName\": \"Aux Copy 1\"}, ]  create elastic plan {\"storage_name\": \"Backup Storage\", \"region_name\": \"asia\"}  create elastic plan with multiple regions and multiple copies in each region [ {\"storage_name\": \"Backup Storage 1\", \"region_name\": \"asia\"}, {\"storage_name\": \"Backup Storage 2\", \"region_name\": \"asia\", \"backupDestinationName\": \"Aux Copy Name\"}, {\"storage_name\": \"Backup Storage 3\", \"region_name\": \"africa\"}, {\"storage_name\": \"Backup Storage 4\", \"region_name\": \"africa\", \"backupDestinationName\": \"Aux Copy Name\"} ] Note: Additional properties can be sent in the input to update the payload with the same exact key names. Refer API documentation for more details or use Command Center equivalent API. schedules (list or dict, optional)  List of dictionaries representing backup schedules. Each dictionary should contain the following keys: - backupType (str): Type of backup schedule - forDatabasesOnly (bool): Indicates if the schedule is for databases only (Default: False) - Additional properties to update the default schedule details. Examples:  create plan with default schedules None  create plan with no schedules []  create plan with schedules based on backup type and rest use default values {\"backupType\": \"INCREMENTAL\"} {\"backupType\": \"FULL\"} {\"backupType\": \"TRANSACTIONLOG\"}  specify agents for schedules {\"backupType\": \"INCREMENTAL\", \"forDatabasesOnly\": False} {\"backupType\": \"FULL\", \"forDatabasesOnly\": True}  create plan with multiple schedules [ {\"backupType\": \"INCREMENTAL\"}, {\"backupType\": \"FULL\", \"forDatabasesOnly\": True}, {\"backupType\": \"TRANSACTIONLOG\"} ]  advance properties for schedules {\"backupType\": \"TRANSACTIONLOG\", \"scheduleOption\": {\"useDiskCacheForLogBackups\": True  specify pattern and start time for schedule { \"backupType\": \"INCREMENTAL\", \"schedulePattern\": { \"scheduleFrequencyType\": \"DAILY\", \"startTime\": 75600, \"frequency\": 1 } } Note: Additional properties can be sent in the input to update the payload with the same exact key names. Refer API documentation for more details or use Command Center equivalent API. additional_params (dict)  Additional parameters for creating a plan Accepted Values: rpo_backup_window (list, optional): Backup window for RPO schedules. full_backup_window (list, optional): Backup window for full backup schedules. enable_backup_copy (bool, optional): Enable backup copy. backup_copy_rpo_mins (int, optional): RPO for backup copy in minutes. snap_retention_days (int, optional): Retention period in days. snap_recovery_points (int, optional): Snap recovery point.",
"func":1
},
{
"ref":"cvpysdk.plan.Plans.add",
"url":150,
"doc":"Adds a new Plan to the CommCell. Args: plan_name (str)  name of the new plan to add plan_sub_type (str)  Type of plan to add \"Server\" - Server Plans \"FSServer\" - File System Plans \"Laptop\" - Laptop Plans \"ExchangeUser\" - Exchange Mailbox Plan storage_pool_name (str)  name of the storage pool to be used for the plan sla_in_minutes (int)  Backup SLA in hours default: 1440 override_entities (dict)  Specify the entities with respective inheritance values. default: None { 'privateEntities': [1, 4], 'enforcedEntities': [256, 512, 1024] } - where, privateEntities are set when respective entity overriding is required enforcedEntities are set when respective entity overriding is not allowed left blank if overriding is optional - entity IDs, 1 - Storage 4 - RPO/Schedules 256 - Windows content 512 - Unix content 1024 - Mac content Returns: object - instance of the Plan class created by this method Raises: SDKException: if input parameters are incorrect if Plan already exists",
"func":1
},
{
"ref":"cvpysdk.plan.Plans.get_eligible_plans",
"url":150,
"doc":"Returns dict of plans that are eligible for the specified entities Args: entities (dict) - dictionary containing entities as keys and their respective IDs as values { 'clientId': id, 'appId': id, 'backupsetId': id } Returns: dict - dict of eligible plans Raises: SDKException: if there is an error in the response",
"func":1
},
{
"ref":"cvpysdk.plan.Plans.get_supported_solutions",
"url":150,
"doc":"Method to get supported solutions for plans",
"func":1
},
{
"ref":"cvpysdk.plan.Plans.refresh",
"url":150,
"doc":"Refresh the plans associated with the Commcell. Args: hard (bool)  flag to hard refresh mongo cache for this entity",
"func":1
},
{
"ref":"cvpysdk.plan.Plans.add_data_classification_plan",
"url":150,
"doc":"Adds data classification plan to the commcell Args: plan_name (str)  Name of plan index_server (str)  Index server name target_app (enum)  Target app for this plan cvpysdk.activateapps.constants.TargetApps  kwargs index_content (bool)  Speifies whether to index content or not to index server content_analyzer (list)  list of Content analyzer client name entity_list (list)  list of entities which needs to be extracted classifier_list (list)  list of classifier which needs to be classified enable_ocr (bool)  specifies whether OCR is enabled or not ocr_language (int)  Language to be used when doing OCR Default : English (Value-1) Supported Languages: ENGLISH = 1, HEBREW = 2, SPANISH = 3, FRENCH = 4, ITALIAN = 5, DANISH = 6 include_docs (str)  Include documents type separated by comma exclude_path (list)  List of paths which needs to be excluded min_doc_size (int)  Minimum document size in MB max_doc_size (int)  Maximum document size in MB Returns: object - Plan object Raises: SDKException: if input is not valid if failed to create plan if failed to find entities/classifier details",
"func":1
},
{
"ref":"cvpysdk.plan.Plans.get_plans_summary",
"url":150,
"doc":"Returns plan summary in response Returns: list - plans summary",
"func":1
},
{
"ref":"cvpysdk.plan.Plan",
"url":150,
"doc":"Class for performing operations for a specific Plan. Initialize the Plan class instance. Args: commcell_object (object)  instance of the Commcell class plan_name (str)  name of the plan plan_id (str)  id of the plan default: None Returns: object - instance of the Plan class"
},
{
"ref":"cvpysdk.plan.Plan.derive_and_add",
"url":150,
"doc":"Derives the base plan based on the the inheritance properties to created a derived plan Args: plan_name (str)  name of the new plan to add storage_pool_name (str)  name of the storage pool to be used for the plan default: None : when the name is left to default, it inherits the base plan storage pool if overriding is optional/not allowed sla_in_minutes (int)  Backup SLA in hours default: None : when the SLA is left to default, it inherits the base plan SLA if overriding is optional/not allowed override_entities (dict)  Specify the entities with respective overriding. default: None { 'privateEntities': [1, 4], 'enforcedEntities': [256, 512, 1024] } - where, privateEntities are set when respective entity overriding is must enforcedEntities are set when respective entity overriding is not allowed left blank if overriding is optional - entity IDs, 1 - Storage 4 - SLA/Schedules 256 - Windows content 512 - Unix content 1024 - Mac content Returns: object - instance of the Plan class created by this method Raises: SDKException: if plan name is in incorrect format if plan already exists if neccessary arguments are not passed if inheritance rules are not followed",
"func":1
},
{
"ref":"cvpysdk.plan.Plan.modify_schedule",
"url":150,
"doc":"Modifies the incremental RPO schedule pattern of the plan with the given schedule json Args: schedule_json (dict)  { pattern : {},  Please refer SchedulePattern.create_schedule in schedules.py for the types of pattern to be sent eg: { \"freq_type\": 'daily', \"active_start_time\": time_in_%H/%S (str), \"repeat_days\": days_to_repeat (int) } options: {}  Please refer ScheduleOptions.py classes for respective schedule options eg: { \"maxNumberOfStreams\": 0, \"useMaximumStreams\": True, \"useScallableResourceManagement\": True, \"totalJobsToProcess\": 1000, \"allCopies\": True, \"mediaAgent\": { \"mediaAgentName\": \" \" } } } is_full_schedule (bool)  Pass True if he schedule to be modified is the full backup schedule",
"func":1
},
{
"ref":"cvpysdk.plan.Plan.get_plan_properties",
"url":150,
"doc":"Method to get the properties of this plan fetched from v4 API. Returns: Dict: A dictionary containing the properties of the plan fetched from the v4 API.",
"func":1
},
{
"ref":"cvpysdk.plan.Plan.get_storage_copy_details",
"url":150,
"doc":"Method to get the storage copy details of the given copy name and region name Args: copy_name (str): Name of the copy region_name (str, optional): Name of the region Returns: dict: Dictionary consisting of the properties of the given copy name",
"func":1
},
{
"ref":"cvpysdk.plan.Plan.get_storage_copy_id",
"url":150,
"doc":"Gets the storage copy id of the given copy name Args: copy_name (str): Name of the copy region_name (str, optional): Name of the region Returns: int: Storage copy id of the given copy name",
"func":1
},
{
"ref":"cvpysdk.plan.Plan.add_copy",
"url":150,
"doc":"Method to add an aux copy to the plan Args: copy_name (str) - name of the copy that is being added storage_pool (str) - name of the storage pool that is to be used for the copy retention (int) - retention period in days for the copy extended_retention (dict) - extended retention rules of a copy region (str) - region name to which copy needs to be added Returns: None Raises: SDKException: - if failed to add new copy to the plan",
"func":1
},
{
"ref":"cvpysdk.plan.Plan.edit_copy",
"url":150,
"doc":"Method to edit a copy settings Args: copy_name (str): name of the copy that is being edited new_retention_days (int): new retention period in days for the copy new_recovery_points (int): new recovery points for the snap copy new_extended_retention (dict): new extended retention rules of a copy current_region_name (str): name of the region from which the copy needs to be edited Example: new_extended_retention = { \"firstExtendedRetentionRule\": { \"isInfiniteRetention\": False, \"type\": \"WEEKLY_FULLS\", \"retentionPeriodDays\": 90 } }",
"func":1
},
{
"ref":"cvpysdk.plan.Plan.delete_copy",
"url":150,
"doc":"Method to remove a copy from the plan Args: copy_name (str) - name of the copy to be removed region_name (str) - name of the region from which the copy needs to be removed Returns: None Raises: SDKException: - if failed to remove the copy from the plan",
"func":1
},
{
"ref":"cvpysdk.plan.Plan.add_region",
"url":150,
"doc":"Method to add a region to the plan Args: region_name (str) - name of the region that is being added Returns: None Raises: SDKException: - if failed to add new region to the plan",
"func":1
},
{
"ref":"cvpysdk.plan.Plan.remove_region",
"url":150,
"doc":"Method to remove a region from the plan Args: region_name (str) - name of the region that is being removed Returns: None Raises: SDKException: - if failed to remove the region from the plan",
"func":1
},
{
"ref":"cvpysdk.plan.Plan.get_schedule_properties",
"url":150,
"doc":"Method to get the schedule properties of the plan Args: schedule_filter (dict) - dictionary containing the filter criteria for the schedule Example for schedule filter:  select the full backup schedule {\"backupType\": \"FULL\"}  select the schedule where backup type is incremental and schedule is applicable to all agents {\"backupType\": \"INCREMENTAL\", \"forDatabasesOnly\": False} Returns: dict - schedule properties of the plan Raises: SDKException: - if no schedule is found with the provided filter - if multiple schedules are found with the provided filter",
"func":1
},
{
"ref":"cvpysdk.plan.Plan.add_schedule",
"url":150,
"doc":"Method to add a new schedule to the plan Args: schedule_options (dict) - schedule options to be added (backupType is mandatory) Note: To prepare advanced schedule options, refer to the API documentation or Command Center equivalent API Example:  create schedule based on backup type and rest use default values {\"backupType\": \"INCREMENTAL\"} {\"backupType\": \"TRANSACTIONLOG\"}  create schedule with advanced properties { \"backupType\": \"FULL\", \"schedulePattern\": { \"scheduleFrequencyType\": \"DAILY\", \"startTime\": 75600, \"frequency\": 1 } }  specify agents for schedules {\"backupType\": \"INCREMENTAL\", \"forDatabasesOnly\": False} {\"backupType\": \"FULL\", \"forDatabasesOnly\": True}  advance properties for schedules {\"backupType\": \"TRANSACTIONLOG\", \"scheduleOption\": {\"useDiskCacheForLogBackups\": True Returns: None Raises: SDKException: - if failed to add the schedule to the plan",
"func":1
},
{
"ref":"cvpysdk.plan.Plan.edit_schedule",
"url":150,
"doc":"Method to edit the schedule options of the plan Args: schedule_options (dict) - schedule options to be edited schedule_filter (dict) - schedule for which the options are to be edited Refer to the add_schedule method for the format of the schedule options Refer to the get_schedule_properties method for the format of the schedule filter Returns: None Raises: SDKException: - if failed to edit the schedule options of the plan",
"func":1
},
{
"ref":"cvpysdk.plan.Plan.delete_schedule",
"url":150,
"doc":"Method to delete the schedule from the plan Args: schedule_filter (dict) - schedule to be deleted Refer to the get_schedule_properties method for the format of the schedule filter Returns: None Raises: SDKException: - if failed to edit the schedule options of the plan",
"func":1
},
{
"ref":"cvpysdk.plan.Plan.edit_snapshot_options",
"url":150,
"doc":"Method to edit the snapshot options of the plan Args: enable_backup_copy (bool) - enable backup copy for the plan backup_copy_rpo (int) - backup copy RPO for the plan Returns: None Raises: SDKException: - if failed to edit the snapshot options of the plan",
"func":1
},
{
"ref":"cvpysdk.plan.Plan.add_storage_copy",
"url":150,
"doc":"Add a storage copy as backup destination to this plan Args: copy_name (str) - name of the copy that is being added storage_pool (str) - name of the storage pool for the copy to be added retention (int) - retention period in days for the copy extended_retention (tuple) - extended retention rules of a copy Example: [1, True, \"EXTENDED_ALLFULL\", 0, 0] Returns: dict - dictionary of all copies of this plan",
"func":1
},
{
"ref":"cvpysdk.plan.Plan.disable_full_schedule",
"url":150,
"doc":"Disable the full backup schedule of the plan",
"func":1
},
{
"ref":"cvpysdk.plan.Plan.edit_association",
"url":150,
"doc":"Reassociates or dissociates the entities from this plan Args: entities (list)  list containing entity objects whose plan association must be edited Eg: [ { \"clientName\": \"client\", \"subclientName\": \"subclient\", \"backupsetName\": \"backupset\", \"appName\": \"app\" } ] new_plan (str)  new plan to which the associated entities must be reassociated with Raises: SDKException if plan not found",
"func":1
},
{
"ref":"cvpysdk.plan.Plan.plan_id",
"url":150,
"doc":"Treats the plan id as a read-only attribute."
},
{
"ref":"cvpysdk.plan.Plan.plan_name",
"url":150,
"doc":"Treats the plan name as a read-only attribute."
},
{
"ref":"cvpysdk.plan.Plan.sla_in_minutes",
"url":150,
"doc":"Treats the plan SLA/RPO as a read-only attribute."
},
{
"ref":"cvpysdk.plan.Plan.operation_window",
"url":150,
"doc":"Treats the plan incremental operation window as a read-only attribute"
},
{
"ref":"cvpysdk.plan.Plan.full_operation_window",
"url":150,
"doc":"Treats the plan full backup operation window as a read-only attribute"
},
{
"ref":"cvpysdk.plan.Plan.plan_type",
"url":150,
"doc":"Treats the plan type as a read-only attribute."
},
{
"ref":"cvpysdk.plan.Plan.subtype",
"url":150,
"doc":"Treats the plan subtype as a read-only attribute."
},
{
"ref":"cvpysdk.plan.Plan.override_entities",
"url":150,
"doc":"Treats the plan override_entities as a read-only attribute."
},
{
"ref":"cvpysdk.plan.Plan.storage_policy",
"url":150,
"doc":"Treats the plan storage policy as a read-only attribute"
},
{
"ref":"cvpysdk.plan.Plan.storage_copies",
"url":150,
"doc":"Treats the plan storage policy as a read-only attribute"
},
{
"ref":"cvpysdk.plan.Plan.schedule_policies",
"url":150,
"doc":"Treats the plan schedule policies as read-only attribute"
},
{
"ref":"cvpysdk.plan.Plan.addons",
"url":150,
"doc":"Treats the plan addons as read-only attribute"
},
{
"ref":"cvpysdk.plan.Plan.subclient_policy",
"url":150,
"doc":"Treats the plan subclient policy as a read-only attribute"
},
{
"ref":"cvpysdk.plan.Plan.associated_entities",
"url":150,
"doc":"getter for the backup entities associated with the plan"
},
{
"ref":"cvpysdk.plan.Plan.parent_plan",
"url":150,
"doc":"getter for the parent plan of a derived plan"
},
{
"ref":"cvpysdk.plan.Plan.security_associations",
"url":150,
"doc":"getter for the plan's security associations Eg: { 'sample_user_group_name': 'role_name' }"
},
{
"ref":"cvpysdk.plan.Plan.update_security_associations",
"url":150,
"doc":"Adds the security association on the plan object Args: associations_list (list)  list of users to be associated Example: associations_list = [ { 'user_name': user1, 'role_name': role1 }, { 'user_name': user2, 'role_name': role2 } ] is_user (bool)  True or False. set is_user = False, If associations_list made up of user groups request_type (str)  eg : 'OVERWRITE' or 'UPDATE' or 'DELETE', Default will be OVERWRITE operation external_group (bool)  True or False, set external_group = True. If Security associations is being done on External User Groups Raises: SDKException: if association is not of List type",
"func":1
},
{
"ref":"cvpysdk.plan.Plan.content_indexing_props",
"url":150,
"doc":"returns the DC plan related CI properties from Plan"
},
{
"ref":"cvpysdk.plan.Plan.properties",
"url":150,
"doc":"Returns the configured properties for the Plan"
},
{
"ref":"cvpysdk.plan.Plan.region_id",
"url":150,
"doc":"Returns the Backup destination region id"
},
{
"ref":"cvpysdk.plan.Plan.refresh",
"url":150,
"doc":"Refresh the properties of the Plan.",
"func":1
},
{
"ref":"cvpysdk.plan.Plan.associate_user",
"url":150,
"doc":"associates the users to the plan.  TODO: Need to handle user groups. Arguments: userlist(list) - list of users to be associated to the plans. Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.plan.Plan.share",
"url":150,
"doc":"Shares plan with given user or group by associating with given role Args: user_or_group_name (str)  User or Group name to which we are sharing role_name (str)  Role name which needs to associated with ops_type (int)  Operation type Default : 1 (Add) Supported : 1 (Add) 3 (Delete) Returns: None Raises: SDKException: if input is not valid if failed to do sharing if user/group/role not exists on commcell if failed to get exisitng association details",
"func":1
},
{
"ref":"cvpysdk.plan.Plan.schedule",
"url":150,
"doc":"Creates or modifies the schedule associated with plan Args: schedule_name (str)  Schedule name pattern_json (dict)  Schedule pattern dict (Refer to Create_schedule_pattern in schedule.py) ops_type (int)  Operation type Default : 2 (Add) Supported : 2 (Add/Modify) Raises: SDKException: if input is not valid if failed to create/modify schedule if plan is not of type Data classification plan",
"func":1
},
{
"ref":"cvpysdk.plan.Plan.edit_plan",
"url":150,
"doc":"Edit plan options Args:  kwargs for Data Classification Plan index_content (bool)  Speifies whether to index content or not to index server content_analyzer (list)  list of Content analyzer client name entity_list (list)  list of entities which needs to be extracted classifier_list (list)  list of classifier which needs to be classified enable_ocr (bool)  specifies whether OCR is enabled or not ocr_language (int)  Language to be used when doing OCR Default : English (Value-1) Supported Languages: ENGLISH = 1, HEBREW = 2, SPANISH = 3, FRENCH = 4, ITALIAN = 5, DANISH = 6 include_docs (str)  Include documents type separated by comma exclude_path (list)  List of paths which needs to be excluded min_doc_size (int)  Minimum document size in MB max_doc_size (int)  Maximum document size in MB",
"func":1
},
{
"ref":"cvpysdk.plan.Plan.policy_subclient_ids",
"url":150,
"doc":"Returns Policy subclient IDs of the plan Returns: dict : OS and its associated subclient ID example: { 'Windows' : windows_subclient_policy_subclient_id, 'Linux' : linux_subclient_policy_subclient_id, 'Mac' : mac_subclient_policy_subclient_id }",
"func":1
},
{
"ref":"cvpysdk.plan.Plan.update_backup_content",
"url":150,
"doc":"Args: content (dict) : dictionary with backup content details. example: content = { 'Windows' : { 'Content' : ['\\%Pictures%', '\\%Desktop%'], 'Exclude' : ['\\%Documents%'], 'Except' : ['\\%Documents%'], 'Backup System State' : True }, 'Linux' : { 'Content' : ['/%Pictures%'], 'Exclude' : ['/%Documents%'] }, 'Mac' : { 'Content' : ['/%Pictures%'], 'Exclude' : ['/%Documents%'] } } request_type (str) : Supported values 'OVERWRITE' (default), 'UPDATE', 'DELETE'. For plans created from SP32, Please use below format of content example: content = { \"windowsIncludedPaths\": [\"Desktop\"], \"windowsExcludedPaths\": [\"Music\"], \"windowsFilterToExcludePaths\": [\"Videos\"], \"backupSystemState\": True, \"useVSSForSystemState\": True, \"backupSystemStateOnlyWithFullBackup\": False } For unix and mac, replace key name with respective os name,  IncludedPaths,  ExcludedPaths,  FilterToExcludePaths",
"func":1
},
{
"ref":"cvpysdk.plan.Plan.applicable_solutions",
"url":150,
"doc":"Method to read applicable solutions"
},
{
"ref":"cvpysdk.policies",
"url":151,
"doc":"Initialize Policies APIs, and Classes for the SDK."
},
{
"ref":"cvpysdk.policies.configuration_policies",
"url":152,
"doc":"Main file for performing Configuration Policies related related operations on the commcell. ConfigurationPolicies: Class for representing all the Configuration Policies associated with the Commcell ConfigurationPolicy: Class for representing a single Configuration Policy. Contains method definitions for common methods among all Configuration Policies ArchivePolicy: Class for representing a single Archive Policy associated with the Commcell; inherits ConfigurationPolicy JournalPolicy: Class for representing a single Journal Policy associated with the Commcell; inherits ConfigurationPolicy CleanupPolicy: Class for representing a single Cleanup Policy associated with the Commcell; inherits ConfigurationPolicy RetentionPolicy: Class for representing a single Retention Policy associated with the Commcell; inherits ConfigurationPolicy ContentIndexingPolicy: Class for representing a single Content Indexing Policy associated with the Commcell; inherits ConfigurationPolicy ConfigurationPolicies: __init__(commcell_object)  initialize the ConfigurationPolicies instance for the Commcell __str__()  returns all the ConfigurationPolicies policies associated with the Commcell __repr__()  returns a string for the instance of the ConfigurationPolicies class _get_policies()  gets all the Configuration policies of the Commcell _get_ci_policies()  gets all the CI configuration policies of the Commcell has_policy(policy_name)  checks if a Configuration policy exists with the given name in a particular instance get(policy_name)  returns a ConfigurationPolicy object of the specified Configuration policy name add(policy_object)  adds a new Configuration policy to the ConfigurationPolicies instance, and returns an object of corresponding policy_type delete(policy_name)  removes the specified Configuration policy from the Commcell get_policy_object()  get the policy object based on policy type run_content_indexing()  runs a Content indexing job for the CI policy ContentIndexingPolicy: __init__()  initializes the ContentIndexingPolicy instance for the given policy name _initialize_policy_json()  creates a JSON payload for the Content Indexing Policy ContentIndexingPolicy Attributes:  name  name of the Content Indexing policy  include_doc_types  list of all the file types to be included while Content Indexing  index_server_name  index server name to be used for Content Indexing  data_access_node  data access node's client name  min_doc_size  minimum documents size in MB  max_doc_size  maximum documents size in MB  exclude_paths  list of all the paths to be excluded from Content Indexing"
},
{
"ref":"cvpysdk.policies.configuration_policies.ConfigurationPolicies",
"url":152,
"doc":"Class for getting all the Configuration policies associated with the commcell. Initialize object of the ConfigurationPolicies class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the ConfigurationPolicies class"
},
{
"ref":"cvpysdk.policies.configuration_policies.ConfigurationPolicies.has_policy",
"url":152,
"doc":"Checks if a Configuration policy exists in the commcell with the input Configuration policy name. Args: policy_name (str)  name of the Configuration policy Returns: bool - boolean output whether the Configuration policy exists in the commcell or not Raises: SDKException: if type of the configuration policy name argument is not string",
"func":1
},
{
"ref":"cvpysdk.policies.configuration_policies.ConfigurationPolicies.get",
"url":152,
"doc":"Returns a ConfigurationPolicy object of the specified Configuration policy name. Args: configuration_policy_name (str)  name of the configuration policy policy_type (str)  type of the policy Returns: object - instance of the ConfigurationPolicy class for the given policy name Raises: SDKException: if type of the Configuration policy name argument is not string if no Configuration policy exists with the given name",
"func":1
},
{
"ref":"cvpysdk.policies.configuration_policies.ConfigurationPolicies.get_policy_object",
"url":152,
"doc":"Get a Policy object based on policy type Args: policy_type (str)  type of policy to create the object of Valid values are: - Archive - Cleanup - Retention - Journal - Content Indexing configuration_policy_name (str)  name of the configuration Policy Returns: object - instance of the appropriate Policy class",
"func":1
},
{
"ref":"cvpysdk.policies.configuration_policies.ConfigurationPolicies.run_content_indexing",
"url":152,
"doc":"Runs Content indexing job from the CI policy level Args: ci_policy_name - Content indexing policy name Returns: Job - Job class object for the CI Job Raises: SDKException: No CI policy exists - if given policy name does not exist Failed to run CI job - if CI job failed to start Response was not success Response received is empty",
"func":1
},
{
"ref":"cvpysdk.policies.configuration_policies.ConfigurationPolicies.delete",
"url":152,
"doc":"Deletes a Configuration policy from the commcell. Args: configuration_policy_name (str)  name of the configuration policy to delete Raises: SDKException: if type of the configuration policy name argument is not string if failed to delete configuration policy if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.policies.configuration_policies.ConfigurationPolicies.add_policy",
"url":152,
"doc":"Adds a new Configuration Policy to the Commcell. Args: policy_object(object)  policy onject based on type of policy Raises: SDKException: if failed to create configuration policy if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.policies.configuration_policies.ConfigurationPolicies.refresh",
"url":152,
"doc":"Refresh the Virtual Machine policies.",
"func":1
},
{
"ref":"cvpysdk.policies.configuration_policies.ConfigurationPolicy",
"url":152,
"doc":"Class for representing a single Configuration Policy. Contains method definitions for common operations among all Configuration Policies Initialize object of the ConfigurationPolicy class. Args: commcell_object (object)  instance of the Commcell class configuration_policy_name (str)  configuration_policy_id (int)  Returns: object - instance of the ConfigurationPolicies class"
},
{
"ref":"cvpysdk.policies.configuration_policies.ConfigurationPolicy.configuration_policy_id",
"url":152,
"doc":"Treats the configuration policy id as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ConfigurationPolicy.configuration_policy_name",
"url":152,
"doc":"Treats the configuration policy name as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy",
"url":152,
"doc":"Class for performing Archive policy operations for a specific archive policy Initialise the Archive Policy class instance."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.name",
"url":152,
"doc":"Treats the name as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.email_policy_type",
"url":152,
"doc":"Treats the email_policy_type as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.archive_mailbox",
"url":152,
"doc":"Treats the archive_mailbox as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.backup_deleted_item_retention",
"url":152,
"doc":"Treats the backup_deleted_item_retention as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.backup_stubs",
"url":152,
"doc":"Treats the backup_stubs as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.disabled_mailbox",
"url":152,
"doc":"Treats the disabled_mailbox as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.enable_mailbox_quota",
"url":152,
"doc":"Treats the enable_mailbox_quota as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.include_messages_larger_than",
"url":152,
"doc":"Treats the include_messages_larger_than as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.include_messages_older_than",
"url":152,
"doc":"Treats the include_messages_older_than as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.include_messages_with_attachements",
"url":152,
"doc":"Treats the include_messages_with_attachements as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.primary_mailbox",
"url":152,
"doc":"Treats the primary_mailbox as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.skip_mailboxes_exceeded_quota",
"url":152,
"doc":"Treats the skip_mailboxes_exceeded_quota as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.include_discovery_holds_folder",
"url":152,
"doc":"Treats the include_discovery_holds_folder as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.include_purges_folder",
"url":152,
"doc":"Treats the include_purges_folder as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.include_version_folder",
"url":152,
"doc":"Treats the include_version_folder as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.save_conversation_meta_data",
"url":152,
"doc":"Treats the save_conversation_meta_data as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.include_categories",
"url":152,
"doc":"Treats the include_categories as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.include_folder_filter",
"url":152,
"doc":"Treats the include_folder_filter as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.exclude_folder_filter",
"url":152,
"doc":"Treats the exclude_folder_filter as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.exclude_message_class_filter",
"url":152,
"doc":"Treats the exclude_message_class_filter as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.content_index_behind_alert",
"url":152,
"doc":"Treats the content_index_behind_alert as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.content_index_data_over",
"url":152,
"doc":"Treats the content_index_data_over as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.deferred_days",
"url":152,
"doc":"Treats the deferred_days as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.enable_content_index",
"url":152,
"doc":"Treats the enable_content_index as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.enable_deferred_days",
"url":152,
"doc":"Treats the enable_deferred_days as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.enable_preview_generation",
"url":152,
"doc":"Treats the enable_preview_generation as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.jobs_older_than",
"url":152,
"doc":"Treats the jobs_older_than as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.retention_days_for_ci",
"url":152,
"doc":"Treats the retention_days_for_ci as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.start_time",
"url":152,
"doc":"Treats the start_time as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.synchronize_on",
"url":152,
"doc":"Treats the synchronize_on as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.path",
"url":152,
"doc":"Treats the path as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.username",
"url":152,
"doc":"Treats the username as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ArchivePolicy.password",
"url":152,
"doc":"Treats the password as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.JournalPolicy",
"url":152,
"doc":"Class for performing Journal policy operations for a specific journal policy Initialise the Journal Policy class instance."
},
{
"ref":"cvpysdk.policies.configuration_policies.JournalPolicy.name",
"url":152,
"doc":"Treats the name as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.JournalPolicy.email_policy_type",
"url":152,
"doc":"Treats the email_policy_type as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.JournalPolicy.complete_job_mapi_error",
"url":152,
"doc":"Treats the complete_job_mapi_error as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.JournalPolicy.delete_archived_messages",
"url":152,
"doc":"Treats the delete_archived_messages as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.JournalPolicy.job_hours_run",
"url":152,
"doc":"Treats the job_hours_run as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.JournalPolicy.job_messages_protected",
"url":152,
"doc":"Treats the job_messages_protected as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.JournalPolicy.include_folder_filter",
"url":152,
"doc":"Treats the include_folder_filter as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.JournalPolicy.exclude_folder_filter",
"url":152,
"doc":"Treats the exclude_folder_filter as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.JournalPolicy.exclude_message_class_filter",
"url":152,
"doc":"Treats the exclude_message_class_filter as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.JournalPolicy.content_index_behind_alert",
"url":152,
"doc":"Treats the content_index_behind_alert as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.JournalPolicy.content_index_data_over",
"url":152,
"doc":"Treats the content_index_data_over as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.JournalPolicy.deferred_days",
"url":152,
"doc":"Treats the deferred_days as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.JournalPolicy.enable_content_index",
"url":152,
"doc":"Treats the enable_content_index as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.JournalPolicy.enable_deferred_days",
"url":152,
"doc":"Treats the enable_deferred_days as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.JournalPolicy.enable_preview_generation",
"url":152,
"doc":"Treats the enable_preview_generation as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.JournalPolicy.jobs_older_than",
"url":152,
"doc":"Treats the jobs_older_than as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.JournalPolicy.retention_days_for_ci",
"url":152,
"doc":"Treats the retention_days_for_ci as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.JournalPolicy.start_time",
"url":152,
"doc":"Treats the start_time as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.JournalPolicy.synchronize_on",
"url":152,
"doc":"Treats the synchronize_on as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.JournalPolicy.path",
"url":152,
"doc":"Treats the path as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.JournalPolicy.username",
"url":152,
"doc":"Treats the username as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.JournalPolicy.password",
"url":152,
"doc":"Treats the password as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy",
"url":152,
"doc":"Class for performing Cleanup policy operations for a specific cleanup policy Initialise the cleanup Policy class instance."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.name",
"url":152,
"doc":"Treats the name as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.email_policy_type",
"url":152,
"doc":"Treats the email_policy_type as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.add_recall_link",
"url":152,
"doc":"Treats the add_recall_link as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.archive_if_size",
"url":152,
"doc":"Treats the archive_if_size as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.archive_mailbox",
"url":152,
"doc":"Treats the archive_mailbox as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.collect_messages_with_attachments",
"url":152,
"doc":"Treats the collect_messages_with_attachments as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.collect_messages_days_after",
"url":152,
"doc":"Treats the collect_messages_days_after as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.collect_messages_larger_than",
"url":152,
"doc":"Treats the collect_messages_larger_than as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.create_stubs",
"url":152,
"doc":"Treats the create_stubs as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.disabled_mailbox",
"url":152,
"doc":"Treats the disabled_mailbox as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.enable_message_rules",
"url":152,
"doc":"Treats the enable_message_rules as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.leave_message_body",
"url":152,
"doc":"Treats the leave_message_body as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.mailbox_quota",
"url":152,
"doc":"Treats the mailbox_quota as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.number_of_days_for_source_pruning",
"url":152,
"doc":"Treats the number_of_days_for_source_pruning as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.primary_mailbox",
"url":152,
"doc":"Treats the primary_mailbox as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.prune_erased_messages_or_stubs",
"url":152,
"doc":"Treats the prune_erased_messages_or_stubs as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.prune_messages",
"url":152,
"doc":"Treats the prune_messages as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.prune_stubs",
"url":152,
"doc":"Treats the prune_stubs as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.skip_unread_messages",
"url":152,
"doc":"Treats the skip_unread_messages as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.stop_archive_if_size",
"url":152,
"doc":"Treats the stop_archive_if_size as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.truncate_body",
"url":152,
"doc":"Treats the truncate_body as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.truncate_body_to_bytes",
"url":152,
"doc":"Treats the truncate_body_to_bytes as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.used_disk_space",
"url":152,
"doc":"Treats the used_disk_space as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.path",
"url":152,
"doc":"Treats the used_disk_space as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.used_disk_space_value",
"url":152,
"doc":"Treats the used_disk_space_value as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.include_folder_filter",
"url":152,
"doc":"Treats the include_folder_filter as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.exclude_folder_filter",
"url":152,
"doc":"Treats the exclude_folder_filter as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.CleanupPolicy.exclude_message_class_filter",
"url":152,
"doc":"Treats the exclude_message_class_filter as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.RetentionPolicy",
"url":152,
"doc":"Class for performing Retention policy operations for a specific retention policy Initialise the Rentention Policy class instance."
},
{
"ref":"cvpysdk.policies.configuration_policies.RetentionPolicy.name",
"url":152,
"doc":"Treats the name as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.RetentionPolicy.email_policy_type",
"url":152,
"doc":"Treats the email_policy_type as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.RetentionPolicy.days_for_media_pruning",
"url":152,
"doc":"Treats the number_of_days_for_media_pruning as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.RetentionPolicy.retention_type",
"url":152,
"doc":"Treats the retention_type as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.RetentionPolicy.exchange_folder_retention",
"url":152,
"doc":"Treats the exchange_folder_retention as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.RetentionPolicy.exchange_retention_tags",
"url":152,
"doc":"Treats the exchange_retention_tags as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ContentIndexingPolicy",
"url":152,
"doc":"Class for performing Content Indexing policy operations for a specific CI policy Initialise the Content indexing Policy class instance."
},
{
"ref":"cvpysdk.policies.configuration_policies.ContentIndexingPolicy.name",
"url":152,
"doc":"Treats the name as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ContentIndexingPolicy.include_doc_types",
"url":152,
"doc":"Treats the include_doc_types as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ContentIndexingPolicy.index_server_name",
"url":152,
"doc":"Treats the index_server_name as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ContentIndexingPolicy.data_access_node",
"url":152,
"doc":"Treats the data_access_node as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ContentIndexingPolicy.min_doc_size",
"url":152,
"doc":"Treats the min_doc_size as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ContentIndexingPolicy.max_doc_size",
"url":152,
"doc":"Treats the max_doc_size as a read-only attribute."
},
{
"ref":"cvpysdk.policies.configuration_policies.ContentIndexingPolicy.exclude_paths",
"url":152,
"doc":"Treats the exclude_paths as a read-only attribute."
},
{
"ref":"cvpysdk.policies.schedule_options",
"url":153,
"doc":"Main file for scheduler options related operations on the commcell. This file has all the classes related to Schedule Options operations. ScheduleOptions: Class for getting Schedule Options for Schedule and Schedule Policies BackupOptions: Class for Backup Options for Schedule and Schedule Policies AuxCopyOptions: Class for AuxCopy Options for Schedule and Schedule Policies ScheduleOptions: __new__()  Returns the respective class object based on the option_type __init__()  initialises ScheduleOptions for Schedule and Schedule Policies options_json()  Returns the options json for the new options provided BackupOptions: __init__()  initialises BackupOptions for Schedule and Schedule Policies options_json()  Returns the options json for the new backup options provided AuxCopyOptions: __init__()  initialises AuxCopyOptions for Schedule and Schedule Policies options_json()  Returns the options json for the new AuxCopy options provided"
},
{
"ref":"cvpysdk.policies.schedule_options.ScheduleOptions",
"url":153,
"doc":"Class for getting Schedule Options for Schedule and Schedule Policies. Initialises Schedule Options class Args: options_type (str)  option type as per ScheduleOptions.options dict. current_options (dict)  current options set for the schedule if any."
},
{
"ref":"cvpysdk.policies.schedule_options.ScheduleOptions.policy_to_options_map",
"url":153,
"doc":""
},
{
"ref":"cvpysdk.policies.schedule_options.ScheduleOptions.options_json",
"url":153,
"doc":"Returns the options json for the new options provided Args: new_options: options_json based on the type of scheduler option Returns (dict)  new options",
"func":1
},
{
"ref":"cvpysdk.policies.schedule_options.BackupOptions",
"url":153,
"doc":"Class for getting Backup Schedule Options for Schedule and Schedule Policies. Initialises the BackupOptions class Args: options_type (str)  should be 'backupOpts' current_options (dict)  current backup options set for the schedule if any."
},
{
"ref":"cvpysdk.policies.schedule_options.BackupOptions.options_json",
"url":153,
"doc":"Returns the backup options json for the new options provided Args: new_options (dict)  options which need to be set for the schedule Example: { \"backupLevel\": backup_level(Full / Incremental / Differential / Synthetic_full), \"incLevel\": incremental_level(BEFORE_SYNTH / AFTER_SYNTH), \"runIncrementalBackup\": incremental_backup } Returns (dict)  new options",
"func":1
},
{
"ref":"cvpysdk.policies.schedule_options.AuxCopyOptions",
"url":153,
"doc":"Class for getting AuxCopy Schedule Options for Schedule and Schedule Policies. Initialises the AuxCopyOptions class Args: options_type (str)  should be 'auxcopyJobOption' current_options (dict)  current AuxCopy options set for the schedule if any."
},
{
"ref":"cvpysdk.policies.schedule_options.AuxCopyOptions.options_json",
"url":153,
"doc":"Returns the AuxCopy options json for the new options provided Args: new_options (dict)  options which need to be set for the schedule Example: { \"maxNumberOfStreams\": 0, \"useMaximumStreams\": True, \"useScallableResourceManagement\": True, \"totalJobsToProcess\": 1000, \"allCopies\": True, \"mediaAgent\": { \"mediaAgentName\": \" \" } }",
"func":1
},
{
"ref":"cvpysdk.policies.schedule_policies",
"url":154,
"doc":"Main file for performing schedule policy related operations on the commcell. This file has all the classes related to Schedule Policy operations. SchedulePolicies: Class for representing all the Schedule Policies associated to the commcell. SchedulePolicy: Class for representing Schedule Policy SchedulePolicies: __init__(commcell_object)  initialize the SchedulePolicies instance for the commcell __str__()  returns all the schedule policies associated with the commcell __repr__()  returns a string for instance of the SchedulePolicies class _get_policies()  gets all the schedule policies of the commcell all_schedule_policies()  returns the dict of all the schedule policies on commcell has_policy(policy_name)  checks if a schedule policy exists with the given name subtasks_json()  gets the subtask in schedule policy JSON schedule_json()  forms the schedule policy subtask with patterns and options for a schedule add()  Adds a schedule policy get()  Returns a schedule policy object of the specified schedule policy name delete()  deletes the specified schedule policy name refresh()  refresh the schedule policies associated with the commcell _process_schedule_policy_response  processes the response received schedule policy creation request SchedulePolicy: __init__(commcell_object)  Initialise the Schedule Policy class instance _get_schedule_policy_id  Gets a schedule policy ID policy_type  Gets the policy type of the schedule policy _get_schedule_policy_properties  Gets the properties of this Schedule Policy update_associations  Updates the schedule policy associations all_schedules  returns all the schedules associated to the schedule policy _update_pattern  Updates the schedule pattern for the provided schedule id get_option  gets the schedule options for the provided option _update_option  Updates the option for the provided schedule id get_schedule  returns the subtask dict for the provided schedule id or name add_schedule  Adds a new schedule to the schedule policy modify_schedule  Modifies the schedule with the given schedule json inputs for the given schedule id or name delete_schedule  Deletes the schedule from the schedule policy update_app_groups  Update the appgroups for the provided schedule policy _modify_schedule_policy_properties  Modifies the task properties of the schedule policy _process_schedule_policy_update_response  processes the response received post update request refresh  Refresh the properties of the Schedule Policy enable  Enables a schedule policy disable  Disables a schedule policy"
},
{
"ref":"cvpysdk.policies.schedule_policies.OperationType",
"url":154,
"doc":"Operation Type for schedule policy associations and appGroups"
},
{
"ref":"cvpysdk.policies.schedule_policies.OperationType.INCLUDE",
"url":154,
"doc":""
},
{
"ref":"cvpysdk.policies.schedule_policies.OperationType.EXCLUDE",
"url":154,
"doc":""
},
{
"ref":"cvpysdk.policies.schedule_policies.OperationType.DELETE",
"url":154,
"doc":""
},
{
"ref":"cvpysdk.policies.schedule_policies.SchedulePolicies",
"url":154,
"doc":"Class for getting all the schedule policies associated with the commcell. Initialize object of the SchedulePolicies class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the SchedulePolicies class"
},
{
"ref":"cvpysdk.policies.schedule_policies.SchedulePolicies.policy_to_subtask_map",
"url":154,
"doc":""
},
{
"ref":"cvpysdk.policies.schedule_policies.SchedulePolicies.policy_types",
"url":154,
"doc":""
},
{
"ref":"cvpysdk.policies.schedule_policies.SchedulePolicies.all_schedule_policies",
"url":154,
"doc":"Returns the schedule policies on this commcell dict - consists of all schedule policies of the commcell { \"schedule_policy1_name\": schedule_policy1_id, \"schedule_policy2_name\": schedule_policy2_id }"
},
{
"ref":"cvpysdk.policies.schedule_policies.SchedulePolicies.has_policy",
"url":154,
"doc":"Checks if a schedule policy exists in the commcell with the input schedule policy name. Args: policy_name (str)  name of the schedule policy Returns: bool - boolean output whether the schedule policy exists in the commcell or not Raises: SDKException: if type of the schedule policy name argument is not string",
"func":1
},
{
"ref":"cvpysdk.policies.schedule_policies.SchedulePolicies.subtasks_json",
"url":154,
"doc":"gets the subtask in schedule policy JSON Args: policy_type (str)  Type of the schedule policy from 'policy_types' dict Returns: returns schedule policy Subtask",
"func":1
},
{
"ref":"cvpysdk.policies.schedule_policies.SchedulePolicies.schedule_json",
"url":154,
"doc":"Returns the schedule json for the given schedule options and pattern Args: policy_type (str)  Type of the schedule policy from 'policy_types' dict schedule_dict (dict)  with the below format, check add() module for more documentation on the below dict { pattern : {}, options: {} } Returns: Returns the schedule json for the given schedule options and pattern",
"func":1
},
{
"ref":"cvpysdk.policies.schedule_policies.SchedulePolicies.add",
"url":154,
"doc":"Adds a schedule policy Args: name (str)  Name of the Schedule Policy policy_type (str)  Type of the schedule policy from 'policy_types' dict associations (str)  List of schedule associations [ { \"clientName\": \"scheduleclient1\" }, { \"clientGroupName\": \"scheduleclient2\" } ] schedules (List)  schedules to be associated to the schedule policy [ { pattern : {},  Please refer SchedulePattern.create_schedule in schedules.py for the types of pattern to be sent eg: { \"freq_type\": 'daily', \"active_start_time\": time_in_%H/%S (str), \"repeat_days\": days_to_repeat (int) } options: {}  Please refer ScheduleOptions.py classes for respective schedule options eg: { \"maxNumberOfStreams\": 0, \"useMaximumStreams\": True, \"useScallableResourceManagement\": True, \"totalJobsToProcess\": 1000, \"allCopies\": True, \"mediaAgent\": { \"mediaAgentName\": \" \" } } } ] agent_type (List)  Agent Types to be associated to the schedule policy eg: [ { \"appGroupName\": \"Protected Files\" }, { \"appGroupName\": \"Archived Files\" } ] sample: apptype = [{'appGroupName': 'DB2'}] associations = [{'clientName': 'testclient'}] schedule = [ { 'name': 'trying', 'pattern': { 'freq_type': 'Daily' } } ] commcellobj.schedule_policies.add('testsch1', 'Data Protection', associations, schedule, apptype) Returns: schedule policy object on successful completion Raises: SDKExceptions on wrong input types and failure to create schedule policy",
"func":1
},
{
"ref":"cvpysdk.policies.schedule_policies.SchedulePolicies.get",
"url":154,
"doc":"Returns a schedule policy object of the specified schedule policy name. Args: schedule_policy_name (str)  name of the Schedule Policy schedule_policy_id (int)  id of the schedule Policy Sample: sch_pol_obj = commcellobj.schedule_policies.get('testschp') Returns: object - instance of the schedule policy class for the given schedule name Raises: SDKException: if type of the schedule policy name argument is not string if no schedule policy exists with the given name",
"func":1
},
{
"ref":"cvpysdk.policies.schedule_policies.SchedulePolicies.delete",
"url":154,
"doc":"deletes the specified schedule policy name. Args: schedule_policy_name (str)  name of the Schedule Policy Sample: commcellobj.schedule_policies.delete('testschp') Raises: SDKException: if type of the schedule policy name argument is not string if no schedule policy exists with the given name",
"func":1
},
{
"ref":"cvpysdk.policies.schedule_policies.SchedulePolicies.refresh",
"url":154,
"doc":"Refresh the Schedule Policies associated with the Commcell.",
"func":1
},
{
"ref":"cvpysdk.policies.schedule_policies.SchedulePolicy",
"url":154,
"doc":"Class for performing operations for a specific Schedule. Initialise the Schedule Policy class instance. Args: class_object (object)  instance of Class Object schedule_policy_name (str)  name of the Schedule schedule_policy_id (int)  task ids of the Schedule Returns: object - instance of the Schedule Policy class"
},
{
"ref":"cvpysdk.policies.schedule_policies.SchedulePolicy.policy_type",
"url":154,
"doc":"Get the policy Type of the schedule policy Sample: sch_pol_obj.policy_type Returns (str)  Type of the schedule policy from 'policy_types' dict"
},
{
"ref":"cvpysdk.policies.schedule_policies.SchedulePolicy.update_associations",
"url":154,
"doc":"Updates the schedule policy associations Args: associations (str)  List of schedule associations [ { \"clientName\": \"scheduleclient1\" }, { \"clientGroupName\": \"scheduleclient2\" } ] operation_type (OperationType)  Please check OperationType class present in this file Sample: associations = [{'clientName': 'client2'}] sch_pol_obj.update_associations(associations, OperationType.DELETE)",
"func":1
},
{
"ref":"cvpysdk.policies.schedule_policies.SchedulePolicy.all_schedules",
"url":154,
"doc":"Gets all the schedules of the schedule policy Sample: sch_pol_obj.all_schedules Returns (dict)  schedules in the below format { \"schedule_name\" : (str), \"schedule_id\": (int) }"
},
{
"ref":"cvpysdk.policies.schedule_policies.SchedulePolicy.get_option",
"url":154,
"doc":"gets the schedule options for the provided option Args: option_dict: the complete options dict option: option for which the dict has to be fetched Returns (dict)  Option dict for the provided option",
"func":1
},
{
"ref":"cvpysdk.policies.schedule_policies.SchedulePolicy.get_schedule",
"url":154,
"doc":"returns the subtask dict for the provided schedule id or name Args: schedule_id (int)  id of the schedule schedule_name (str)  name of the schedule Sample: sch_pol_obj.get_schedule(schedule_id=10) Returns (dict)  subtask dict",
"func":1
},
{
"ref":"cvpysdk.policies.schedule_policies.SchedulePolicy.add_schedule",
"url":154,
"doc":"Adds a new schedule to the schedule policy Args: schedule_dict (dict)  { pattern : {},  Please refer SchedulePattern.create_schedule in schedules.py for the types of pattern to be sent eg: { \"freq_type\": 'daily', \"active_start_time\": time_in_%H/%S (str), \"repeat_days\": days_to_repeat (int) } options: {}  Please refer ScheduleOptions.py classes for respective schedule options eg: { \"maxNumberOfStreams\": 0, \"useMaximumStreams\": True, \"useScallableResourceManagement\": True, \"totalJobsToProcess\": 1000, \"allCopies\": True, \"mediaAgent\": { \"mediaAgentName\": \" \" } } } Sample: sch_pol_obj.add_schedule({'pattern':{'freq_type': 'monthly' )",
"func":1
},
{
"ref":"cvpysdk.policies.schedule_policies.SchedulePolicy.modify_schedule",
"url":154,
"doc":"Modifies the schedule with the given schedule json inputs for the given schedule id or name Args: schedule_dict (dict)  { pattern : {},  Please refer SchedulePattern.create_schedule in schedules.py for the types of pattern to be sent eg: { \"freq_type\": 'daily', \"active_start_time\": time_in_%H/%S (str), \"repeat_days\": days_to_repeat (int) } options: {}  Please refer ScheduleOptions.py classes for respective schedule options eg: { \"maxNumberOfStreams\": 0, \"useMaximumStreams\": True, \"useScallableResourceManagement\": True, \"totalJobsToProcess\": 1000, \"allCopies\": True, \"mediaAgent\": { \"mediaAgentName\": \" \" } } } schedule_id (int)  id of the schedule schedule_name (str)  name of the schedule Sample: Change Pattern: sch_pol_obj.change_schedule({'pattern':{'freq_type': 'monthly' , schedule_id=77) Change Options: sch_pol_obj.change_schedule({'options':{'maxNumberOfStreams': 10 , schedule_id=77)",
"func":1
},
{
"ref":"cvpysdk.policies.schedule_policies.SchedulePolicy.delete_schedule",
"url":154,
"doc":"Deletes the schedule from the schedule policy Args: schedule_id (int)  id of the schedule schedule_name (str)  name of the schedule Sample: sch_pol_obj.delete_schedule(schedule_name='testsch')",
"func":1
},
{
"ref":"cvpysdk.policies.schedule_policies.SchedulePolicy.update_app_groups",
"url":154,
"doc":"Update the appgroups for the provided schedule policy Args: app_groups(List)  Agent Types to be associated to the schedule policy eg: [ { \"appGroupName\": \"Protected Files\" }, { \"appGroupName\": \"Archived Files\" } ] operation_type (OperationType)  Please check OperationType class present in this file Sample: apptype = [{'appGroupName': 'DB2'}] sch_pol_obj.update_app_groups(apptype, OperationType.INCLUDE)",
"func":1
},
{
"ref":"cvpysdk.policies.schedule_policies.SchedulePolicy.enable",
"url":154,
"doc":"Enable a schedule policy. Raises: SDKException: if failed to enable schedule policy if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.policies.schedule_policies.SchedulePolicy.disable",
"url":154,
"doc":"Disable a Schedule Policy. Raises: SDKException: if failed to disable Schedule Policy if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.policies.schedule_policies.SchedulePolicy.refresh",
"url":154,
"doc":"Refresh the properties of the Schedule Policy.",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies",
"url":155,
"doc":"Main file for performing storage policy related operations on the commcell. This file has all the classes related to Storage Policy operations. StoragePolicies: Class for representing all the Storage Policies associated to the commcell. StoragePolicy: Class for representing a single Storage Policy associated to the commcell. StoragePolicies: __init__(commcell_object)  initialize the StoragePolicies instance for the commcell __str__()  returns all the storage policies associated with the commcell __repr__()  returns a string for the instance of the StoragePolicies class _get_policies()  gets all the storage policies of the commcell all_storage_policies()  returns the dict of all the storage policies on commcell has_policy(policy_name)  checks if a storage policy exists with the given name add_global_storage_policy()  adds a new global storage policy to the commcell add()  adds a new storage policy to the commcell add_tape_sp()  add new storage policy with tape library as data path delete(storage_policy_name)  removes the specified storage policy from the commcell refresh()  refresh the storage policies associated with the commcell StoragePolicy: __init__(commcell_object, storage_policy_name, storage_policy_id)  initialize the instance of StoragePolicy class for a specific storage policy of the commcell __repr__()  returns a string representation of the StoragePolicy instance _get_storage_policy_id()  gets the id of the StoragePolicy instance _get_storage_policy_properties()  returns the properties of this storage policy _get_storage_policy_advanced_properties() returns the advanced properties of this storage policy _initialize_storage_policy_properties()  initializes storage policy properties edit_block_size_on_gdsp  edits the sidb block size on GDSP has_copy()  checks if copy with given name exists create_secondary_copy()  creates a storage policy copy create_snap_copy()  creates snap, snapvault, snapmirror, replica and replica mirror copies create_dedupe_secondary_copy()  create secondary copy with dedupe enabled delete_secondary_copy()  deletes storage policy copy copies()  returns the storage policy copies associated with this storage policy get_copy_precedence()  returns the copy precedence value associated with the copy name update_snapshot_options()  Method for Updating Backup Copy and Snapshot Catalog Options run_backup_copy()  Runs the backup copy job from Commcell modify_dynamic_stream_allocation()  modifies dsa property of storage policy run_snapshot_cataloging()  Runs the deferred catalog job from Commcell run_aux_copy()  starts a aux copy job for this storage policy and returns the job object refresh()  refresh the properties of the storage policy update_transactional_ddb()  enable/disable transactional DDB option on a DDB seal_ddb()  seal a DDB store add_ddb_partition()  Adds a new DDB partition move_dedupe_store()  Moves a deduplication store run_ddb_verification()  Runs DDB verification job run_data_verification()  Runs Data Verification Job get_copy()  Returns the StoragePolicyCopy class object of the input copy get_primary_copy()  Returns the primary copy of the storage policy get_secondary_copies()  Returns all the secondary copies in the storage policy sorted by copy precedence mark_for_recovery()  Marks Deduplication store for recovery run_recon()  Runs non-mem DB Reconstruction job reassociate_all_subclients()  Reassociates all subclients associated to Storage Policy enable_entity_extraction()  Enables the entity extraction for subclients associated to this policy enable_content_indexing()  Enables the content indexing for this storage policy run_content_indexing()  start the content indexing job for this storage policy start_over()  performs start over operation on storage policy/gdsp run_data_forecast()  runs granular data forecast operation for given storage policy StoragePolicyCopy: __init__(self, commcell_object, storage_policy_name, copy_name, copy_id)  initialize the instance of StoragePolicy class for a specific storage policy of the commcell __repr__()  returns a string representation of the StoragePolicy instance copy_name()  Gets the name of the storage policy copy get_copy_id()  Gets the storage policy id asscoiated with the storage policy get_copy_Precedence()  Gets the copy precendence associated with the storage policy copy refresh()  Refresh the properties of the StoragePolicy _get_request_json()  Gets all the storage policy copy properties _get_copy_properties()  Gets the storage policy copy properties _set_copy_properties()  sets the properties of this storage policy copy set_copy_software_compression()  Sets the copy software compression setting is_parallel_copy()  Gets the parallel copy setting on storage policy copy set_parallel_copy()  Sets the parallel copy setting on storage policy copy is_inline_copy()  Gets the inline copy setting on storage policy copy set_inline_copy()  Sets the inline copy setting on storage policy copy get_jobs_on_copy()  Fetches the Details of jobs on Storage Policy Copy delete_job()  delete a job from storage policy copy node _mark_jobs_on_copy()  marks job(s) for given operation on a secondary copy pick_for_copy()  marks job(s) to be Picked for Copy to a secondary copy recopy_jobs()  marks job(s) to be picked for ReCopying to a secondary copy do_not_copy_jobs()  marks job(s) as Do Not Copy to a secondary copy pick_jobs_for_data_verification()  marks job(s) on a copy to be Picked for Data Verification do_not_verify_data()  marks job(s) on a copy to not be Picked for Data Verification pick_jobs_for_backupcopy  marks job(skipped/unpicked) on a copy to be picked for backup copy mark_jobs_bad()  marks job(s) on a copy as Bad is_dedupe_enabled()  checks whether deduplication is enabled for the copy set_encryption_properties()  configures copy encryption settings as per user input set_key_management_server()  sets the Key Management Server to this copy set_multiplexing_factor()  sets/unset the multiplexing factor for the storage policy copy delete_datapath()  delete datapath from storage policy copy set_default_datapath()  sets default data path set_ddb_resiliency()  set/unset ddb resiliency for storage policy copy rotate_encryption_master_key()  Rotates the encryption key for this copy enable_compliance_lock()  Sets compliance lock (wormCopy flag) disable_compliance_lock()  Unsets compliance lock (wormCopy flag) Attributes       override_pool_retention  Returns if Override Pool Retention flag is set or not  override_pool_retention.setter  Sets/Unsets the override Pool Retention Flag  space_optimized_auxillary_copy  Returns the value of space optimized auxillary copy setting  space_optimized_auxillary_copy.setter  Sets the value of space optimized auxillary copy setting  source_copy  Returns the source copy associated with the copy  source_copy.setter  Sets the source copy for the copy  store_priming  Sets the value of DDB store priming under copy dedupe properties  ddb_resiliency  Returns whether ddb resiliency is set or not  is_active  Returns/Sets the 'Active' Property of the Copy  network_throttle_bandwidth  Returns/Sets the value of Network Throttle Bandwidth  is_compliance_lock_enabled  Checks whether compliance lock on copy is enabled or not"
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicies",
"url":155,
"doc":"Class for getting all the storage policies associated with the commcell. Initialize object of the StoragePolicies class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the StoragePolicies class"
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicies.all_storage_policies",
"url":155,
"doc":"Returns dict of all the storage policies on this commcell dict - consists of all storage policies of the commcell { \"storage_policy1_name\": storage_policy1_id, \"storage_policy2_name\": storage_policy2_id }"
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicies.has_policy",
"url":155,
"doc":"Checks if a storage policy exists in the commcell with the input storage policy name. Args: policy_name (str)  name of the storage policy Returns: bool - boolean output whether the storage policy exists in the commcell or not Raises: SDKException: if type of the storage policy name argument is not string",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicies.get",
"url":155,
"doc":"Returns a StoragePolicy object of the specified storage policy name. Args: storage_policy_name (str)  name of the storage policy Returns: object - instance of the StoragePolicy class for the given policy name Raises: SDKException: if type of the storage policy name argument is not string if no storage policy exists with the given name",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicies.add_global_storage_policy",
"url":155,
"doc":"adds a global storage policy Args: global_storage_policy_name (str)  name of the global storage policy which you want to add library (str)  name of the library which you want to be associated with your global storage policy media_agent (str)  name of the media agent which you want to be associated with the global storage policy  enter BOTH, the dedup_path and dedup_path_media_agent if you want the deduplication to be enabled. dedup_path (str)  path of the deduplication database default- None dedup_path_media_agent: (str)  name of the media agent where the deduplication database is stored default- None Returns: the success message along with the name of the global storage policy if created successfully else the error messages or the exceptions raised Raises: SDKException: if the global_storage_policy_name,library,media_agent,dedup_path,dedup_path_media_agent is not of type String if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicies.add",
"url":155,
"doc":"Adds a new Storage Policy to the Commcell. Args: storage_policy_name (str)  name of the new storage policy to add library (str/object)  name or instance of the library to add the policy to media_agent (str/object)  name or instance of media agent to add the policy to dedup_path (str)  the path of the deduplication database default: None incremental_sp (str)  the name of the incremental storage policy associated with the storage policy default: None retention_period (int)  time period in days to retain the data backup for default:5 number_of_streams (int)  the number of streams for the storage policy default: None ocum_server (str)  On Command Unified Server Name default: None dedup_media_agent (str)  name of media agent where deduplication database is hosted. default:None dr_sp (bool)  if True creates dr storage policy if False creates data protection policy default:False  kwargs  dict of keyword arguments as follows: global_policy_name (str)  name of the global storage policy on which you want the policy being created to be dependent. global_dedup_policy (bool)  whether the global storage policy has a global deduplication pool or not default:True (meaning the global storage policy will have deduplication enabled) Raises: SDKException: if type of the storage policy name argument is not string if type of the retention period argument is not int if type of the library argument is not either string or DiskLibrary instance if type of the media agent argument is not either string or MediaAgent instance if failed to create storage policy if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicies.add_tape_sp",
"url":155,
"doc":"Adds storage policy with tape data path Args: storage_policy_name (str)  name of the new storage policy to add library (str)  name or instance of the library to add the policy to media_agent (str/object)  name or instance of media agent to add the policy to drive_pool (str)  Drive pool name of the tape library scratch_pool (str)  Scratch pool name of the tape library retention_period_days (int)  time period in days to retain the data backup for default: 15 ocum_server (str)  On Command Unified Server Name default: None Raises: SDKException: if type of the storage policy name argument is not string if type of the retention period argument is not int if type of the library argument is not either string or DiskLibrary instance if type of the media agent argument is not either string or MediaAgent instance if failed to create storage policy if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicies.delete",
"url":155,
"doc":"Deletes a storage policy from the commcell. Args: storage_policy_name (str)  name of the storage policy to delete Raises: SDKException: if type of the storage policy name argument is not string if failed to delete storage policy if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicies.refresh",
"url":155,
"doc":"Refresh the storage policies associated with the Commcell.",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy",
"url":155,
"doc":"Class for performing storage policy operations for a specific storage policy Initialise the Storage Policy class instance."
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.edit_block_size_on_gdsp",
"url":155,
"doc":"edit the block size on the gdsp Args: size (int) - SIDB block size to be changed to Raises: SDKException: if error in response if response received is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.has_copy",
"url":155,
"doc":"Checks if a storage policy copy exists for this storage policy with the input storage policy name. Args: copy_name (str)  name of the storage policy copy Returns: bool - boolean output whether the storage policy copy exists or not Raises: SDKException: if type of the storage policy copy name argument is not string",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.create_secondary_copy",
"url":155,
"doc":"Creates Synchronous copy for this storage policy Args: copy_name (str)  copy name to create library_name (str)  library name to be assigned media_agent_name (str)  media_agent to be assigned snap_copy (bool)  boolean on whether copy should be a snap copy default: False global_policy (str)  name of the global policy to be assigned Raises: SDKException: if type of inputs in not string if copy with given name already exists if failed to create copy if response received is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.run_content_indexing",
"url":155,
"doc":"starts the offline CI job for this storage policy Args: None Returns: object - instance of the Job class for this CI job Raises: SDKException: if type of inputs is not valid if failed to start content indexing job if response received is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.enable_content_indexing",
"url":155,
"doc":"configures offline CI for this storage policy Args: cloud_id (str)  cloud id of the search engine include_doc_type (str)  include document types for content indexing Example : \" .csv, .ppt\" exclude_doc_type (str)  exclude document types for content indexing Example : \" .py, .txt\" max_doc_size (str)  maximum document size for CI in KB min_doc_size (str)  minimum document size for CI in KB Returns: None Raises: SDKException: if type of inputs is not valid if failed to configure content indexing if response received is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.enable_entity_extraction",
"url":155,
"doc":"configures offline CI entity extraction for given subclient id's on this storage policy Args: entity_details (list)  List of subclient to configure for Entity Extraction Format :  clientname,agent type,backup set name,subclient name entity_names (list)  list of entity names to be configured for Entity Extraction Example : [Email,SSN] ca_client_name (str)  client name where Content Analyzer package is installed Raises: SDKException: if type of inputs is not valid if failed to configure EE if response received is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.create_snap_copy",
"url":155,
"doc":"Creates Snap copy for this storage policy Args: copy_name (str)  copy name to create is_mirror_copy (bool)  if true then copyType will be Mirror is_snap_copy (bool)  if true then copyType will be Snap library_name (str)  library name to be assigned media_agent_name (str)  media_agent to be assigned source_copy (str)  Name of the Source Copy for this copy provisioning_policy (str)  Name of the provisioning Policy to add default : None resource_pool (str)  Name of the resource pool to add default : None is_replica_copy (bool)  if true then Replica Copy will be created default : None is_c2c_target (bool)  if true then NetApp Cloud target copy will be created default : False job_retention (bool)  if true job based retention will be set default : False enable_selective_copy (int)  Enable selective copy with value selectiveRule Raises: SDKException: if type of inputs in not string if copy with given name already exists if failed to create copy if response received is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.delete_secondary_copy",
"url":155,
"doc":"Deletes the copy associated with this storage policy Args: copy_name (str)  copy name to be deleted Raises: SDKException: if type of input parameters is not string if storage policy copy doesn't exist with given name if failed to delete storage policy copy if response received is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.create_selective_copy",
"url":155,
"doc":"Creates Selective copy for this storage policy Args: copy_name (str)  copy name to create library_name (str)  library name to be assigned media_agent_name (str)  media_agent to be assigned drive_pool etc are for tape library sel_freq (str)  {all,hourly,daily,weekly,monthly,quaterly,half-year,year} first_or_last_full (str)  {FirstFull, LastFull, LastFullWait} backups_from (str)  {start date in yyyy-mm-dd format to pick jobs from this date} Raises: SDKException: if type of inputs in not string if copy with given name already exists if failed to create copy if response received is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.copies",
"url":155,
"doc":"Treats the storage policy copies as a read-only attribute"
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.storage_policy_id",
"url":155,
"doc":"Treats the storage policy id as a read-only attribute."
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.name",
"url":155,
"doc":"Returns the Storage Policy display name"
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.storage_policy_name",
"url":155,
"doc":"Treats the storage policy name as a read-only attribute."
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.description",
"url":155,
"doc":"Returns the Storage Policy Description Field"
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.get_copy_precedence",
"url":155,
"doc":"returns the copy precedence value associated with the copy name Args: copy_name (str)  Storage copy name Returns: copy_precedence (int)  Copy precedence number of storage copy Raises: Exception: if unable to find the given copy name",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.update_snapshot_options",
"url":155,
"doc":"Method for Updating Storage Policy Snapshot Options like Backup Copy and Snapshot Catalog Args: Available Snapshot Options: enable_backup_copy (bool)  Enables backup copy if the value is True source_copy_for_snap_to_tape (str)  Source Copy name for backup copy enable_snapshot_catalog (bool)  Enables Snapshot Catalog if value is True source_copy_for_snapshot_catalog (str)  Source Copy name for Snapshot Catalog is_ocum (bool)  True if Storage policy is enabled with ocum server enable_selective_copy (int)  Enable selective copy option based on input value disassociate_sc_from_backup_copy (bool)  Associate/Disassociate subclient from backup copy True: Disassociate subclient False: Associate subclient",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.run_backup_copy",
"url":155,
"doc":"Runs the backup copy from Commcell for the given storage policy Args: None Returns: object - instance of the Job class for this backup copy job Raises: SDKException: if backup copy job failed if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.modify_dynamic_stream_allocation",
"url":155,
"doc":"Modifies the DSA option for the Storage Policy Args: enable (bool)  False - Disable DSA True - Enable DSA",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.run_snapshot_cataloging",
"url":155,
"doc":"Runs the deferred catalog job from Commcell for the given storage policy Args: None Returns: object - instance of the Job class for this snapshot cataloging job Raises: SDKException: if snapshot cataloging job failed if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.storage_policy_properties",
"url":155,
"doc":"Returns the storage policy properties dict - consists of storage policy properties"
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.storage_policy_advanced_properties",
"url":155,
"doc":"Returns the storage policy advanced properties dict - consists of storage policy advanced properties"
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.library_name",
"url":155,
"doc":"Treats the library name as a read-only attribute."
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.library_id",
"url":155,
"doc":"Treats the library id as a read-only attribute."
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.aux_copies",
"url":155,
"doc":"Returns the list of all aux copies in the policy Returns: list - list of all aux copies in the storage policy"
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.snap_copy",
"url":155,
"doc":"Returns the name of the snap copy Returns: str - name of the snap copy"
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.run_aux_copy",
"url":155,
"doc":"Runs the aux copy job from the commcell. Args: storage_policy_copy_name (str)  name of the storage policy copy media_agent (str)  name of the media agent use_scale (bool)  use Scalable Resource Management (True/False) streams (int)  number of streams to use all_copies (bool)  run auxcopy job on all copies or select copy (True/False) total_jobs_to_process (int)  Total number jobs to process for the auxcopy job  kwargs  dict of keyword arguments as follows: ignore_dv_failed_jobs (bool)  Ignore DV failed jobs job_description (str)  Description for Job Returns: object - instance of the Job class for this aux copy job Raises: SDKException: if type of the argument is not string if aux copy job failed if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.refresh",
"url":155,
"doc":"Refresh the properties of the StoragePolicy.",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.seal_ddb",
"url":155,
"doc":"Seals the deduplication database Args: copy_name (str)  name of the storage policy copy Raises: SDKException: if type of input parameters is not string",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.update_transactional_ddb",
"url":155,
"doc":"Updates TransactionalDDB option on the deduplication database Args: update_value (bool)  enable(True)/disable(False) copy_name (str)  name of the associated copy media_agent_name(str)  name of the media agent Raises: SDKException: if type of input parameters is not string",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.create_dedupe_secondary_copy",
"url":155,
"doc":"Creates Synchronous copy for this storage policy Args: copy_name (str)  copy name to create library_name (str)  library name to be assigned media_agent_name (str)  media_agent to be assigned path (str)  path where deduplication store is to be hosted ddb_media_agent (str)  media agent name on which deduplication store is to be hosted dash_full (bool)  enable DASH full on deduplication store (True/False) Default None source_side_disk_cache (bool)  enable source side disk cache (True/False) Default None software_compression (bool)  enable software compression (True/False) Default None Raises: SDKException: if type of inputs in not string if copy with given name already exists if failed to create copy if response received is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.run_ddb_verification",
"url":155,
"doc":"Runs DDB verification job Args: copy_name (str)  name of the copy which is associated with the DDB store ver_type (str)  backup level (Full/Incremental) ddb_ver_level (str)  DDB verification type (DDB_VERIFICATION/ DDB_AND_DATA_VERIFICATION / QUICK_DDB_VERIFICATION/ DDB_DEFRAGMENTATION) use_scalable (bool)  True/False to use Scalable Resource Allocation Default: True orphan_chunk_listing (bool)  True/False to run orphan chunk listing phase during DDB Defragmentation Returns: object - instance of the Job class for this DDB verification job Raises: SDKException: if type of input parameters is not string if job failed if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.run_data_verification",
"url":155,
"doc":"Runs Data verification job Args: media_agent_name (str) : name of the mediaAgent to use for data reading copy_name (str) : name of Copy (default - verifies jobs on all copies) streams (int) : number of streams to use (default - use Maximum) jobs_to_verify (str) : jobs to be Verified (NEW/ VERF_EXPIRED/ ALL) use_scalable (bool) : True/False to use Scalable Resource Allocation (default - True) kwargs (dict) : optional arguments Available kwargs Options: job_description (str): Description for Job Returns: object - instance of the Job class for this Data Verification Job errorMessage - If Data Verification Job fails to Start",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.move_dedupe_store",
"url":155,
"doc":"Moves a deduplication store Args: copy_name (str)  name of the storage policy copy dest_path: (str)  path where new partition is to be hosted src_path: (str)  path where existing partition is hosted dest_media_agent: (str)  media agent name where new partition is to be hosted src_media_agent: (str)  media agent name where existing partition is hosted config_only (bool)  to only chnage in DB (files need to be moved manually) (True/False) Default : False Returns: object - object - instance of the Job class for this DDB move job Raises: SDKException: if type of input parameters is not string if job failed if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.add_ddb_partition",
"url":155,
"doc":"Adds a new DDB partition Args: copy_id (str)  storage policy copy id sidb_store_id (str)  deduplication store id sidb_new_path (str)  path where new partition is to be hosted media_agent (str)  media agent on which new partition is to be hosted Raises: SDKException: if type of input parameters is not string",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.get_copy",
"url":155,
"doc":"Returns a storage policy copy object if copy exists Args: copy_name (str)  name of the storage policy copy Returns: object - instance of the StoragePolicyCopy class for the given copy name Raises: SDKException: if type of the copy name argument is not string if no copy exists with the given name",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.get_primary_copy",
"url":155,
"doc":"Returns the primary copy of the storage policy Returns: object - Instance of the StoragePolicyCopy class of the primary copy Raises: SDKException: if unable to find a primary copy in the storage policy",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.get_secondary_copies",
"url":155,
"doc":"Returns all the secondary copies in the storage policy sorted by copy precedence Returns: list - A list of storage policy copy instances.",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.mark_for_recovery",
"url":155,
"doc":"Marks Deduplication store for recovery Args: store_id (str)  SIDB store id sub_store_id (str)  SIDB substore id media_agent_name (str)  name of the media agent on which DDB is hosted dedupe_path (str)  SIDB store path",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.run_recon",
"url":155,
"doc":"Runs non-mem DB Reconstruction job Args: copy_name (str)  name of the storage policy copy sp_name (str)  name of the storage policy store_id (str)  SIDB store id associated with the copy full_reconstruction (int)  flag to enable full reconstruction job Valid values: 0: to start regular reconstruction job 1: to start full reconstruction job use_scalable_resource (str)  to enable scalable resources Valid values: 'true': to start old way reconstruction job 'false': to start reconstruction job with scalable resources",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.reassociate_all_subclients",
"url":155,
"doc":"Reassociates all subclients associated to Storage Policy Args: dest_storage_policy_name(str): Name of a Storage Policy to which the Subclients are to be reassociated. Default Value: 'CV_DEFAULT': 'Not Assigned' to any Policy. Raises: SDKException : If failed to reassociate",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.start_over",
"url":155,
"doc":"performs a start over operation on the specified storage policy/gdsp Args: Raises: SDKException  if response is bad/ flag is false returns None",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicy.run_data_forecast",
"url":155,
"doc":"runs data forecast and retention report generation operation Args:  kwargs  dict of keyword arguments as follows: localeName str localeName for report [defaults to \"en-us\"] Raises: SDKException  if response is bad/ flag is false Returns None",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy",
"url":155,
"doc":"Class for performing storage policy copy operations for a specific storage policy copy Initialise the Storage Policy Copy class instance. Args: commcell_object (object)  instance of the Commcell class storage_policy (str/object)  storage policy to which copy is associated with copy_name (str)  copy name copy_id (str)  copy ID Default : None Returns: object - instance of the StoragePolicyCopy class"
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.all_copies",
"url":155,
"doc":"Returns dict of the storage policy copy associated with this storage policy dict - consists of stoarge policy copy properties \"copyType\": copy_type, \"active\": active, \"copyId\": copy_id, \"libraryName\": library_name, \"copyPrecedence\": copy_precedence"
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.get_copy_id",
"url":155,
"doc":"Gets the storage policy id asscoiated with the storage policy",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.get_copy_Precedence",
"url":155,
"doc":"Gets the copyprecendence asscoiated with the storage policy copy",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.is_active",
"url":155,
"doc":"Gets whether the Storage Policy Copy is active or not"
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.refresh",
"url":155,
"doc":"Refresh the properties of the StoragePolicy.",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.copy_name",
"url":155,
"doc":"Returns the name of the copy"
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.override_pool_retention",
"url":155,
"doc":"Returns if Override Pool Retention flag is set or not"
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.copy_retention",
"url":155,
"doc":"Treats the copy retention as a read-only attribute."
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.copy_software_compression",
"url":155,
"doc":"Treats the copy software compression setting as a read-only attribute."
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.set_copy_software_compression",
"url":155,
"doc":"Sets the copy software compression setting as the value provided as input. Args: value (bool)  software compression value to be set on a copy (True/False) Raises: SDKException: if failed to update compression values on copy if the type of value input is not correct",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.copy_dedupe_dash_full",
"url":155,
"doc":"Treats the copy deduplication setting as a read-only attribute."
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.copy_dedupe_disk_cache",
"url":155,
"doc":"Treats the copy deduplication setting as a read-only attribute."
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.store_priming",
"url":155,
"doc":"Treats the copy store priming setting as a read-only attribute."
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.copy_client_side_dedup",
"url":155,
"doc":"Treats the copy deduplication setting as a read-only attribute."
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.is_dedupe_enabled",
"url":155,
"doc":"checks whether deduplication is enabled on the give storage policy copy returns Boolean",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.source_copy",
"url":155,
"doc":"Treats the copy deduplication setting as a read-only attribute."
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.set_encryption_properties",
"url":155,
"doc":"sets copy encryption properties based on given inputs Args:  props dict of keyword arguments as follows: preserve (Bool) whether to set preserve source encryption or not default:False plain_text (Bool) whether to store as plaintext or not default:False network_encryption (Bool) whether to set network encryption or not default:False re_encryption (Bool) whether to set re-encryption or not default:False encryption_type (str) encryption type specification default:\"BlowFish\" encryption_length (int) encryption key length specification default:128 Returns: SDKException: if failed to set copy encryption if the type of inputs are not correct  to preserve encryption  > set_encryption_properties(preserve=True) to store as plaintext  > set_encryption_properties(plaintext=True) to set network encryption  > set_encryption_properties(plaintext=True, network_encryption=True, encryption_type=\"BlowFish\", encryption_length=128) to set re-encryption  > set_encryption_properties(re_encryption=True, encryption_type=\"BlowFish\", encryption_length=128)    \"Blowfish\" 128 \"Blowfish\" 256 \"TwoFish\" 128 \"TwoFish\" 256 \"Serpent\" 128 \"Serpent\" 256 \"GOST\" 256 \"AES\" 128 \"AES\" 256 \"DES3\" 192",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.copy_reencryption",
"url":155,
"doc":"Treats the secondary copy encryption as a read-only attribute."
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.copy_precedence",
"url":155,
"doc":"Gets the copy precedence of the copy"
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.media_agent",
"url":155,
"doc":"Gets the media agent name of the copy"
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.get_jobs_on_copy",
"url":155,
"doc":"Fetches the Details of jobs on Storage Policy Copy Args: from_date (str): Start Date Range for the Jobs [format-'yyyy/mm/dd'] [default: from start] to_date (str): End Date Range for the Jobs [format-'yyyy/mm/dd'] [default: till date] backup_type (str): Filter by backup type [default: None(all backup types)] Valid values: 'full'/'incr' retained_by (int): Filter by retention type of jobs [default: 0] Valid values: 1: basic retention 2: extended retention 4: manual retention include_to_be_copied_jobs (bool): Include details on jobs that are in to be copied state [default: False] list_partial_jobs_only (bool): Get details of jobs that are in partially copied state only [default: False] Returns: (list) : List of dict's with each dict containing details of a job Raises: SDKException: if the response/fetch operation failed",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.delete_job",
"url":155,
"doc":"Deletes a job on Storage Policy Args: job_id (str)  ID for the job to be deleted Raises: SDKException: if type of input parameters is not string",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.pick_for_copy",
"url":155,
"doc":"Marks job(s) to be Picked for Copy to a secondary copy Args: job_id (int or str or list): Job Id(s) that needs to be marked",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.recopy_jobs",
"url":155,
"doc":"Marks job(s) to be picked for ReCopying to a secondary copy Args: job_id (int or str or list): Job Id(s) that needs to be marked",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.do_not_copy_jobs",
"url":155,
"doc":"Marks job(s) as Do Not Copy to a secondary copy Args: job_id (int or str or list): Job Id(s) that needs to be marked",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.pick_jobs_for_data_verification",
"url":155,
"doc":"Marks job(s) on a copy to be Picked for Data Verification Args: job_id (int or str or list): Job Id(s) that needs to be marked",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.do_not_verify_data",
"url":155,
"doc":"Marks job(s) on a copy to not be Picked for Data Verification Args: job_id (int or str or list): Job Id(s) that needs to be marked",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.mark_jobs_bad",
"url":155,
"doc":"Marks job(s) on a copy as Bad Args: job_id (int or str or list): Job Id(s) that needs to be marked",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.pick_jobs_for_backupcopy",
"url":155,
"doc":"This method is used to re-pick the job from backup which are unpick manually Args: job_id (int or str or list): Job Id(s) that needs to be marked",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.extended_retention_rules",
"url":155,
"doc":"Treats the extended retention rules setting as a read-only attribute."
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.copy_retention_managed_disk_space",
"url":155,
"doc":"Treats managed disk space setting as a read-only attribute"
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.is_parallel_copy",
"url":155,
"doc":"Treats the parallel copy setting as a read-only attribute."
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.set_parallel_copy",
"url":155,
"doc":"Sets the parallel copy on storage policy copy as the value provided as input. Args: value (bool)  parallel copy on storage policy copy value to be set on a copy (True/False) Raises: SDKException: if failed to update parallel copy on storage policy copy if the type of value input is not correct",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.space_optimized_auxillary_copy",
"url":155,
"doc":"Treats the space optimized auxillary copy setting as a read-only attribute."
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.is_inline_copy",
"url":155,
"doc":"Treats the inline copy setting as a read-only attribute."
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.set_inline_copy",
"url":155,
"doc":"Sets the inline copy on storage policy copy as the value provided as input. Args: value (bool)  inline copy on storage policy copy value to be set on a copy (True/False) Raises: SDKException: if failed to update inline copy on storage policy copy if the type of value input is not correct",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.network_throttle_bandwidth",
"url":155,
"doc":"Treats the Network Throttle Bandwidth as a read-only attribute. Returns: (int) : Value of Network Throttle Bandwidth set in MBPH"
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.add_svm_association",
"url":155,
"doc":"Method to add SVM association on Replica/vault and Mirror Copy Agrs: src_array_id (int)  Controlhost id of source SVM source_array (str)  Name of the source Array tgt_array_id (int)  Controlhost id of target SVM target_array (str)  Name of the Target Array target_vendor (str)  Target Vendor Name tgt_vendor_id (int)  Target Vendor id",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.set_key_management_server",
"url":155,
"doc":"Sets the Key Management Server to this copy Args: kms_name (str)  The Key Management Server's name Raises SDKException: If input is not valid If API response is not successful",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.set_multiplexing_factor",
"url":155,
"doc":"Sets/Unset the multiplexing factor for the storage policy copy Args: mux_factor (int)  The value for multiplexing factor Raises SDKException: If input is not valid If API response is not successful",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.ddb_resiliency",
"url":155,
"doc":"Treats the Resiliency Flag as a read-only attribute. Returns: (bool) : Value of Resiliency Flag"
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.set_ddb_resiliency",
"url":155,
"doc":"Sets Resiliency On or Off, and set partition threshold for Resiliency Args: is_enabled (Boolean)  True or False to enable and disable resiliency respectively. min_num_partitions (int)  Number of partitions required to be online for Resiliency to take affect. Raises SDKException: If input is not valid If min_num_partitions < 1 If API response is not successful",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.delete_datapath",
"url":155,
"doc":"Delete DataPath from the storage policy copy Args: library_name (str)  name of the library media_agent_name(str)  name of the media agent Raises: SDKException: - If type of required input parameters is not string - If API response is not successful",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.rotate_encryption_master_key",
"url":155,
"doc":"Rotates the encryption key for this copy",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.set_default_datapath",
"url":155,
"doc":"Set default data path for that storage policy copy. Args: library_name (str)  name of the library media_agent_name(str)  name of the media agent Raises: SDKException: - If type of required input parameters is not string - If API response is not successful",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.is_compliance_lock_enabled",
"url":155,
"doc":"Checks whether compliance lock on copy is enabled or not"
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.enable_compliance_lock",
"url":155,
"doc":"Sets compliance lock (wormCopy flag) Raises: SDKException: if response is not success. if response is empty.",
"func":1
},
{
"ref":"cvpysdk.policies.storage_policies.StoragePolicyCopy.disable_compliance_lock",
"url":155,
"doc":"Unsets compliance lock (wormCopy flag) Raises: SDKException: if response is not success. if response is empty.",
"func":1
},
{
"ref":"cvpysdk.policy",
"url":156,
"doc":"File for operating on all types of Policies associated with the Commcell. Policies: Class for representing all types of Policies associated with the Commcell"
},
{
"ref":"cvpysdk.policy.Policies",
"url":156,
"doc":"Class for getting all the all the policies associated with the commcell. Initialize object of the Policies class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the Policies class"
},
{
"ref":"cvpysdk.policy.Policies.refresh",
"url":156,
"doc":"Refresh all the Policies associated with the Commcell.",
"func":1
},
{
"ref":"cvpysdk.policy.Policies.configuration_policies",
"url":156,
"doc":"Returns the instance of the ConfigurationPolicies class."
},
{
"ref":"cvpysdk.policy.Policies.storage_policies",
"url":156,
"doc":"Returns the instance of the StoragePolicies class."
},
{
"ref":"cvpysdk.policy.Policies.schedule_policies",
"url":156,
"doc":"Returns the instance of the SchedulePolicies class."
},
{
"ref":"cvpysdk.recovery_targets",
"url":157,
"doc":"Main file for performing Replication Target specific operations (Auto Recovery). RecoveryTargets and RecoveryTarget are 2 classes defined in this file. RecoveryTargets: Class for representing all the recovery targets RecoveryTarget: Class for a single recovery target selected, and to perform operations on that recovery target RecoveryTargets: __init__()  initialize object of RecoveryTargets class __str__()  returns all the Recovery Targets _get_recovery_targets()  Gets all the recovery targets has_recovery_target()  Checks if a target is present in the commcell. get()  returns the recovery target class object of the input target name refresh()  refresh the targets present in the client RecoveryTargets Attributes               all_targets  returns the dictioanry consisting of all the targets that are present in the commcell and their information such as id and name RecoveryTarget: __init__()  initialize object of RecoveryTarget with the specified recovery target name _get_recovery_target_id()  method to get the recovery target id _get_recovery_target_properties()  get the properties of this ecovery target refresh()  refresh the object properties RecoveryTarget Attributes               recovery_target_id  Returns the id of the recovery target  recovery_target_name  Returns the name of the Recovery Target  destination_hypervisor  Returns the name of destination hypervisor  vm_prefix  Returns the prefix of the vm name  destination_host  Returns the destination host  def datastore  Returns the datastore host  resource_pool  Returns the resource_pool host  destination_network  Returns the destination_network host  no_of_cpu  Returns the no_of_cpu host  no_of_vm  Returns the no_of_vm hos"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTargets",
"url":157,
"doc":"Class for representing all the recovery targets Initialize object of the RecoveryTargets class. Args: commcell_object (object)  instance of the Commcell class"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTargets.all_targets",
"url":157,
"doc":"Returns dict of all the targets. Returns dict - consists of all targets { \"target1_name\": target1_id, \"target2_name\": target2_id }"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTargets.has_recovery_target",
"url":157,
"doc":"Checks if a target is present in the commcell. Args: target_name (str)  name of the target Returns: bool - boolean output whether the target is present in commcell or not Raises: SDKException: if type of the target name argument is not string",
"func":1
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTargets.get",
"url":157,
"doc":"Returns a target object. Args: recovery_target_name (str)  name of the target Returns: object - instance of the target class for the given target name Raises: SDKException: if type of the target name argument is not string if no target exists with the given name",
"func":1
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTargets.refresh",
"url":157,
"doc":"Refresh the recovery targets",
"func":1
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget",
"url":157,
"doc":"Class for a single recovery target selected, and to perform operations on that recovery target Initialize the instance of the RecoveryTarget class. Args: commcell_object (object)  instance of the Commcell class recovery_target_name (str)  name of the target recovery_target_id (str)  id of the target  default: None"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.recovery_target_id",
"url":157,
"doc":"Returns: (str) the id of the recovery target"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.recovery_target_name",
"url":157,
"doc":"Returns: (str) the display name of the recovery target"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.policy_type",
"url":157,
"doc":"Returns: (str) the policy type ID 1 - AWS 2 - Microsoft Hyper-V 7 - Azure 13 - VMware"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.application_type",
"url":157,
"doc":"Returns: (str) the name of the application type 0 - Replication type 1 - Regular type"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.destination_hypervisor",
"url":157,
"doc":"Returns: (str) the client name of destination hypervisor"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.access_node",
"url":157,
"doc":"Returns: (str) the client name of the access node/proxy of the recovery target"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.access_node_client_group",
"url":157,
"doc":"Returns: (str) The client group name set on the access node field of recovery target"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.security_user_names",
"url":157,
"doc":"Returns: list the names of the users who are used for ownership of the hypervisor and VMs"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.vm_prefix",
"url":157,
"doc":"Returns: (str) the prefix of the vm name to be prefixed to the destination VM"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.vm_suffix",
"url":157,
"doc":"Returns: (str) the suffix of the vm name to be suffixed to the destination VM"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.destination_host",
"url":157,
"doc":"Returns: (str) VMware: the destination ESX host name"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.vm_storage_policy",
"url":157,
"doc":"Returns: (str) VMware: the vm storage policy name"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.datastore",
"url":157,
"doc":"Returns: (str) VMware: the datastore name"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.resource_pool",
"url":157,
"doc":"Returns: (str) VMware: the resource pool name"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.vm_folder",
"url":157,
"doc":"Returns: (str) VMware/Hyper-V: the destination VM folder"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.destination_network",
"url":157,
"doc":"Returns: (str) VMware/Hyper-V/AWS: the network name of the destination VM"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.expiration_time",
"url":157,
"doc":"Returns: (str) VMware/Azure: the expiration time of the test boot VM/test failover VM eg: 4 hours or 3 days"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.failover_ma",
"url":157,
"doc":"Returns: (str) VMware: the preferred Media Agent to be used for test failover job"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.isolated_network",
"url":157,
"doc":"Returns: (bool) VMware: whether the target is configured to create isolated network or not"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.iso_path",
"url":157,
"doc":"Returns: list VMware regular: the path of ISOs used for test boot operations"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.server_group",
"url":157,
"doc":"Returns: (str) VMware regular: the name of the server group to be associated with the recovery target"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.no_of_cpu",
"url":157,
"doc":"Returns: (str) VMware regular: the maximum number of CPU cores for live mount"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.no_of_vm",
"url":157,
"doc":"Returns: (str) VMware regular: the maximum number of VMs to be deployed for live mount"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.resource_group",
"url":157,
"doc":"Returns: (str) Azure: the resource group name for destination VM"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.region",
"url":157,
"doc":"Return: (str) Azure: the recovery target region for destination VM"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.availability_zone",
"url":157,
"doc":"Return: (str) Azure/AWS: the availability zone of the destination VM"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.storage_account",
"url":157,
"doc":"Returns: (str) Azure: the storage account name used to deploy the VM's storage"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.vm_size",
"url":157,
"doc":"Returns: (str) Azure: the size of the destination VM. This defines the hardware config"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.disk_type",
"url":157,
"doc":"Returns: (str) Azure: the disk type of the destination VM"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.virtual_network",
"url":157,
"doc":"Returns: (str) Azure: the destination VM virtual network to assign NIC to"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.security_group",
"url":157,
"doc":"Returns: (str) Azure/AWS: the destination VM network security group name"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.create_public_ip",
"url":157,
"doc":"Returns: (bool) Azure: whether public IP will be created for destination VM"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.restore_as_managed_vm",
"url":157,
"doc":"Returns: (bool) whether the destination VM will be a managed VM"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.test_virtual_network",
"url":157,
"doc":"Returns: (str) Azure: the destination VM virtual network for test failover"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.test_security_group",
"url":157,
"doc":"Returns: (str) AWS: the clone VM security group for test failover"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.test_vm_size",
"url":157,
"doc":"Returns: (str) Azure: the destination VM size for test failover"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.volume_type",
"url":157,
"doc":"Returns: (str) AWS: the destination VM volume type/disk type"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.encryption_key",
"url":157,
"doc":"Returns: (str) AWS: the encryption key of the destination VM"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.iam_role_id",
"url":157,
"doc":"Returns: (str) AWS: the AWS IAM Role ID associated with the destination VM"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.iam_role_name",
"url":157,
"doc":"Returns: (str) AWS: the AWS IAM Role name associated with the destination VM"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.instance_type",
"url":157,
"doc":"Returns: (str) AWS: the AWS instance type which is used for defining hardware config"
},
{
"ref":"cvpysdk.recovery_targets.RecoveryTarget.refresh",
"url":157,
"doc":"Refresh the properties of the Recovery Target.",
"func":1
},
{
"ref":"cvpysdk.regions",
"url":158,
"doc":"File for associating Workload and Backup destination regions for various entites class: Regions. Region Regions:     _get_regions()  Gets all the regions created in commcell refresh()  Refresh the list of Regions associated to commcell has_region()  Checks if region with given name exists get()  returns Region class object for the specified input name set_region()  Associate a region to an entity get_region()  Gets the Region associated to an Entity calculate_region()  Calculates the Region to be associated to an Entity Attributes:  all_regions  returns dict of details about region such as id Region:    = _get_region_id()  Returns the region id Attributes:  region_id  Id of the given Region"
},
{
"ref":"cvpysdk.regions.Regions",
"url":158,
"doc":"Class for representing all the Regions created in the commcell Initialises the object of Regions class"
},
{
"ref":"cvpysdk.regions.Regions.refresh",
"url":158,
"doc":"Refresh the list of Regions associated to commcell",
"func":1
},
{
"ref":"cvpysdk.regions.Regions.has_region",
"url":158,
"doc":"Checks if the given Region exists in the Commcell. Args: name (str)  name of the Region Returns: bool - boolean output whether the Region exists in the commcell or not Raises: SDKException: if type of the Region name argument is not string",
"func":1
},
{
"ref":"cvpysdk.regions.Regions.get",
"url":158,
"doc":"Returns the instance of Region class for the given Region name Args: name (str)  name of the Region Returns: object  Instance of Region class for the given Region name Raises: SDKException: - If the Region name argument is not a string - If No Region found in commcell with the given region name",
"func":1
},
{
"ref":"cvpysdk.regions.Regions.set_region",
"url":158,
"doc":"Associate a region to an entity Args: entity_type (str) : Type of the entity (eg: COMMCELL, COMPANY, CLIENT, CLIENT_GROUP, MEDIAAGENT, STORAGE_POOL, etc ) entity_id (int/str): unique id of the entity entity_region_type (str) : Type of the region (WORKLOAD or BACKUP) region_id (int) : ID of the region from app_regions",
"func":1
},
{
"ref":"cvpysdk.regions.Regions.get_region",
"url":158,
"doc":"Gets the Region associated to an Entity Args: entity_type (str) : Type of the entity (eg: COMMCELL, COMPANY, CLIENT, CLIENT_GROUP, MEDIAAGENT, STORAGE_POOL, etc ) entity_id (int) : unique id of the entity entity_region_type (str) : Type of the region (WORKLOAD or BACKUP)",
"func":1
},
{
"ref":"cvpysdk.regions.Regions.calculate_region",
"url":158,
"doc":"Calculates the Region to be associated to an Entity Args: entity_type (str) : Type of the entity (eg: COMMCELL, COMPANY, CLIENT, CLIENT_GROUP, MEDIAAGENT, STORAGE_POOL, etc ) entity_id (int) : unique id of the entity entity_region_type (str) : Type of the region (WORKLOAD or BACKUP)",
"func":1
},
{
"ref":"cvpysdk.regions.Regions.all_regions",
"url":158,
"doc":"Returns dict consisting of all regions details such as id"
},
{
"ref":"cvpysdk.regions.Region",
"url":158,
"doc":"Class for performing operations on a given Region Initialise the Region class instance. Args: commcell_object (object)  instance of the Commcell class region_name (str)  name of the region region_id (int)  ID of the REgion Default : None Returns: object - instance of the Region class"
},
{
"ref":"cvpysdk.regions.Region.region_id",
"url":158,
"doc":"Get Region ID"
},
{
"ref":"cvpysdk.reports",
"url":159,
"doc":"Initialize Reports for the SDK."
},
{
"ref":"cvpysdk.reports.report",
"url":160,
"doc":"Module for performing operations on classic Reports. Report : Class for selecting different options on report and generate the report. BackupJobSummary : Generate backup job summary report. FormatType : Use this Enum class to provide different file extension. Report: __init__(commcell_object)  Initialize the Report instance for the commcell backup_job_summary()  Returns backup job summary instance set_format(format_type)  sets specified file extension for the report to be generated select_local_drive(report_copy_location, client_name)  Selects local drive as report generation location for specified client select_network_share()  select network share as location set_report_custom_name(name)  sets custom report name run_report()  Generates the report BackupJobSummary: __init__(commcell_object)  Initialize the backup job summary report object select_protected_objects()  Select protected object option set_last_hours(hours)  Jobs to be included since n hours set_last_days(hours)  Jobs to be included since n days select_computers(clients, client_groups)  select specific clients and clientgroups"
},
{
"ref":"cvpysdk.reports.report.FormatType",
"url":160,
"doc":"Types of output format"
},
{
"ref":"cvpysdk.reports.report.FormatType.HTML",
"url":160,
"doc":""
},
{
"ref":"cvpysdk.reports.report.FormatType.PDF",
"url":160,
"doc":""
},
{
"ref":"cvpysdk.reports.report.FormatType.TEXT",
"url":160,
"doc":""
},
{
"ref":"cvpysdk.reports.report.FormatType.XML",
"url":160,
"doc":""
},
{
"ref":"cvpysdk.reports.report.Report",
"url":160,
"doc":"Operations on classic report Initialize the report object"
},
{
"ref":"cvpysdk.reports.report.Report.backup_job_summary",
"url":160,
"doc":"Returns object of backup job summary report"
},
{
"ref":"cvpysdk.reports.report.Report.set_format",
"url":160,
"doc":"Sets the output format of a report Args: format_type (FormatType): set file extension using Enum class FormatType",
"func":1
},
{
"ref":"cvpysdk.reports.report.Report.select_local_drive",
"url":160,
"doc":"Select local drive Args: client_name (String)  Name of the client report_copy_location (String)  location where report need to be saved",
"func":1
},
{
"ref":"cvpysdk.reports.report.Report.select_network_share",
"url":160,
"doc":"Select network share",
"func":1
},
{
"ref":"cvpysdk.reports.report.Report.set_report_custom_name",
"url":160,
"doc":"Sets report custom name Args: name(String)  Custom name of the report",
"func":1
},
{
"ref":"cvpysdk.reports.report.Report.run_report",
"url":160,
"doc":"Executes the report Returns: str: Job ID",
"func":1
},
{
"ref":"cvpysdk.reports.report.BackupJobSummary",
"url":160,
"doc":"Operations on backup job summary report Initialize the backup job summary report object"
},
{
"ref":"cvpysdk.reports.report.BackupJobSummary.select_protected_objects",
"url":160,
"doc":"select protected objects",
"func":1
},
{
"ref":"cvpysdk.reports.report.BackupJobSummary.set_last_hours",
"url":160,
"doc":"Set time range to generate report since n number of hours Args: number_of_hours (Int)  number of hours",
"func":1
},
{
"ref":"cvpysdk.reports.report.BackupJobSummary.set_last_days",
"url":160,
"doc":"Set time range to generate report since n number of days Args: number_of_hours (Int)  number of hours",
"func":1
},
{
"ref":"cvpysdk.reports.report.BackupJobSummary.select_computers",
"url":160,
"doc":"Select clients and client groups for generating the report Args: clients (List)  List of clients client_groups (List)  List of client groups",
"func":1
},
{
"ref":"cvpysdk.reports.report.BackupJobSummary.backup_job_summary",
"url":160,
"doc":"Returns object of backup job summary report"
},
{
"ref":"cvpysdk.reports.report.BackupJobSummary.set_format",
"url":160,
"doc":"Sets the output format of a report Args: format_type (FormatType): set file extension using Enum class FormatType",
"func":1
},
{
"ref":"cvpysdk.reports.report.BackupJobSummary.select_local_drive",
"url":160,
"doc":"Select local drive Args: client_name (String)  Name of the client report_copy_location (String)  location where report need to be saved",
"func":1
},
{
"ref":"cvpysdk.reports.report.BackupJobSummary.select_network_share",
"url":160,
"doc":"Select network share",
"func":1
},
{
"ref":"cvpysdk.reports.report.BackupJobSummary.set_report_custom_name",
"url":160,
"doc":"Sets report custom name Args: name(String)  Custom name of the report",
"func":1
},
{
"ref":"cvpysdk.reports.report.BackupJobSummary.run_report",
"url":160,
"doc":"Executes the report Returns: str: Job ID",
"func":1
},
{
"ref":"cvpysdk.schedules",
"url":161,
"doc":"Main file for performing schedule related operations for client/agent/backupset/subclient. SchedulePattern: Class for creating the necessary pattern for a schedule creation/modification SchedulePattern: __init__(class_object)  initialise object of the SchedulePattern class _time_converter(_time_string, time_format)  converts utc to epoch and vice versa _pattern_json(pattern_option_dict)  forms the pattern json based on the dict provided _one_time(pattern_dict)  sets the one time schedule pattern _daily(pattern_dict)  sets the daily schedule pattern _weekly(pattern_dict)  sets the weekly schedule pattern _monthly(pattern_dict)  sets the monthly schedule pattern _monthly_relative(pattern_dict)  set the monthly_relative schedule pattern _yearly(pattern_dict)  sets the yearly schedule pattern _yearly_relative(pattern_dict)  sets the yearly_relative schedule pattern _continuous(pattern_dict)  sets the continuous schedule pattern _automatic(pattern_dict)  sets the automatic schedule pattern _after_job_completes(pattern_dict)  sets the after job completes schedule pattern create_schedule_pattern(pattern_dict)  creates a schedule pattern for the user given pattern create_schedule(task_req,pattern_dict)  creates a scheduling request from the pattern provided Schedules: Initializes instance of all schedules for a commcell entity. Schedules: __init__(class_object)  initialise object of the Schedules class __str__()  string of all schedules associated with the commcell entity __repr__()  returns the string for the instance of the Schedules class _get_sch_id_from_task_id()  gets the schedule id from the provided task id _get_schedule_id()  gets the schedule if with the provided inputs _get_schedules()  gets all the schedules associated with the commcell entity has_schedule(schedule_name)  checks if schedule exists for the comcell entity or not delete(schedule_name)  deletes the given schedule refresh()  refresh the schedules associated with the commcell entity Schedule: Class for performing operations for a specific Schedule. Schedule: __init__(class_object)  initialise object of the Schedule class _get_schedule_properties  get all schedule properties is_disabled  Get the schedule status whether its disabled schedule_freq_type  gets the schedule frequence type name  gets the name of the schedule name(new_name)  sets the name of the schedule one_time  gets the one time schedule pattern dict one_time(pattern_dict)  sets the one time schedule pattern daily  gets the daily schedule pattern daily(pattern_dict)  sets the daily schedule pattern weekly  gets the weekly schedule pattern weekly(pattern_dict)  sets the weekly schedule pattern monthly  gets the monthly schedule pattern monthly(pattern_dict)  gets the monthly schedule pattern monthly_relative  gets the monthly_relative schedule pattern monthly_relative(pattern_dict)  set the monthly_relative schedule pattern yearly  gets the yearly schedule pattern yearly(pattern_dict)  sets the yearly schedule pattern yearly_relative  gets the yearly_relative schedule pattern yearly_relative(pattern_dict)  sets the yearly_relative schedule pattern continuous  gets the continuous schedule pattern continuous(pattern_dict)  sets the continuous schedule pattern automatic  gets the automatic schedule pattern automatic(pattern_dict)  sets the automatic schedule pattern active_start_date  gets the start date of schedule pattern active_start_date(active_start_date)  sets the start date of schedule pattern active_start_time  gets the start time of schedule pattern active_start_time(active_start_time)  sets the start time of schedule pattern enable()  enables the schedule disable()  disables the schedule run_now()  Triggers the schedule immediately _modify_task_properties  modifies the schedule properties based on the setters _process_schedule_update_response  processes the response and gives the error_code and message refresh()  refresh the properties of the schedule"
},
{
"ref":"cvpysdk.schedules.OperationType",
"url":161,
"doc":"Operation Types supported to get schedules of particular optype"
},
{
"ref":"cvpysdk.schedules.OperationType.REPORTS",
"url":161,
"doc":""
},
{
"ref":"cvpysdk.schedules.OperationType.DATA_AGING",
"url":161,
"doc":""
},
{
"ref":"cvpysdk.schedules.SchedulePattern",
"url":161,
"doc":"Class for getting the schedule pattern initialise object of the SchedulePattern class"
},
{
"ref":"cvpysdk.schedules.SchedulePattern.exception_dates",
"url":161,
"doc":"Provided a Scheduler version of exception as an on day number Args: day_list (list)  List of exception dates [1,2,3] Returns (int)  on_day number for the pattern json",
"func":1
},
{
"ref":"cvpysdk.schedules.SchedulePattern.create_schedule_pattern",
"url":161,
"doc":"calls the required type of schedule module and forms the pattern json Args: pattern_dict (Dict)  freq_type is mandatory, all other fields specified below can be skipped and system defaults will be set for reference on pattern_dict check create_schedule Returns: pattern which can be plugged into the create or modify task request to create or modify schedules",
"func":1
},
{
"ref":"cvpysdk.schedules.SchedulePattern.create_schedule",
"url":161,
"doc":"returns a schedule task_req after including pattern Args: task_req: task_req for immediate job operation to be converted to a schedule freq_type is mandatory, all other fields specified below can be skipped and system defaults will be set with the same dict, pass time_zone: Time Zone Name(default is taken as COmmServe Time Zone) Common Time Zones examples  'CommServe Time Zone', 'Client Time Zone', 'UTC' for one_time: { \"freq_type\": 'one_time', \"active_start_date\": date_in_%m/%d/%y (str), \"active_start_time\": time_in_%h:%m (str) } for daily: { \"freq_type\": 'daily', \"active_start_time\": time_in_%H/%S (str), \"repeat_days\": days_to_repeat (int) } for weekly: { \"freq_type\": 'weekly', \"active_start_time\": time_in_%H/%S (str), \"repeat_weeks\": weeks_to_repeat (int) \"weekdays\": list of weekdays ['Monday','Tuesday'] } for monthly: { \"freq_type\": 'monthly', \"active_start_time\": time_in_%H/%S (str), \"repeat_months\": weeks_to_repeat (int) \"on_day\": Day to run schedule (int) } for monthly_relative: { \"active_start_time\": time_in_%H/%S (str), \"relative_time\": relative day of the schedule (str) 'first', 'second', \"relative_weekday\": Day to run schedule (str) 'sunday','monday' . \"repeat_months\": months_to_repeat } for yearly: { \"active_start_time\": time_in_%H/%S (str), \"on_month\": month to run schedule (str) January, Febuary . \"on_day\": Day to run schedule (int) } for yearly_relative: { \"active_start_time\": time_in_%H/%S (str), \"relative_time\": relative day of the schedule (str) 'first', 'second', \"relative_weekday\": Day to run schedule (str) 'sunday','monday' . \"on_month\": month to run the schedule(str) January, Febuary . } for continuous: { job_interval: interval between jobs in mins(int) } for automatic: { min_interval_hours: minimum hours between jobs(int) min_interval_minutes: minimum minutes between jobs(int) max_interval_hours: maximum hours between jobs(int) max_interval_minutes: maximum minutes between jobs(int) min_sync_interval_hours: minimum sync hours between jobs(int) min_sync_interval_minutes: minimum sync minutes between jobs(int) ignore_opwindow_past_maxinterval: (bool) wired_network_connection: (bool) min_network_bandwidth: (int) kbps specific_network: (dict){ip_address:(str),subnet:(int)} dont_use_metered_network: (bool) ac_power: (bool) stop_if_on_battery: (bool) stop_sleep_if_runningjob: (bool) cpu_utilization_below : (int)% cpu_utilization_above : (int)% disk_use_threshold: (int)% number_of_log_files: (int) } for after_job_completes : { \"freq_type\": 'after_job_completes', \"active_start_date\": date_in_%m/%d/%y (str), \"active_start_time\": time_in_%H/%S (str), \"repeat_days\": days_to_repeat (int) } Sample Usage inside the individual operation function: Add a schedule_pattern parameter to the function and include the below line before making the sdk make_request call if schedule_pattern: request_json = SchedulePattern().create_schedule(task_req,schedule_pattern) pattern_dict (Dict)  schedule pattern to be merged with the task request Returns: Schedule task request",
"func":1
},
{
"ref":"cvpysdk.schedules.Schedules",
"url":161,
"doc":"Class for getting the schedules of a commcell entity. Initialise the Schedules class instance. Args: class_object(object)  instance of client/agent/backupset/subclient/CommCell class operation_type  required when commcell object is passed refer OperationType class for supported op types Returns: object - instance of the Schedule class Raises: SDKException: if class object does not belong to any of the Client or Agent or Backupset or Subclient class"
},
{
"ref":"cvpysdk.schedules.Schedules.has_schedule",
"url":161,
"doc":"Checks if a schedule exists for the commcell entity with the input schedule name. Args: schedule_name (str)  name of the schedule schedule_id (int)  id of the schedule task_id (int)  task id of the schedule Returns: bool - boolean output whether the schedule exists for the commcell entity or not Raises: SDKException: if type of the schedule name argument is not string",
"func":1
},
{
"ref":"cvpysdk.schedules.Schedules.get",
"url":161,
"doc":"Returns a schedule object of the specified schedule name. Args: schedule_name (str)  name of the Schedule schedule_id (int)  id of the schedule task_id (int)  task id of the schedule Returns: object - instance of the schedule class for the given schedule name Raises: SDKException: if type of the schedule name argument is not string if no schedule exists with the given name",
"func":1
},
{
"ref":"cvpysdk.schedules.Schedules.delete",
"url":161,
"doc":"deletes the specified schedule name. Args: schedule_name (str)  name of the Schedule schedule_id (int)  id of the schedule task_id (int)  task id of the schedule Raises: SDKException: if type of the schedule name argument is not string if no schedule exists with the given name",
"func":1
},
{
"ref":"cvpysdk.schedules.Schedules.refresh",
"url":161,
"doc":"Refresh the Schedules associated with the Client / Agent / Backupset / Subclient.",
"func":1
},
{
"ref":"cvpysdk.schedules.Schedule",
"url":161,
"doc":"Class for performing operations for a specific Schedule. Initialise the Schedule class instance. Args: class_object (object)  instance of Class Object schedule_name (str)  name of the Schedule schedule_id (int)  task ids of the Schedule Returns: object - instance of the Schedule class"
},
{
"ref":"cvpysdk.schedules.Schedule.subtask_id",
"url":161,
"doc":"Property which returns subtask id of the schedule Returns (int)  Subtask id"
},
{
"ref":"cvpysdk.schedules.Schedule.is_disabled",
"url":161,
"doc":"Get the schedule status Returns: (Bool):True if the schedule is disabled otherwise returns False"
},
{
"ref":"cvpysdk.schedules.Schedule.schedule_freq_type",
"url":161,
"doc":"get the schedule frequency type Returns: (str) the schedule frequency type"
},
{
"ref":"cvpysdk.schedules.Schedule.name",
"url":161,
"doc":"gets the name of the schedule Returns: (str) The schedule name"
},
{
"ref":"cvpysdk.schedules.Schedule.one_time",
"url":161,
"doc":"gets the one time schedule pattern Returns: (dict) The schedule pattern { \"active_start_date\": date_in_%m/%d/%y (str), \"active_start_time\": time_in_%h:%m (str) } False: if schedule type is wrong"
},
{
"ref":"cvpysdk.schedules.Schedule.daily",
"url":161,
"doc":"gets the daily schedule Returns: (dict)  The schedule pattern { \"active_start_time\": time_in_%H/%S (str), \"repeat_days\": days_to_repeat (int) } False: if schedule type is wrong"
},
{
"ref":"cvpysdk.schedules.Schedule.weekly",
"url":161,
"doc":"gets the weekly schedule Returns (dict)  The schedule pattern { \"active_start_time\": time_in_%H/%S (str), \"repeat_weeks\": weeks_to_repeat (int) \"weekdays\": list of weekdays ['Monday','Tuesday'] } False: if schedule type is wrong"
},
{
"ref":"cvpysdk.schedules.Schedule.monthly",
"url":161,
"doc":"gets the monthly schedule Returns: (dict)  the schedule pattern { \"active_start_time\": time_in_%H/%S (str), \"repeat_months\": months_to_repeat (int) \"on_day\": Day to run schedule (int) } False: if schedule type is wrong"
},
{
"ref":"cvpysdk.schedules.Schedule.monthly_relative",
"url":161,
"doc":"gets the monthly_relative schedule Returns: (dict)  The schedule pattern { \"active_start_time\": time_in_%H/%S (str), \"relative_time\": relative day of the schedule (str)'first','second', \"relative_weekday\": Day to run schedule (str) 'sunday','monday' . \"repeat_months\": months_to_repeat } False: if schedule type is wrong"
},
{
"ref":"cvpysdk.schedules.Schedule.yearly",
"url":161,
"doc":"gets the yearly schedule Returns: (dict)  The schedule pattern { \"active_start_time\": time_in_%H/%S (str), \"on_month\": month to run schedule (str) January, Febuary . \"on_day\": Day to run schedule (int) } False: if schedule type is wrong"
},
{
"ref":"cvpysdk.schedules.Schedule.yearly_relative",
"url":161,
"doc":"gets the yearly_relative schedule Returns: (dict) The schedule pattern { \"active_start_time\": time_in_%H/%S (str), \"relative_time\": relative day of the schedule (str)'first','second', \"relative_weekday\": Day to run schedule (str) 'sunday','monday' . \"on_month\": month to run the schedule(str) January, Febuary . } False: if schedule type is wrong"
},
{
"ref":"cvpysdk.schedules.Schedule.continuous",
"url":161,
"doc":"gets the continuous schedule Returns: (dict)  The schedule pattern { job_interval: interval between jobs in mins(int) } False: if schedule type is wrong"
},
{
"ref":"cvpysdk.schedules.Schedule.automatic",
"url":161,
"doc":"gets the automatic schedule Returns: (dict)  The schedule pattern { min_interval_hours: minimum hours between jobs(int) min_interval_minutes: minimum minutes between jobs(int) max_interval_hours: maximum hours between jobs(int) max_interval_minutes: maximum minutes between jobs(int) min_sync_interval_hours: minimum sync hours between jobs(int) min_sync_interval_minutes: minimum sync minutes between jobs(int) ignore_opwindow_past_maxinterval: (bool) wired_network_connection: (bool) min_network_bandwidth: (int) kbps specific_network: (dict){ip_address:(str),subnet:(int)} dont_use_metered_network: (bool) ac_power: (bool) stop_if_on_battery: (bool) stop_sleep_if_runningjob: (bool) cpu_utilization_below : (int)% cpu_utilization_above : (int)% run_synthetic_full : (str: every_x_days/extended_retention/ space_reclaim) days_between_synthetic_full : (int) } False: if schedule type is wrong"
},
{
"ref":"cvpysdk.schedules.Schedule.active_start_date",
"url":161,
"doc":"gets the start date of the schedule Returns: (str)  date in %m/%d/%Y"
},
{
"ref":"cvpysdk.schedules.Schedule.active_start_time",
"url":161,
"doc":"gets the start time of the schedule Returns: (str)  time in %H/%S"
},
{
"ref":"cvpysdk.schedules.Schedule.active_end_date",
"url":161,
"doc":"gets the end date of the schedule if present Returns: (str)  date in %m/%d/%Y"
},
{
"ref":"cvpysdk.schedules.Schedule.exception_dates",
"url":161,
"doc":"returns a list of exception days if present Returns: (list)  exception days in a schedule"
},
{
"ref":"cvpysdk.schedules.Schedule.end_after",
"url":161,
"doc":"gets the maximum occurence of the schedule if present Returns: (int)  end occurence"
},
{
"ref":"cvpysdk.schedules.Schedule.repeat_pattern",
"url":161,
"doc":"gets the repeat pattern in a schedule if present Returns: (dict)  the repeat pattern { \"repeat_every\": repeat_every, \"repeat_end\": repeat_end }"
},
{
"ref":"cvpysdk.schedules.Schedule.run_now",
"url":161,
"doc":"Triggers the schedule to run immediately Returns: job id/ Job IDs. Args: return_multiple_jobs (bool)  if set to True, return multiple jobs, default: False. Raises: SDKException: Response received is empty. If no job id is found.",
"func":1
},
{
"ref":"cvpysdk.schedules.Schedule.enable",
"url":161,
"doc":"Enable a schedule. Raises: SDKException: if failed to enable schedule if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.schedules.Schedule.disable",
"url":161,
"doc":"Disable a Schedule. Raises: SDKException: if failed to disable Schedule if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.schedules.Schedule.refresh",
"url":161,
"doc":"Refresh the properties of the Schedule.",
"func":1
},
{
"ref":"cvpysdk.security",
"url":162,
"doc":"Initialize Security Objects for the SDK."
},
{
"ref":"cvpysdk.security.role",
"url":163,
"doc":"Main file for managing roles on this commcell Roles and Role are only the two classes defined in this commcell Roles __init__()  initializes the Roles class object __str__()  returns all the Roles associated with the commcell __repr__()  returns the string for the instance of the Roles class _get_roles()  gets all the roles on this commcell has_role()  checks if role with specified role exists on this commcell add()  craetes the role on this commcell get()  returns the role class object for the specified role name delete()  deletes the role on this commcell refresh()  refreshes the list of roles on this commcell Role __init__()  initiaizes the role class object __repr__()  returns the string for the instance of the role class _get_role_id()  returns the role id associated with this role _get_role_properties()  gets all the properties associated with this role role_name()  returns the name of this role role_id()  returns the id of this role company_name()  returns the company name of this role role_description()  returns the description of this role status()  returns the status of this role refresh()  refreshes the properties of this role _update_role_props()  Updates properties of existing roles associate_user()  sharing role to user with valid permissions who can manage this role. associate_usergroup()  sharing role to user group with valid permissions who can manage this role modify_capability()  modifying permissions of the role"
},
{
"ref":"cvpysdk.security.role.Roles",
"url":163,
"doc":"Class for maintaining all the configured role on this commcell Initializes the roles class object for this commcell Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the Clients class"
},
{
"ref":"cvpysdk.security.role.Roles.has_role",
"url":163,
"doc":"Checks if any role with specified name exists on this commcell Args: role_name (str)  name of the role which has to be checked if exists Retruns: Bool- True if specified role is presnt on th ecommcell else false Raises: SDKException: if data type of input is invalid",
"func":1
},
{
"ref":"cvpysdk.security.role.Roles.add",
"url":163,
"doc":"creates new role Args: role Name  Name of the role to be created category Name list  role will be created with all the permissions associated with this category e.g.: category Name=Client :role will have all permisisons from this category. e.g.: category Name=Client Group :role will have all permissions from this category e.g.: category Name=commcell :role will have all permissions from this category permission_list (array)  permission array which is to be updated e.g.: permisison_list=[\"View\", \"Agent Management\", \"Browse\"] Returns: Role Properties update dict Raises: SDKException: if data type of input is invalid if role already exists on the commcell",
"func":1
},
{
"ref":"cvpysdk.security.role.Roles.get",
"url":163,
"doc":"Returns the role object for the specified role name Args: role_name (str)  name of the role for which the object has to be created Raises: SDKException: if role doesn't exist with specified name",
"func":1
},
{
"ref":"cvpysdk.security.role.Roles.delete",
"url":163,
"doc":"Deletes the role object for specified role name Args: role_name (str)  name of the role for which the object has to be deleted Raises: SDKException: if role doesn't exist if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.security.role.Roles.refresh",
"url":163,
"doc":"Refresh the list of Roles on this commcell. Args: hard (bool)  flag to hard refresh mongo cache for this entity",
"func":1
},
{
"ref":"cvpysdk.security.role.Roles.all_roles",
"url":163,
"doc":"Returns all the roles present in the commcell"
},
{
"ref":"cvpysdk.security.role.Role",
"url":163,
"doc":"\"Class for representing a particular role configured on this commcell Initialize the Role class object for specified role Args: commcell_object (object)  instance of the Commcell class role_name (str)  name of the role role_id (str)  id of the role default: None"
},
{
"ref":"cvpysdk.security.role.Role.associate_user",
"url":163,
"doc":"Updates the user who can manage this role with the permission provided Args: role Name  Role given to user on this role object user Name  user name who can manage this role Raises: SDKException: if role Name doesn't exist if user Name doesn't exist if response is not success",
"func":1
},
{
"ref":"cvpysdk.security.role.Role.associate_usergroup",
"url":163,
"doc":"Updates the usergroup who can manage this role with the permission provided Args: role Name  Role given to user on this role object user Group Name  user name who can manage this role Raises: SDKException: if role Name doesn't exist if user Group Name doesn't exist if response is not success",
"func":1
},
{
"ref":"cvpysdk.security.role.Role.modify_capability",
"url":163,
"doc":"Updates role capabilities Args: request_type(str)  type of request to be done ADD, OVERWRITE, DELETE category Name list  role will be created with all the permissions associated with this category e.g.: category Name=Client :role will have all permisisons from this category. e.g.: category Name=Client Group :role will have all permissions from this category e.g.: category Name=commcell :role will have all permissions from this category permission_list(list)  permission array which is to be updated e.g.: permisison_list=[\"View\", \"Agent Management\", \"Browse\"] Returns: Role Properties update dict Raises: SDKException: if data type of input is invalid if role already exists on the commcell",
"func":1
},
{
"ref":"cvpysdk.security.role.Role.role_name",
"url":163,
"doc":"Returns the role name of this commcell role"
},
{
"ref":"cvpysdk.security.role.Role.role_id",
"url":163,
"doc":"Returns the role id of this commcell role"
},
{
"ref":"cvpysdk.security.role.Role.role_description",
"url":163,
"doc":"Returns the role_desccription of this commcell role"
},
{
"ref":"cvpysdk.security.role.Role.company_name",
"url":163,
"doc":"Returns: str - company name to which user group belongs to. str - empty string, if usergroup belongs to Commcell"
},
{
"ref":"cvpysdk.security.role.Role.status",
"url":163,
"doc":"Returns the role_status of this commcell role"
},
{
"ref":"cvpysdk.security.role.Role.permissions",
"url":163,
"doc":"Returns the permissions that are associated with role"
},
{
"ref":"cvpysdk.security.role.Role.refresh",
"url":163,
"doc":"Refresh the properties of the Roles.",
"func":1
},
{
"ref":"cvpysdk.security.security_association",
"url":164,
"doc":"Helper file to manage security associations on this commcell SecurityAssociation is the only class defined in this file SecurityAssociation: __init__()  initializes security class object __str__()  returns all the users associated with the commcell __repr__()  returns the string for the instance of the User class _security_association_json() generates security association blob with all user-entity-role association fetch_security_association() fetches security associations from entity _get_security_roles()  gets the list of all the security roles applicable on this commcell _add_security_association()  adds the security association with client or clientgroup has_role()  checks if specified role exists on commcell"
},
{
"ref":"cvpysdk.security.security_association.SecurityAssociation",
"url":164,
"doc":"Class for managing the security associations roles on the commcell Initializes the security associations object Args: commcell_object (object)  instance of the Commcell class class_object (object)  instance of the class on which we want to manage security operations"
},
{
"ref":"cvpysdk.security.security_association.SecurityAssociation.fetch_security_association",
"url":164,
"doc":"Fetches security associations from entity Args: security_dict (dict)  security association properties of entity Returns: formatted security association dictionary with custom permissions marked as invalid",
"func":1
},
{
"ref":"cvpysdk.security.security_association.SecurityAssociation.has_role",
"url":164,
"doc":"Checks if role with specified name exists Args: role_name (str)  name of the role to be verified Returns: (bool) - True if role with specified name exists",
"func":1
},
{
"ref":"cvpysdk.security.two_factor_authentication",
"url":165,
"doc":"Helper file to manage two factor authentication settings on this commcell TwoFactorAuthentication is the only class defined in this file TwoFactorAuthentication: __init__()  Initializes TwoFactorAuthentication class object. refresh()  fetches the current tfa settings. _get_tfa_info()  Excutes get api on the server to fetch tfa info. _process_response()  Process the response json disable_tfa()  Disables tfa at commcell or organizaton level enable_tfa()  Enables tfa at commcell or organization level TwoFactorAuthentication Instance Attributes                      =  is_tfa_enabled  returns tfa status True or False  tfa_enabled_user_groups  returns user groups on which tfa is enabled. only if user group level tfa is enabled"
},
{
"ref":"cvpysdk.security.two_factor_authentication.TwoFactorAuthentication",
"url":165,
"doc":"Class for managing the security associations roles on the commcell Initializes TwoFactorAuthentication class object Args: commcell_object  commcell class object. organization_id  id of the organization on which two factor authentication operations to be performed. default:None Raises: SDKException: if invalid args are sent."
},
{
"ref":"cvpysdk.security.two_factor_authentication.TwoFactorAuthentication.refresh",
"url":165,
"doc":"Refresh the properties of two factor authentication Returns: None",
"func":1
},
{
"ref":"cvpysdk.security.two_factor_authentication.TwoFactorAuthentication.disable_tfa",
"url":165,
"doc":"Disables two factor authentication at commcell/organization level Returns: None Raises: SDKException: if failed to disable tfa.",
"func":1
},
{
"ref":"cvpysdk.security.two_factor_authentication.TwoFactorAuthentication.enable_tfa",
"url":165,
"doc":"Enables two factor authentication at commcell/organization level. Args: user_groups (list)  user group names on which two factor authentication needs to be enabled Returns: None Raises: SDKException: if failed to enable tfa.",
"func":1
},
{
"ref":"cvpysdk.security.two_factor_authentication.TwoFactorAuthentication.is_tfa_enabled",
"url":165,
"doc":"Returns status of two factor authentication(True/False)"
},
{
"ref":"cvpysdk.security.two_factor_authentication.TwoFactorAuthentication.tfa_enabled_user_groups",
"url":165,
"doc":"Returns list of user group names for which two factor authentication is enabled eg:- [ { \"userGroupId\": 1, \"userGroupName\": \"dummy\" } ]"
},
{
"ref":"cvpysdk.security.user",
"url":166,
"doc":"Main file for managing users on this commcell Users and User are only the two classes defined in this commcell Users: __init__()  initializes the users class object __str__()  returns all the users associated with the commcell __repr__()  returns the string for the instance of the Users class _get_users()  gets all the users on this commcell _process_add_or_delete_response()  process the add or delete users response add()  adds local/external user to commcell has_user()  checks if user with specified user exists on this commcell get()  returns the user class object for the specified user name delete()  deletes the user on this commcell refresh()  refreshes the list of users on this commcell all_users()  Returns all the users present in the commcell _get_users_on_service_commcell()  gets the users from service commcell User __init__()  initiaizes the user class object __repr__()  returns the string for the instance of the User class _get_user_id()  returns the user id associated with this user _get_user_properties()  gets all the properties associated with this user _update_user_props()  updates the properties associated with this user _update_usergroup_request()  makes the request to update usergroups associated with this user user_name()  returns the name of this user user_id()  returns the id of this user description()  returns the description of this user email()  returns the email of this user associated_usergroups()  returns the usergroups associated with this user associated_external_usergroups()  returns the external usergroups associated with this user add_usergroups()  associates the usergroups with this user remove_usergroups()  disassociated the usergroups with this user overwrite_usergroups()  reassociates the usergroups with this user refresh()  refreshes the properties of this user update_security_associations()  updates 3-way security associations on user request_OTP()  fetches OTP for user user_security_associations()  returns sorted roles and custom roles present on the different entities. status()  returns the status of user update_user_password()  Updates new passwords of user user_guid()  returns user GUID age_password_days()  returns age password days for user user_company_name()  returns company name if user is a company user else returns empty str get_account_lock_info()  returns account lock information unlock()  Unlocks user account"
},
{
"ref":"cvpysdk.security.user.Users",
"url":166,
"doc":"Class for maintaining all the configured users on this commcell Initializes the users class object for this commcell Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the Clients class"
},
{
"ref":"cvpysdk.security.user.Users.add",
"url":166,
"doc":"Adds a local/external user to this commcell Args: user_name (str)  name of the user to be created full_name (str)  full name of the user to be created email (str)  email of the user to be created domain (str)  Needed in case you are adding external user password (str)  password of the user to be created default: None local_usergroups (list)  user can be member of these user groups Ex:1. [\"master\"], 2. [\"group1\", \"group2\"] system_generated_password (bool)  if set to true system defined password will be used default: False entity_dictionary  combination of entity_type, entity names and role e.g.: security_dict={ 'assoc1': { 'entity_type':['entity_name'], 'entity_type':['entity_name', 'entity_name'], 'role': ['role1'] }, 'assoc2': { 'mediaAgentName': ['networktestcs', 'standbycs'], 'clientName': ['Linux1'], 'role': ['New1'] } } entity_type  key for the entity present in dictionary on which user will have access entity_name  Value of the key role  key for role name you specify e.g.: {\"clientName\":\"Linux1\"} entity_type: clientName, mediaAgentName, libraryName, userName, userGroupName, storagePolicyName, clientGroupName, schedulePolicyName, locationName, providerDomainName, alertName, workflowName, policyName, roleName entity_name: client name for entity_type 'clientName' Media agent name for entitytype 'mediaAgentName' similar for other entity_typees Raises: SDKException: if data type of input is invalid if user with specified name already exists if password or system_generated_password are not set if failed to add user to commcell",
"func":1
},
{
"ref":"cvpysdk.security.user.Users.has_user",
"url":166,
"doc":"Checks if any user with specified name exists on this commcell Args: user_name (str)  name of the user which has to be checked if exists Raises: SDKException: if data type of input is invalid",
"func":1
},
{
"ref":"cvpysdk.security.user.Users.get",
"url":166,
"doc":"Returns the user object for the specified user name Args: user_name (str)  name of the user for which the object has to be created Raises: SDKException: if user doesn't exist with specified name",
"func":1
},
{
"ref":"cvpysdk.security.user.Users.delete",
"url":166,
"doc":"Deletes the specified user from the existing commcell users Args: user_name (str)  name of the user which has to be deleted new_user (str)  name of the target user, whom the ownership of entities should be transferred new_usergroup (str)  name of the user group, whom the ownership of entities should be transferred Note: either user or usergroup should be provided for ownership transfer not both. Raises: SDKException: if user doesn't exist if new user and new usergroup any of these is passed and these doesn't exist on commcell if both user and usergroup is passed for ownership transfer if both user and usergroup is not passed for ownership transfer if response is not success",
"func":1
},
{
"ref":"cvpysdk.security.user.Users.service_commcell_users_space",
"url":166,
"doc":"Returns the user space from service commcell list - consists of users space from service commcell ['user1','user2']"
},
{
"ref":"cvpysdk.security.user.Users.refresh",
"url":166,
"doc":"Refresh the list of Users on this commcell. Args: hard (bool)  flag to hard refresh mongo cache for this entity",
"func":1
},
{
"ref":"cvpysdk.security.user.Users.all_users",
"url":166,
"doc":"Returns the dict of all the users on the commcell dict of all the users on commcell { 'user_name_1': user_id_1 }"
},
{
"ref":"cvpysdk.security.user.User",
"url":166,
"doc":"Class for representing a particular user configured on this commcell Initialize the User class object for specified user Args: commcell_object (object)  instance of the Commcell class user_name (str)  name of the user user_id (str)  id of the user default: None"
},
{
"ref":"cvpysdk.security.user.User.name",
"url":166,
"doc":"Returns the User display name"
},
{
"ref":"cvpysdk.security.user.User.full_name",
"url":166,
"doc":"Returns the full name of this commcell user"
},
{
"ref":"cvpysdk.security.user.User.user_name",
"url":166,
"doc":"Returns the user name of this commcell user"
},
{
"ref":"cvpysdk.security.user.User.user_id",
"url":166,
"doc":"Returns the user id of this commcell user"
},
{
"ref":"cvpysdk.security.user.User.description",
"url":166,
"doc":"Returns the description associated with this commcell user"
},
{
"ref":"cvpysdk.security.user.User.email",
"url":166,
"doc":"Returns the email associated with this commcell user"
},
{
"ref":"cvpysdk.security.user.User.associated_usergroups",
"url":166,
"doc":"Returns the list of associated usergroups"
},
{
"ref":"cvpysdk.security.user.User.associated_external_usergroups",
"url":166,
"doc":"Returns the list of associated external usergroups"
},
{
"ref":"cvpysdk.security.user.User.user_security_associations",
"url":166,
"doc":"Returns security associations from properties of the User."
},
{
"ref":"cvpysdk.security.user.User.status",
"url":166,
"doc":"Returns the status of this commcell user"
},
{
"ref":"cvpysdk.security.user.User.user_guid",
"url":166,
"doc":"returns user guid"
},
{
"ref":"cvpysdk.security.user.User.age_password_days",
"url":166,
"doc":"returns age password days"
},
{
"ref":"cvpysdk.security.user.User.user_company_name",
"url":166,
"doc":"returns user associated company name"
},
{
"ref":"cvpysdk.security.user.User.update_user_password",
"url":166,
"doc":"updates new passwords of user Args: new_password (str)  new password for user logged_in_user_password (str)  password of logged-in user(User who is changing the password) for validation.",
"func":1
},
{
"ref":"cvpysdk.security.user.User.add_usergroups",
"url":166,
"doc":"UPDATE the specified usergroups to this commcell user Args: usergroups_list (list)  list of usergroups to be added",
"func":1
},
{
"ref":"cvpysdk.security.user.User.remove_usergroups",
"url":166,
"doc":"DELETE the specified usergroups to this commcell user Args: usergroups_list (list)  list of usergroups to be deleted",
"func":1
},
{
"ref":"cvpysdk.security.user.User.overwrite_usergroups",
"url":166,
"doc":"OVERWRITE the specified usergroups to this commcell user Args: usergroups_list (list)  list of usergroups to be overwritten",
"func":1
},
{
"ref":"cvpysdk.security.user.User.refresh",
"url":166,
"doc":"Refresh the properties of the User.",
"func":1
},
{
"ref":"cvpysdk.security.user.User.update_security_associations",
"url":166,
"doc":"handles three way associations (role-user-entities) Args: entity_dictionary  combination of entity_type, entity names and role e.g.: security_dict={ 'assoc1': { 'entity_type':['entity_name'], 'entity_type':['entity_name', 'entity_name'], 'role': ['role1'] }, 'assoc2': { 'mediaAgentName': ['networktestcs', 'standbycs'], 'clientName': ['Linux1'], 'role': ['New1'] } } entity_type  key for the entity present in dictionary on which user will have access entity_name  Value of the key role  key for role name you specify e.g.: {\"clientName\":\"Linux1\"} Entity Types are: clientName, mediaAgentName, libraryName, userName, userGroupName, storagePolicyName, clientGroupName, schedulePolicyName, locationName, providerDomainName, alertName, workflowName, policyName, roleName entity_name: client name for entity_type 'clientName' Media agent name for entitytype 'mediaAgentName' similar for other entity_types request_type  decides whether to ADD, DELETE or OVERWRITE user security association. Raises: SDKException: if response is not success",
"func":1
},
{
"ref":"cvpysdk.security.user.User.request_otp",
"url":166,
"doc":"fetches OTP for user Returns: OTP generated for user Raises: Exception: if response is not successful",
"func":1
},
{
"ref":"cvpysdk.security.user.User.is_tfa_enabled",
"url":166,
"doc":"Returns the status of two factor authentication for this user bool  tfa status"
},
{
"ref":"cvpysdk.security.user.User.get_account_lock_info",
"url":166,
"doc":"Returns user account lock status dict  account lock info example: { \"isAccountLocked\" : True, \"lockStartTime\" : 1646640752, \"lockEndTime\" : 1646727152 }"
},
{
"ref":"cvpysdk.security.user.User.unlock",
"url":166,
"doc":"Unlocks user account. Returns: status (str)  unlock operation status Example:- \"Unlock successful for user account\" \"Logged in user cannot unlock their own account\" \"Unlock failed for user account\" \"User account is not locked\" \"Logged in user does not have rights to unlock this user account\" statusCode Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.security.usergroup",
"url":167,
"doc":"Main file for performing user group operations. UserGroups and UserGroup are the classes defined in this file. UserGroups: Class for representing all the user groups associated with a commcell UserGroup: Class for representing a single User Group of the commcell UserGroups: __init__(commcell_object)  Initialise instance of the UserGroups associated with the specified commcell __str__()  Returns all the user groups associated with the commcell __repr__()  Returns the string for the instance of the UserGroups class _get_usergroups()  Gets all the usergroups associated with the commcell specified has_user_group()  Checks if a user group exists with the given name or not get(user_group_name)  Returns the instance of the UserGroup class, for the the input user group name add()  Adds local/external user group on this commserver delete(user_group_name)  Deletes the user group from the commcell refresh()  Refresh the user groups associated with the commcell all_user_groups()  Returns all the usergroups present in the commcell UserGroup: __init__(commcell_object, usergroup_name, usergroup_id=None)  initialise instance of the UserGroup for the commcell __repr__()  return the usergroup name, the instance is associated with _get_usergroup_id()  method to get the usergroup id, if not specified in __init__ _get_usergroup_properties()  get the properties of this usergroup _has_usergroup()  checks list of users present on the commcell refresh()  refresh the properties of the user group status()  sets status for users (enable or disable) update_security_associations()  updates 3-way security associations on usergroup update_usergroup_members()  DELETE, OVERWRITE users with this usergroup _send_request()  forms complete joson request for usergroup _update_usergroup_props()  Updates the properties of this usergroup _v4_update_usergroup_props()  Uses V4 API to update properties of a usergroup users()  returns users who are members of this usergroup usergroups()  returns external usergroups who are members of this usergroup user_group_id()  returns group id of this user group user_group_name()  returns user group name of this group description()  returns the description set for this user group email()  returns the email of this user group company_name()  returns the company name of this user group company_id()  returns the company id of this user group associations()  Returns security associations present on the usergroup is_tfa_enabled()  Returns status of tfa enable_tfa()  Enables tfa for this user group disable_tfa()  Disables tfa for this user group update_navigation_preferences  Updates user group navigation preferences allow_multiple_company_members  Sets/Gets the value for allowing multiple members for a company"
},
{
"ref":"cvpysdk.security.usergroup.UserGroups",
"url":167,
"doc":"Class for getting all the usergroups associated with a commcell. Initialize object of the UserGroups class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the UserGroups class"
},
{
"ref":"cvpysdk.security.usergroup.UserGroups.has_user_group",
"url":167,
"doc":"Checks if a user group exists in the commcell with the input user group name. Args: user_group_name (str)  name of the user group Returns: bool - boolean output whether the user group exists in the commcell or not Raises: SDKException: if type of the user group name argument is not string",
"func":1
},
{
"ref":"cvpysdk.security.usergroup.UserGroups.get",
"url":167,
"doc":"Returns a user group object of the specified user group name. Args: user_group_name (str)  name of the user group Returns: object - instance of the UserGroup class for the given user group name Raises: SDKException: if type of the user group name argument is not string if no user group exists with the given name",
"func":1
},
{
"ref":"cvpysdk.security.usergroup.UserGroups.add",
"url":167,
"doc":"Adds local/external user group on this commcell based domain parameter provided Args: usergroup_name (str)  name of the user group domain (str)  name of the domain to which user group belongs to users_list (list)  list which contains users who will be members of this group entity_dictionary(dict)  combination of entity_type, entity names and role e.g.: security_dict={ 'assoc1': { 'entity_type':['entity_name'], 'entity_type':['entity_name', 'entity_name'], '_type_':['entity_type1', 'entity_type2'] 'role': ['role1'] }, 'assoc2': { 'mediaAgentName': ['networktestcs', 'standbycs'], 'clientName': ['Linux1'], 'role': ['New1'] } }, 'assoc3': { '_type_': ['CLIENT_ENTITY', 'STORAGE_POLICIES_ENTITY'], 'role': ['Alert Owner'] } }, entity_type  key for the entity present in dictionary on which user will have access entity_name  Value of the key role  key for role name you specify e.g: e.g.: {\"clientName\":\"Linux1\"} Entity Types are: clientName, mediaAgentName, libraryName, userName, userGroupName, storagePolicyName, clientGroupName, schedulePolicyName, locationName, providerDomainName, alertName, workflowName, policyName, roleName entity_name = \"Linux1\", \"ClientMachine1\" external_usergroup(list)  list of domain user group which could be added as members to this group local_usergroup (list)  list of commcell usergroup which could be added as members to this group Returns: (object) - UserGroup class instance for the specified user group name Raises: SDKException: if usergroup with specified name already exists if failed to add usergroup to commcell",
"func":1
},
{
"ref":"cvpysdk.security.usergroup.UserGroups.delete",
"url":167,
"doc":"Deletes the specified user from the existing commcell users Args: user_group (str)  name of the usergroup which has to be deleted new_user (str)  name of the target user, whom the ownership of entities should be transferred new_usergroup (str)  name of the user group, whom the ownership of entities should be transferred Note: either user or usergroup should be provided for ownership transfer not both. Raises: SDKException: if usergroup doesn't exist if new user and new usergroup any of these is passed and these doesn't exist on commcell if both user and usergroup is passed for ownership transfer if both user and usergroup is not passed for ownership transfer if response is not success",
"func":1
},
{
"ref":"cvpysdk.security.usergroup.UserGroups.refresh",
"url":167,
"doc":"Refresh the user groups associated with the Commcell. Args: hard (bool)  flag to hard refresh mongo cache for this entity",
"func":1
},
{
"ref":"cvpysdk.security.usergroup.UserGroups.all_user_groups",
"url":167,
"doc":"Returns dict of all the user groups associated with this commcell dict - consists of all user group in the commcell { \"user_group1_name\": user_group1_id, \"user_group2_name\": user_group2_id }"
},
{
"ref":"cvpysdk.security.usergroup.UserGroup",
"url":167,
"doc":"Class for performing operations for a specific User Group. Initialise the UserGroup class instance. Args: commcell_object (object)  instance of the Commcell class user_group_name (str)  name of the user group user_group_id (str)  id of the user group default: None Returns: object - instance of the UserGroup class"
},
{
"ref":"cvpysdk.security.usergroup.UserGroup.name",
"url":167,
"doc":"Returns the UserGroup display name"
},
{
"ref":"cvpysdk.security.usergroup.UserGroup.user_group_id",
"url":167,
"doc":"Treats the usergroup id as a read-only attribute."
},
{
"ref":"cvpysdk.security.usergroup.UserGroup.user_group_name",
"url":167,
"doc":"Treats the usergroup name as a read-only attribute."
},
{
"ref":"cvpysdk.security.usergroup.UserGroup.description",
"url":167,
"doc":"Treats the usergroup description as a read-only attribute."
},
{
"ref":"cvpysdk.security.usergroup.UserGroup.email",
"url":167,
"doc":"Treats the usergroup email as a read-only attribute."
},
{
"ref":"cvpysdk.security.usergroup.UserGroup.company_id",
"url":167,
"doc":"Treats the usergroup company id as a read-only attribute."
},
{
"ref":"cvpysdk.security.usergroup.UserGroup.company_name",
"url":167,
"doc":"Returns: str - company name to which user group belongs to. str - empty string, if usergroup belongs to Commcell"
},
{
"ref":"cvpysdk.security.usergroup.UserGroup.refresh",
"url":167,
"doc":"Refresh the properties of the UserGroup.",
"func":1
},
{
"ref":"cvpysdk.security.usergroup.UserGroup.status",
"url":167,
"doc":"Returns the status of user group on this commcell"
},
{
"ref":"cvpysdk.security.usergroup.UserGroup.allow_multiple_company_members",
"url":167,
"doc":"Returns the status of user group on this commcell Returns: Bool - True for allowing multiple company members False otherwise"
},
{
"ref":"cvpysdk.security.usergroup.UserGroup.users",
"url":167,
"doc":"Returns the list of associated users with this usergroup"
},
{
"ref":"cvpysdk.security.usergroup.UserGroup.usergroups",
"url":167,
"doc":"Returns the list of associated external usergroups with this usergroup"
},
{
"ref":"cvpysdk.security.usergroup.UserGroup.associations",
"url":167,
"doc":"Returns security associations present on th usergroup"
},
{
"ref":"cvpysdk.security.usergroup.UserGroup.is_tfa_enabled",
"url":167,
"doc":"Returns two factor authentication status (True/False)"
},
{
"ref":"cvpysdk.security.usergroup.UserGroup.enable_tfa",
"url":167,
"doc":"enables two factor authentication on this group Note: tfa will not get enabled for this user group if global tfa is disabled Returns: None",
"func":1
},
{
"ref":"cvpysdk.security.usergroup.UserGroup.disable_tfa",
"url":167,
"doc":"disables two factor authentication for this group Returns: None",
"func":1
},
{
"ref":"cvpysdk.security.usergroup.UserGroup.update_security_associations",
"url":167,
"doc":"handles three way associations (role-usergroup-entities) Args: entity_dictionary (dict)  combination of entity_type, entity names and role e.g.: security_dict={ 'assoc1': { 'entity_type':['entity_name'], 'entity_type':['entity_name', 'entity_name'], 'role': ['role1'] }, 'assoc2': { 'mediaAgentName': ['networktestcs', 'standbycs'], 'clientName': ['Linux1'], 'role': ['New1'] } } entity_type  key for the entity present in dictionary on which user will have access entity_name  Value of the key role  key for role name you specify e.g.: {\"clientName\":\"Linux1\"} Entity Types are: clientName, mediaAgentName, libraryName, userName, userGroupName, storagePolicyName, clientGroupName, schedulePolicyName, locationName, providerDomainName, alertName, workflowName, policyName, roleName entity_name: client name for entity_type 'clientName' Media agent name for entitytype 'mediaAgentName' similar for other entity_types request_type  decides whether to UPDATE, DELETE or OVERWRITE user security association. Raises: SDKException: if failed update user properties",
"func":1
},
{
"ref":"cvpysdk.security.usergroup.UserGroup.update_usergroup_members",
"url":167,
"doc":"updates users and usergroups to local usergroup members tab Args: request_type (str)  decides whether to UPDATE, DELETE or OVERWRITE user security association users_list (list)  comlete list of local users and externalusers e.g : users_list = [r'Red\\RedUser2', r'Red\\RedUser12', r'mirje-pc\\A', r'mirje-pc\\B', r'John', r'Prasad', r'Mahesh'] where: RedUser2, RedUser12 are belongs to AD 'Red' A, B are belongs to AD 'mirje-pc' John, Prasad, Mahesh are local users external_usergroups (list)  complete list of external usergroup only e.g : external_usergroups_list = ['Red\\RedGroup2', 'mirje-pc\\XYZ'] where: RedGroup2 is external user group present in AD 'Red' XYZ is external user group present in AD 'mirje-pc' local_usergroups (list)  complete list of local user groups (Not required when updating external usergroup properties) e.g : local_usergroups=['usergroup1', 'usegrouop2'] Raises: SDKException: if failed update local usergroup properties",
"func":1
},
{
"ref":"cvpysdk.security.usergroup.UserGroup.update_navigation_preferences",
"url":167,
"doc":"Updates the user group's include navigation preferences with the the list provided Args: include_navigation_list (list)  list of navigation items to be seen in command center Raises: SDKException: if failed update user properties",
"func":1
},
{
"ref":"cvpysdk.services",
"url":168,
"doc":"Service URLs for REST API operations. SERVICES_DICT: A python dictionary for holding all the API services endpoints. | get_services(web_service): updates the SERVICES_DICT with the WebConsole API URL To add a new REST API End-point to the SDK, user needs to add a key to the SERVICES_DICT_TEMPLATE dictionary, for their usage, and the value will be in the format: \"{0} ENDPOINT \" {0} will be replaced by the webconsole URL"
},
{
"ref":"cvpysdk.services.get_services",
"url":168,
"doc":"Initializes the SERVICES DICT with the web service for APIs. Args: web_service (str)  web service string for APIs Returns: dict - services dict consisting of all APIs",
"func":1
},
{
"ref":"cvpysdk.storage",
"url":169,
"doc":"Main file for performing storage related operations on the commcell. This file has all the classes related to Storage operations. MediaAgents: Class for representing all the media agents attached to the commcell. MediaAgent: Class for representing a single media agent attached to the commcell. DiskLibraries: Class for representing all the disk libraries attached to the commcell. DiskLibrary: Class for representing a single disk library associated with the commcell. MediaAgents: __init__(commcell_object)  initialize the MediaAgents class instance for the commcell __str__()  returns all the media agents associated with the commcell __repr__()  returns the string for the instance of the MediaAgents class _get_media_agents()  gets all the media agents of the commcell all_media_agents()  returns all the media agents on the commcell has_media_agent()  checks if a media agent exists with the given name or not get(media_agent_name)  returns the instance of MediaAgent class of the media agent specified delete(media_agent)  Deletes the media agent from the commcell. refresh()  refresh the media agents associated with the commcell MediaAgent: __init__(commcell_object, media_agent_name, media_agent_id)  initialize the instance of MediaAgent class for a specific media agent of the commcell __repr__()  returns a string representation of the MediaAgent instance _get_media_agent_id()  gets the id of the MediaAgent instance from commcell _get_media_agent_properties()  returns media agent properties _initialize_media_agent_properties()  initializes media agent properties enable_power_management()  Enable VM Management (power management) _perform_power_operation()  Performs power operation (power-on/power-off) power_on()  Power-on MediaAgent if VM management is enabled power_off()  Power-off MediaAgent if VM management is enabled wait_for_power_status()  Waits till the expected power status is not achieved media_agent_name()  returns media agent name media_agent_id()  returns media agent id is_online()  returns True is media agent is online platform()  returns os info of the media agent refresh()  refresh the properties of the media agent change_index_cache()  runs catalog migration index_cache_path()  returns index cache path of the media agent index_cache_enabled()  returns index cache enabled status set_state()  enables/disables media agent mark_for_maintenance()  marks/unmarks media agent offline for maintenance set_ransomware_protection()  set / unset ransomware protection on Windows MA set_concurrent_lan()  set / unset concurrent LAN backup in Media agent properties. is_power_management_enabled()  returns of power management is enabled or not Libraries: __init__()  initialize the instance of Libraries class _get_libraries  Gets all the libraries associated to the commcell specified by commcell object has_library  Checks if a library exists in the commcell with the input library name refresh  Refresh the libraries associated with the Commcell DiskLibraries: __init__(commcell_object)  initialize the DiskLibraries class instance for the commcell __str__()  returns all the disk libraries associated with the commcell __repr__()  returns the string for the instance of the DiskLibraries class all_disk_libraries()  returns the dict of all the disk libraries on commcell add()  adds a new disk library to the commcell delete()  Deletes a disk library from commcell get(library_name)  returns the instance of the DiskLibrary class for the library specified DiskLibrary: __init__(commcell_object, library_name, library_id)  initialize the instance of DiskLibrary class for a specific disk library of the commcell __repr__()  returns a string representation of the DiskLibrary instance _get_library_id()  gets the id of the DiskLibrary instance from commcell move_mountpath()  To perform move mountpath operation validate_mountpath()  To perform storage validation on mountpath add_cloud_mount_path()  Adds a mount path to the cloud library add_storage_accelerator_credential()  Add storage accelerator credential to the cloud mount path add_mount_path()  adds the mount path on the local/ remote machine set_mountpath_reserve_space()  to set reserve space on the mountpath set_max_data_to_write_on_mount_path()  to set max data to write on the mountpath change_device_access_type()  to change device access type modify_cloud_access_type()  To change device access type for cloud mount path update_device_controller()  To update device controller properties. verify_media()  To perform verify media operation on media set_mountpath_preferred_on_mediaagent()  Sets select preferred mountPath according to mediaagent setting on the library _get_library_properties()  gets the disk library properties _get_advanced_library_properties()  gets the advanced disk library properties refresh()  Refresh the properties of this disk library. DiskLibrary instance Attributes  media_agents_associated  returns the media agents associated with the disk library  library_properties  Returns the dictionary consisting of the full properties of the library  advanced_library_properties  Returns the dictionary consisting of advanced library properites  free_space  returns the free space on the library  mountpath_usage  returns mountpath usage on library TapeLibraries: __init__()  initialize the TapeLibrary class instance for the commcell get()  Returns the TapeLibrary object of the specified library delete()  Deletes the specified library lock_mm_configuration()  Locks the MM config for tape library detection unlock_mm_configuration()  Unlocks the MM config for tape library detection __lock_unlock_mm_configuration()  Locks or unlocks the MM config for tape library detection detect_tape_library()  Detect the tape library of the specified MediaAgent(s) configure_tape_library()  Configure the specified tape library TapeLibrary: __init__()  Initialize the TapeLibrary class instance __repr__  returns the string for the instance of the TapeLibrary class _get_library_id()  Returns the library ID _get_library_properties()  gets the disk library properties get_drive_list()  Returns the tape drive list of this tape library refresh()  Refresh the properties of this tape library."
},
{
"ref":"cvpysdk.storage.MediaAgents",
"url":169,
"doc":"Class for getting all the media agents associated with the commcell. Initialize object of the MediaAgents class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the MediaAgents class"
},
{
"ref":"cvpysdk.storage.MediaAgents.all_media_agents",
"url":169,
"doc":"Returns dict of all the media agents on this commcell dict - consists of all media agents of the commcell { \"media_agent1_name\": { 'id': media_agent1_id, 'os_info': media_agent1_os, 'is_online': media_agent1_status }, \"media_agent2_name\": { 'id': media_agent2_id, 'os_info': media_agent2_os, 'is_online': media_agent2_status } }"
},
{
"ref":"cvpysdk.storage.MediaAgents.has_media_agent",
"url":169,
"doc":"Checks if a media agent exists in the commcell with the input media agent name. Args: media_agent_name (str)  name of the media agent Returns: bool - boolean output whether the media agent exists in the commcell or not Raises: SDKException: if type of the media agent name argument is not string",
"func":1
},
{
"ref":"cvpysdk.storage.MediaAgents.get",
"url":169,
"doc":"Returns a MediaAgent object of the specified media agent name. Args: media_agent_name (str)  name of the media agent Returns: object - instance of the MediaAgent class for the given media agent name Raises: SDKException: if type of the media agent name argument is not string if no media agent exists with the given name",
"func":1
},
{
"ref":"cvpysdk.storage.MediaAgents.delete",
"url":169,
"doc":"Deletes the media agent from the commcell. Args: media_agent (str)  name of the Mediaagent to remove from the commcell force (bool)  True if you want to delete media agent forcefully. Raises: SDKException: if type of the media agent name argument is not string if failed to delete Media agent if response is empty if response is not success if no media agent exists with the given name",
"func":1
},
{
"ref":"cvpysdk.storage.MediaAgents.refresh",
"url":169,
"doc":"Refresh the media agents associated with the Commcell.",
"func":1
},
{
"ref":"cvpysdk.storage.MediaAgent",
"url":169,
"doc":"Class for a specific media agent. Initialise the MediaAgent object. Args: commcell_object (object)  instance of the Commcell class media_agent_name (str)  name of the media agent media_agent_id (str)  id of the media agent default: None Returns: object - instance of the MediaAgent class"
},
{
"ref":"cvpysdk.storage.MediaAgent.enable_power_management",
"url":169,
"doc":"Enables power management using the provided cloud controller (pseudo client) Args : pseudo_client_name : VSA pseudo client to be used as cloud controller Raises: SDKException: If response is not success If Power management is not supported",
"func":1
},
{
"ref":"cvpysdk.storage.MediaAgent.power_on",
"url":169,
"doc":"Power-on the MediaAgent Args : self : Object wait_till_online : True : Waits until the MediaAgent is online False : Just submits the power-on request",
"func":1
},
{
"ref":"cvpysdk.storage.MediaAgent.power_off",
"url":169,
"doc":"Power-off MediaAgent Args : self : Object wait_till_stopped : True : Waits until the MediaAgent is stopped False : Just submits the power-off request",
"func":1
},
{
"ref":"cvpysdk.storage.MediaAgent.wait_for_power_status",
"url":169,
"doc":"Waits until the expected power status not achieved Args : self : Object expected_power_status : The expected power status as following. Starting Started Online Stopping Stopped time_out_sec : Maximum time to wait for the expected power status Raises: SDKException: If time_out_sec is not an integer and time_out_sec not None If expected power status is not achieved within time_out_sec time",
"func":1
},
{
"ref":"cvpysdk.storage.MediaAgent.change_index_cache",
"url":169,
"doc":"Begins a catalog migration job via the CreateTask end point. Args : old_index_cache_path - source index cache path new_index_cache_path - destination index cache path Returns : Returns job object of catalog migration job Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.storage.MediaAgent.set_state",
"url":169,
"doc":"disable the media agent by change in media agent properties. Args: enable - (bool) True - Enable the media agent False - Disable the media agent Raises: \"exception\" - if there is an empty response - if there is an error in request execution - if response status is failure",
"func":1
},
{
"ref":"cvpysdk.storage.MediaAgent.mark_for_maintenance",
"url":169,
"doc":"mark the media agent offline for maintenance Args: mark - (bool) True - mark the media agent for maintenance False - UNMARK the media agent for maintenance Raises: \"exception\" - if there is an empty response - if there is an error in request execution - if response status is failure",
"func":1
},
{
"ref":"cvpysdk.storage.MediaAgent.set_ransomware_protection",
"url":169,
"doc":"Enables / Disables the ransomware protection on Windows MediaAgent. Args: status (bool)  True or False value to turn it on/off True - ransomware protection on MediaAgent - ON False - ransomware protection on MediaAgent - OFF Returns: None  if operation performed successfully. Raises: Exception(Exception_Code, Exception_Message): - if there is failure in executing the operation",
"func":1
},
{
"ref":"cvpysdk.storage.MediaAgent.set_concurrent_lan",
"url":169,
"doc":"disable / enable concurrent LAN backup in Media agent properties. Args: enable - (bool) True - Enable concurent LAN Backup False - Disable concurent LAN Backup Returns: None  if operation performed successfully. Raises: SDKException: - if there is failure in executing the operation",
"func":1
},
{
"ref":"cvpysdk.storage.MediaAgent.name",
"url":169,
"doc":"Returns the media agent display name"
},
{
"ref":"cvpysdk.storage.MediaAgent.media_agent_name",
"url":169,
"doc":"Treats the media agent name as a read-only attribute."
},
{
"ref":"cvpysdk.storage.MediaAgent.media_agent_id",
"url":169,
"doc":"Treats the media agent id as a read-only attribute."
},
{
"ref":"cvpysdk.storage.MediaAgent.is_online",
"url":169,
"doc":"Treats the status as read-only attribute"
},
{
"ref":"cvpysdk.storage.MediaAgent.platform",
"url":169,
"doc":"Treats the platform as read-only attribute"
},
{
"ref":"cvpysdk.storage.MediaAgent.index_cache_path",
"url":169,
"doc":"Treats the index cache path as a read-only attribute"
},
{
"ref":"cvpysdk.storage.MediaAgent.index_cache_enabled",
"url":169,
"doc":"Treats the cache enabled value as a read-only attribute"
},
{
"ref":"cvpysdk.storage.MediaAgent.is_power_management_enabled",
"url":169,
"doc":"Returns power management enable status"
},
{
"ref":"cvpysdk.storage.MediaAgent.current_power_status",
"url":169,
"doc":"Returns the power state of the MA. Args : self : Object Returns : str - Current power status of the MediaAgent as following Starting : Power-on process in going on Started : MA is powered-on successfully but still not synced with CS Online : Powered-on and synced with CS. MA is ready to use. Stopping : Power-off operation is going on. Stopped : MA is powered-off Unknown : MA power status is still not synced with cloud provider. MA discovery is going on or power state sync with happening with cloud provider or something is NOT right."
},
{
"ref":"cvpysdk.storage.MediaAgent.refresh",
"url":169,
"doc":"Refresh the properties of the MediaAgent.",
"func":1
},
{
"ref":"cvpysdk.storage.Libraries",
"url":169,
"doc":"Class for libraries Initialize object of the DiskLibraries class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the DiskLibraries class"
},
{
"ref":"cvpysdk.storage.Libraries.has_library",
"url":169,
"doc":"Checks if a library exists in the commcell with the input library name. Args: library_name (str)  name of the library Returns: bool - boolean output whether the library exists in the commcell or not Raises: SDKException: if type of the library name argument is not string",
"func":1
},
{
"ref":"cvpysdk.storage.Libraries.refresh",
"url":169,
"doc":"Refresh the disk libraries associated with the Commcell.",
"func":1
},
{
"ref":"cvpysdk.storage.DiskLibraries",
"url":169,
"doc":"Class for getting all the disk libraries associated with the commcell. Initialize object of the DiskLibraries class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the DiskLibraries class"
},
{
"ref":"cvpysdk.storage.DiskLibraries.all_disk_libraries",
"url":169,
"doc":"Returns dict of all the disk libraries on this commcell dict - consists of all disk libraries of the commcell { \"disk_library1_name\": disk_library1_id, \"disk_library2_name\": disk_library2_id }"
},
{
"ref":"cvpysdk.storage.DiskLibraries.add",
"url":169,
"doc":"Adds a new Disk Library to the Commcell. Args: library_name (str)  name of the new library to add media_agent (str/object)  name or instance of media agent to add the library to mount_path (str)  full path of the folder to mount the library at username (str)  username to access the mount path default:  password (str)  password to access the mount path default:  servertype (int)  provide cloud library server type default 0, value 59 for HPstore saved_credential_name (str)  name of the saved credential default:  kwargs (dict)  optional arguments Available kwargs Options: proxy_password (str)  plain text password of proxy server default:  Returns: object - instance of the DiskLibrary class, if created successfully Raises: SDKException: if type of the library name argument is not string if type of the mount path argument is not string if type of the username argument is not string if type of the password argument is not string if type of the media agent argument is not either string or MediaAgent instance if failed to create disk library if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.storage.DiskLibraries.delete",
"url":169,
"doc":"deletes the specified library. Args: library_name (str)  name of the disk library to delete Raises: SDKException: if type of the library name argument is not string if no library exists with the given name if response is incorrect",
"func":1
},
{
"ref":"cvpysdk.storage.DiskLibraries.get",
"url":169,
"doc":"Returns a DiskLibrary object of the specified disk library name. Args: library_name (str)  name of the disk library library_details (dict)  dict containing mountpath and mediaagent details Returns: object - instance of the DiskLibrary class for the given library name Raises: SDKException: if type of the library name argument is not string if no disk library exists with the given name",
"func":1
},
{
"ref":"cvpysdk.storage.DiskLibraries.has_library",
"url":169,
"doc":"Checks if a library exists in the commcell with the input library name. Args: library_name (str)  name of the library Returns: bool - boolean output whether the library exists in the commcell or not Raises: SDKException: if type of the library name argument is not string",
"func":1
},
{
"ref":"cvpysdk.storage.DiskLibraries.refresh",
"url":169,
"doc":"Refresh the disk libraries associated with the Commcell.",
"func":1
},
{
"ref":"cvpysdk.storage.DiskLibrary",
"url":169,
"doc":"Class for a specific disk library. Initialise the DiskLibrary object. Args: commcell_object (object)  instance of the Commcell class library_name (str)  name of the disk library library_id (str)  id of the disk library default: None library_details (dict)  dict containing mountpath and mediaagent details default: None Returns: object - instance of the DiskLibrary class"
},
{
"ref":"cvpysdk.storage.DiskLibrary.move_mountpath",
"url":169,
"doc":"To perform move mountpath operation Args: mountpath_id (int)  Mountpath Id that need to be moved. source_device_path (str)  Present Mountpath location source_mediaagent_id (int)  MediaAgent Id on which present mountpath exists target_device_path (str)  New Mountpath location target_mediaagent_id (int)  MediaAgent Id on which new mountpath exists target_device_id (int)  Device Id of target path if already exists Returns: instance of the Job class for this move mountpath job Raises Exception: - if argument datatype is invalid - if API response error code is not 0 - if response is empty - if response code is not as expected",
"func":1
},
{
"ref":"cvpysdk.storage.DiskLibrary.validate_mountpath",
"url":169,
"doc":"To perform storage validation on mountpath Args: mountpath_drive_id (int)  Drive Id of mountpath that need to be validate. media_agent (str)  MediaAgent on which Mountpath exists Returns: instance of the Job class for this storage validation job Raises Exception: - if argument datatype is invalid - if API response error code is not 0 - if response is empty - if response code is not as expected",
"func":1
},
{
"ref":"cvpysdk.storage.DiskLibrary.add_cloud_mount_path",
"url":169,
"doc":"Adds a mount path to the cloud library Args: mount_path (str)  cloud container or bucket. media_agent (str)  MediaAgent on which mountpath exists username (str)  Username to access the mount path in the format    Eg: s3.us-west-1.amazonaws.com MyAccessKeyID. For more information refer http: documentation.commvault.com/commvault/v11/article?p=97863.htm. password (str)  Password to access the mount path server_type (int)  provide cloud library server type Eg: 3-Microsoft Azure Storage . For more information refer http: documentation.commvault.com/commvault/v11/article?p=97863.htm. Returns: None Raises Exception: - if mountpath or mediaagent or username or password or servertype arguments dataype is invalid - if servertype input data is incorrect - if API response error code is not 0 - if response is empty - if response code is not as expected",
"func":1
},
{
"ref":"cvpysdk.storage.DiskLibrary.add_storage_accelerator_credential",
"url":169,
"doc":"Add storage accelerator credential to the cloud mount path Args: mount_path (str)  Mount path to which secondary credentials needs to be added saved_credential (str)  saved credential name default:  reset (bool)  reset storage accelerator credential default: False Raises Exception: - if mountpath datatype is invalid - if API response error code is not 0 - if response is empty - if response code is not as expected",
"func":1
},
{
"ref":"cvpysdk.storage.DiskLibrary.refresh",
"url":169,
"doc":"Refresh the properties of this disk library.",
"func":1
},
{
"ref":"cvpysdk.storage.DiskLibrary.add_mount_path",
"url":169,
"doc":"Adds a mount path [local/remote] to the disk library Args: mount_path (str)  Mount path which needs to be added to disklibrary. This could be a local or remote mount path on mediaagent media_agent (str)  MediaAgent on which mountpath exists username (str)  Username to access the mount path password (str)  Password to access the mount path Returns: None Raises Exception: - if mountpath and mediaagent datatype is invalid - if API response error code is not 0 - if response is empty - if response code is not as expected",
"func":1
},
{
"ref":"cvpysdk.storage.DiskLibrary.set_mountpath_reserve_space",
"url":169,
"doc":"To set reserve space on the mountpath Args: mount_path (str)  Mountpath size (int)  reserve space to be set in MB",
"func":1
},
{
"ref":"cvpysdk.storage.DiskLibrary.set_max_data_to_write_on_mount_path",
"url":169,
"doc":"To set max data to write on the mountpath Args: mount_path (str)  Folder path for this mount path. size (int)  max data to be consumed in MB",
"func":1
},
{
"ref":"cvpysdk.storage.DiskLibrary.change_device_access_type",
"url":169,
"doc":"To change device access type Args: mountpath_id (int)  Mount Path Id device_id (int)  Device Id device_controller_id (int)  Device Controller Id media_agent_id (int)  Media Agent Id device_access_type (int)  Device access type Regular: Access type Value Read 4 Read and Write 6 Preferred 8 IP: Access type Value Read 20 Read/ Write 22 Fibre Channel (FC) Access type Value Read 36 Read and Write 38 iSCSi Access type Value Read 132 Read and Write 134",
"func":1
},
{
"ref":"cvpysdk.storage.DiskLibrary.modify_cloud_access_type",
"url":169,
"doc":"To change device access type for cloud mount path Args: mountpath_id (int)  Mount Path Id device_controller_id (int)  Device Controller Id device_access_type (int)  Device access type Possible values: Access type Value Read 4 Read and Write 6  by default preferred access (preferred = 8) will be set",
"func":1
},
{
"ref":"cvpysdk.storage.DiskLibrary.update_device_controller",
"url":169,
"doc":"To update device controller properties. Args: mountpath_id (int)  Mount Path Id device_id (int)  Device Id device_controller_id (int)  Device Controller Id media_agent_id (int)  Media Agent Id device_access_type (int)  Device access type Regular: Access type Value Read 4 Read and Write 6 Preferred 8 IP: Access type Value Read 20 Read/ Write 22 Fibre Channel (FC) Access type Value Read 36 Read and Write 38 iSCSi Access type Value Read 132 Read and Write 134  kwargs (dict)  Optional arguments Available kwargs Options: username (str)  username for the device  in case of cloud library username needs to be in the following format    __CVCRED__ password (str)  password for the device  if credential name is used then use a dummy password credential_name (str)  credential name as in the credential manager path  accessing path for media agent local / UNC",
"func":1
},
{
"ref":"cvpysdk.storage.DiskLibrary.verify_media",
"url":169,
"doc":"To perform verify media operation on media Args: media_name  Barcode of the media location_id  Slot Id of the media on the library",
"func":1
},
{
"ref":"cvpysdk.storage.DiskLibrary.free_space",
"url":169,
"doc":"Returns free space"
},
{
"ref":"cvpysdk.storage.DiskLibrary.mountpath_usage",
"url":169,
"doc":"Returns mount path usage"
},
{
"ref":"cvpysdk.storage.DiskLibrary.set_mountpath_preferred_on_mediaagent",
"url":169,
"doc":"Sets select preferred mountPath according to mediaagent setting on the library. Args: value (bool)  preferMountPathAccordingToMA value to be set on library (True/False) Raises: SDKException: if failed to update if the type of value input is not correct",
"func":1
},
{
"ref":"cvpysdk.storage.DiskLibrary.media_agents_associated",
"url":169,
"doc":"Returns the media agents associated with the disk library"
},
{
"ref":"cvpysdk.storage.DiskLibrary.name",
"url":169,
"doc":"Returns library display name."
},
{
"ref":"cvpysdk.storage.DiskLibrary.library_name",
"url":169,
"doc":"Treats the library name as a read-only attribute."
},
{
"ref":"cvpysdk.storage.DiskLibrary.library_id",
"url":169,
"doc":"Treats the library id as a read-only attribute."
},
{
"ref":"cvpysdk.storage.DiskLibrary.library_properties",
"url":169,
"doc":"Returns the dictionary consisting of the full properties of the library"
},
{
"ref":"cvpysdk.storage.DiskLibrary.advanced_library_properties",
"url":169,
"doc":"Returns the dictionary consisting of the advanced properties of the library"
},
{
"ref":"cvpysdk.storage.DiskLibrary.mount_path",
"url":169,
"doc":"Treats the library id as a read-only attribute."
},
{
"ref":"cvpysdk.storage.DiskLibrary.media_agent",
"url":169,
"doc":"Treats the library id as a read-only attribute."
},
{
"ref":"cvpysdk.storage.DiskLibrary.share_mount_path",
"url":169,
"doc":"Method to share a mountpath Args: new_media_agent (str)  Media agent which is accessing the shared mount path new_mount_path (int)  Mount path to be shared kwargs (dict)  Optional arguments Available kwargs Options: media_agent (str)  Media agent associated with library library_name (str)  Name of the library which has the mount path mount_path (str)  Mount path to be shared access_type (int)  The access type of the shared mount path Read Device Access = 4 Read/ Write Device Access = 6 Read Device Access with Preferred = 12 Read/Write Device Access with Preferred = 14 Data Server - IP Read = 20 Data Server - IP Read/ Write = 22 Data Server - FC Read = 36 Data Server - FC Read/ Write = 38 Data Server - iSCSI Read = 132 Data Server - iSCSI Read/ Write = 134 Note: For the Data Server device access type, enter the local path provided in the library/mountPath parameter in the libNewProp/mountPath parameter also. username (str)  Username to access the mount path, if UNC password (str)  Password to access the mount path, if UNC credential_name (str)  credential name for the credential manager  For cloud if you use credential_name update the username parameter  in the format of \"  __CVCRED__\"  For example, \"s3.amazonaws.com __CVCRED__\"  Update a dummy value for password parameter Returns: None Raises Exception: - if any of the parameter's dataype is invalid - if API response error code is not 0 - if response is empty - if response code is not as expected",
"func":1
},
{
"ref":"cvpysdk.storage.RPStores",
"url":169,
"doc":"Initialize object of the MediaAgents class. Args: commcell(object)  instance of the Commcell class Returns: object - instance of the MediaAgents class"
},
{
"ref":"cvpysdk.storage.RPStores.add",
"url":169,
"doc":"Args: name (str): Name of the RPStore path (str): Path of the RPStore storage (int): Storage Capacity of the RPStore in GB media_agent_name(str) : Name of the media agent Returns: An instance of RPStore",
"func":1
},
{
"ref":"cvpysdk.storage.RPStores.has_rp_store",
"url":169,
"doc":"Validates if the given RPStore is present Args: rpstore_name (str): Name of the RPStore Returns: bool : True if present else False",
"func":1
},
{
"ref":"cvpysdk.storage.RPStores.get",
"url":169,
"doc":"Fetches the given RPStore Args: rpstore_name (str): Name of the RPStore Returns: An instance of the RPStore",
"func":1
},
{
"ref":"cvpysdk.storage.RPStores.refresh",
"url":169,
"doc":"Refresh the media agents associated with the Commcell.",
"func":1
},
{
"ref":"cvpysdk.storage.RPStore",
"url":169,
"doc":""
},
{
"ref":"cvpysdk.storage.RPStore.rpstore_name",
"url":169,
"doc":""
},
{
"ref":"cvpysdk.storage.RPStore.rpstore_id",
"url":169,
"doc":""
},
{
"ref":"cvpysdk.storage.TapeLibraries",
"url":169,
"doc":"Class for libraries Initialize object of the DiskLibraries class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the DiskLibraries class"
},
{
"ref":"cvpysdk.storage.TapeLibraries.get",
"url":169,
"doc":"Returns the object of TapeLibrary class of the specified library name Args: library_name (str)  name of the library Returns: object - object of TapeLibrary class of the specified library name Raises: SDKException: if type of the library name argument is not string",
"func":1
},
{
"ref":"cvpysdk.storage.TapeLibraries.delete",
"url":169,
"doc":"Deletes the specified library Args: tape_library_name (str)  name of the library Returns: bool - returns true if the library deleted successfully Raises: SDKException: if type of the library name argument is not string if library does not exists if its failed to delete the library",
"func":1
},
{
"ref":"cvpysdk.storage.TapeLibraries.lock_mm_configuration",
"url":169,
"doc":"Locks the MM config for tape library detection Args: forceLock (bool)  True for force lock",
"func":1
},
{
"ref":"cvpysdk.storage.TapeLibraries.unlock_mm_configuration",
"url":169,
"doc":"Unlocks the MM config for tape library detection",
"func":1
},
{
"ref":"cvpysdk.storage.TapeLibraries.detect_tape_library",
"url":169,
"doc":"Detect the tape libraries(s) of the provided MediaAgent(s) Args: mediaagents (list)  The list of the mediaagent(s) Returns: JSON - JSON of the tape library detections response Raises: SDKException: if its fails to detect",
"func":1
},
{
"ref":"cvpysdk.storage.TapeLibraries.configure_tape_library",
"url":169,
"doc":"Configure the tape library Args: tape_library_name (str)  name of the library mediaagents(list)  list of MediaAgents to use for configuration Returns: object - object of the TapeLibrary class for the specified tape library Raises: SDKException: if fails to configure the tape library",
"func":1
},
{
"ref":"cvpysdk.storage.TapeLibraries.has_library",
"url":169,
"doc":"Checks if a library exists in the commcell with the input library name. Args: library_name (str)  name of the library Returns: bool - boolean output whether the library exists in the commcell or not Raises: SDKException: if type of the library name argument is not string",
"func":1
},
{
"ref":"cvpysdk.storage.TapeLibraries.refresh",
"url":169,
"doc":"Refresh the disk libraries associated with the Commcell.",
"func":1
},
{
"ref":"cvpysdk.storage.TapeLibrary",
"url":169,
"doc":"Initialize object of the TapeLibrary class. Args: commcell_object (object)  instance of the Commcell class tape_library_name (string)  name of the tape library tape_library_id (int)  tape library ID Returns: object - instance of the TapeLibrary class"
},
{
"ref":"cvpysdk.storage.TapeLibrary.get_drive_list",
"url":169,
"doc":"Returns the tape drive list of this tape library Returns: list - List of the drives of this tape library",
"func":1
},
{
"ref":"cvpysdk.storage.TapeLibrary.refresh",
"url":169,
"doc":"Refresh the properties of this tape library.",
"func":1
},
{
"ref":"cvpysdk.storage.TapeLibrary.library_name",
"url":169,
"doc":"Treats the library name as a read-only attribute."
},
{
"ref":"cvpysdk.storage.TapeLibrary.library_id",
"url":169,
"doc":"Treats the library ID as a read-only attribute."
},
{
"ref":"cvpysdk.storage_pool",
"url":170,
"doc":"File for doing operations on an Storage Pools. This module has classes defined for doing operations for Storage Pools:  . Get the Id for the given Storage Pool StoragePools       __init__(commcell_object)  initializes object of the StoragePools class associated with the commcell __str__()  returns all the storage pools associated with the commcell __repr__()  returns the string representation of an instance of this class __len__()  returns the number of storage pools added to the Commcell __getitem__()  returns the name of the storage pool for the given storage pool Id or the details for the given storage pool name _get_storage_pools()  returns all storage pools added to the commcell has_storage_pool()  checks whether the storage pool with given name exists or not get()  returns StoragePool object of the storage pool for the specified input name add()  Adds a storage pool, according to given input and returns StoragePool object add_azure_storage_pool()  Adds new storage pool with provided name to the commcell delete()  deletes the specified storage pool refresh()  refresh the list of storage pools associated with the commcell Attributes       all_storage_pools  returns dict of all the storage pools on commcell StoragePool      = __init__(commcell_object, storage_pool_name, storage_pool_id)  initialize the instance of StoragePool class for specific storage pool of commcell __repr__()  returns a string representation of the StoragePool instance _get_storage_pool_properties()  returns the properties of this storage pool refresh()  Refresh the properties of the StoragePool get_copy()  Returns the StoragePolicyCopy object of Storage Pool copy StoragePool instance attributes                  storage_policy_name  returns the name of the StoragePool as seen on GUI  storage_policy_id  returns the storage pool id enable_worm_storage_lock()  sets the hardware WORM storage lock on storage pool.  TODO: check with MM API team to get the response in JSON"
},
{
"ref":"cvpysdk.storage_pool.StoragePools",
"url":170,
"doc":"Class for doing operations on Storage Pools, like get storage poo ID. Initializes instance of the StoragePools class to perform operations on a storage pool. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the StoragePools class"
},
{
"ref":"cvpysdk.storage_pool.StoragePools.all_storage_pools",
"url":170,
"doc":"Returns dict of all the storage pools on this commcell dict - consists of all storage pools added to the commcell { \"storage_pool1_name\": storage_pool1_id, \"storage_pool2_name\": storage_pool2_id }"
},
{
"ref":"cvpysdk.storage_pool.StoragePools.has_storage_pool",
"url":170,
"doc":"Checks if a storage pool exists in the Commcell with the input storage pool name. Args: name (str)  name of the storage pool Returns: bool - boolean output whether the storage pool exists in the commcell or not",
"func":1
},
{
"ref":"cvpysdk.storage_pool.StoragePools.get",
"url":170,
"doc":"Returns the id of the storage pool for the given storage pool name. Args: name (str)  name of the storage pool to get the id of Returns: str - id of the storage pool for the given storage pool name Raises: SDKException: if no storage pool exists with the given name",
"func":1
},
{
"ref":"cvpysdk.storage_pool.StoragePools.hyperscale_create_storage_pool",
"url":170,
"doc":"Create new storage pool for hyperscale Args: storage_pool_name (string)  Name of the storage pools to create media_agents (List)  List of 3 media agents with name's(str) or instance of media agent's(object) Example: [\"ma1\",\"ma2\",\"ma3\"] Return: flag, response  response returned by the REST API call",
"func":1
},
{
"ref":"cvpysdk.storage_pool.StoragePools.add",
"url":170,
"doc":"Adds a new storage pool to commcell Args: storage_pool_name (str)  name of new storage pool to add mountpath (str)  mount path for the storage pool media_agent (str/object) name or instance of media agent ddb_ma (str/object) name or instance of dedupe media agent dedup_path (str)  path where the DDB should be stored  kwargs: username (str)  username to access the mountpath password (str)  password to access the mountpath credential_name (str)  name of the credential as in credential manager cloud_server_type (int)  cloud server type of the cloud vendor (required) Returns: StoragePool object if creation is successful Raises: Exception if creation is unsuccessful",
"func":1
},
{
"ref":"cvpysdk.storage_pool.StoragePools.add_azure_storage_pool",
"url":170,
"doc":"Adds new storage pool with provided name to the commcell Args: storage_pool_name (str)  name of the storage pool to be created container_name (str)  container name to be used with storage pool media_agents (list)  list of media agent names to be used for storage pool dedup_paths (list)  list of paths for storing deduplication data  kwargs (dict)  dict of keyword arguments as follows username (str)  azure storage credential username password (str)  azure storage credential password credential_name (str)  Credential name to be used Returns: Azure storage policy object Raises: SDKException: If invalid type arguments are passed If Storage Pool with given name already exist Response was not success. Response was empty.",
"func":1
},
{
"ref":"cvpysdk.storage_pool.StoragePools.delete",
"url":170,
"doc":"deletes the specified storage pool. Args: storage_pool_name (str)  name of the storage pool to delete Raises: SDKException: if type of the storage pool name is not string if failed to delete storage pool if no storage pool exists with the given name if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.storage_pool.StoragePools.refresh",
"url":170,
"doc":"Refresh the list of storage pools associated to the Commcell.",
"func":1
},
{
"ref":"cvpysdk.storage_pool.StoragePoolType",
"url":170,
"doc":"Class Enum to represent different storage pool types"
},
{
"ref":"cvpysdk.storage_pool.StoragePoolType.DEDUPLICATION",
"url":170,
"doc":""
},
{
"ref":"cvpysdk.storage_pool.StoragePoolType.SECONDARY_COPY",
"url":170,
"doc":""
},
{
"ref":"cvpysdk.storage_pool.StoragePoolType.NON_DEDUPLICATION",
"url":170,
"doc":""
},
{
"ref":"cvpysdk.storage_pool.StoragePoolType.SCALE_OUT",
"url":170,
"doc":""
},
{
"ref":"cvpysdk.storage_pool.StoragePool",
"url":170,
"doc":"Class for individual storage pools Intitalise the Storage Pool classs instance Args: commcell_object (object)  instance of the Commcell class storage_pool_name (string)  Name of the storage pool storage_pool_id (int)  Storage pool id Returns: object - Instance of the StoragePool class"
},
{
"ref":"cvpysdk.storage_pool.StoragePool.storage_pool_name",
"url":170,
"doc":"Treats the storage_policy_name as a read only attribute"
},
{
"ref":"cvpysdk.storage_pool.StoragePool.storage_pool_id",
"url":170,
"doc":"Treats id as a read only attribute"
},
{
"ref":"cvpysdk.storage_pool.StoragePool.storage_pool_properties",
"url":170,
"doc":"Treats the storage_pool_properties as a read only attribute"
},
{
"ref":"cvpysdk.storage_pool.StoragePool.global_policy_name",
"url":170,
"doc":"Returns the global policy corresponding to the storage pool"
},
{
"ref":"cvpysdk.storage_pool.StoragePool.copy_name",
"url":170,
"doc":"Treats copy name as a read only attribute"
},
{
"ref":"cvpysdk.storage_pool.StoragePool.copy_id",
"url":170,
"doc":"Treats copy ID as a read only attribute"
},
{
"ref":"cvpysdk.storage_pool.StoragePool.storage_pool_type",
"url":170,
"doc":"Treats storage type as a read only attribute"
},
{
"ref":"cvpysdk.storage_pool.StoragePool.get_copy",
"url":170,
"doc":"Returns the StoragePolicyCopy object of Storage Pool copy",
"func":1
},
{
"ref":"cvpysdk.storage_pool.StoragePool.hyperscale_add_nodes",
"url":170,
"doc":"Add 3 new nodes to an existing storage pool args: media_agents (List)  List of 3 media agents with name's(str) or instance of media agent's(object) Example: [\"ma1\",\"ma2\",\"ma3\"] Raises: SDKException: if add nodes to an existing storage pool fails",
"func":1
},
{
"ref":"cvpysdk.storage_pool.StoragePool.hyperscale_reconfigure_storage_pool",
"url":170,
"doc":"Reconfigures storage pool, for any failure during creation and expansion args: storage_pool_name (string)  Name of the storage pools to reconfigure Raises: SDKException: if reconfigure fails",
"func":1
},
{
"ref":"cvpysdk.storage_pool.StoragePool.hyperscale_replace_disk",
"url":170,
"doc":"Replace disk action, over a media agent which is part of storage pool args: disk_id (int)  > disk id for the disk to replace media_agent (string/object)  > media agent name/ object storage_pool_name (string)  > Name of the storage pools for replacemnet of disk Raises: SDKException: if replace fails",
"func":1
},
{
"ref":"cvpysdk.storage_pool.StoragePool.refresh",
"url":170,
"doc":"Refreshes propery of the class object",
"func":1
},
{
"ref":"cvpysdk.storage_pool.StoragePool.update_security_associations",
"url":170,
"doc":"Adds the security association on the storage pool object Args: associations_list (list)  list of users to be associated Example: associations_list = [ { 'user_name': user1, 'role_name': role1 }, { 'user_name': user2, 'role_name': role2 } ] isUser (bool)  True or False. set isUser = False, If associations_list made up of user groups request_type (str)  eg : 'OVERWRITE' or 'UPDATE' or 'DELETE', Default will be OVERWRITE operation externalGroup (bool)  True or False, set externalGroup = True. If Security associations is being done on External User Groups Raises: SDKException: if association is not of List type",
"func":1
},
{
"ref":"cvpysdk.storage_pool.StoragePool.enable_worm_storage_lock",
"url":170,
"doc":"Sets hardware worm setting on Storage Pool copy with given retention Args: days (int)  number of days of retention on WORM copy. Raises: SDKException: if response is not success. if reponse is empty.",
"func":1
},
{
"ref":"cvpysdk.subclient",
"url":171,
"doc":"Main file for performing subclient operations. Subclients and Subclient are 2 classes defined in this file. Subclients: Class for representing all the subclients associated with a backupset / instance Subclient: Base class consisting of all the common properties and operations for a Subclient Subclients:      = __init__(class_object)  initialise object of subclients object associated with the specified backup set/instance. __str__()  returns all the subclients associated with the backupset __repr__()  returns the string for the instance of the Subclients class __len__()  returns the number of subclients associated with the Agent for the selected Client __getitem__()  returns the name of the subclient for the given subclient Id or the details for the given subclient name _get_subclients()  gets all the subclients associated with the backupset specified _process_add_request()  to post the add client request default_subclient()  returns the name of the default subclient all_subclients()  returns dict of all the subclients on commcell has_subclient()  checks if a subclient exists with the given name or not add()  adds a new subclient to the backupset add_oracle_logical_dump_subclient()  add subclient for oracle logical dump add_postgresql_subclient()  Adds a new postgresql subclient to the backupset. add_mysql_subclient()  Adds a new mysql subclient to the instance. add_virtual_server_subclient()  adds a new virtual server subclient to the backupset add_onedrive_subclient()  adds a new onedrive subclient to the instance get(subclient_name)  returns the subclient object of the input subclient name delete(subclient_name)  deletes the subclient (subclient name) from the backupset refresh()  refresh the subclients associated with the Backupset / Instance Subclient:      __init__()  initialise instance of the Subclient class, associated to the specified backupset __getattr__()  provides access to restore helper methods __repr__()  return the subclient name, the instance is associated with _get_subclient_id()  method to get subclient id, if not specified in __init__ method _get_subclient_properties()  get the properties of this subclient _set_subclient_properties()  sets the properties of this sub client . _process_backup_request()  runs the backup request provided, and processes the response _browse_and_find_json()  returns the appropriate JSON request to pass for either Browse operation or Find operation _process_browse_response()  processes response received for both Browse and Find request _common_backup_options()  Generates the advanced job options dict _json_task()  setter for task property _json_restore_subtask()  setter for sub task property _association_json()  setter for association property update_properties()  To update the subclient properties description()  update the description of the subclient content()  update the content of the subclient enable_backup()  enables the backup for the subclient enable_trueup()  enables true up option for the subclient enable_trueup_days()  enables true up option and sets days for backup enable_backup_at_time()  enables backup for the subclient at the input time specified disable_backup()  disables the backup for the subclient set_proxy_for_snap()  method to set Use proxy option for intellisnap subclient unset_proxy_for_snap()  method to unset Use proxy option for intellisnap subclient backup()  run a backup job for the subclient browse()  gets the content of the backup for this subclient at the path specified browse_in_time()  gets the content of the backup for this subclient at the input path in the time range specified find()  searches a given file/folder name in the subclient content list_media()  List media required to browse and restore backed up data from the backupset restore_in_place()  Restores the files/folders specified in the input paths list to the same location restore_out_of_place()  Restores the files/folders specified in the input paths list to the input client, at the specified destionation location set_backup_nodes()  Set Backup Nodes for NFS Share Pseudo client's subclient. find_latest_job()  Finds the latest job for the subclient which includes current running job also. refresh()  refresh the properties of the subclient Subclient Instance Attributes:                 properties  returns the properties of the subclient  name  returns the name of the subclient  display_name  returns the display name of the subclient  description  returns the description of the subclient  snapshot_engine_name  returns snapshot engine name associated with the subclient  is_default_subclient  returns True if the subclient is default subclient else returns False  is_blocklevel_backup_enabled  returns True if block level backup is enabled"
},
{
"ref":"cvpysdk.subclient.Subclients",
"url":171,
"doc":"Class for getting all the subclients associated with a client. Initialize the Subclients object for the given backupset. Args: class_object (object)  instance of the Agent / Instance / Backupset class Returns: object - instance of the Subclients class Raises: SDKException: if class object is not an instance of Agent / Instance / Backupset"
},
{
"ref":"cvpysdk.subclient.Subclients.all_subclients",
"url":171,
"doc":"Returns dict of all the subclients configured on this backupset Retruns: dict - consists of all subclients in the backupset { \"subclient1_name\": { \"id\": subclient1_id, \"backupset\": backupset }, \"subclient2_name\": { \"id\": subclient2_id, \"backupset\": backupset } }"
},
{
"ref":"cvpysdk.subclient.Subclients.has_subclient",
"url":171,
"doc":"Checks if a subclient exists in the commcell with the input subclient name. Args: subclient_name (str)  name of the subclient Returns: bool - boolean output whether the subclient exists in the backupset or not Raises: SDKException: if type of the subclient name argument is not string",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclients.add",
"url":171,
"doc":"Adds a new subclient to the backupset. Args: subclient_name (str)  name of the new subclient to add storage_policy (str)  name of the storage policy to be associated with the subclient default: None subclient_type (str)  type of subclient for sql server default: None Valid Values are: - DATABASE - FILE_FILEGROUP description (str)  description for the subclient (optional) default:  advanced_options (dict)  dict of additional options needed to create subclient with additional properties default : None Example: { ondemand_subclient : True } pre_scan_cmd (str)  path to the batch file/shell script file to run before each backup of the subclient Returns: object - instance of the Subclient class Raises: SDKException: if subclient name argument is not of type string if storage policy argument is not of type string if description argument is not of type string if failed to create subclient if response is empty if response is not success if subclient already exists with the given name",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclients.add_oracle_logical_dump_subclient",
"url":171,
"doc":"Method to add subclient for oracle logical dump. This method add two type of subclient full mode and schema mode. For full mode full_mode should be true and schema_value should be none and for schema mode full_mode should be false and schema_value should be list of values.Rest of thing should be same for both. Args: subclient_name (Str)  subclient name for logical dump storage_policy (Str)  Storage policy for subclient dump_dir (Str)  dump directory for subclient user_name (Str)  username for oracle database domain_name (Str)  domainname for oracle database password (Str)  password for oracle database (should be in encrypted and decrypted form) full_mode (bool)  if ture then subclient for full mode otherwise schema mode schema_value (list)  schema value for schema mode subclient default: None Return: object - instance of the Subclient class Raises: SDKException: if subclient name argument is not of type string if storage policy argument is not of type string if subclient name already present if storage policy does not exist",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclients.add_postgresql_subclient",
"url":171,
"doc":"Adds a new postgresql subclient to the backupset. Args: subclient_name (str)  name of the new subclient to add storage_policy (str)  name of the storage policy to be associated with the subclient contents (list)  database list to be added as subclient content no_of_streams (int)  No of backup streams to be used default: 1 collect_object_list (bool)  Boolean flag to determine if collect object list needs to be enabled for subclient or not default: False Returns: object - instance of the Subclient class Raises: SDKException: if subclient name argument is not of type string if storage policy argument is not of type string if conetnts argument is not of type list if contents is empty list if failed to create subclient if response is empty if response is not success if subclient already exists with the given name",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclients.add_mysql_subclient",
"url":171,
"doc":"Adds a new mysql subclient to the instance. Args: subclient_name (str)  name of the new subclient to add storage_policy (str)  name of the storage policy to be associated with the subclient contents (list)  database list to be added as subclient content kwargs (dict)  dict of keyword arguments as follows no_of_backup_streams (int)  No of backup streams to be used default: 1 no_of_log_backup_streams (int)  No of Transaction log backup streams default: 1 full_instance_xtrabackup (bool)  True if XtraBackup is selected for subclient default: False Returns: object - instance of the Subclient class Raises: SDKException: if subclient name argument is not of type string if storage policy argument is not of type string if conetnts argument is not of type list if contents is empty list if failed to create subclient if response is empty if response is not success if subclient already exists with the given name",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclients.add_virtual_server_subclient",
"url":171,
"doc":"Adds a new virtual server subclient to the backupset. Args: subclient_name (str)  Name of the subclient to be created subclient_content (list)  Content to be added to the subclient Example 1: [{ 'equal_value': True, 'allOrAnyChildren': True, 'id':  , 'path':  , 'display_name': 'sample1', 'type': VSAObjects.VMName }] Example 2: [{ 'allOrAnyChildren': False, 'content': [{ 'equal_value': True, 'allOrAnyChildren': True, 'display_name': 'sample1', 'type': VSAObjects.VMName }, { 'equal_value': True, 'allOrAnyChildren': True, 'display_name': 'sample2', 'type': VSAObjects.VMName } ] }, { 'allOrAnyChildren': True, 'content': [{ 'equal_value': True, 'allOrAnyChildren': True, 'display_name': 'sample3', 'type': VSAObjects.RESOURCE_POOL }, { 'equal_value': True, 'allOrAnyChildren': True, 'id': 'sample4', 'display_name': 'sample4', 'type': VSAObjects.SERVER } ] } ]  Note Use VSAObjects Enum present in constants.py to pass value to type kwargs (dict)  dict of keyword arguments as follows plan_name (str)  Plan to be associated with the subclient storage_policy (str)  Storage policy to be associated with the subclient description (str)  Description for the subclient default:  Returns: object - instance of the Subclient class Raises: SDKException: if subclient name argument is not of type string if storage policy argument is not of type string if description argument is not of type string if failed to create subclient if response is empty if response is not success if subclient already exists with the given name",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclients.add_onedrive_subclient",
"url":171,
"doc":"Adds a new subclient to the backupset. Args: subclient_name (str)  name of the new subclient to add server_plan (str)  name of the server plan to be associated with the subclient Returns: object - instance of the Subclient class Raises: SDKException: if subclient name argument is not of type string if server plan argument is not of type string if description argument is not of type string if failed to create subclient if response is empty if response is not success if subclient already exists with the given name if server plan donot exists with the given name",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclients.get",
"url":171,
"doc":"Returns a subclient object of the specified backupset name. Args: subclient_name (str)  name of the subclient Returns: object - instance of the Subclient class for the given subclient name Raises: SDKException: if type of the subclient name argument is not string if no subclient exists with the given name",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclients.delete",
"url":171,
"doc":"Deletes the subclient specified by the subclient_name from the backupset. Args: subclient_name (str)  name of the subclient to remove from the backupset Raises: SDKException: if type of the subclient name argument is not string if failed to delete subclient if response is empty if response is not success if no subclient exists with the given name",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclients.refresh",
"url":171,
"doc":"Refresh the subclients associated with the Backupset / Instance.",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclients.default_subclient",
"url":171,
"doc":"Returns the name of the default subclient for the selected Agent and Backupset."
},
{
"ref":"cvpysdk.subclient.Subclient",
"url":171,
"doc":"Base class consisting of all the common properties and operations for a Subclient Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclient.Subclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclient.Subclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclient.Subclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclient.Subclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclient.Subclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclient.Subclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclient.Subclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclient.Subclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclient.Subclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclient.Subclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclient.Subclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclient.Subclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclient.Subclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclient.Subclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclient.Subclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclient.Subclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclient.Subclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclient.Subclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclient.Subclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclient.Subclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclient.Subclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclient.Subclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclient.Subclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclient.backup",
"url":171,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup default: False incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup default: BEFORE_SYNTH Returns: object - instance of the Job class for this backup job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclient.Subclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclient.Subclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclient.Subclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclient.Subclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclient.Subclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients",
"url":172,
"doc":"Initialize Subclients for the SDK."
},
{
"ref":"cvpysdk.subclients.aadsubclient",
"url":173,
"doc":"File for Azure AD sublcient related operation Class: AzureAdSubclient: class to handle Azure Ad subclient instnace and operation"
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient",
"url":173,
"doc":"Class for Azure AD subclient related operation overwrite common in place restore function Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.restore_in_place",
"url":173,
"doc":"restore azure AD objects with new index Args: kwargs dict additional dict passed for restore. need pass additional azure AD option in restore_options azureADOption\" : {\"restoreAllMatching\": False, \"restoreMembership\" : True, \"newUserDefaultPassword\":  , \"items\": restore_items }",
"func":1
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.backup",
"url":171,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup default: False incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup default: BEFORE_SYNTH Returns: object - instance of the Job class for this backup job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.aadsubclient.AzureAdSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.adsubclient",
"url":174,
"doc":"File for Ad agent sublcient replated operation Class: ADSubclient : _get_subclient_properties()  Method to get subclinet properites _get_subclient_properties_json  Method to generate subclinet properties in json format content  Properties of AD objects in subclient ADSubclient: content()  method to get AD agent subclient content Function:"
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient",
"url":174,
"doc":"Class for AD agent related subclient Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.content",
"url":174,
"doc":"Get AD agent subclient content"
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.cv_contents",
"url":174,
"doc":"Commvault subclient content convert to AD format Args: content (list) subclient content entrypoint (string) ad object entry point Return: (list) ad format content Exception: None",
"func":1
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.backup",
"url":171,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup default: False incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup default: BEFORE_SYNTH Returns: object - instance of the Job class for this backup job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.adsubclient.ADSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient",
"url":175,
"doc":"Module for operating on a Big Data Apps Subclient BigDataAppsSubclient: __init__()  Just inializes all properties related to its super class set_data_access_nodes(data_access_nodes)  adds the passed json object as data access nodes for this subclient."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient",
"url":175,
"doc":"Derived class from FileSystemSubclient. Can perform fs subclient operations. Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.set_data_access_nodes",
"url":175,
"doc":"Sets the Data Access Nodes for the distributed apps subclient. Args : data_access_nodes (list) : Sets the list of client nodes passed as data access node for this distributed apps subclient Raise SDK Exception : If unable to set data access nodes property of the subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.content",
"url":176,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.filter_content",
"url":176,
"doc":"Treats the subclient filter content as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.exception_content",
"url":176,
"doc":"Treats the subclient exception content as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.scan_type",
"url":176,
"doc":"Gets the appropriate scan type for this Subclient Returns: int 1 - Recursive Scan 2 - Optimized Scan 3 - Change Journal Scan"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.trueup_option",
"url":176,
"doc":"Gets the value of TrueUp Option Returns: True - if trueup is enabled on the subclient False - if trueup is not enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.run_backup_copy",
"url":176,
"doc":"Runs the backup copy from Commcell for the given subclient Args: None Returns: object - instance of the Job class for this backup copy job Raises: SDKException: if backup copy job failed if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.backup_retention",
"url":176,
"doc":"return if backup retention is enabled or not Returns: True - if backup_retention is enabled for the subclient False - if backup_rentention is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.block_level_backup_option",
"url":176,
"doc":"Gets the block level option Returns: true - if blocklevel is enabled on the subclient false - if blocklevel is not enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.enable_dc_content_indexing",
"url":176,
"doc":"Creates the JSON with the specified dataclassification plan to pass to API to update file system Subclient Args: dcplan_name (String)  DC plan name",
"func":1
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.create_file_level_index_option",
"url":176,
"doc":"Gets the value of Metadata collection Option Returns: true - if metadata collection is enabled on the subclient false - if metadata collection is not enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.backup_retention_days",
"url":176,
"doc":"return number of days for backup retention Returns: (int)"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.system_state_option",
"url":176,
"doc":"Checks whether the system state option is enabled Returns: True - if system state property is enabled for the subclient False - if system state property is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.onetouch_option",
"url":176,
"doc":"Checks whether the onetouch option is enabled Returns: True - if system state property is enabled for the subclient False - if system state property is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.onetouch_server",
"url":176,
"doc":"Returns: Onetouch Server Name"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.onetouch_server_directory",
"url":176,
"doc":"Returns the onetouch server directory"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.trueup_days",
"url":176,
"doc":"Gets the trueup after n days value for this Subclient Returns: int"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.archiver_retention",
"url":176,
"doc":"return the value of archiver retention or modified time retention Returns: True - if archiver or modified time retention is enabled for the subclient False - if archiver or modified time retention is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.archiver_retention_days",
"url":176,
"doc":"return number of days for archiver or modified time retention Return: (int)"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.disk_cleanup",
"url":176,
"doc":"return value of disk cleanup of the subclient Returns: True - if disk Cleanup is enabled for the subclient False - if disk Cleanup is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.disk_cleanup_rules",
"url":176,
"doc":"return disk cleanup rules for this FileSystem Subclient Return: (dict)  disk clean up rules"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.backup_only_archiving_candidate",
"url":176,
"doc":"To get the value of backup only archiving candidate Returns: True - if backup only archiving candidate is enabled for the subclient False - if backup only archiving candidate is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.file_version",
"url":176,
"doc":"Returns: (dict)  file version mode"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.generate_signature_on_ibmi",
"url":176,
"doc":"Gets the value of generate signature on ibmi option for IBMi subclient. Returns: False - if signature generation on IBMi is enabled on the subclient True - if signature generation on IBMi is not enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.backup_using_multiple_drives",
"url":176,
"doc":"Gets the value of VTL multiple drives on ibmi option for IBMi subclient. Returns: False - if multiple drives is not enabled. True - if multiple drives is enabled."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.pending_record_changes",
"url":176,
"doc":"Gets the value of pending record changes option for IBMi subclient. Returns: False - if multiple drives is not enabled. True - if multiple drives is enabled."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.other_pending_changes",
"url":176,
"doc":"Gets the value of other pending changes for IBMi subclient. Returns: False - if multiple drives is not enabled. True - if multiple drives is enabled."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.object_level_backup",
"url":176,
"doc":"Gets the value of object level backup option for IBMi subclient. Returns: True - if object level backup is enabled on the subclient False - if object level backup is not enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.global_filter_status",
"url":176,
"doc":"Returns the status whether the global filters are included in configuration"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.enable_synclib",
"url":176,
"doc":"Return the save while active options for an IBMi subclient. Returns: (dict)  Dictionary of synclib options"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.software_compression",
"url":176,
"doc":"Returns the software compression status for this subclient. Returns: int 1 - On Client 2 - On Media Agent 3 - Use Storage Policy Settings 4 - Off"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.use_vss",
"url":176,
"doc":"Returns the value of the Use VSS options for Windows FS subclients. Returns: dict Dictionary contains the keys 'useVSS', 'vssOptions' and 'useVssForAllFilesOptions'. useVSS: True - ENABLED False - DISABLED vssOptions: 1 - For all files 2 - For locked files only useVssForAllFilesOptions: 1 - Fail the job 2 - Continue and reset access time 3 - Continue and do not reset access time"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.find_all_versions",
"url":176,
"doc":"Searches the content of a Subclient. Args: Dictionary of browse options: Example: find_all_versions({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) (OR) Keyword argument of browse options: Example: find_all_versions( path='c:\\hello.txt', show_deleted=True, to_time='2016-04-31 12:00:00' ) Refer self._default_browse_options for all the supported options Returns: dict - dictionary of the specified file with list of all the file versions and additional metadata retrieved from browse",
"func":1
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.backup",
"url":176,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup default: False incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup default: BEFORE_SYNTH on_demand_input (str)  input directive file location for on demand subclient only applicable in case of on demand subclient default: None advanced_options (dict)  advanced backup options to be included while making the request default: None options: directive_file : path to the directive file adhoc_backup : if set triggers the adhoc backup job adhoc_backup_contents : sets the contents for adhoc backup inline_backup_copy : to run backup copy immediately(inline) skip_catalog : skip catalog for intellisnap operation start_new_media : enables the option to start new media for the job media_agent_name : to run backup via this media agent impersonate_gui : sets the initiatedFrom property to GUI if True common_backup_options (dict)  advanced job options to be included while making request default: None options: job_description : job description to be set. enable_number_of_retries : enables/disables the property, number of retrys. values: True/False number_of_retries : total number of retries to be set. enable_total_running_time : enables/disables the property, toal running time. values: True/False total_running_time : total run time to be set in (secs) kill_running_job_when_total_running_time_expires : enables/disables the property. values: True/False start_in_suspended_state : enables/disables the property. values: True/False use_default_priority : enables/disables the property. values: True/False priority : three digit number to be set. default: 166 schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.restore_in_place",
"url":176,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.restore_out_of_place",
"url":176,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password : Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore is_vlr_restore : sets if the restore job is to be triggered as vlr validate_only : To validate data backed up for restore instant_clone_options : Options for FS clone found on Command Center, the value must be a dictionary containing the following key value pairs. reservation_time (int)  The amount of time, specified in seconds, that the mounted snapshot needs to be reserved for before it is cleaned up. This is an OPTIONAL key. Default : 3600 clone_mount_path (str)  The path to which the snapshot needs to be mounted. This is NOT an optional key. post_clone_script (str)  The script that will run post clone. This is an OPTIONAL key. clone_cleanup_script (str)  The script that will run after clean up. This is an OPTIONAL key. no_of_streams (int)  Number of streams to be used for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.enable_content_indexing",
"url":176,
"doc":"Enables Content indexing and add the policy associations",
"func":1
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.disable_content_indexing",
"url":176,
"doc":"Disables Content indexing and disassociate the CI policy",
"func":1
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.catalog_acl",
"url":176,
"doc":"Gets the catalog acl option Returns: true - if catalog acl is enbaled on the subclient false - if catalog acl disabled on the subclient"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.index_server",
"url":176,
"doc":"Returns the index server client set for the subclient. None if no Index Server is set"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.index_pruning_type",
"url":176,
"doc":"Treats the subclient pruning type as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.index_pruning_days_retention",
"url":176,
"doc":"Returns number of days to be maintained in index by index pruning for the subclient"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.index_pruning_cycles_retention",
"url":176,
"doc":"Returns number of cycles to be maintained in index by index pruning for the subclient"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.ibmi_dr_config",
"url":176,
"doc":"Return the ibmi dr configuration Returns: (dict)  Dictionary of DR parameters"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.backup_savf_file_data",
"url":176,
"doc":"Return the ibmi savf file data configuration Returns: (bool)  Is savf file data going to be backed up"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.backup_spool_file_data",
"url":176,
"doc":"Gets the value of spool file data on ibmi option for IBMi subclient. Returns: False - if spool file data on IBMi is disabled on the subclient True - if spool file data on IBMi is enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.backup_queue_data",
"url":176,
"doc":"Gets the value of queue data data on ibmi option for IBMi subclient. Returns: False - if queue data on IBMi is disabled on the subclient True - if queue data on IBMi is enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.backup_private_authorities",
"url":176,
"doc":"Gets the value of private authorities on ibmi option for IBMi subclient. Returns: False - if PVTAUT on IBMi is disabled on the subclient True - if PVTAUT on IBMi is enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.target_release",
"url":176,
"doc":"Gets the value of target and release on ibmi option for IBMi subclient. Returns: (str) - Return the target and release string value"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.save_access_path",
"url":176,
"doc":"Gets the value of save access path on ibmi option for IBMi subclient. Returns: (str) - Return the save access path string value"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.update_history",
"url":176,
"doc":"Gets the value of update history property on ibmi option for IBMi subclient. Returns: (str) - Return the string value of update history property"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.ibmi_compression",
"url":176,
"doc":"Gets the value of IBMi compression property on ibmi option for IBMi subclient. Returns: (str) - Return the string value of IBMi compression property"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.save_while_active_option",
"url":176,
"doc":"Return the save while active options for an IBMi subclient. Returns: (dict)  Dictionary of save while active options"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.pre_post_commands",
"url":176,
"doc":"Return the prep_post commands set for a subclient Returns: (dict)  All the pre/post commands"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.backup_nodes",
"url":176,
"doc":"Gets the backup nodes for FS Agent under Network Share Clients."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.network_share_auto_mount",
"url":176,
"doc":"Returns the value of enableNetworkShareAutoMount, if true, the content will be auto-mounted during backup and auto-mounted during in-place restores."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.impersonate_user",
"url":176,
"doc":"Returns the username ONLY and applicable to Windows FS subclients only."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.bigdataappssubclient.BigDataAppsSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.casesubclient",
"url":177,
"doc":"File for operating on an CaseManger Subclient. CaseMangerSubclient is the only class defined in this file. CaseMangerSubclient: Derived class from Subclient Base class, representing an Exchange Mailbox Agent subclient, and to perform operations on that subclient. CaseMangerSubclient: __new__()  Method to create object based on the backupset name"
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient",
"url":177,
"doc":"Derived class from Subclient Base class, representing an Case Manger subclient, and to perform operations on that subclient. Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.json_hold_info",
"url":177,
"doc":"Getter for the hold_info JSON."
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.json_search_request",
"url":177,
"doc":"Getter for the search request JSON."
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.json_index_copy_options",
"url":177,
"doc":"Getter for the index copy options JSON."
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.json_data_copy_subtasks",
"url":177,
"doc":"Getter for the data copy subtask JSON."
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.json_data_copy_options",
"url":177,
"doc":"Getter for the data copy options JSON."
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.json_index_copy_subtasks",
"url":177,
"doc":"Getter for the index copy subtask in JSON"
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.json_content_indexing_subtasks",
"url":177,
"doc":"Getter for the contentindexing subtask JSON"
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.json_media_options",
"url":177,
"doc":"Getter for the contentindexing media options JSON."
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.index_copy",
"url":177,
"doc":"Runs a Index Copy job for the subclient . Returns: object - instance of the Job class for this index copy job",
"func":1
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.data_copy",
"url":177,
"doc":"Runs a data copy job for the subclient . Returns: object - instance of the Job class for this data copy job",
"func":1
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.content_indexing",
"url":177,
"doc":"Run content Indexing on Subclient . Returns: object - instance of the Job class for this ContentIndexing job",
"func":1
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.add_definition",
"url":177,
"doc":"Add definition for UserMailboxSubclient. Args: custodian_info (dict)  list of users info to the case subclient custodian_info = [ { \"smtp\": \"ee2@testexch.commvault.com\", \"name\": \"ee2\", \"guid\": \"1b690719-72af-4d13-9ce0-577962cd165d\" }, { \"smtp\": \"ee15@testexch.commvault.com\", \"name\": \"ee15\", \"guid\": \"86139703-b8e7-41b9-824f-47f3f4b0dde1\" } ]",
"func":1
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.backup",
"url":171,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup default: False incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup default: BEFORE_SYNTH Returns: object - instance of the Job class for this backup job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.casesubclient.CaseSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.casubclient",
"url":178,
"doc":"File for operating on a Cloud Apps Subclient. CloudAppsSubclient is the only class defined in this file. CloudAppsSubclient: Derived class from Subclient Base class, representing a cloud apps subclient, and to perform operations on that subclient. Note: GoogleSubclient class is used for OneDrive subclient too. CloudAppsSubclient: __new__()  Method to create object based on specific cloud apps instance type"
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient",
"url":178,
"doc":"Class for representing a subclient of the Cloud Apps agent. Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.backup",
"url":171,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup default: False incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup default: BEFORE_SYNTH Returns: object - instance of the Job class for this backup job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.casubclient.CloudAppsSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.cloudapps",
"url":179,
"doc":"Initialize Cloud Apps Subclients for the SDK."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient",
"url":180,
"doc":"File for operating on a Cloud Database Subclient. CloudDatabaseSubclient is the only class defined in this file. CloudDatabaseSubclient: Derived class from CloudAppsSubclient Base class, representing a Cloud Database subclient(Amazon RDS/Redshift/DocumentDB and DynamoDB), and to perform operations on that subclient CloudDatabaseSubclient: _get_subclient_properties()  gets the properties of Cloud Database Subclient _get_subclient_properties_json()  gets the properties JSON of Cloud Database Subclient content()  gets the content of the subclient _set_content()  sets the content of the subclient browse()  Browse and returns the content of this subclient's instance backups restore()  Restores a cloud database from the specified source and restore options"
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient",
"url":180,
"doc":"Derived class from Subclient Base class, representing a Cloud Database subclient, and to perform operations on that subclient. Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.content",
"url":180,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: dict - dict of cloud database content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.browse",
"url":180,
"doc":"Browses the content of this cloud database subclient's instance args: Dictionary of browse options Example: { 'start_time': 0, 'end_time': 1570808875, 'include_aged_data': 0, 'copy_precedence': 0, } kwargs: keyword argument of browse options Example: { start_time: 0, end_time: 1570808875, include_aged_data: 0, copy_precedence: 0, } Returns: dict - Browse response json that contains list of snapshot information",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.restore",
"url":180,
"doc":"Restores the content of this subclient's instance content Args: destination : Destination cluster name we want to restore to. source : Source snapshot we want to restore from. restore_options : Restore options needed to submit a restore request. Example: Restore of amazon redshift instance cluster from snapshot { destination : 'cluster', source : 'snapshot', options : { 'allowVersionUpgrade' : true, 'publicallyAccessible' : true, 'restoreTags' : false, 'enableDeletionProtection': false, 'availabilityZone': 'us-east-2a', 'targetParameterGroup': 'param', 'targetSubnetGroup': 'subnet', 'nodeType': 'dc-large-8', 'targetPort': 2990, 'numberOfNodes': 1 } } Returns: object - instance of the Job class for this restore job",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.backup",
"url":171,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup default: False incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup default: BEFORE_SYNTH Returns: object - instance of the Job class for this backup job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_database_subclient.CloudDatabaseSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient",
"url":181,
"doc":"File for operating on a Cloud Storage Subclient. CloudStorageSubclient is the only class defined in this file. CloudStorageSubclient: Derived class from CloudAppsSubclient Base class, representing a Cloud Storage subclient(S3,Azure,Oraclecloud and Openstack), and to perform operations on that subclient CloudStorageSubclient: _get_subclient_properties()  gets the properties of Cloud Storage Subclient _get_subclient_properties_json()  gets the properties JSON of Cloud Storage Subclient content()  gets the content of the subclient _set_content()  sets the content of the subclient restore_in_place()  Restores the files/folders specified in the input paths list to the same location restore_out_of_place()  Restores the files/folders specified in the input paths list to the input client, at the specified destination location restore_to_fs()  Restores the files/folders specified in the input paths list to the input fs client, at the specified destination location. restore_using_proxy()  To perform restore to different cloud using proxy passing explicit credentials of destination cloud"
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient",
"url":181,
"doc":"Derived class from Subclient Base class, representing a Cloud Storage subclient, and to perform operations on that subclient. Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.content",
"url":181,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.restore_in_place",
"url":181,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True copy_precedence (int)  copy precedence value of storage policy copy default: None no_of_streams (int)  number of streams for restore default : 2 Returns: object - instance of the Job class for this restore job",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.restore_out_of_place",
"url":181,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: paths (list)  list of full paths of files/folders to restore destination_client (str)  name of the client to which the files are to be restored. default: None for in place restores destination_instance_name(str)  name of the instance to which the files are to be restored. default: None for in place restores destination_path (str)  location where the files are to be restored in the destination instance. overwrite (bool)  unconditional overwrite files during restore default: True copy_precedence (int)  copy precedence value of storage policy copy default: None no_of_streams (int)  number of streams for restore default : 2 kwargs (dict)  dict of keyword arguments as follows from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None no_image (bool)  restore deleted items default: False Returns: object - instance of the Job class for this restore job",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.restore_to_fs",
"url":181,
"doc":"Restores the files/folders specified in the input paths list to the fs client Args: paths (list)  list of full paths of files/folders to restore destination_path (str)  location where the files are to be restored in the destination instance. destination_client (str)  name of the fs client to which the files are to be restored. default: None for restores to backup or proxy client. overwrite (bool)  unconditional overwrite files during restore default: True copy_precedence (int)  copy precedence value of storage policy copy default: None no_of_streams (int)  number of streams for restore default : 2 Returns: object - instance of the Job class for this restore job",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.restore_using_proxy",
"url":181,
"doc":"To perform restore to different cloud using proxy passing explicit credentials of destination cloud Args: destination_client_proxy (str)  name of proxy machine having cloud connector package paths (list)  list of full paths of files/folders to restore destination_path (str)  location where the files are to be restored in the destination instance. overwrite (bool)  unconditional overwrite files during restore default: True copy_precedence (int)  copy precedence value of storage policy copy default: None destination_cloud (dict(dict  dict of dict representing cross cloud credentials Sample dict(dict) : destination_cloud = { 'google_cloud': { 'google_host_url':'storage.googleapis.com', 'google_access_key':'xxxxxx', 'google_secret_key':'yyyyyy' } } destination_cloud = { 'amazon_s3': { 's3_host_url':'s3.amazonaws.com', 's3_access_key':'xxxxxx', 's3_secret_key':'yyyyyy' } } destination_cloud = { 'azure_blob': { 'azure_host_url':'blob.core.windows.net', 'azure_account_name':'xxxxxx', 'azure_access_key':'yyyyyy' } } Returns: object - instance of the Job class for this restore job Raises: SDKException: if destination cloud credentials empty if destination cloud has more than one vendor details if unsupported destination cloud for restore is chosen if client is not a string or Client object if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.backup",
"url":171,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup default: False incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup default: BEFORE_SYNTH Returns: object - instance of the Job class for this backup job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.cloud_storage_subclient.CloudStorageSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient",
"url":182,
"doc":"File for operating on a Dynamics 365 CRM Subclient. MSDynamics365Subclient is the only class defined in this file. MSDynamics365Subclient: Derived class from O365AppsSubclient Base class, representing a Dynamics 365 subclient, and to perform operations on that subclient MSDynamics365Subclient:  Methods  _get_subclient_properties()  Gets the subclient related properties of a MS Dynamics 365 subclient _get_subclient_properties_json()  get the all subclient related properties of this subclient. get_discovered_tables()  Method to get the tables discovered from the MS Dynamics 365 CRM subclient get_discovered_environments()  Method to get the environments discovered from the Dynamics 365 CRM subclient _get_associated_content()  Method to get the content associated with a Dynamics 365 CRM subclient get_associated_tables()  Method to get the tables associated with a Dynamics 365 CRM client get_associated_environments()  Method to get the environments associated with a Dynamics 365 CRM client _set_association_json()  JSON to set the content association for a Dynamics 365 CRM client _set_content_association()  Method to associate some content to a Dynamics 365 CRM client . _table_association_info_json()  Private Method to create the association JSON for associating tables to a Dynamics 365 CRM client. set_table_associations()  Method to add table associations to a Dynamics 365 CRM client. _environment_association_info_json()  Method to create the association JSON for associating environments to a Dynamics 365 CRM client. set_environment_associations()  Method to add environment associations to a Dynamics 365 CRM client. _json_for_backup_task()  Method to create the association JSON for backing up content for a Dynamics 365 subclient _backup_content_json()  Method to fetch the metadata properties for backing up content for a Dynamics 365 subclient _run_backup()  Method to run backup for the content of a Dynamics 365 subclient backup_tables()  Method to run backup for the specified tables of a Dynamics 365 subclient backup_environments()  Method to run backup for the specified environments of a Dynamics 365 subclient _restore_content_json()  Restore JSON for restoring content for a Dynamics 365 subclient _get_restore_item_path()  Get the complete path of the content for running a restore job _prepare_restore_json()  Method to prepare JSON/ Python dict for in- place restore for the content specified. restore_in_place()  Method to run in- place restore for the content specified. launch_d365_licensing()  Method to launch Licensing API call. _get_environment_id_for_oop_restore()  Get the Environment ID for an environment for Out of Place Restore restore_out_of_place()  Method to run out-of-place restore for the content specified. browse()  Browse for the backed up content for a Dynamics 365 subclient _get_guid_for_path()  Method to get the browse GUID corresponding to the path _perform_browse()  Perform a browse of the backed up content _get_dynamics365_browse_params()  Default dictionary for the browse parameters for a Dynamics 365 browse query.  Properties  discovered_environments  Property to get the tables discovered by the Dynamics 365 subclient. discovered_tables  Dictionary of tables discovered by the subclient browse_item_type()  Dynamics 365 item type"
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient",
"url":182,
"doc":"Class representing a MS Dynamics 365 subclient. Class has been derived from the O365AppsSubclient. Initialize the Subclient object for the given MSDynamics365 Subclient. Args: backupset_object (object)  instance of the backup-set class subclient_name (str)  subclient name subclient_id (int)  subclient id"
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.discover_tables",
"url":182,
"doc":"Method to get the tables discovered from the MS Dynamics 365 CRM subclient Returns: discovered_tables (dict) Dictionary of returned tables",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.discover_environments",
"url":182,
"doc":"Method to get the environments discovered from the Dynamics 365 CRM subclient Returns: discovered_environments (dict) Dictionary of discovered environments",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.discovered_environments",
"url":182,
"doc":"Property to get the environments discovered by the Dynamics 365 subclient. If updated list is required, call refresh method prior to using this property. Returns: discovered_environments (dict) Dictionary of discovered environments"
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.discovered_tables",
"url":182,
"doc":"Property to get the tables discovered by the Dynamics 365 subclient. If updated list is required, call refresh method prior to using this property. Returns: discovered_tables (dict) Dictionary of discovered tables"
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.get_associated_tables",
"url":182,
"doc":"Method to get the tables associated with a Dynamics 365 CRM client Arguments: refresh (bool) Whether to refresh the dictionary contents If True get associated environments, will fetch the latest associations and return them Returns: associated_tables (list) List of tables associated with the client Format: Each list element will be a dictionary denoting that particular table Dictionary keys/ format will be: name : name of the table environment_name : name of the environment to which the table belongs to plan: Dynamics 365 plan used for content association is_environment: False for a Table userAccountInfo: Metadata info for that table Sample Response: { 'name': 'account', 'environment_name': 'sample-environment-name', 'userAccountInfo': { 'aliasName': 'https:  .crm.dynamics.com/api/data/v9.1/account', 'displayName': 'Account, 'ParentWebGuid': 'org-environment-name', 'lastBackupJobRanTime': {'time':  }, 'IdxCollectionTime': {'time':  }, 'user': { '_type_': 13, 'userGUID': ' >' } }, 'plan': { 'planName': ' ', 'planId':  }, 'is_environment': False } Environment name/ URL in the sample response is for description purpose only",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.get_associated_environments",
"url":182,
"doc":"Method to get the environments associated with a Dynamics 365 CRM client Arguments: refresh (bool) Whether to refresh the dictionary contents If True get associated environments, will fetch the latest associations and return them Returns: associated_environments (list) List of environments associated with the client Format: Each list element will be a dictionary denoting that particular environment Dictionary keys/ format will be: name : name of the table plan: Dynamics 365 plan used for content association is_environment: True for an environment userAccountInfo: Metadata info for that environment Sample Response: { 'name': 'sample-environment-name', 'id': ' >', 'userAccountInfo': { 'aliasName': 'https:  .crm.dynamics.com', 'itemType': 0, 'ItemClassification': 0, 'displayName': 'org-environment-display-name', 'BackupSetId': 0, 'isAutoDiscoveredUser': False, 'lastBackupJobRanTime': 'time':  , 'IdxCollectionTime': {'time':  }, user': { '_type_': 13, 'userGUID': ' ' } }, 'plan': {'planName': ' ', 'planId':  }, 'is_environment': True}",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.set_table_associations",
"url":182,
"doc":"Method to add table associations to a Dynamics 365 CRM client. Arguments: tables_list (list) List of tables to be associated to the content List Format: Each list element should be a tuple of the format: (\"table_name\", \"environment_name\") environment_name is the name of the environment to which the table belongs to table_name is the name of the table to be associated Sample input: [ (\"account\", \"testenv1\") , (\"note\", \"testenv2\") , (\"attachments\", \"testenv1\")] plan_name (str) Name of the Dynamics 365 Plan to be used for content association",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.set_environment_associations",
"url":182,
"doc":"Method to add environment associations to a Dynamics 365 CRM client. Arguments: environments_name (list) List of environments to be associated to the content List Format: Each list element should be a string of the name of the environment Sample Values: ['testenv1' , 'testenv2', 'testenv3'] plan_name (str) Name of the Dynamics 365 Plan to be used for content association",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.backup_tables",
"url":182,
"doc":"Method to run backup for the specified tables of a Dynamics 365 subclient Arguments: tables_list (list) List of tables to be backed up List Format Each list element should be a tuple of the format: (\"environment_name\",\"table_name\") environment_name is the name of the environment to which the table belongs to table_name is the name of the table to be backed up Sample input: [ (\"testenv1\" , \"account\") , (\"testenv2\",\"note\") , (\"testenv1\",\"attachments\")] Returns: backup_job (Job) CVPySDK.Job class instance for that particular backup job",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.backup_environments",
"url":182,
"doc":"Method to run backup for the specified environments of a Dynamics 365 subclient Arguments: environments_list (list) List of environments to be backed up List Format, for backing up specified environments: Each list element should be a string of the name of the environment Sample List: ['testenv1','testenv2','testenv3'] Returns: backup_job (Job) CVPySDK.Job class instance for that particular backup job",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.restore_in_place",
"url":182,
"doc":"Method to run in- place restore for the content specified. Arguments: restore_content (str) List of the content to restore If content is environment, List format: list of strings, with each string corresponding to the environments display name, in lower case Sample Input: [ 'testenv1' , 'testenv2' , 'testenv3' ] If content is tables: List format: list of tuples, with each tuple, of the form: \"environment_name\",\"table_name\" where environment name if the name of the environment to which the table belongs to Sample input: [ (\"testenv1\" , \"account\") , (\"testenv2\",\"note\") , (\"testenv1\",\"attachments\")] restore_path (list) List of the paths of the items to restore Instead of passing, the restore content, restore path can be passed Restore path, is the path for each item, that is to be restored. Path is returned by the browse operation is_environment (bool) Whether to content to be restored is a table or an environment overwrite (bool) Skip or overwrite content job_id (int) Job ID for point in time restores Returns: restore_job (job) Instance of CVPySDK.Job for the restore job",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.launch_d365_licensing",
"url":182,
"doc":"Method to launch Licensing API call. Arguments: run_for_all_clients(bool)  True if thread is to be run on all clients, False otherwise default: False",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.restore_out_of_place",
"url":182,
"doc":"Method to run out-of-place restore for the content specified. Arguments: restore_content (str) List of the content to restore If content is environment, List format: list of strings, with each string corresponding to the environments display name, in lower case Sample Input: [ 'testenv1' , 'testenv2' , 'testenv3' ] If content is tables: List format: list of tuples, with each tuple, of the form: \"environment_name\",\"table_name\" where environment name if the name of the environment to which the table belongs to Sample input: [ (\"testenv1\" , \"account\") , (\"testenv2\",\"note\") , (\"testenv1\",\"attachments\")] restore_path (list) List of the paths of the items to restore Instead of passing, the restore content, restore path can be passed Restore path, is the path for each item, that is to be restored. Path is returned by the browse operation is_environment (bool) Whether to content to be restored is a table or an environment overwrite (bool) Skip or overwrite content job_id (int) Job ID for point in time restores destination_environment (str) Destination environment name Returns: restore_job (job) Instance of CVPySDK.Job for the restore job",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.browse",
"url":182,
"doc":"Browse for the backed up content for a Dynamics 365 subclient Arguments: browse_path (list)  Path to be browsed Sample Value: [\"environment-name\" , \"table-name\"] include_deleted_items (bool)  Whether to include deleted items in the browse response till_time (int)  Time-stamp for point in time browse",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.browse_item_type",
"url":182,
"doc":"Dynamics 365 item types"
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.do_web_search",
"url":183,
"doc":"Method to perform a web search using the /Search endpoint. Default browse endpoint for new O365 agents. Arguments: kwargs: Dictionary of arguments to be used for the browse",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.process_index_retention",
"url":183,
"doc":"Run the retention thread for Dynamics 365/ Office 365 Apps sub-client Args: index_server_client_id (int)  client id of index server Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.backup",
"url":171,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup default: False incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup default: BEFORE_SYNTH Returns: object - instance of the Job class for this backup job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.dynamics365_subclient.MSDynamics365Subclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient",
"url":184,
"doc":"File for operating on a GMail/GDrive/OneDrive Subclient. GoogleSubclient is the only class defined in this file. GoogleSubclient: Derived class from CloudAppsSubclient Base class, representing a GMail/GDrive/OneDrive subclient, and to perform operations on that subclient GoogleSubclient: _get_subclient_properties()  gets the properties of Google Subclient _get_subclient_properties_json()  gets the properties JSON of Google Subclient _task_json_for_onedrive_backup()  Json for onedrive backup for selected users _association_users_json  user association content()  gets the content of the subclient groups()  gets the groups associated with the subclient restore_out_of_place()  runs out-of-place restore for the subclient discover()  runs user discovery on subclient add_AD_group()  adds AD group to the subclient add_user()  adds user to the subclient add_users_v2()  Adds user to OneDrive for Business Client search_for_user()  Searches for a specific user's details from discovered list disk_restore_v2()  Runs disk restore of selected users for OneDrive for Business Client out_of_place_restore_v2()  Runs out-of-place restore of selected users for OneDrive for Business Client in_place_restore_v2()  Runs in-place restore of selected users for OneDrive for Business Client point_in_time_in_place_restore_onedrive_v2()  Runs PIT in-place restore of selected users point_in_time_out_of_place_restore_onedrive_v2()  Runs PIT out of place restore of selected users run_user_level_backup_onedrive_v2()  Runs the backup for the users in users list _get_user_details()  gets user details from discovery _get_user_guids()  Retrieve GUIDs for users specified process_index_retention_rules()  Makes API call to process index retention rules"
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient",
"url":184,
"doc":"Derived class from CloudAppsSubclient Base class, representing a GMail/GDrive/OneDrive subclient, and to perform operations on that subclient. Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.content",
"url":184,
"doc":"Returns the subclient content dict"
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.groups",
"url":184,
"doc":"Returns the list of groups assigned to the subclient if any. Groups can be azure AD group or Google groups. Groups are assigned only if auto discovery is enabled for groups. Returns: list - list of groups associated with the subclient"
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.restore_out_of_place",
"url":184,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None to_disk (bool)  If True, restore to disk will be performed Returns: object - instance of the Job class for this restore job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.discover",
"url":184,
"doc":"This method discovers the users/groups on Google GSuite Account/OneDrive Args: discover_type (str)  Type of discovery Valid Values are - USERS - GROUPS Default: USERS Returns: List (list)  List of users on GSuite account Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.set_auto_discovery",
"url":184,
"doc":"Sets the auto discovery value for subclient. You can either set a RegEx value or a user group, depending on the auto discovery type selected at instance level. Args: value (list)  List of RegEx or user groups",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.run_subclient_discovery",
"url":184,
"doc":"This method launches AutoDiscovery on the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.add_AD_group",
"url":184,
"doc":"Adds the user group to the subclient if auto discovery type selected AD group at instance level. Args: value (list)  List of user groups",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.add_user",
"url":184,
"doc":"This method adds one drive user to the subclient Args: user_name (str)  Onedrive user name",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.get_subclient_users",
"url":184,
"doc":"Returns the users in subclient"
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.add_users_v2",
"url":184,
"doc":"Adds given OneDrive users to v2 client Args: users (list) : List of user's SMTP address plan_name (str) : O365 plan name to associate with users Raises: SDKException: if response is not success if response is returned with errors",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.verify_discovery_v2",
"url":184,
"doc":"Verifies that discovery is complete Returns: discovery_stats (tuple): discovery_status (bool): True if users are discovered else returns False total_records (int): Number of users fetched, returns -1 if discovery is not complete Raises: SDKException: if response is not success if response received does not contain pagining info",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.search_for_user",
"url":184,
"doc":"Searches for a specific user's details from discovered list Args: user_id (str) : user's SMTP address Returns: user_accounts (list): user details' list fetched from discovered content eg: [ { 'displayName':  , 'smtpAddress':  , 'isSuperAdmin': False, 'isAutoDiscoveredUser': False, 'commonFlags': 0, 'user': { '_type_': 13, 'userGUID': 'UserGuid' } } ] Raises: SDKException: if discovery is not complete if invalid SMTP address is passed if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.disk_restore_v2",
"url":184,
"doc":"Runs an out-of-place restore job for specified users on OneDrive for business client By default restore skips the files already present in destination Args: users (list) : list of SMTP addresses of users destination_client (str) : client where the users need to be restored destination_path (str) : Destination folder location skip_file_permissions (bool) : If True, restore of file permissions are skipped (default: False) Returns: object - instance of the Job class for this restore job",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.out_of_place_restore_v2",
"url":184,
"doc":"Runs an out-of-place restore job for specified users on OneDrive for business client By default restore skips the files already present in destination Args: users (list) : list of SMTP addresses of users destination_path (str) : SMTP address of destination user  kwargs (dict) : Additional parameters overwrite (bool) : unconditional overwrite files during restore (default: False) restore_as_copy (bool) : restore files as copy during restore (default: False) skip_file_permissions (bool) : If True, restore of file permissions are skipped (default: False) Returns: object - instance of the Job class for this restore job Raises: SDKException: if overwrite and restore as copy file options are both selected",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.in_place_restore_v2",
"url":184,
"doc":"Runs an in-place restore job for specified users on OneDrive for business client By default restore skips the files already present in destination Args: users (list) : List of SMTP addresses of users  kwargs (dict) : Additional parameters overwrite (bool) : unconditional overwrite files during restore (default: False) restore_as_copy (bool) : restore files as copy during restore (default: False) skip_file_permissions (bool) : If True, restore of file permissions are skipped (default: False) Returns: object - instance of the Job class for this restore job Raises: SDKException: if overwrite and restore as copy file options are both selected",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.point_in_time_in_place_restore_onedrive_v2",
"url":184,
"doc":"Runs an in-place point in time restore job for specified users on OneDrive for business client By default restore skips the files already present in destination Args: users (list) : List of SMTP addresses of users end_time (int) : Backup job end time  kwargs (dict) : Additional parameters overwrite (bool) : unconditional overwrite files during restore (default: False) restore_as_copy (bool) : restore files as copy during restore (default: False) skip_file_permissions (bool) : If True, restore of file permissions are skipped (default: False) Returns: object - instance of the Job class for this restore job Raises: SDKException: if overwrite and restore as copy file options are both selected",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.point_in_time_out_of_place_restore_onedrive_v2",
"url":184,
"doc":"Runs an out-of-place point in time restore job for specified users on OneDrive for business client By default restore skips the files already present in destination Args: users (list) : list of SMTP addresses of users end_time (int) : Backup job end time destination_path (str) : SMTP address of destination user  kwargs (dict) : Additional parameters overwrite (bool) : unconditional overwrite files during restore (default: False) restore_as_copy (bool) : restore files as copy during restore (default: False) skip_file_permissions (bool) : If True, restore of file permissions are skipped (default: False) Returns: object - instance of the Job class for this restore job Raises: SDKException: if overwrite and restore as copy file options are both selected",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.run_user_level_backup_onedrive_v2",
"url":184,
"doc":"Runs the backup for the users in users list Args: users_list (list) : list of SMTP addresses of users",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.process_index_retention_rules",
"url":184,
"doc":"Makes API call to process index retention rules Args: index_app_type_id (int)  index app type id index_server_client_name (str)  client name of index server Raises: SDKException: if index server not found if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.backup",
"url":171,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup default: False incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup default: BEFORE_SYNTH Returns: object - instance of the Job class for this backup job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.google_subclient.GoogleSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient",
"url":185,
"doc":"File for operating on a Salesforce Subclient. SalesforceSubclient is the only class defined in this file. SalesforceSubclient: Derived class from CloudAppsSubclient Base class, representing a salesforce subclient, and to perform operations on that subclient SalesforceSubclient: _get_subclient_properties()  Subclient class method overwritten to add salesforce subclient properties as well _get_subclient_properties_json()  gets all the subclient related properties of salesforce subclient. enable_files  Enables files option on subclient content disable_files  Disables files option on subclient content enable_metadata  Enables metadata option on subclient content disable_metadata  Disables metadata option on subclient content enable_archived_deleted  Enables backup archived and deleted option on subclient content disable_archived_deleted  Disables backup archived and deleted option on subclient content browse()  Browses the salesforce content _check_object_in_browse()  internal method to check the object exists in browse content _restore_salesforce_options_json()  internal method for salesforce options json _restore_salesforce_destination_json()  internal method for salesforce destination option json restore_to_file_system()  restores the selected content to filesystem restore_to_database()  restores the selected content to database restore_to_salesforce_from_database()  restores the selected content to salesforce from database restore_to_salesforce_from_media()  restores the selected content to salesforce from media _prepare_salesforce_restore_json()  internal method which prepares entire restore json for salesforce"
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient",
"url":185,
"doc":"Derived class from CloudAppsSubclient Base class, representing a Salesforce subclient, and to perform operations on that subclient. Constructor for the class Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient"
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.objects",
"url":185,
"doc":"getter for salesforce files option"
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.files",
"url":185,
"doc":"getter for salesforce files option"
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.metadata",
"url":185,
"doc":"getter for salesforce metadata option"
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.archived_deleted",
"url":185,
"doc":"getter for salesfoce backup archived and deleted data"
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.enable_files",
"url":185,
"doc":"Enables files option on subclient content",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.enable_metadata",
"url":185,
"doc":"Enables metadata option on subclient content",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.enable_archived_deleted",
"url":185,
"doc":"Enables backup archived deleted option on subclient content",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.disable_files",
"url":185,
"doc":"Disables files option on subclient content",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.disable_metadata",
"url":185,
"doc":"Enables metadata option on subclient content",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.disable_archived_deleted",
"url":185,
"doc":"Disables backup archived and deleted option on subclient content",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.check_object_in_browse",
"url":185,
"doc":"Check if the particular object is present in browse of the subclient Args: object_to_restore (str)  folder path whioch has to be restored browse_data (str)  list of objects from browse response Raises: SDKException: if object is not present in browse result",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.restore_to_file_system",
"url":185,
"doc":"perform restore to file system to the provided path Args: objects_to_restore (str)  list of objects to restore destination_client (str)  destination client name where cloud connector package exists if this value not provided, it will automatically use source backup client sf_options (dict) destination_path (str) : staging path for salesforce restore data. if this value is not provided, uses download cache path from source dependent_level (int) : restore children based on selected level. 0 - no Children 1 - immediate children -1 - All children default: 0 streams (int) : no of streams to use for restore default: 2 copy_precedence (int) : copy number to use for restore default: 0 from_time (str) : date to get the contents after format: dd/MM/YYYY gets content from 01/01/1970 if not specified default: 0 to_time (str) : date to get the contents before format: dd/MM/YYYY gets content till latest if not specified default: 0 show_deleted_files (bool) : include deleted files in the content or not default: True Raises: SDKException: if from time value is incorrect if to time value is incorrect if to time is less than from time if failed to browse content if response is empty if response is not success if destination client does not exist on commcell",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.restore_to_database",
"url":185,
"doc":"perform Restore to Database Args: objects_to_restore (str)  list of objects to restore destination_client (str)  destination clientname where cloud connector package exists. if this value not provided, it will automatically use source backup client sf_options (dict) destination_path (str) : staging path for salesforce restore data. if this value is not provided, it will automatically use download cache path from source db_type (str) : database type. if database details does not provided, it will use syncdb database for restore default: SQLSERVER db_host_name (str) : database hostname (ex:dbhost.company.com) db_instance (str) : database instance name (provide if applicable for that database type) db_name (str) : database database name (it is where data will be imported) db_port (str) : database connection port default: 1433 db_user_name (str) : database username (it should have read/write permissions on db) db_user_password (str) : database user password overrirde_table (bool) : overrides the tables on database default: True dependent_level (int) : restore dependent object based on selected level. 0 - no Children 1 - immediate children -1 - All children default: 0 streams (int) : no of streams to use for restore default: 2 copy_precedence (int) : copy number to use for restore default: 0 from_date (str) : date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (str) : date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 show_deleted_files (bool) : include deleted files in the content or not default: True Raises: SDKException: if from time value is incorrect if to time value is incorrect if to time is less than from time if failed to browse content if response is empty if response is not success if destination client does not exist on commcell if all the database details not provided",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.restore_to_salesforce_from_database",
"url":185,
"doc":"perform Restore to Salesforce from Database Args: objects_to_restore (str)  list of objects to restore destination_client (str)  destination pseudo client name. if this value not provided, it will automatically select source client destination_instance (str)  destination instance name. if this value not provided, it will automatically select source instance name destination_backupset (str)  destination backupset name. if this value not provided, it will automatically select source backupset sf_options (dict) destination_path (str) : staging path for salesforce restore data db_type (str) : database type. if database details does not provided, it will use syncdb database for restore default: SQLSERVER db_host_name (str) : database hostname (ex:dbhost.company.com) db_instance (str) : database instance name (provide if applicable for that database type) db_name (str) : database database name (it is where data will be imported) db_port (str) : database connection port default: 1433 db_user_name (str) : database username (read/write permissions needed on db) db_user_password (str) : database user password overrirde_table (bool) : overrides the tables on database default: True dependent_level (int) : restore children based on selected level. 0 - no Children 1 - immediate children -1 - All children default: 0 streams (int) : no of streams to use for restore default: 2 copy_precedence (int) : copy number to use for restore default: 0 from_time (str) : date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: None to_time (str) : date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: None show_deleted_files (bool) : include deleted files in the content or not default: True Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success if destination client does not exist if destination instance does not exist if destination backupset does not exist if syncdb is not enabled and user not provided the database details",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.restore_to_salesforce_from_media",
"url":185,
"doc":"perform Restore to Salesforce from Media. Args: objects_to_restore (str)  list of objects to restore destination_client (str)  destination pseudo client name. if this value not provided, it will automatically select source client destination_instance (str)  destination instance name. if this value not provided, it will automatically select source instance name destination_backupset (str)  destination backupset name. if this value not provided, it will automatically select source backupset sf_options (dict) destination_path (str) : staging path for salesforce restore data db_type (str) : database type. if database details does not provided, it will use syncdb database for restore default: SQLSERVER db_host_name (str) : database hostname (ex:dbhost.company.com) db_instance (str) : database instance name (provide if applicable for that database type) db_name (str) : database database name (it is where data will be imported) db_port (str) : database connection port default: 1433 db_user_name (str) : database username (read/write permissions needed on db) db_user_password (str) : database user password overrirde_table (bool) : overrides the tables on database default: True dependent_level (int) : restore children based on selected level. 0 - no Children 1 - immediate children -1 - All children default: 0 streams (int) : no of streams to use for restore default: 2 copy_precedence (int) : copy number to use for restore default: 0 from_time (str) : date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: None to_time (str) : date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: None show_deleted_files (bool) : include deleted files in the content or not default: True Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success if destination client does not exist if destination instance does not exist if destination backupset does not exist if user does not provide staging database details",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.metadata_restore_to_salesforce",
"url":185,
"doc":"perform Restore to Salesforce from Media. Args: metadata_list (list)  List of metadata components to restore like \"folder/component.type\" destination_client (str)  destination pseudo client name. if this value not provided, it will automatically select source client destination_instance (str)  destination instance name. if this value not provided, it will automatically select source instance name destination_backupset (str)  destination backupset name. if this value not provided, it will automatically select source backupset sf_options: destination_path (str) : staging path for salesforce restore data streams (int) : no of streams to use for restore default: 2 copy_precedence (int) : copy number to use for restore default: 0 from_time (str) : date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: None to_time (str) : date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: None show_deleted_files (bool) : include deleted files in the content or not default: True Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success if destination client does not exist if destination instance does not exist if destination backupset does not exist",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.backup",
"url":171,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup default: False incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup default: BEFORE_SYNTH Returns: object - instance of the Job class for this backup job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.salesforce_subclient.SalesforceSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient",
"url":186,
"doc":"File for operating on a Google Cloud Spanner Subclient. GoogleSpannerSubclient is the only class defined in this file. GoogleSpannerSubclient: Derived class from CloudAppsSubclient Base class, representing a Google Cloud Spanner subclient, and to perform operations on that subclient GoogleSpannerSubclient: _get_subclient_properties()  gets the properties of Google Subclient content()  sets the content of the subclient discover()  runs database discovery on subclient GoogleSpannerSubclient Attributes: content  Returns the subclient content list"
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient",
"url":186,
"doc":"Derived class from CloudAppsSubclient Base class, representing a Google Cloud Spanner subclient, and to perform operations on that subclient. Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.content",
"url":186,
"doc":"Returns the subclient content list Returns: list - list of subclient content"
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.backup",
"url":171,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup default: False incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup default: BEFORE_SYNTH Returns: object - instance of the Job class for this backup job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.spanner_subclient.GoogleSpannerSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_constants",
"url":187,
"doc":"Helper file to maintain all the constants for MS Teams subclient. TeamsConstants - Maintains constants for MS Teams subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_constants.TeamsConstants",
"url":187,
"doc":"Class to maintain all the Teams subclient related constants."
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_constants.TeamsConstants.ADD_DISCOVER_TYPE",
"url":187,
"doc":""
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_constants.TeamsConstants.ADD_SUBCLIENT_ENTITY_JSON",
"url":187,
"doc":""
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_constants.TeamsConstants.ADD_USER_JSON",
"url":187,
"doc":""
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_constants.TeamsConstants.ADD_TEAM_JSON",
"url":187,
"doc":""
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_constants.TeamsConstants.ADD_GROUP_JSON",
"url":187,
"doc":""
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_constants.TeamsConstants.ADD_REQUEST_JSON",
"url":187,
"doc":""
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_constants.TeamsConstants.BACKUP_TEAM_JSON",
"url":187,
"doc":""
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_constants.TeamsConstants.ASSOCIATIONS",
"url":187,
"doc":""
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_constants.TeamsConstants.BACKUP_SUBTASK_JSON",
"url":187,
"doc":""
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_constants.TeamsConstants.BACKUP_REQUEST_JSON",
"url":187,
"doc":""
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_constants.TeamsConstants.RESTORE_TASK_JSON",
"url":187,
"doc":""
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_constants.TeamsConstants.RESTORE_SUBTASK_JSON",
"url":187,
"doc":""
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_constants.TeamsConstants.CUSTOM_CATEGORY_JSON",
"url":187,
"doc":""
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_constants.TeamsConstants.ClOUD_APP_EDISCOVER_TYPE",
"url":187,
"doc":""
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient",
"url":188,
"doc":"File for operating on a Microsoft Office 365 Teams subclient TeamsSubclient is the only class defined in this file. TeamsSubclient: Derived class from Subclient Base class, representing a Microsoft Office 365 Teams subclient, and to perform operations on that subclient TeamsSubclient: _json_subclient_entity()  Get subclientEntity json for teams association operation discover()  Launches Discovery and returns the discovered teams. content()  Add teams, discover() must be called before teams added using this method. backup()  Backup a single or mulitple teams. out_of_place_restore()  Restore a single team or multiple teams. _json_association()  Get association json for teams restore operation _json_restoreoptions_searchprocessinginfo()  Get searchprocessingginfo json for teams restore operation _json_restoreoptions_advsearchgrp()  Get advSearchGrp json for teams restore operation _json_restoreoptions_findquery()  Get findquery json for teams restore operation _json_restoreoptions_destination()  Get destination json for teams restore operation _json_restoreoptions_msteamsrestoreoptions() Get msTeamsRestoreOptions json for teams restore operation _json_restoreoptions_cloudappsrestore()  Get cloudAppsRestoreOptions json for teams restore operation _json_restoreoptions()  Get complete restoreOptions json for teams restore operation _json_restore_options()  Get options json for teams restore operation restore_posts_to_html()  Restore posts of a team as HTML get_team()  Get team object from team email address _json_cloud_app_association()  Get cloudAppAssociation json for teams association operation set_all_users_content()  Add all teams to content _json_get_associations()  Get associations json for a team get_associated_teams()  Get all associated teams for a client remove_team_association()  Removes user association from a teams client remove_all_users_content()  Removes all user content from a teams client get_content_association()  Get all associated contents for a client exclude_teams_from_backup()  Excludes user association from a teams client _process_restore_posts_to_html()  Helper method to restore a team posts as HTML to another location _process_remove_association()  Helper method to change association of a teams client restore_out_of_place_to_file_location()  Restore a team to file location _json_restoreoptions_searchprocessinginfo_with_extra_queryparameters()  Get searchprocessinginfo with extra query parameters json for teams restore operation. _json_restore_destinationTeamInfo()  Get destinationTeamInfo json for teams restore operation. restore_files_to_out_of_place()  Restore files to another team. restore_to_original_location()  Restore team to original location."
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient",
"url":188,
"doc":"Derived class from Subclient Base class, representing a Microsoft Office 365 Teams subclient and to perform operations on that subclient. Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.discover",
"url":188,
"doc":"Launches Discovery and returns the discovered teams. Args: discovery_type (int)  Type of the discovery Example(Teams-8,users-7,groups-22). refresh_cache  Refreshes Discover cache information if True. default: True Returns: dict  Returns dictionary with team email ID as key and team properties as value. Raises: SDKException: If discovery failed to launch. If response is empty. If response is not success.",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.content",
"url":188,
"doc":"Add teams, discover() must be called before teams added using this method. Args: entities (list or dict)  List of team or user or group Email IDs or custom category conditions dict. o365_plan (str)  Name of the Office 365 plan. discovery_type (Enum)  Type of discovery (Example: Teams,Users,Groups etc) Raises: SDKException: If content failed to be set. If response is empty. If response is not success.",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.backup",
"url":188,
"doc":"Run an Incremental or Full backup. Args: teams (list)  List of team Email IDs. convert_job_to_full (bool)  True if we need to convert job to full otherwise False Default  False Returns: obj  Instance of job. Raises: SDKException: If backup failed to run. If response is empty. If response is not success.",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.out_of_place_restore",
"url":188,
"doc":"Restore a team to another location. Args: team (str)  The email ID of the team that needs to be restored. destination_team (str)  The email ID of the team to be restored to. kwargs (dict) dest_subclient_object  The subclient object of the destination client Returns: obj  Instance of job. Raises: SDKException: If restore failed to run. If response is empty. If response is not success.",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.restore_posts_to_html",
"url":188,
"doc":"Restore posts of a team as HTML. Args: team (list)  The email ID of the teams that needs to be restored. destination_team (str)  The email ID of the team to be restored to. Returns: obj  Instance of job. Raises: SDKException: If restore failed to run. If response is empty. If response is not success.",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.get_team",
"url":188,
"doc":"Get team object from team email address. Args: team (str)  The email ID of the teams that needs. Returns: obj  Instance of Team.",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.set_all_users_content",
"url":188,
"doc":"Add all teams to content Args: plan_name(str): Name of the plan to be associated with All teams content",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.get_associated_teams",
"url":188,
"doc":"Get all associated teams for a client Args: pagingInfo (dict): Dict of Page number and pageSize Returns: List of all user associations and their details",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.remove_team_association",
"url":188,
"doc":"Removes user association from a teams client Args: user_assoc (list): List of input users assoication object whose association is to be removed Returns Boolean if the association was removed successfully",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.remove_all_users_content",
"url":188,
"doc":"Removes all user content from a teams client Returns Boolean if the association was removed successfully",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.exclude_teams_from_backup",
"url":188,
"doc":"Excludes user association from a teams client Args: users (list): List of input users whose association is to be excluded Returns Boolean if the association was removed successfully",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.restore_out_of_place_to_file_location",
"url":188,
"doc":"Restore a team to file location. Args: source_team_mail (str)  The email ID of the team that needs to be restored. dest_client (str)  The name of the client to be restored to. dest_path (str)  The path of the client to be restored to. selected_items (list)  List of dictonary of properties of selected items. values (list)  Content id's of a selected items. Returns: obj  Instance of Restore job. Raises: SDKException: If restore failed to run. If response is empty. If response is not success.",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.restore_files_to_out_of_place",
"url":188,
"doc":"Restore files to another team Args: source_team_mail (str)  The email ID of the team that needs to be restored. destination_team_mail (str)  The name of the client to be restored to. channel (obj)  The object of the channel to be restored. selected_files_ids (list)  List of dictonaries of properties of selected files with contentids. values (list)  Content id's of a selected files. selected_files (list)  List of dictonaries of files name and their type. Returns: obj  Instance of Restore job. Raises: SDKException: If restore failed to run. If response is empty. If response is not success.",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.restore_to_original_location",
"url":188,
"doc":"Restore a team to original location. Args: team_email_id (str)  The email ID of the team that needs to be restored. skip_items (bool)  To skip the items. Default - True restore_posts_as_html (bool)  To restore pots as html under Files tab. Default - False Returns: obj  Instance of job. Raises: SDKException: If restore failed to run. If response is empty. If response is not success.",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.cloudapps.teams_subclient.TeamsSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.db2subclient",
"url":189,
"doc":"File for operating on a Db2 Subclient DB2Subclient is the only class defined in this file. DB2Subclient: Derived class from Subclient Base class, representing an db2 subclient, and to perform operations on that subclient Db2Subclient: __init__()  constructor for the class _get_subclient_properties()  gets the subclient related properties of db2 subclient _get_subclient_properties_json()  gets subclient property json for db2 db2_use_dedupe_device()  getter and setter for enabling dedupe device option for db2 db2_delete_log_files_after()  getter and setter for enabling delete log files after option in db2 db2_backup_log_files()  getter and setter for enabling backup log files option for db2 db2_delete_log_files_after()  getter and setter for enabling delete log file after option for db2 is_backup_data_enabled()  getter and setter for enabling backup data option enable_backupdata()  Method to enable backup data option at subclient level disable_backupdata()  Method to disable backup data option at subclient level enable_table_level()  Enable Table Level Browse enable_acs_backup()  Enable DB2 ACS snap backup"
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient",
"url":189,
"doc":"DB2Subclient is a class to work on DB2 subclients Constructor for the class Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient"
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.db2_use_dedupe_device",
"url":189,
"doc":"Getter to fetch dedupe device option Returns: Bool - True if dedupe_device is enabled on the subclient. Else False"
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.db2_delete_log_files_after",
"url":189,
"doc":"Getter to fetch status of delete log files option Returns: Bool - True if delete log files option is enabled on the subclient. Else False"
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.db2_backup_log_files",
"url":189,
"doc":"Getter to fetch backup logfiles option is enabled or not Returns: Bool - True if delete log files option is enabled on the subclient. Else False"
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.is_backup_data_enabled",
"url":189,
"doc":"Getter to fetch data backup status is enabled or disabled Returns: (bool) - boolean value is returned based on the status of data backup option"
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.enable_backupdata",
"url":189,
"doc":"To enable data backup",
"func":1
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.disable_backupdata",
"url":189,
"doc":"To disable data backup",
"func":1
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.enable_table_level",
"url":189,
"doc":"To enable table level browse",
"func":1
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.enable_acs_backup",
"url":189,
"doc":"To enable DB2 ACS backup",
"func":1
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.backup_mode_online",
"url":189,
"doc":"Getter to fetch online backup mode is enabled or disabled Returns: (bool) - boolean value is returned based on the status of data backup option 0 - online database , 1 - offline database"
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.db2_backup",
"url":189,
"doc":"Performs backup on DB2 subclient Args: backup_level (str)  Level of backup. full|incremental|differential create_backup_copy_immediately (bool)  Sybase snap job needs this backup copy operation default : False backup_copy_type (int)  backup copy job to be launched based on below two options default : 2, possible values : 1 (USING_STORAGE_POLICY_RULE), 2( USING_LATEST_CYCLE) Returns: (object) - instance of Job class Raises: SDKException: if backup level is incorrect if response is empty if response does not succeed",
"func":1
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.backup",
"url":171,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup default: False incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup default: BEFORE_SYNTH Returns: object - instance of the Job class for this backup job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.db2subclient.DB2Subclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.dbsubclient",
"url":190,
"doc":"File for operating on a Database Server Subclient DatabaseSubclient is the only class defined in this file. DatabaseSubclient: Derived class from Subclient Base class, representing a Database server subclient, and to perform operations on that subclient DatabaseSubclient: log_backup_storage_policy()  updpates the log backup storage policy for this subclient"
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient",
"url":190,
"doc":"Derived class from Subclient Base class, representing a file system subclient, and to perform operations on that subclient. Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.log_backup_storage_policy",
"url":190,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.backup",
"url":171,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup default: False incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup default: BEFORE_SYNTH Returns: object - instance of the Job class for this backup job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.dbsubclient.DatabaseSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.exchange",
"url":191,
"doc":"Initialize Exchange Subclients for the SDK."
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient",
"url":192,
"doc":"File for operating on a ContentStoreMailbox Subclient. ContentStoreMailboxSubclient is the only class defined in this file. ContentStoreMailboxSubclient: Derived class from ExchangeMailboxSubclient Base class, representing a ContentStoreMailbox subclient, and to perform operations on that subclient JournalMailboxSubclient: _get_subclient_properties()  gets the properties of UserMailbox Subclient _get_subclient_properties_json()  gets the properties JSON of UserMailbox Subclient users()  creates users association for subclient Databases()  creates Db association for the subclient Adgroups()  creates Adgroup association for subclient restore_in_place()  runs in-place restore for the subclient"
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient",
"url":192,
"doc":"Derived class from ExchangeSubclient Base class. This represents a contentstoremailbox subclient, and can perform discover and restore operations on only that subclient. Initialize the Instance object for the given ContentStoreMailbox Subclient. Args: backupset_object (object)  instance of the backupset class subclient_name (str)  subclient name subclient_id (int)  subclient id"
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.content_store_mailboxes",
"url":192,
"doc":"\"Returns the list of discovered users for the UserMailbox subclient."
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.set_contentstore_assocaition",
"url":192,
"doc":"Create User assocaition for UserMailboxSubclient. Args: subclient_content (dict)  dict of the Users to add to the subclient subclient_content = { 'mailboxNames' : [\"AutoCi2\"] 'contentStoreClients' : [shindex], 'archive_policy' : \"CIPLAN Archiving policy\", 'cleanup_policy' : 'CIPLAN Clean-up policy', 'retention_policy': 'CIPLAN Retention policy' }",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.refresh",
"url":192,
"doc":"Refresh the User Mailbox Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.cleanup",
"url":193,
"doc":"Runs a cleanup job for the subclient . Returns: object - instance of the Job class for this backup job",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.restore_in_place",
"url":193,
"doc":"Restores the mailboxes/folders specified in the input paths list to the same location. Args: paths (list)  list of paths of mailboxes/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True journal_report (bool)  Journal report is true for journal and contentStore Mailbox default: False restore_as_stub (dict)  setters for common options recovery_point_id (int)  ID of the recovery point to which the mailbox is to be restored to Default: None Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.out_of_place_restore",
"url":193,
"doc":"Restores the mailboxes/folders specified in the input paths list to the same location. Args: paths (list)  list of paths of mailboxes/folders to restore destination_client  client where the mailboxes needs to be restored destination_path  path where the mailboxes needs to be restored overwrite (bool)  unconditional overwrite files during restore default: True journal_report (bool)  Journal report is true for journal and contentStore Mailbox default: False Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.disk_restore",
"url":193,
"doc":"Restores the mailboxes/folders specified in the input paths list to the same location. Args: paths (list)  list of paths of mailboxes/folders to restore destination_client  client where the mailboxes needs to be restored destination_path  path where the mailboxes needs to be restored overwrite (bool)  unconditional overwrite files during restore default: True journal_report (bool)  Journal report is true for journal and contentStore Mailbox default: False Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.pst_restore",
"url":193,
"doc":"Restores the Mailbox/Emails specified in the input paths list to the PST PATH location. Args: paths (list)  list of paths of mailboxes/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True journal_report (bool)  Journal report is true for journal and contentStore Mailbox default: False Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.pst_ingestion",
"url":193,
"doc":"Runs a backup job for the subclient of the level specified. Returns: object - instance of the Job class for this backup job",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.subclient_content_indexing",
"url":193,
"doc":"Run content Indexing on Subclient . Args: pick_failed_items default:False (bool)  Pick fail items during Content Indexing pick_only_failed_items (bool)  Pick only fail items items during Content Indeixng default: False streams (int)  Streams for Content Indexing job default: 4 proxies (list)  provide the proxies to run CI default: None Returns: object - instance of the Job class for this ContentIndexing job",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.get_pst_task_json",
"url":193,
"doc":"Get task json for pst ingestion job Returns: Pst task json",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.get_pst_backup_opt_json",
"url":193,
"doc":"Get backup options json for pst ingestion job Returns: Pst backup options json",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.get_pst_data_opt_json",
"url":193,
"doc":"Get data options json for pst ingestion job Returns: Pst data options json",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.backup",
"url":171,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup default: False incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup default: BEFORE_SYNTH Returns: object - instance of the Job class for this backup job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.exchange.contentstoremailbox_subclient.ContentStoreMailboxSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient",
"url":194,
"doc":"Module for doing operations on an Exchange Database Agent. This module has operations that are applicable at the Agent level for Exchange Database. ExchangeDatabaseSubclient: _get_subclient_properties()  get the properties of the subclient, and initialize the basic properties _get_subclient_properties_json()  gets all the subclient properties of the Exchange Database subclient _set_content  Sets the content for Exchange Database subclient restore_in_place()  runs in-place restore for the subclient restore_out_of_place  runs out of place restore for the subclient set_subclient_properties()  sets the properties of this sub client create_recovery_point()  create recovery point for a database get_session()  Get the session ids for a database get_mailbox_tags()  Get the mailboxtags for mailboxes run_restore_messages()  run livebrowse restore Attributes       content  returns the content of the Exchange Database subclient"
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient",
"url":194,
"doc":"Derived class from the Subclient Base class, to perform operations specific to an Exchange Database Subclient. Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.content",
"url":194,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content added to the subclient"
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.set_exchangedb_subclient_prop",
"url":194,
"doc":"Sets the exchange DB sublcient properties Args: key (str)  property to be changed value (obj)  value to be set",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.restore_in_place",
"url":194,
"doc":"Run inplace restore for Exchange database subclient Args: paths (list)  list of path used for inplace restore client (object)  object of client class Returns: object - Job class object for restore job",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.restore_out_of_place",
"url":194,
"doc":"Run out of place restore for Exchange database subclient Args: client (str)  destination client on which the restore should run paths (list)  list of path used for out of place restore Returns: object - Job class object for restore job",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.create_recovery_point",
"url":194,
"doc":"\" Run a create recovery point job on a backup Args: db_name (str)  database name media_agent (str)  media agent name to create recovery point on expiry_days (int)  no of days to keep the recovery point default : 5 Returns: job - Job id of recovery point",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.get_session",
"url":194,
"doc":"\" Get session ids for a recovery point Args: path (str)  database name media_agent (str)  media agent name to create recovery point on edb_paths (dict)  edb paths with job Ids ex: {97297: ' SPVM\\sc_4701_job_97296_1563312295\\1563312295\\Microsoft Information Store\\AUTODBx_spvm.VAYU.COMMVAULT.COM\\EDBFILES\\AUTODBx_spvm.VAYU.COMMVAULT.COM.edb ', 97298: ' MSE-2013\\sc_4701_job_97296_1563312333\\1563312333\\Microsoft Information St ore\\AUTODBx_MSE-2013.VAYU.COMMVAULT.COM\\EDBFILES\\AUTODBx_MSE-2013.VAYU.COMMVAULT.COM.edb'} recovery_point_ids (dict)  ids of recovery point jobs ex: {97297: 834, 97298: 835} Returns: Sessionids - dictionary of sessionids",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.get_mailbox_tags",
"url":194,
"doc":"\" Get the mailbox tags for a recovery point Args: path (str)  database name media_agent (str)  media agent name to create recovery point on edb_paths (dict)  edb paths with job Ids session_ids (dict)  sessionIDs of recovery point jobs Returns: mailboxTags - dictionary of mailboxes and their tags",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.run_restore_messages",
"url":194,
"doc":"\" Run a create recovery point job on a backup Args: path (str)  database name media_agent (str)  media agent name to create recovery point on oop_path (str)  path for pst restore edb_path (dict)  edb paths with job Ids session_id (dict)  sessionIDs of recovery point jobs mailbox_tags (dict)  mailbox tags for which restore has to run Returns: Response",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.backup",
"url":171,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup default: False incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup default: BEFORE_SYNTH Returns: object - instance of the Job class for this backup job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.exchange.exchange_database_subclient.ExchangeDatabaseSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient",
"url":195,
"doc":"File for operating on a JournalMailbox Subclient. JournalMailboxSubclient is the only class defined in this file. JournalMailboxSubclient: Derived class from ExchangeMailboxSubclient Base class, representing a JournalMailbox subclient, and to perform operations on that subclient JournalMailboxSubclient: users()  creates users association for subclient restore_in_place()  runs in-place restore for the subclient"
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient",
"url":195,
"doc":"Derived class from ExchangeSubclient Base class. This represents a JournalMailbox subclient, and can perform discover and restore operations on only that subclient. Initialize the Instance object for the given JournalMailbox Subclient. Args: backupset_object (object)  instance of the backupset class subclient_name (str)  subclient name subclient_id (int)  subclient id"
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.discover_journal_users",
"url":195,
"doc":"\"Returns the list of discovered journal users for the JournalMailbox subclient."
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.journal_users",
"url":195,
"doc":"Returns the list of journal users associated with JournalMailbox subclient."
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.set_journal_user_assocaition",
"url":195,
"doc":"Create Journal assocaition for JournalMailboxSubclient. Args: subclient_content (dict)  dict of the Users to add to the subclient subclient_content = { 'mailboxNames' : [\"AutoCi2\"], 'archive_policy' : \"CIPLAN Archiving policy\", 'cleanup_policy' : 'CIPLAN Clean-up policy', 'retention_policy': 'CIPLAN Retention policy',  if use_policies is False  'plan_name': 'Exchange Plan Name', 'plan_id': int or None (Optional) } user_policies (bool)  Use policies or plans for association Default: True",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.set_pst_assocaition",
"url":195,
"doc":"Create PST assocaition for JournalMailboxSubclient. Args: subclient_content (dict)  dict of the pst to add to the subclient subclient_content = { 'pstTaskName' : \"Task Name for PST\", 'folders' : ['list of folders'], 'pstOwnerManagement' : { 'defaultOwner': \"default owner if no owner is determined\", 'pstDestFolder': \"ingest psts under this folder\", 'usePSTNameToCreateChild': Boolean } }",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.refresh",
"url":195,
"doc":"Refresh the Journal Mailbox Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.cleanup",
"url":193,
"doc":"Runs a cleanup job for the subclient . Returns: object - instance of the Job class for this backup job",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.restore_in_place",
"url":193,
"doc":"Restores the mailboxes/folders specified in the input paths list to the same location. Args: paths (list)  list of paths of mailboxes/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True journal_report (bool)  Journal report is true for journal and contentStore Mailbox default: False restore_as_stub (dict)  setters for common options recovery_point_id (int)  ID of the recovery point to which the mailbox is to be restored to Default: None Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.out_of_place_restore",
"url":193,
"doc":"Restores the mailboxes/folders specified in the input paths list to the same location. Args: paths (list)  list of paths of mailboxes/folders to restore destination_client  client where the mailboxes needs to be restored destination_path  path where the mailboxes needs to be restored overwrite (bool)  unconditional overwrite files during restore default: True journal_report (bool)  Journal report is true for journal and contentStore Mailbox default: False Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.disk_restore",
"url":193,
"doc":"Restores the mailboxes/folders specified in the input paths list to the same location. Args: paths (list)  list of paths of mailboxes/folders to restore destination_client  client where the mailboxes needs to be restored destination_path  path where the mailboxes needs to be restored overwrite (bool)  unconditional overwrite files during restore default: True journal_report (bool)  Journal report is true for journal and contentStore Mailbox default: False Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.pst_restore",
"url":193,
"doc":"Restores the Mailbox/Emails specified in the input paths list to the PST PATH location. Args: paths (list)  list of paths of mailboxes/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True journal_report (bool)  Journal report is true for journal and contentStore Mailbox default: False Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.pst_ingestion",
"url":193,
"doc":"Runs a backup job for the subclient of the level specified. Returns: object - instance of the Job class for this backup job",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.subclient_content_indexing",
"url":193,
"doc":"Run content Indexing on Subclient . Args: pick_failed_items default:False (bool)  Pick fail items during Content Indexing pick_only_failed_items (bool)  Pick only fail items items during Content Indeixng default: False streams (int)  Streams for Content Indexing job default: 4 proxies (list)  provide the proxies to run CI default: None Returns: object - instance of the Job class for this ContentIndexing job",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.get_pst_task_json",
"url":193,
"doc":"Get task json for pst ingestion job Returns: Pst task json",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.get_pst_backup_opt_json",
"url":193,
"doc":"Get backup options json for pst ingestion job Returns: Pst backup options json",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.get_pst_data_opt_json",
"url":193,
"doc":"Get data options json for pst ingestion job Returns: Pst data options json",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.backup",
"url":171,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup default: False incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup default: BEFORE_SYNTH Returns: object - instance of the Job class for this backup job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.exchange.journalmailbox_subclient.JournalMailboxSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient",
"url":196,
"doc":"File for operating on a UserMailbox Subclient. UsermailboxSubclient is the only class defined in this file. UsermailboxSubclient: Derived class from ExchangeMailboxSubclient Base class, representing a UserMailbox subclient, and to perform operations on that subclient UsermailboxSubclient:            _get_subclient_properties()  gets the properties of UserMailbox Subclient _get_subclient_properties_json()  gets the properties JSON of UserMailbox Subclient _get_discover_adgroups()  Get the discovered AD Groups _get_discover_users()  Get the discovered users _association_json_with_plan()  Create the Association JSON for associations using Exchange Plan _association_mailboxes_json()  Association for particular mailboxes _task_json_for_backup()  JSON for backup task for Exchange User mailbox Subclient _backup_generic_items_json()  JSON to backup generic items Content Association Methods:                set_user_assocaition()  Set exchange users association set_pst_association()  Create PST association for UserMailboxSubclient set_fs_association_for_pst()  Helper method to create pst association for PST Ingestion by FS association set_adgroup_associations()  Create Association for ADGroups set_o365group_asscoiations()  Create O365 group association delete_user_assocaition()  Delete User Association from content delete_o365group_association()  Delete Office 365 Group Association delete_database_assocaition()  Delete Exchange DB Association delete_adgroup_assocaition  Delete association for an AD Group enable_allusers_association()  Enable association for all mailboxes disable_allusers_association()  Disable All Users Association enable_auto_discover_association  Enable Association for Auto Discovered Content viz. All Public Folders/ All Mailboxes/ All Group Mailboxes delete_auto_discover_association  Delete Association for Auto Discovered Content  viz. All Public Folders/ All Mailboxes/ All Group Mailboxes enable_ews_support()  Enables EWS Support for backup for ON_PREM Mailboxes Browse/ Restore/ Backup Methods:                browse_mailboxes()  Backup specific mailboxes backup_generic_items()  Backup Generic Items viz. All Public Folders/ All User Mailboxes/ All Group Mailboxes backup_mailboxes()  Backup selected mailboxes restore_in_place()  runs in-place restore for the subclient create_recovery_point()  Create a recovery point for a mailbox User Mailbox Subclient Instance Attributes:                discover_users  Dictionary of users discovered discover_databases  Dictionary of databases discovered adgroups  Dictionary of discovered AD Groups o365groups  Dictionary of discovered Office 365 Groups"
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient",
"url":196,
"doc":"Derived class from ExchangeSubclient Base class. This represents a usermailbox subclient, and can perform discover and restore operations on only that subclient. Initialize the Instance object for the given UserMailbox Subclient. Args: backupset_object (object)  instance of the backupset class subclient_name (str)  subclient name subclient_id (int)  subclient id"
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.discover_users",
"url":196,
"doc":"\"Returns the list of discovered users for the UserMailbox subclient."
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.discover_databases",
"url":196,
"doc":"Returns the list of discovered databases for the UserMailbox subclient."
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.discover_adgroups",
"url":196,
"doc":"Returns the list of discovered AD groups for the UserMailbox subclient."
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.users",
"url":196,
"doc":"Returns the list of users associated with UserMailbox subclient."
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.databases",
"url":196,
"doc":"Returns the list of databases associated with the UserMailbox subclient."
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.adgroups",
"url":196,
"doc":"Returns the list of AD groups associated with the UserMailbox subclient."
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.o365groups",
"url":196,
"doc":"Returns the list of discovered O365 groups for the UserMailbox subclient."
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.set_user_assocaition",
"url":196,
"doc":"Create User assocaition for UserMailboxSubclient. Args: subclient_content (dict)  dict of the Users to add to the subclient subclient_content = { 'mailboxNames' : [\"AutoCi2\"]  if use_policies is True  'archive_policy' : \"CIPLAN Archiving policy\", 'cleanup_policy' : 'CIPLAN Clean-up policy', 'retention_policy': 'CIPLAN Retention policy'  if use_policies is False  'plan_name': 'Exchange Plan Name', 'plan_id': int or None (Optional)  }",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.set_pst_association",
"url":196,
"doc":"Create PST assocaition for UserMailboxSubclient. Args: subclient_content (dict)  dict of the pst to add to the subclient subclient_content = { 'pstTaskName' : \"Task Name for PST\", 'folders' : ['list of folders']  If pst ingestion by folder location, 'fsContent': Dictionary of client, backupset, subclient Ex: {'client1':{'backupset1':[subclient1], 'backupset2':None}, 'client2': None} This would add subclient1, all subclients under backupset2 and all backupsets under client2 to the association 'pstOwnerManagement' : { 'defaultOwner': \"default owner if no owner is determined\", 'pstDestFolder': \"ingest psts under this folder\", 'usePSTNameToCreateChild': Boolean } }",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.set_fs_association_for_pst",
"url":196,
"doc":"Helper method to create pst association for PST Ingestion by FS Args: association(dict)  Dictionary of client, backupset, subclient Ex: {'client1':{'backupset1':[subclient1], 'backupset2':None}, 'client2': None} This would add subclient1, all subclients under backupset2 and all backupsets under client2 to the association",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.set_database_assocaition",
"url":196,
"doc":"Create Database assocaition for UserMailboxSubclient. Args: subclient_content (dict)  dict of the databases to add to the subclient subclient_content = { 'databaseNames' : [\"SGDB-1\"], 'is_auto_discover_user' : True, 'archive_policy' : \"CIPLAN Archiving policy\", 'cleanup_policy' : 'CIPLAN Clean-up policy', 'retention_policy': 'CIPLAN Retention policy', }",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.set_adgroup_associations",
"url":196,
"doc":"Create Ad groups assocaition for UserMailboxSubclient. Args: subclient_content (dict)  dict of the adgroups to add to the subclient subclient_content = { 'adGroupNames' : [\"_Man5_Man5_\"], 'is_auto_discover_user' : True, 'archive_policy' : \"CIPLAN Archiving policy\", 'cleanup_policy' : 'CIPLAN Clean-up policy', 'retention_policy': 'CIPLAN Retention policy', }",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.set_o365group_asscoiations",
"url":196,
"doc":"Create O365 Group association for UserMailboxSubclient. Args: subclient_content (dict)  dict of the policies to associate subclient_content = { 'archive_policy' : \"CIPLAN Archiving policy\", 'cleanup_policy' : 'CIPLAN Clean-up policy', 'retention_policy': 'CIPLAN Retention policy' }",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.delete_user_assocaition",
"url":196,
"doc":"delete User assocaition for UserMailboxSubclient. Args: subclient_content (dict)  dict of the Users to delete from subclient subclient_content = { 'mailboxNames' : [\"AutoCi2\"],  if use_policies is True  'archive_policy' : \"CIPLAN Archiving policy\", 'cleanup_policy' : 'CIPLAN Clean-up policy', 'retention_policy': 'CIPLAN Retention policy'   if use_policies is False  'plan_name': Plan Name, 'plan_id': int or None (Optional)  } use_policies (bool)  If True uses policies else uses Plan",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.delete_o365group_association",
"url":196,
"doc":"delete O365 group association for UserMailboxSubclient. Args: subclient_content (dict)  dict of the Users to delete from subclient subclient_content = { 'mailboxNames' : [\"AutoCi2\"], 'archive_policy' : \"CIPLAN Archiving policy\", 'cleanup_policy' : 'CIPLAN Clean-up policy', 'retention_policy': 'CIPLAN Retention policy' }",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.delete_database_assocaition",
"url":196,
"doc":"Deletes Database assocaition for UserMailboxSubclient. Args: subclient_content (dict)  dict of the databases to delete from subclient subclient_content = { 'databaseNames' : [\"SGDB-1\"], 'is_auto_discover_user' : True, 'archive_policy' : \"CIPLAN Archiving policy\", 'cleanup_policy' : 'CIPLAN Clean-up policy', 'retention_policy': 'CIPLAN Retention policy', }",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.delete_adgroup_assocaition",
"url":196,
"doc":"Deletes Ad groups assocaition for UserMailboxSubclient. Args: subclient_content (dict)  dict of the adgroups to delete from subclient subclient_content = { 'adGroupNames' : [\"_Man5_Man5_\"], 'is_auto_discover_user' : True, 'archive_policy' : \"CIPLAN Archiving policy\", 'cleanup_policy' : 'CIPLAN Clean-up policy', 'retention_policy': 'CIPLAN Retention policy', }",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.enable_allusers_associations",
"url":196,
"doc":"Enable all users assocaition for UserMailboxSubclient. Args: subclient_content (dict)  dict of the policies which needs to be assigned to all user assocaitions subclient_content = { 'is_auto_discover_user' : True 'archive_policy' : \"CIPLAN Archiving policy\", 'cleanup_policy' : 'CIPLAN Clean-up policy', 'retention_policy': 'CIPLAN Retention policy', }",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.disable_allusers_associations",
"url":196,
"doc":"Disables alluser assocaition for UserMailboxSubclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.enable_auto_discover_association",
"url":196,
"doc":"Enable all users assocaition for UserMailboxSubclient. Args: association_name (str)  Type of auto discover association Valid Values: \"All Users\" \"All O365 Mailboxes\" \"All Public Folders\" plan_name (str)  Name of the plan to associate with users/groups",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.delete_auto_discover_association",
"url":196,
"doc":"Delete all users association for UserMailboxSubclient. Args: association_name (str)  Type of auto discover association Valid Values: \"All Users\" \"All O365 Mailboxes\" \"All Public Folders\" subclient_content (dict) - containing the information of users/groups if use_policies is True subclient_content={ \"is_auto_dicover_user\" (bool): True \"archive_policy\" (obj): Archive Policy object \"cleanup_policy\" (obj): Cleanup Policy Object \"retention_policy\" (obj): Retention Policy Object } if use_policies is False subclient_content={ \"is_auto_discover_user\" (bool): True, \"plan_name\" (str): Name of the exchange plan }",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.enable_ews_support",
"url":196,
"doc":"This function provides support for EWS protocol to backup on-prem mailboxes Args: service_url (string)  EWS Connection URL for your exchange server Returns: None",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.browse_mailboxes",
"url":196,
"doc":"This function returns the mailboxes available for OOP restore return: dictionary containing mailbox info",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.backup_generic_items",
"url":196,
"doc":"Backups the Generic Items for any Exchange Online Client GGeneric Items: All Public Folders/ All O365 Group ailboxes/ All Users Args: subclient_content (list) List having dictionary of items to be backed up subclient_content = [ { \"associationName\" : \"All Public Folders\", \"associationType\":12 }, { \"associationName\" : \"All Users\", \"associationType\":12 } ]",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.backup_mailboxes",
"url":196,
"doc":"Backup specific mailboxes. Args: mailbox_alias_names(list): alias names of all the mailboxes to backup Sample Values: ['aj', 'tkumar'] Returns: job(Job): instance of job class for the backup job",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.create_recovery_point",
"url":196,
"doc":"Method to create a recovery point Arguments: mailbox_prop (dict) Dictionary of mailbox properties for which the Recovery point is to be created Sample: { 'mailbox_smtp' : name of the mailbox for which recovery point is to be created 'mailbox_guid': GUID of the mailbox 'index_server': Name of the index server to be used to create index on } job (object) Backup Job to which restore point has to be created job_id (int) Backup Job ID to which restore point is to be created Either pass the job object or the job_id Returns: res_dict (dict) Dictionary of Response Format: { 'rercovery_point_id' : ID of the recovery point created, 'recovery_point_job_id': Job ID for recovery point creation JOB }",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.refresh",
"url":196,
"doc":"Refresh the User Mailbox Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.cleanup",
"url":193,
"doc":"Runs a cleanup job for the subclient . Returns: object - instance of the Job class for this backup job",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.restore_in_place",
"url":193,
"doc":"Restores the mailboxes/folders specified in the input paths list to the same location. Args: paths (list)  list of paths of mailboxes/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True journal_report (bool)  Journal report is true for journal and contentStore Mailbox default: False restore_as_stub (dict)  setters for common options recovery_point_id (int)  ID of the recovery point to which the mailbox is to be restored to Default: None Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.out_of_place_restore",
"url":193,
"doc":"Restores the mailboxes/folders specified in the input paths list to the same location. Args: paths (list)  list of paths of mailboxes/folders to restore destination_client  client where the mailboxes needs to be restored destination_path  path where the mailboxes needs to be restored overwrite (bool)  unconditional overwrite files during restore default: True journal_report (bool)  Journal report is true for journal and contentStore Mailbox default: False Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.disk_restore",
"url":193,
"doc":"Restores the mailboxes/folders specified in the input paths list to the same location. Args: paths (list)  list of paths of mailboxes/folders to restore destination_client  client where the mailboxes needs to be restored destination_path  path where the mailboxes needs to be restored overwrite (bool)  unconditional overwrite files during restore default: True journal_report (bool)  Journal report is true for journal and contentStore Mailbox default: False Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.pst_restore",
"url":193,
"doc":"Restores the Mailbox/Emails specified in the input paths list to the PST PATH location. Args: paths (list)  list of paths of mailboxes/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True journal_report (bool)  Journal report is true for journal and contentStore Mailbox default: False Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.pst_ingestion",
"url":193,
"doc":"Runs a backup job for the subclient of the level specified. Returns: object - instance of the Job class for this backup job",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.subclient_content_indexing",
"url":193,
"doc":"Run content Indexing on Subclient . Args: pick_failed_items default:False (bool)  Pick fail items during Content Indexing pick_only_failed_items (bool)  Pick only fail items items during Content Indeixng default: False streams (int)  Streams for Content Indexing job default: 4 proxies (list)  provide the proxies to run CI default: None Returns: object - instance of the Job class for this ContentIndexing job",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.get_pst_task_json",
"url":193,
"doc":"Get task json for pst ingestion job Returns: Pst task json",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.get_pst_backup_opt_json",
"url":193,
"doc":"Get backup options json for pst ingestion job Returns: Pst backup options json",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.get_pst_data_opt_json",
"url":193,
"doc":"Get data options json for pst ingestion job Returns: Pst data options json",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.backup",
"url":171,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup default: False incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup default: BEFORE_SYNTH Returns: object - instance of the Job class for this backup job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.exchange.usermailbox_subclient.UsermailboxSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.exchsubclient",
"url":193,
"doc":"File for operating on an Exchange Subclient. ExchangeSubclient is the only class defined in this file. ExchangeSubclient: Derived class from Subclient Base class, representing an Exchange Mailbox Agent subclient, and to perform operations on that subclient. ExchangeSubclient: __new__()  Method to create object based on the backupset name"
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient",
"url":193,
"doc":"Derived class from Subclient Base class, representing an Exchange subclient, and to perform operations on that subclient. Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.cleanup",
"url":193,
"doc":"Runs a cleanup job for the subclient . Returns: object - instance of the Job class for this backup job",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.restore_in_place",
"url":193,
"doc":"Restores the mailboxes/folders specified in the input paths list to the same location. Args: paths (list)  list of paths of mailboxes/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True journal_report (bool)  Journal report is true for journal and contentStore Mailbox default: False restore_as_stub (dict)  setters for common options recovery_point_id (int)  ID of the recovery point to which the mailbox is to be restored to Default: None Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.out_of_place_restore",
"url":193,
"doc":"Restores the mailboxes/folders specified in the input paths list to the same location. Args: paths (list)  list of paths of mailboxes/folders to restore destination_client  client where the mailboxes needs to be restored destination_path  path where the mailboxes needs to be restored overwrite (bool)  unconditional overwrite files during restore default: True journal_report (bool)  Journal report is true for journal and contentStore Mailbox default: False Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.disk_restore",
"url":193,
"doc":"Restores the mailboxes/folders specified in the input paths list to the same location. Args: paths (list)  list of paths of mailboxes/folders to restore destination_client  client where the mailboxes needs to be restored destination_path  path where the mailboxes needs to be restored overwrite (bool)  unconditional overwrite files during restore default: True journal_report (bool)  Journal report is true for journal and contentStore Mailbox default: False Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.pst_restore",
"url":193,
"doc":"Restores the Mailbox/Emails specified in the input paths list to the PST PATH location. Args: paths (list)  list of paths of mailboxes/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True journal_report (bool)  Journal report is true for journal and contentStore Mailbox default: False Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.pst_ingestion",
"url":193,
"doc":"Runs a backup job for the subclient of the level specified. Returns: object - instance of the Job class for this backup job",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.subclient_content_indexing",
"url":193,
"doc":"Run content Indexing on Subclient . Args: pick_failed_items default:False (bool)  Pick fail items during Content Indexing pick_only_failed_items (bool)  Pick only fail items items during Content Indeixng default: False streams (int)  Streams for Content Indexing job default: 4 proxies (list)  provide the proxies to run CI default: None Returns: object - instance of the Job class for this ContentIndexing job",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.get_pst_task_json",
"url":193,
"doc":"Get task json for pst ingestion job Returns: Pst task json",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.get_pst_backup_opt_json",
"url":193,
"doc":"Get backup options json for pst ingestion job Returns: Pst backup options json",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.get_pst_data_opt_json",
"url":193,
"doc":"Get data options json for pst ingestion job Returns: Pst data options json",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.backup",
"url":171,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup default: False incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup default: BEFORE_SYNTH Returns: object - instance of the Job class for this backup job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.exchsubclient.ExchangeSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.fssubclient",
"url":176,
"doc":"File for operating on a File System Subclient FileSystemSubclient is the only class defined in this file. FileSystemSubclient: Derived class from Subclient Base class, representing a file system subclient, and to perform operations on that subclient FileSystemSubclient: _get_subclient_properties()  initializes the subclient related properties of the File System subclient _get_subclient_properties_json()  gets all the subclient related properties of the File System subclient _common_backup_options()  Generates the advanced job options dict _advanced_backup_options()  sets the advanced backup options enable_content_indexing  Enables Content indexing and add the policy associations disable_content_indexing  Disables Content indexing and disassociate the CI policy find_all_versions()  returns the dict containing list of all the backed up versions of specified file backup()  run a backup job for the subclient run_backup_copy()  Runs the backup copy job from Subclient restore_in_place()  Restores the files/folders specified in the input paths list to the same location. restore_out_of_place()  Restores the files/folders specified in the input paths list to the input client, at the specified destionation location FileSystemSubclient Instance Attributes:                    =  _fs_subclient_prop  Returns the JSON for the fsSubclientProp tag in the Subclient Properties JSON  content  update the content of the subclient  filter_content  update the filter of the subclient  exception_content  update the exception of the subclient  scan_type  update the scan type of the subclient  trueup_option  enable/disable trueup option of the subclient  backup_retention  enable/disable backup retention for the subclient  backup_retention_days  set number of days for backup retention  archiver_retention  enable/disable archiver_retention of the subclient.  archiver_retention_days  set number of days for archiver retention  file_version  set version mode and no of version or days  disk_cleanup  enable/disable disk cleanup tab  disk_cleanup_rules  update rules for disk_cleanup  backup_only_archiving_candidate  enable or disable backup only candidate on the subclient  trueup_days  update trueup after  n days value of the subclient  generate_signature_on_ibmi  enable or disable signature generation on ibmi  backup_using_multiple_drives  enable or disable VTL multiple drives for ibmi subclient.  pending_record_changes  Updates the pending record changes value on ibmi subclient.  other_pending_changes  Updates the other pending changes value on ibmi subclient.  object_level_backup  enable or disable object level backup for ibmi subclient  global_filter_status  returns the status whther to include global filters  enable_synclib  enable or disable SAVACT option for ibmi subclients.  software_compression  The software compression setting's value for the subclient.  use_vss  The Use VSS setting's value for the subclient.  block_level_backup_option  Enable/Disable Blocklevel Option on subclient  create_file_level_index_option  Enable/Disable Metadata collection Option on subclient  system_state_option  Enable/Disable System state option for the subclient  _dc_options_dict  Data Classification plan Options  enable_dc_content_indexing  Enable Dataclassification Indexing option.  onetouch_option  Enable/Disable One-Touch option for the subclient  onetouch_server  Provides the 1-touch server name  onetouch_server_directory  Provides the 1-touch server directory  catalog_acl  To enable/disable ACL on the subclient  index_server  Sets/gets the index server client for the subclient  index_pruning_type  Sets the index pruning type  index_pruning_days_retention  Sets the number of days to be maintained in subclient index  index_pruning_cycles_retention  Sets the number of cycles to be maintained in subclient index  ibmi_dr_config  Sets the subclient into one touch mode and adds ibmi DR parameters  backup_savf_file_data  Sets the savf file data property for ibmi backup.  backup_spool_file_data  Gets the value of spool file data on ibmi option for IBMi subclient  backup_queue_data  Gets the value of queue data data on ibmi option for IBMi subclient.  backup_private_authorities  Gets the value of private authorities on ibmi option for IBMi subclient.  target_release  Gets the value of target and release on ibmi option for IBMi subclient.  save_access_path  Gets the value of save access path on ibmi option for IBMi subclient.  update_history  Updates the update history property value on ibmi subclient.  ibmi_compression  Gets the value of IBMi compression property on ibmi option for IBMi subclient.  save_while_active_option  Set the save while active options for an IBMi subclient.  pre_post_commands  Sets the pre/post commands for the subclient.  backup_nodes  Sets backup nodes for FS Agent under Network Share clients.  impersonate_user  Impersonation information for the subclient."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient",
"url":176,
"doc":"Derived class from Subclient Base class, representing a file system subclient, and to perform operations on that subclient. Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.content",
"url":176,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.filter_content",
"url":176,
"doc":"Treats the subclient filter content as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.exception_content",
"url":176,
"doc":"Treats the subclient exception content as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.scan_type",
"url":176,
"doc":"Gets the appropriate scan type for this Subclient Returns: int 1 - Recursive Scan 2 - Optimized Scan 3 - Change Journal Scan"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.trueup_option",
"url":176,
"doc":"Gets the value of TrueUp Option Returns: True - if trueup is enabled on the subclient False - if trueup is not enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.run_backup_copy",
"url":176,
"doc":"Runs the backup copy from Commcell for the given subclient Args: None Returns: object - instance of the Job class for this backup copy job Raises: SDKException: if backup copy job failed if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.backup_retention",
"url":176,
"doc":"return if backup retention is enabled or not Returns: True - if backup_retention is enabled for the subclient False - if backup_rentention is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.block_level_backup_option",
"url":176,
"doc":"Gets the block level option Returns: true - if blocklevel is enabled on the subclient false - if blocklevel is not enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.enable_dc_content_indexing",
"url":176,
"doc":"Creates the JSON with the specified dataclassification plan to pass to API to update file system Subclient Args: dcplan_name (String)  DC plan name",
"func":1
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.create_file_level_index_option",
"url":176,
"doc":"Gets the value of Metadata collection Option Returns: true - if metadata collection is enabled on the subclient false - if metadata collection is not enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.backup_retention_days",
"url":176,
"doc":"return number of days for backup retention Returns: (int)"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.system_state_option",
"url":176,
"doc":"Checks whether the system state option is enabled Returns: True - if system state property is enabled for the subclient False - if system state property is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.onetouch_option",
"url":176,
"doc":"Checks whether the onetouch option is enabled Returns: True - if system state property is enabled for the subclient False - if system state property is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.onetouch_server",
"url":176,
"doc":"Returns: Onetouch Server Name"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.onetouch_server_directory",
"url":176,
"doc":"Returns the onetouch server directory"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.trueup_days",
"url":176,
"doc":"Gets the trueup after n days value for this Subclient Returns: int"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.archiver_retention",
"url":176,
"doc":"return the value of archiver retention or modified time retention Returns: True - if archiver or modified time retention is enabled for the subclient False - if archiver or modified time retention is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.archiver_retention_days",
"url":176,
"doc":"return number of days for archiver or modified time retention Return: (int)"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.disk_cleanup",
"url":176,
"doc":"return value of disk cleanup of the subclient Returns: True - if disk Cleanup is enabled for the subclient False - if disk Cleanup is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.disk_cleanup_rules",
"url":176,
"doc":"return disk cleanup rules for this FileSystem Subclient Return: (dict)  disk clean up rules"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.backup_only_archiving_candidate",
"url":176,
"doc":"To get the value of backup only archiving candidate Returns: True - if backup only archiving candidate is enabled for the subclient False - if backup only archiving candidate is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.file_version",
"url":176,
"doc":"Returns: (dict)  file version mode"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.generate_signature_on_ibmi",
"url":176,
"doc":"Gets the value of generate signature on ibmi option for IBMi subclient. Returns: False - if signature generation on IBMi is enabled on the subclient True - if signature generation on IBMi is not enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.backup_using_multiple_drives",
"url":176,
"doc":"Gets the value of VTL multiple drives on ibmi option for IBMi subclient. Returns: False - if multiple drives is not enabled. True - if multiple drives is enabled."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.pending_record_changes",
"url":176,
"doc":"Gets the value of pending record changes option for IBMi subclient. Returns: False - if multiple drives is not enabled. True - if multiple drives is enabled."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.other_pending_changes",
"url":176,
"doc":"Gets the value of other pending changes for IBMi subclient. Returns: False - if multiple drives is not enabled. True - if multiple drives is enabled."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.object_level_backup",
"url":176,
"doc":"Gets the value of object level backup option for IBMi subclient. Returns: True - if object level backup is enabled on the subclient False - if object level backup is not enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.global_filter_status",
"url":176,
"doc":"Returns the status whether the global filters are included in configuration"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.enable_synclib",
"url":176,
"doc":"Return the save while active options for an IBMi subclient. Returns: (dict)  Dictionary of synclib options"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.software_compression",
"url":176,
"doc":"Returns the software compression status for this subclient. Returns: int 1 - On Client 2 - On Media Agent 3 - Use Storage Policy Settings 4 - Off"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.use_vss",
"url":176,
"doc":"Returns the value of the Use VSS options for Windows FS subclients. Returns: dict Dictionary contains the keys 'useVSS', 'vssOptions' and 'useVssForAllFilesOptions'. useVSS: True - ENABLED False - DISABLED vssOptions: 1 - For all files 2 - For locked files only useVssForAllFilesOptions: 1 - Fail the job 2 - Continue and reset access time 3 - Continue and do not reset access time"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.find_all_versions",
"url":176,
"doc":"Searches the content of a Subclient. Args: Dictionary of browse options: Example: find_all_versions({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) (OR) Keyword argument of browse options: Example: find_all_versions( path='c:\\hello.txt', show_deleted=True, to_time='2016-04-31 12:00:00' ) Refer self._default_browse_options for all the supported options Returns: dict - dictionary of the specified file with list of all the file versions and additional metadata retrieved from browse",
"func":1
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.backup",
"url":176,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup default: False incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup default: BEFORE_SYNTH on_demand_input (str)  input directive file location for on demand subclient only applicable in case of on demand subclient default: None advanced_options (dict)  advanced backup options to be included while making the request default: None options: directive_file : path to the directive file adhoc_backup : if set triggers the adhoc backup job adhoc_backup_contents : sets the contents for adhoc backup inline_backup_copy : to run backup copy immediately(inline) skip_catalog : skip catalog for intellisnap operation start_new_media : enables the option to start new media for the job media_agent_name : to run backup via this media agent impersonate_gui : sets the initiatedFrom property to GUI if True common_backup_options (dict)  advanced job options to be included while making request default: None options: job_description : job description to be set. enable_number_of_retries : enables/disables the property, number of retrys. values: True/False number_of_retries : total number of retries to be set. enable_total_running_time : enables/disables the property, toal running time. values: True/False total_running_time : total run time to be set in (secs) kill_running_job_when_total_running_time_expires : enables/disables the property. values: True/False start_in_suspended_state : enables/disables the property. values: True/False use_default_priority : enables/disables the property. values: True/False priority : three digit number to be set. default: 166 schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.restore_in_place",
"url":176,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.restore_out_of_place",
"url":176,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password : Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore is_vlr_restore : sets if the restore job is to be triggered as vlr validate_only : To validate data backed up for restore instant_clone_options : Options for FS clone found on Command Center, the value must be a dictionary containing the following key value pairs. reservation_time (int)  The amount of time, specified in seconds, that the mounted snapshot needs to be reserved for before it is cleaned up. This is an OPTIONAL key. Default : 3600 clone_mount_path (str)  The path to which the snapshot needs to be mounted. This is NOT an optional key. post_clone_script (str)  The script that will run post clone. This is an OPTIONAL key. clone_cleanup_script (str)  The script that will run after clean up. This is an OPTIONAL key. no_of_streams (int)  Number of streams to be used for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.enable_content_indexing",
"url":176,
"doc":"Enables Content indexing and add the policy associations",
"func":1
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.disable_content_indexing",
"url":176,
"doc":"Disables Content indexing and disassociate the CI policy",
"func":1
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.catalog_acl",
"url":176,
"doc":"Gets the catalog acl option Returns: true - if catalog acl is enbaled on the subclient false - if catalog acl disabled on the subclient"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.index_server",
"url":176,
"doc":"Returns the index server client set for the subclient. None if no Index Server is set"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.index_pruning_type",
"url":176,
"doc":"Treats the subclient pruning type as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.index_pruning_days_retention",
"url":176,
"doc":"Returns number of days to be maintained in index by index pruning for the subclient"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.index_pruning_cycles_retention",
"url":176,
"doc":"Returns number of cycles to be maintained in index by index pruning for the subclient"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.ibmi_dr_config",
"url":176,
"doc":"Return the ibmi dr configuration Returns: (dict)  Dictionary of DR parameters"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.backup_savf_file_data",
"url":176,
"doc":"Return the ibmi savf file data configuration Returns: (bool)  Is savf file data going to be backed up"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.backup_spool_file_data",
"url":176,
"doc":"Gets the value of spool file data on ibmi option for IBMi subclient. Returns: False - if spool file data on IBMi is disabled on the subclient True - if spool file data on IBMi is enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.backup_queue_data",
"url":176,
"doc":"Gets the value of queue data data on ibmi option for IBMi subclient. Returns: False - if queue data on IBMi is disabled on the subclient True - if queue data on IBMi is enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.backup_private_authorities",
"url":176,
"doc":"Gets the value of private authorities on ibmi option for IBMi subclient. Returns: False - if PVTAUT on IBMi is disabled on the subclient True - if PVTAUT on IBMi is enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.target_release",
"url":176,
"doc":"Gets the value of target and release on ibmi option for IBMi subclient. Returns: (str) - Return the target and release string value"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.save_access_path",
"url":176,
"doc":"Gets the value of save access path on ibmi option for IBMi subclient. Returns: (str) - Return the save access path string value"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.update_history",
"url":176,
"doc":"Gets the value of update history property on ibmi option for IBMi subclient. Returns: (str) - Return the string value of update history property"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.ibmi_compression",
"url":176,
"doc":"Gets the value of IBMi compression property on ibmi option for IBMi subclient. Returns: (str) - Return the string value of IBMi compression property"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.save_while_active_option",
"url":176,
"doc":"Return the save while active options for an IBMi subclient. Returns: (dict)  Dictionary of save while active options"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.pre_post_commands",
"url":176,
"doc":"Return the prep_post commands set for a subclient Returns: (dict)  All the pre/post commands"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.backup_nodes",
"url":176,
"doc":"Gets the backup nodes for FS Agent under Network Share Clients."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.network_share_auto_mount",
"url":176,
"doc":"Returns the value of enableNetworkShareAutoMount, if true, the content will be auto-mounted during backup and auto-mounted during in-place restores."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.impersonate_user",
"url":176,
"doc":"Returns the username ONLY and applicable to Windows FS subclients only."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.fssubclient.FileSystemSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.hanasubclient",
"url":197,
"doc":"File for operating on a HANA Server Subclient HANAServerSubclient is the only class defined in this file. HANAServerSubclient: Derived class from Subclient Base class, representing a HANA server subclient, and to perform operations on that subclient HANAServerSubclient: _backup_request_json()  prepares the json for the backup request _get_subclient_properties()  gets the subclient related properties of SAP HANA subclient. backup()  run a backup job for the subclient"
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient",
"url":197,
"doc":"Derived class from Subclient Base class, representing a SAP HANA subclient, and to perform operations on that subclient. Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.content",
"url":197,
"doc":"Treats the subclient content as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.browse",
"url":197,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565"
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.browse_in_time",
"url":197,
"doc":""
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.find",
"url":197,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565"
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.restore_in_place",
"url":197,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success"
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.restore_out_of_place",
"url":197,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success"
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.backup",
"url":197,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential default: Differential backup_prefix (str)  the prefix that the user wish to add to the backup default: None Returns: object - instance of the Job class for this backup job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.log_backup_storage_policy",
"url":190,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.hanasubclient.SAPHANASubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.index_server_subclient",
"url":198,
"doc":"Module for operating with index server subclient IndexServerSubClient is the only class defined in this file IndexServerSubClient : Derived class from BigDataAppsSubclient Base class, representing Index Server subclient and to perform operations on that subclient IndexServerSubClient:        = __init__  initialise object of the IndexServerSubClient class run_backup  run backup job for this index server configure_backup  Edit default subclient on index server for modifying subclient role content do_restore_in_place  restores the index server index to index server client do_restore_out_of_place  restores the index server index to the specified dir on client get_file_details_from_backup  gets folder/file details from index server backup using index find _get_path_for_restore  forms path argument for restore based on index server mode"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient",
"url":198,
"doc":"Derived class from BigDataAppsSubclient, representing index server subclient, and to perform operations on that subclient Constructor for the IndexServerSubclient class Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.do_restore_in_place",
"url":198,
"doc":"Restores the indexed data for the specified role or core list to the same index location on index server Args: roles (list)  list of role name to be restored default:None (all roles defined in this subclient) Example : ['Data Analytics'] core_name (list)  list of solr core name which needs to be restore. default:None (all cores) Format : [role name/core name] Example : ['Data Analytics\\cvcorefla0'] overwrite (bool)  unconditional overwrite files during restore default: True from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None client (str)  name of solr client whose data needs to be restored.  Applicable only for solr cloud mode default : None Returns: object - instance of the Job class for this restore job Raises: SDKException: if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.do_restore_out_of_place",
"url":198,
"doc":"Restores the indexed data for the specified role or core list to any other client Args: dest_client (str)  Client where index needs to be restored dest_path (str)  folder path where index needs to be restored on client roles (list)  list of role name to be restored default:None (all roles defined in this subclient) Example : ['Data Analytics'] core_name (list)  list of solr core name which needs to be restore. default:None (all cores) Format : [role name/core name] Example : ['Data Analytics\\cvcorefla0'] overwrite (bool)  unconditional overwrite files during restore default: True from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None client (str)  name of Index server client whose data needs to be restored.  Applicable only for solr cloud mode default : None Returns: object - instance of the Job class for this restore job Raises: SDKException: if input data type is not valid if failed to initialize job",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.run_backup",
"url":198,
"doc":"Runs a backup job for the default subclient. Args: backup_level (str)  level of backup the user wish to run default: Full Returns: object - instance of the Job class for this backup job Raises: SDKException: if backup level specified is not correct if failed to start job",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.get_file_details_from_backup",
"url":198,
"doc":"Gets files/folders details from index server backup job. Args: roles (list)  list of roles whose file details needs to be fetched from backup include_files (bool)  whether to include files in response or not default : True (Both files/folders from backup will be returned) Note : Works only in the case of Windows IS, does not work for Linux IS job_id (str)  job id to be used for browse index_server_node (str)  index server client node name Note : Required compulsory in the case of unix IS when roles is not none. kwargs  Additional info ex -> core_list (list)  List of cores whose file details needs to be fetched from backup Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Raises: SDKException: if failed to do browse",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.configure_backup",
"url":198,
"doc":"Edit the default subclient for modifying role content or storage policy. Args: storage_policy (str)  Storage policy to be associated with default subclient role_content (list)  list of role names which needs to be backed up Returns: None Raises: SDKException: if input data type is not valid if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.set_data_access_nodes",
"url":175,
"doc":"Sets the Data Access Nodes for the distributed apps subclient. Args : data_access_nodes (list) : Sets the list of client nodes passed as data access node for this distributed apps subclient Raise SDK Exception : If unable to set data access nodes property of the subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.content",
"url":176,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.filter_content",
"url":176,
"doc":"Treats the subclient filter content as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.exception_content",
"url":176,
"doc":"Treats the subclient exception content as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.scan_type",
"url":176,
"doc":"Gets the appropriate scan type for this Subclient Returns: int 1 - Recursive Scan 2 - Optimized Scan 3 - Change Journal Scan"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.trueup_option",
"url":176,
"doc":"Gets the value of TrueUp Option Returns: True - if trueup is enabled on the subclient False - if trueup is not enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.run_backup_copy",
"url":176,
"doc":"Runs the backup copy from Commcell for the given subclient Args: None Returns: object - instance of the Job class for this backup copy job Raises: SDKException: if backup copy job failed if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.backup_retention",
"url":176,
"doc":"return if backup retention is enabled or not Returns: True - if backup_retention is enabled for the subclient False - if backup_rentention is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.block_level_backup_option",
"url":176,
"doc":"Gets the block level option Returns: true - if blocklevel is enabled on the subclient false - if blocklevel is not enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.enable_dc_content_indexing",
"url":176,
"doc":"Creates the JSON with the specified dataclassification plan to pass to API to update file system Subclient Args: dcplan_name (String)  DC plan name",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.create_file_level_index_option",
"url":176,
"doc":"Gets the value of Metadata collection Option Returns: true - if metadata collection is enabled on the subclient false - if metadata collection is not enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.backup_retention_days",
"url":176,
"doc":"return number of days for backup retention Returns: (int)"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.system_state_option",
"url":176,
"doc":"Checks whether the system state option is enabled Returns: True - if system state property is enabled for the subclient False - if system state property is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.onetouch_option",
"url":176,
"doc":"Checks whether the onetouch option is enabled Returns: True - if system state property is enabled for the subclient False - if system state property is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.onetouch_server",
"url":176,
"doc":"Returns: Onetouch Server Name"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.onetouch_server_directory",
"url":176,
"doc":"Returns the onetouch server directory"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.trueup_days",
"url":176,
"doc":"Gets the trueup after n days value for this Subclient Returns: int"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.archiver_retention",
"url":176,
"doc":"return the value of archiver retention or modified time retention Returns: True - if archiver or modified time retention is enabled for the subclient False - if archiver or modified time retention is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.archiver_retention_days",
"url":176,
"doc":"return number of days for archiver or modified time retention Return: (int)"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.disk_cleanup",
"url":176,
"doc":"return value of disk cleanup of the subclient Returns: True - if disk Cleanup is enabled for the subclient False - if disk Cleanup is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.disk_cleanup_rules",
"url":176,
"doc":"return disk cleanup rules for this FileSystem Subclient Return: (dict)  disk clean up rules"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.backup_only_archiving_candidate",
"url":176,
"doc":"To get the value of backup only archiving candidate Returns: True - if backup only archiving candidate is enabled for the subclient False - if backup only archiving candidate is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.file_version",
"url":176,
"doc":"Returns: (dict)  file version mode"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.generate_signature_on_ibmi",
"url":176,
"doc":"Gets the value of generate signature on ibmi option for IBMi subclient. Returns: False - if signature generation on IBMi is enabled on the subclient True - if signature generation on IBMi is not enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.backup_using_multiple_drives",
"url":176,
"doc":"Gets the value of VTL multiple drives on ibmi option for IBMi subclient. Returns: False - if multiple drives is not enabled. True - if multiple drives is enabled."
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.pending_record_changes",
"url":176,
"doc":"Gets the value of pending record changes option for IBMi subclient. Returns: False - if multiple drives is not enabled. True - if multiple drives is enabled."
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.other_pending_changes",
"url":176,
"doc":"Gets the value of other pending changes for IBMi subclient. Returns: False - if multiple drives is not enabled. True - if multiple drives is enabled."
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.object_level_backup",
"url":176,
"doc":"Gets the value of object level backup option for IBMi subclient. Returns: True - if object level backup is enabled on the subclient False - if object level backup is not enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.global_filter_status",
"url":176,
"doc":"Returns the status whether the global filters are included in configuration"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.enable_synclib",
"url":176,
"doc":"Return the save while active options for an IBMi subclient. Returns: (dict)  Dictionary of synclib options"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.software_compression",
"url":176,
"doc":"Returns the software compression status for this subclient. Returns: int 1 - On Client 2 - On Media Agent 3 - Use Storage Policy Settings 4 - Off"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.use_vss",
"url":176,
"doc":"Returns the value of the Use VSS options for Windows FS subclients. Returns: dict Dictionary contains the keys 'useVSS', 'vssOptions' and 'useVssForAllFilesOptions'. useVSS: True - ENABLED False - DISABLED vssOptions: 1 - For all files 2 - For locked files only useVssForAllFilesOptions: 1 - Fail the job 2 - Continue and reset access time 3 - Continue and do not reset access time"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.find_all_versions",
"url":176,
"doc":"Searches the content of a Subclient. Args: Dictionary of browse options: Example: find_all_versions({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) (OR) Keyword argument of browse options: Example: find_all_versions( path='c:\\hello.txt', show_deleted=True, to_time='2016-04-31 12:00:00' ) Refer self._default_browse_options for all the supported options Returns: dict - dictionary of the specified file with list of all the file versions and additional metadata retrieved from browse",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.backup",
"url":176,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup default: False incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup default: BEFORE_SYNTH on_demand_input (str)  input directive file location for on demand subclient only applicable in case of on demand subclient default: None advanced_options (dict)  advanced backup options to be included while making the request default: None options: directive_file : path to the directive file adhoc_backup : if set triggers the adhoc backup job adhoc_backup_contents : sets the contents for adhoc backup inline_backup_copy : to run backup copy immediately(inline) skip_catalog : skip catalog for intellisnap operation start_new_media : enables the option to start new media for the job media_agent_name : to run backup via this media agent impersonate_gui : sets the initiatedFrom property to GUI if True common_backup_options (dict)  advanced job options to be included while making request default: None options: job_description : job description to be set. enable_number_of_retries : enables/disables the property, number of retrys. values: True/False number_of_retries : total number of retries to be set. enable_total_running_time : enables/disables the property, toal running time. values: True/False total_running_time : total run time to be set in (secs) kill_running_job_when_total_running_time_expires : enables/disables the property. values: True/False start_in_suspended_state : enables/disables the property. values: True/False use_default_priority : enables/disables the property. values: True/False priority : three digit number to be set. default: 166 schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.restore_in_place",
"url":176,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.restore_out_of_place",
"url":176,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password : Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore is_vlr_restore : sets if the restore job is to be triggered as vlr validate_only : To validate data backed up for restore instant_clone_options : Options for FS clone found on Command Center, the value must be a dictionary containing the following key value pairs. reservation_time (int)  The amount of time, specified in seconds, that the mounted snapshot needs to be reserved for before it is cleaned up. This is an OPTIONAL key. Default : 3600 clone_mount_path (str)  The path to which the snapshot needs to be mounted. This is NOT an optional key. post_clone_script (str)  The script that will run post clone. This is an OPTIONAL key. clone_cleanup_script (str)  The script that will run after clean up. This is an OPTIONAL key. no_of_streams (int)  Number of streams to be used for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.enable_content_indexing",
"url":176,
"doc":"Enables Content indexing and add the policy associations",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.disable_content_indexing",
"url":176,
"doc":"Disables Content indexing and disassociate the CI policy",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.catalog_acl",
"url":176,
"doc":"Gets the catalog acl option Returns: true - if catalog acl is enbaled on the subclient false - if catalog acl disabled on the subclient"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.index_server",
"url":176,
"doc":"Returns the index server client set for the subclient. None if no Index Server is set"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.index_pruning_type",
"url":176,
"doc":"Treats the subclient pruning type as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.index_pruning_days_retention",
"url":176,
"doc":"Returns number of days to be maintained in index by index pruning for the subclient"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.index_pruning_cycles_retention",
"url":176,
"doc":"Returns number of cycles to be maintained in index by index pruning for the subclient"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.ibmi_dr_config",
"url":176,
"doc":"Return the ibmi dr configuration Returns: (dict)  Dictionary of DR parameters"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.backup_savf_file_data",
"url":176,
"doc":"Return the ibmi savf file data configuration Returns: (bool)  Is savf file data going to be backed up"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.backup_spool_file_data",
"url":176,
"doc":"Gets the value of spool file data on ibmi option for IBMi subclient. Returns: False - if spool file data on IBMi is disabled on the subclient True - if spool file data on IBMi is enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.backup_queue_data",
"url":176,
"doc":"Gets the value of queue data data on ibmi option for IBMi subclient. Returns: False - if queue data on IBMi is disabled on the subclient True - if queue data on IBMi is enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.backup_private_authorities",
"url":176,
"doc":"Gets the value of private authorities on ibmi option for IBMi subclient. Returns: False - if PVTAUT on IBMi is disabled on the subclient True - if PVTAUT on IBMi is enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.target_release",
"url":176,
"doc":"Gets the value of target and release on ibmi option for IBMi subclient. Returns: (str) - Return the target and release string value"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.save_access_path",
"url":176,
"doc":"Gets the value of save access path on ibmi option for IBMi subclient. Returns: (str) - Return the save access path string value"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.update_history",
"url":176,
"doc":"Gets the value of update history property on ibmi option for IBMi subclient. Returns: (str) - Return the string value of update history property"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.ibmi_compression",
"url":176,
"doc":"Gets the value of IBMi compression property on ibmi option for IBMi subclient. Returns: (str) - Return the string value of IBMi compression property"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.save_while_active_option",
"url":176,
"doc":"Return the save while active options for an IBMi subclient. Returns: (dict)  Dictionary of save while active options"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.pre_post_commands",
"url":176,
"doc":"Return the prep_post commands set for a subclient Returns: (dict)  All the pre/post commands"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.backup_nodes",
"url":176,
"doc":"Gets the backup nodes for FS Agent under Network Share Clients."
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.network_share_auto_mount",
"url":176,
"doc":"Returns the value of enableNetworkShareAutoMount, if true, the content will be auto-mounted during backup and auto-mounted during in-place restores."
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.impersonate_user",
"url":176,
"doc":"Returns the username ONLY and applicable to Windows FS subclients only."
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.index_server_subclient.IndexServerSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.informixsubclient",
"url":199,
"doc":"File for operating on a Informix Subclient InformixSubclient is the only class defined in this file. InformixSubclient: Derived class from Subclient Base class, representing a Informix subclient, and to perform operations on that subclient InformixSubclient: _get_subclient_properties()  gets the subclient related properties of Informix subclient _get_subclient_properties_json()  gets all the subclient related properties of Informix subclient restore_in_place()  restores the Informix data/log files specified in the input db_space list to the same location InformixSubclient instance Attributes                   backup_mode  returns the  backup_mode of Informix subclient"
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient",
"url":199,
"doc":"Derived class from Subclient Base class, representing a Informix subclient, and to perform operations on that subclient. Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.restore_in_place",
"url":199,
"doc":"Restores the Informix data/log files specified in the input db_space list to the same location. Args: path (list)  List of dbspaces to be restored restore_type (str)  Restore type for informix instance Accepted Values: ENTIRE INSTANCE/WHOLE SYSTEM copy_precedence (str)  Copy precedence associted with storage policy physical_restore (bool)  Physical restore flag logical_restore (bool)  Logical restore flag Returns: object - instance of the Job class for this restore job",
"func":1
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.backup_mode",
"url":199,
"doc":"Returns the  backup_mode of Informix subclient"
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.backup",
"url":171,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup default: False incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup default: BEFORE_SYNTH Returns: object - instance of the Job class for this backup job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.informixsubclient.InformixSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.lndbsubclient",
"url":200,
"doc":"File for operating on a Notes Database Subclient. LNDbSubclient is the only class defined in this file. LNDbSubclient: Derived class from Subclient Base class. Represents a notes database subclient, and performs operations on that subclient LNDbSubclient: _get_subclient_properties()  gets subclient related properties of Notes Database subclient. _get_subclient_properties_json()  gets all the subclient related properties of Notes Database subclient. content()  get the content of the subclient restore_in_place()  performs an in place restore of the subclient restore_out_of_place()  performs and out of place restore of the subclient backup()  run a backup job for the subclient"
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient",
"url":200,
"doc":"Derived class from Subclient Base class, representing a LNDB subclient, and to perform operations on that subclient. Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.content",
"url":200,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.restore_in_place",
"url":200,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None common_options_dict (dict)  dictionary for all the common options options: unconditionalOverwrite : overwrite the files during restore even if they exist recoverWait : Specifies whether this restore operation must wait until resources become available if a database recovery is already taking place recoverZap : Specifies whether the IBM Domino must change the DBIID associated with the restored database recoverZapReplica : Specifies whether the restore operation changes the replica id of the restored database recoverZapIfNecessary : Specifies whether the IBM Domino can change the DBIID associated with the restored database if necessary doNotReplayTransactLogs : option to skip restoring or replaying logs Disaster Recovery special options: skipErrorsAndContinue : enables a data recovery operation to continue despite media errors disasterRecovery : run disaster recovery lndb_restore_options (dict)  dictionary for all options specific to an lndb restore options: disableReplication : disable relpication on database disableBackgroundAgents : disable background agents Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.restore_out_of_place",
"url":200,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None common_options_dict (dict)  dictionary for all the common options options: unconditionalOverwrite : overwrite the files during restore even if they exist recoverWait : Specifies whether this restore operation must wait until resources become available if a database recovery is already taking place recoverZap : Specifies whether the IBM Domino must change the DBIID associated with the restored database recoverZapReplica : Specifies whether the restore operation changes the replica id of the restored database recoverZapIfNecessary : Specifies whether the IBM Domino can change the DBIID associated with the restored database if necessary doNotReplayTransactLogs : option to skip restoring or replaying logs Disaster Recovery special options: skipErrorsAndContinue : enables a data recovery operation to continue despite media errors disasterRecovery : run disaster recovery lndb_restore_options (dict)  dictionary for all options specific to an lndb restore options: disableReplication : disable relpication on database disableBackgroundAgents : disable background agents Returns: object - instance of the Job class for this restore job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.backup",
"url":200,
"doc":"Returns the JSON request to pass to the API as per the options selected by the user. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: dict - JSON request to pass to the API",
"func":1
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.lndbsubclient.LNDbSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.lotusnotes",
"url":201,
"doc":"Initialize Lotus Notes Subclients for the SDK."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient",
"url":202,
"doc":"File for operating on a Notes Database Subclient. LNDbSubclient is the only class defined in this file. LNDbSubclient: Derived class from Subclient Base class. Represents a notes database subclient, and performs operations on that subclient LNDbSubclient: _get_subclient_properties()  gets subclient related properties of Notes Database subclient. _get_subclient_properties_json()  gets all the subclient related properties of Notes Database subclient. content()  get the content of the subclient restore_in_place()  performs an in place restore of the subclient restore_out_of_place()  performs and out of place restore of the subclient"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient",
"url":202,
"doc":"Derived class from LNSubclient Base class, representing a LNDB subclient, and to perform operations on that subclient. Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.content",
"url":202,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.restore_in_place",
"url":202,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None common_options_dict (dict)  dictionary for all the common options options: unconditionalOverwrite : overwrite the files during restore even if they exist recoverWait : Specifies whether this restore operation must wait until resources become available if a database recovery is already taking place recoverZap : Specifies whether the IBM Domino must change the DBIID associated with the restored database recoverZapReplica : Specifies whether the restore operation changes the replica id of the restored database recoverZapIfNecessary : Specifies whether the IBM Domino can change the DBIID associated with the restored database if necessary doNotReplayTransactLogs : option to skip restoring or replaying logs Disaster Recovery special options: skipErrorsAndContinue : enables a data recovery operation to continue despite media errors disasterRecovery : run disaster recovery lndb_restore_options (dict)  dictionary for all options specific to an lndb restore options: disableReplication : disable relpication on database disableBackgroundAgents : disable background agents Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.restore_out_of_place",
"url":202,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None common_options_dict (dict)  dictionary for all the common options options: unconditionalOverwrite : overwrite the files during restore even if they exist recoverWait : Specifies whether this restore operation must wait until resources become available if a database recovery is already taking place recoverZap : Specifies whether the IBM Domino must change the DBIID associated with the restored database recoverZapReplica : Specifies whether the restore operation changes the replica id of the restored database recoverZapIfNecessary : Specifies whether the IBM Domino can change the DBIID associated with the restored database if necessary doNotReplayTransactLogs : option to skip restoring or replaying logs Disaster Recovery special options: skipErrorsAndContinue : enables a data recovery operation to continue despite media errors disasterRecovery : run disaster recovery lndb_restore_options (dict)  dictionary for all options specific to an lndb restore options: disableReplication : disable relpication on database disableBackgroundAgents : disable background agents Returns: object - instance of the Job class for this restore job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.backup",
"url":203,
"doc":"Returns the JSON request to pass to the API as per the options selected by the user. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: dict - JSON request to pass to the API",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndbsubclient.LNDbSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient",
"url":204,
"doc":"File for operating on a Domino Mailbox Archiver Subclient. LNDmSubclient is the only class defined in this file. LNDmSubclient: Derived class from Subclient Base class. Represents a domino mailbox archiver subclient, and performs operations on that subclient LNDmSubclient: restore_in_place()  performs an in place restore of the subclient restore_out_of_place()  performs and out of place restore of the subclient backup()  run a backup job for the subclient"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient",
"url":204,
"doc":"Derived class from LNSubclient Base class, representing a LNDM subclient, and to perform operations on that subclient. Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.restore_in_place",
"url":204,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None common_options_dict (dict)  dictionary for all the common options options: append : append documents to the database default: False skip : skip if already present default: False unconditionalOverwrite : overwrite the documents default: False restoreOnlyStubExists : restore only if it is a stub default: False Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.restore_out_of_place",
"url":204,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None common_options_dict (dict)  dictionary for all the common options options: append : append documents to the database default: False skip : skip if already present default: False unconditionalOverwrite : overwrite the documents default: False restoreOnlyStubExists : restore only if it is a stub default: False Returns: object - instance of the Job class for this restore job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.backup",
"url":203,
"doc":"Returns the JSON request to pass to the API as per the options selected by the user. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: dict - JSON request to pass to the API",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndmsubclient.LNDmSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient",
"url":205,
"doc":"File for operating on a Notes Document Subclient. LNDocSubclient is the only class defined in this file. LNDocSubclient: Derived class from LNSubclient Base class. Represents a notes document subclient, and performs operations on that subclient LNDocSubclient: restore_in_place()  performs an in place restore of the subclient restore_out_of_place()  performs and out of place restore of the subclient"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient",
"url":205,
"doc":"Derived class from Subclient Base class, representing a LNDOC subclient, and to perform operations on that subclient. Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.restore_in_place",
"url":205,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None common_options_dict (dict)  dictionary for all the common options options: unconditionalOverwrite : overwrite the files during restore even if they exist recoverWait : Specifies whether this restore operation must wait until resources become available if a document recovery is already taking place recoverZap : Specifies whether the IBM Domino must change the DBIID associated with the restored document recoverZapReplica : Specifies whether the restore operation changes the replica id of the restored document recoverZapIfNecessary : Specifies whether the IBM Domino can change the DBIID associated with the restored document if necessary doNotReplayTransactLogs : option to skip restoring or replaying logs Disaster Recovery special options: skipErrorsAndContinue : enables a data recovery operation to continue despite media errors disasterRecovery : run disaster recovery Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.restore_out_of_place",
"url":205,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None common_options_dict (dict)  dictionary for all the common options options: overwriteDBLinks : overwrite the db links default: False overwriteDesignDoc : overwrite design documents default: False overwriteDataDoc : overwrite the data documents default: False dbLinksOnly : overwrite the db links only default: False Returns: object - instance of the Job class for this restore job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.backup",
"url":203,
"doc":"Returns the JSON request to pass to the API as per the options selected by the user. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: dict - JSON request to pass to the API",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lndocsubclient.LNDocSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient",
"url":203,
"doc":"Main file for operating on any Lotus Notes Subclient. LNSubclient is the only class defined in this file. LNSubclient: Class for representing all the Lotus Notes iDAs and performing operations on them"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient",
"url":203,
"doc":"Derived class from Subclient Base class, representing an LN subclient, and to perform operations on that subclient. Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.restore_in_place",
"url":203,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.restore_out_of_place",
"url":203,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None Returns: object - instance of the Job class for this restore job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.backup",
"url":203,
"doc":"Returns the JSON request to pass to the API as per the options selected by the user. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: dict - JSON request to pass to the API",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.lotusnotes.lnsubclient.LNSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.mysqlsubclient",
"url":206,
"doc":"File for operating on a MYSQL Subclient MYSQLSubclient is the only class defined in this file. MYSQLSubclient: Derived class from Subclient Base class, representing a MYSQL subclient, and to perform operations on that subclient MYSQLSubclient: __init__()  constructor for the class is_failover_to_production()  Sets the isFailOverToProduction flag for the subclient as the value provided as input _backup_request_json()  prepares the json for the backup request _get_subclient_properties()  Gets the subclient related properties of MYSQL subclient _get_subclient_properties_json()  get the all subclient related properties of this subclient content()  Creates the list of content JSON to pass to the API to add/update content of a MYSQL Subclient backup()  Runs a backup job for the subclient of the level specified restore_in_place()  Restores the mysql data/log files specified in the input paths list to the same location MYSQLSubclient instance Attributes:                  =  is_blocklevel_backup_enabled  Returns True if block level backup is enabled else returns false  is_proxy_enabled  Returns True if proxy is enabled in the subclient  is_failover_to_production  Returns the isFailOverToProduction flag of the subclient  content  Returns the appropriate content from the Subclient relevant to the user"
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient",
"url":206,
"doc":"Derived class from Subclient Base class, representing a MYSQL subclient, and to perform operations on that subclient. Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the MYSQLSubclient class"
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.is_blocklevel_backup_enabled",
"url":206,
"doc":"returns True if block level backup is enabled else returns false Returns: (bool) - boolean value based on blocklevel enable status True if block level is enabled False if block level is not enabled"
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.is_proxy_enabled",
"url":206,
"doc":"Returns True if proxy is enabled in the subclient Returns: (bool) - boolean value based on proxy enable status True if proxy is enabled False if proxy is not enabled"
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.is_failover_to_production",
"url":206,
"doc":"Returns the isFailOverToProduction flag of the subclient. Returns: (bool)  True if flag is set False if the flag is not set"
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.content",
"url":206,
"doc":"Returns the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.backup",
"url":206,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Differential inc_with_data (bool)  flag to determine if the incremental backup includes data or not truncate_logs_on_source (bool)  flag to determine if the logs to be truncated on master client default: False do_not_truncate_logs (bool)  flag to determine if the proxy logs needs to be truncated or not default: False schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.restore_in_place",
"url":206,
"doc":"Restores the mysql data/log files specified in the input paths list to the same location. Args: paths (list)  list of database/databases to be restored staging (str)  staging location for mysql logs during restores dest_client_name (str)  destination client name where files are to be restored dest_instance_name (str)  destination mysql instance name of destination client data_restore (bool)  for data only/data+log restore log_restore (bool)  for log only/data+log restore overwrite (bool)  unconditional overwrite files during restore default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None media_agent (str)  media agent associated default: None table_level_restore (bool)  Table level restore flag default: False clone_env (bool)  boolean to specify whether the database should be cloned or not default: False clone_options (dict)  clone restore options passed in a dict default: None Accepted format: { \"stagingLocaion\": \"/gk_snap\", \"forceCleanup\": True, \"port\": \"5595\", \"libDirectory\":  , \"isInstanceSelected\": True, \"reservationPeriodS\": 3600, \"user\":  , \"binaryDirectory\": \"/usr/bin\" } redirect_enabled (bool)  boolean to specify if redirect restore is enabled default: False redirect_path (str)  Path specified in advanced restore options in order to perform redirect restore default: None browse_jobid (int)  Browse jobid to browse and restore from default: None Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.mysqlsubclient.MYSQLSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.nassubclient",
"url":207,
"doc":"File for operating on a NAS Subclient NASSubclient is the only class defined in this file. NASSubclient: Derived class from Subclient Base class, representing a nas subclient, and to perform operations on that subclient NASSubclient: _get_subclient_properties()  gets the subclient related properties of NAS subclient. _get_subclient_properties_json()  gets all the subclient related properties of NAS subclient. content()  update the content of the subclient filter_content()  update the filter content of the subclient content()  update the content of the subclient backup()  run a backup job for the subclient restore_in_place()  run a restore in place for the subclient restore_out_of_place()  run a restore out of place for the subclient"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient",
"url":207,
"doc":"Derived class from Subclient Base class, representing a nas subclient, and to perform operations on that subclient. Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.backup",
"url":207,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup default: False incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup default: BEFORE_SYNTH on_demand_input (str)  input file location for on demand backupset default: None snap_name (str)  input for snap_name backup_offline_data (bool)  input for advanced NAS backup option backupOfflineData volume_based_backup (bool)  input for advanced NAS backup option volumeBasedBackup Returns: object - instance of the Job class for this backup job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.restore_in_place",
"url":207,
"doc":"Runs a restore job for the subclient . Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: None restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options synth_restore (bool)  Advance NAS restore option SynthRestore DAR (bool)  Advance NAS restore option DAR noRecursive (bool)  Advance NAS restore option Recursive Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.restore_out_of_place",
"url":207,
"doc":"Runs a restore job for the subclient . Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options synth_restore (bool)  Advance NAS restore option SynthRestore DAR (bool)  Advance NAS restore option DAR noRecursive (bool)  Advance NAS restore option Recursive Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.content",
"url":176,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.filter_content",
"url":176,
"doc":"Treats the subclient filter content as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.exception_content",
"url":176,
"doc":"Treats the subclient exception content as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.scan_type",
"url":176,
"doc":"Gets the appropriate scan type for this Subclient Returns: int 1 - Recursive Scan 2 - Optimized Scan 3 - Change Journal Scan"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.trueup_option",
"url":176,
"doc":"Gets the value of TrueUp Option Returns: True - if trueup is enabled on the subclient False - if trueup is not enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.run_backup_copy",
"url":176,
"doc":"Runs the backup copy from Commcell for the given subclient Args: None Returns: object - instance of the Job class for this backup copy job Raises: SDKException: if backup copy job failed if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.backup_retention",
"url":176,
"doc":"return if backup retention is enabled or not Returns: True - if backup_retention is enabled for the subclient False - if backup_rentention is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.block_level_backup_option",
"url":176,
"doc":"Gets the block level option Returns: true - if blocklevel is enabled on the subclient false - if blocklevel is not enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.enable_dc_content_indexing",
"url":176,
"doc":"Creates the JSON with the specified dataclassification plan to pass to API to update file system Subclient Args: dcplan_name (String)  DC plan name",
"func":1
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.create_file_level_index_option",
"url":176,
"doc":"Gets the value of Metadata collection Option Returns: true - if metadata collection is enabled on the subclient false - if metadata collection is not enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.backup_retention_days",
"url":176,
"doc":"return number of days for backup retention Returns: (int)"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.system_state_option",
"url":176,
"doc":"Checks whether the system state option is enabled Returns: True - if system state property is enabled for the subclient False - if system state property is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.onetouch_option",
"url":176,
"doc":"Checks whether the onetouch option is enabled Returns: True - if system state property is enabled for the subclient False - if system state property is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.onetouch_server",
"url":176,
"doc":"Returns: Onetouch Server Name"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.onetouch_server_directory",
"url":176,
"doc":"Returns the onetouch server directory"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.trueup_days",
"url":176,
"doc":"Gets the trueup after n days value for this Subclient Returns: int"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.archiver_retention",
"url":176,
"doc":"return the value of archiver retention or modified time retention Returns: True - if archiver or modified time retention is enabled for the subclient False - if archiver or modified time retention is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.archiver_retention_days",
"url":176,
"doc":"return number of days for archiver or modified time retention Return: (int)"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.disk_cleanup",
"url":176,
"doc":"return value of disk cleanup of the subclient Returns: True - if disk Cleanup is enabled for the subclient False - if disk Cleanup is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.disk_cleanup_rules",
"url":176,
"doc":"return disk cleanup rules for this FileSystem Subclient Return: (dict)  disk clean up rules"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.backup_only_archiving_candidate",
"url":176,
"doc":"To get the value of backup only archiving candidate Returns: True - if backup only archiving candidate is enabled for the subclient False - if backup only archiving candidate is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.file_version",
"url":176,
"doc":"Returns: (dict)  file version mode"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.generate_signature_on_ibmi",
"url":176,
"doc":"Gets the value of generate signature on ibmi option for IBMi subclient. Returns: False - if signature generation on IBMi is enabled on the subclient True - if signature generation on IBMi is not enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.backup_using_multiple_drives",
"url":176,
"doc":"Gets the value of VTL multiple drives on ibmi option for IBMi subclient. Returns: False - if multiple drives is not enabled. True - if multiple drives is enabled."
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.pending_record_changes",
"url":176,
"doc":"Gets the value of pending record changes option for IBMi subclient. Returns: False - if multiple drives is not enabled. True - if multiple drives is enabled."
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.other_pending_changes",
"url":176,
"doc":"Gets the value of other pending changes for IBMi subclient. Returns: False - if multiple drives is not enabled. True - if multiple drives is enabled."
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.object_level_backup",
"url":176,
"doc":"Gets the value of object level backup option for IBMi subclient. Returns: True - if object level backup is enabled on the subclient False - if object level backup is not enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.global_filter_status",
"url":176,
"doc":"Returns the status whether the global filters are included in configuration"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.enable_synclib",
"url":176,
"doc":"Return the save while active options for an IBMi subclient. Returns: (dict)  Dictionary of synclib options"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.software_compression",
"url":176,
"doc":"Returns the software compression status for this subclient. Returns: int 1 - On Client 2 - On Media Agent 3 - Use Storage Policy Settings 4 - Off"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.use_vss",
"url":176,
"doc":"Returns the value of the Use VSS options for Windows FS subclients. Returns: dict Dictionary contains the keys 'useVSS', 'vssOptions' and 'useVssForAllFilesOptions'. useVSS: True - ENABLED False - DISABLED vssOptions: 1 - For all files 2 - For locked files only useVssForAllFilesOptions: 1 - Fail the job 2 - Continue and reset access time 3 - Continue and do not reset access time"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.find_all_versions",
"url":176,
"doc":"Searches the content of a Subclient. Args: Dictionary of browse options: Example: find_all_versions({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) (OR) Keyword argument of browse options: Example: find_all_versions( path='c:\\hello.txt', show_deleted=True, to_time='2016-04-31 12:00:00' ) Refer self._default_browse_options for all the supported options Returns: dict - dictionary of the specified file with list of all the file versions and additional metadata retrieved from browse",
"func":1
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.enable_content_indexing",
"url":176,
"doc":"Enables Content indexing and add the policy associations",
"func":1
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.disable_content_indexing",
"url":176,
"doc":"Disables Content indexing and disassociate the CI policy",
"func":1
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.catalog_acl",
"url":176,
"doc":"Gets the catalog acl option Returns: true - if catalog acl is enbaled on the subclient false - if catalog acl disabled on the subclient"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.index_server",
"url":176,
"doc":"Returns the index server client set for the subclient. None if no Index Server is set"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.index_pruning_type",
"url":176,
"doc":"Treats the subclient pruning type as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.index_pruning_days_retention",
"url":176,
"doc":"Returns number of days to be maintained in index by index pruning for the subclient"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.index_pruning_cycles_retention",
"url":176,
"doc":"Returns number of cycles to be maintained in index by index pruning for the subclient"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.ibmi_dr_config",
"url":176,
"doc":"Return the ibmi dr configuration Returns: (dict)  Dictionary of DR parameters"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.backup_savf_file_data",
"url":176,
"doc":"Return the ibmi savf file data configuration Returns: (bool)  Is savf file data going to be backed up"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.backup_spool_file_data",
"url":176,
"doc":"Gets the value of spool file data on ibmi option for IBMi subclient. Returns: False - if spool file data on IBMi is disabled on the subclient True - if spool file data on IBMi is enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.backup_queue_data",
"url":176,
"doc":"Gets the value of queue data data on ibmi option for IBMi subclient. Returns: False - if queue data on IBMi is disabled on the subclient True - if queue data on IBMi is enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.backup_private_authorities",
"url":176,
"doc":"Gets the value of private authorities on ibmi option for IBMi subclient. Returns: False - if PVTAUT on IBMi is disabled on the subclient True - if PVTAUT on IBMi is enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.target_release",
"url":176,
"doc":"Gets the value of target and release on ibmi option for IBMi subclient. Returns: (str) - Return the target and release string value"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.save_access_path",
"url":176,
"doc":"Gets the value of save access path on ibmi option for IBMi subclient. Returns: (str) - Return the save access path string value"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.update_history",
"url":176,
"doc":"Gets the value of update history property on ibmi option for IBMi subclient. Returns: (str) - Return the string value of update history property"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.ibmi_compression",
"url":176,
"doc":"Gets the value of IBMi compression property on ibmi option for IBMi subclient. Returns: (str) - Return the string value of IBMi compression property"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.save_while_active_option",
"url":176,
"doc":"Return the save while active options for an IBMi subclient. Returns: (dict)  Dictionary of save while active options"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.pre_post_commands",
"url":176,
"doc":"Return the prep_post commands set for a subclient Returns: (dict)  All the pre/post commands"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.backup_nodes",
"url":176,
"doc":"Gets the backup nodes for FS Agent under Network Share Clients."
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.network_share_auto_mount",
"url":176,
"doc":"Returns the value of enableNetworkShareAutoMount, if true, the content will be auto-mounted during backup and auto-mounted during in-place restores."
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.impersonate_user",
"url":176,
"doc":"Returns the username ONLY and applicable to Windows FS subclients only."
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.nassubclient.NASSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.o365apps_subclient",
"url":183,
"doc":"Main file for common operations for the Office 365 Apps Subclient O365AppsSubclient: Derived class from CloudAppsSubclient Base class, for common sub-client functionalities pertaining to the Office 365 Apps O365AppsSubclient Attributes:                _prepare_web_search_browse_json()  Prepare the JSON for the web search based browse _process_web_search_response()  Process the response received from the do web search browse do_web_search()  Perform a search of the backed up contents process_index_retention()  Run the retention thread for Office 365 Apps on the INdex Server"
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient",
"url":183,
"doc":"Parent class representing the Office 365 Apps based sub-clients. Supported agents: Dynamics 365 CRM, SharePoint online, OneDrive for Business and MS Teams Initialize the Sub client object for the given O365Apps Subclient. Args: backupset_object (object)  instance of the backup-set class subclient_name (str)  subclient name subclient_id (int)  subclient id"
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.do_web_search",
"url":183,
"doc":"Method to perform a web search using the /Search endpoint. Default browse endpoint for new O365 agents. Arguments: kwargs: Dictionary of arguments to be used for the browse",
"func":1
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.process_index_retention",
"url":183,
"doc":"Run the retention thread for Dynamics 365/ Office 365 Apps sub-client Args: index_server_client_id (int)  client id of index server Raises: SDKException: if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.backup",
"url":171,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup default: False incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup default: BEFORE_SYNTH Returns: object - instance of the Job class for this backup job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.o365apps_subclient.O365AppsSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.oraclesubclient",
"url":208,
"doc":"File for operating on a Oracle Subclient OracleSubclient is the only class defined in this file. OracleSubclient: Derived class from DatabaseSubclient Base class, representing an Oracle subclient, and to perform operations on that subclient OracleSubclient: __init__()  constructor for the class _get_subclient_properties()  gets the subclient related properties of Oracle subclient _get_subclient_properties_json()  returns subclient property json for oracle data()  Getter and Setter for enabling data mode in oracle selective_online_full()  Getter and Setter to enable selective online option set_backupcopy_interface()  Setter for the backupcopy interface data_stream()  Getter and Setter for data stream backup()  Performs backup database restore()  Performs restore databases restore_in_place()  Performs restore for oracle logical dump backup_archive_log()  Getter ans Setter for enaling/disabling archive log mode archive_files_per_bfs()  Getter and Setter for archive files per BFS data_sp()  Getters and setters for data storage policy _get_oracle_restore_json  To get restore JSON for an oracle instance _oracle_backup_json  Get backup JSON for oracle instance is_snapenabled()  Check if intellisnap has been enabled in the subclient"
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient",
"url":208,
"doc":"OracleSubclient is a class to work on Oracle subclients Constructor for the class Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient"
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.set_prop_for_orcle_subclient",
"url":208,
"doc":"Updates the subclient properties. Args: storage_policy (str)  name of the storage policy to be associated with the subclient snap_engine (str)  Snap Engine to be set for subclient (optional) default: None Raises: SDKException: if storage policy argument is not of type string if failed to update subclient if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.data",
"url":208,
"doc":"Getter to fetch if data enabled in oracle subclient or not Returns: bool  True if data is enabled on the subclient. Else False"
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.backup_archive_log",
"url":208,
"doc":"Getter to fetch if archive log backup enabled or not Returns: bool  True if archivelog is enabled on the subclient. Else False"
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.selective_online_full",
"url":208,
"doc":"Getter to fetch if selective online full enabled or not Returns: bool  True if selective online is enabled on the subclient. Else False"
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.archive_files_per_bfs",
"url":208,
"doc":"Getter to fetch archive files per BFS Returns: (int)  value for archive files per BFS"
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.data_stream",
"url":208,
"doc":"Getter to fetch data stream count Returns: int  data backup stream count at subclient level"
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.data_sp",
"url":208,
"doc":"Getter for data storage policy Returns: string - string representing data storage policy"
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.is_table_browse_enabled",
"url":208,
"doc":"Getter to check whether the subclient has table browse enabled Returns: Bool - True if table browse is enabled on the subclient. Else False"
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.is_snapenabled",
"url":208,
"doc":"Getter to check whether the subclient has snap enabled Returns: Bool - True if snap is enabled on the subclient. Else False"
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.enable_table_browse",
"url":208,
"doc":"Enables Table Browse for the subclient. Raises: SDKException: if failed to enable tablebrowse for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.disable_table_browse",
"url":208,
"doc":"Disables Table Browse for the subclient. Raises: SDKException: if failed to disable tablebrowse for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.set_backupcopy_interface",
"url":208,
"doc":"Sets the backup copy interafce for the subclient. Args: interface (str)  type of the backup copy interface Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.find",
"url":208,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565"
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.backup",
"url":208,
"doc":"Args: backup_level (str)  level of backup the user wish to run Full / Incremental default: Full cumulative (Bool)  True if cumulative backup is required default: False schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level is incorrect if response is empty if response does not succeed",
"func":1
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.inline_backupcopy",
"url":208,
"doc":"Performs inline backupcopy on an oracle subclient Args: backup_level (str)  Level of backup. Can be full or incremental default: full Returns: object  instance of Job class Raises: SDKException: if backup level is incorrect if response is empty if response does not succeed",
"func":1
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.restore",
"url":208,
"doc":"Performs restore the entire/partial database using latest backup/backupcopy Args: files (dict)  dictionary containing file options default  None destination_client (str)  destination client name default  None common_options (dict)  common options to be passed on for restore default  None browse_option (dict)  dictionary containing browse options oracle_options (dict)  dictionary containing other oracle options default  By default it restores the controlfile and datafiles from latest backup tag (str)  Type of the restore to be performed default: None Example: { \"resetLogs\": 1, \"switchDatabaseMode\": True, \"noCatalog\": True, \"restoreControlFile\": True, \"recover\": True, \"recoverFrom\": 3, \"restoreData\": True, \"restoreFrom\": 3 } Returns: object  Job containing restore details",
"func":1
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.restore_in_place",
"url":208,
"doc":"Method to restore the logical dump Args: db_password (str)  password for oracle database database_list (List)  List of databases dest_client_name (str)  Destination Client name dest_instance_name (str)  Destination Instance name destination_path (str)  destination path for restore default: None Returns: object  Job containing restore details",
"func":1
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.log_backup_storage_policy",
"url":190,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.oraclesubclient.OracleSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.postgressubclient",
"url":209,
"doc":"File for operating on a Postgres Server Subclient PostgresSubclient is the only class defined in this file. PostgresSubclient: Derived class from Subclient Base class, representing a HANA server subclient, and to perform operations on that subclient PostgresSubclient:          set_content()  Adds/Updates/Deletes the postgresql subclient contents collect_object_list()  Sets the collect object list flag for the subclient as the value provided as input _backup_request_json()  prepares the json for the backup request _get_subclient_properties()  gets the subclient related properties of PostgreSQL subclient _get_subclient_properties_json()  gets all the subclient related properties of PostgreSQL subclient backup()  Runs a backup job for the subclient of the level specified restore_postgres_server()  Method to restore the Postgres server PostgresSubclient instance Attributes                   =  content  returns list of databases which are part of subclient content  collect_object_list  Returns the collect object list flag of the subclient"
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient",
"url":209,
"doc":"Derived class from Subclient Base class, representing a file system subclient, and to perform operations on that subclient. Constructor for the class Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient"
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.content",
"url":209,
"doc":"returns list of databases which are part of subclient content"
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.set_content",
"url":209,
"doc":"Adds/Updates/Deletes the postgresql subclient contents Args: database_list (list)  list of databases to be added to the subclient content operation_type (str)  Content operation to be performed Accepted Values: ADD  Adds the database list to existing content OVERWRITE  Replaces the content with given databases DELETE  Deletes the database from the content Raises: SDKException: if database list is not a list if operation type is not accepted value if the database list is empty if the operation is performed on default subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.collect_object_list",
"url":209,
"doc":"Returns the collect object list flag of the subclient. Returns: (bool)  True if flag is set False if the flag is not set"
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.backup",
"url":209,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Differential inc_with_data (bool)  flag to determine if the incremental backup includes data or not Returns: object - instance of the Job class for this backup job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.restore_postgres_server",
"url":209,
"doc":"Method to restore the Postgres server Args: database_list (List)  List of databases dest_client_name (str)  Destination Client name dest_instance_name (str)  Destination Instance name copy_precedence (int)  Copy precedence associted with storage from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None clone_env (bool)  boolean to specify whether the database should be cloned or not default: False clone_options (dict)  clone restore options passed in a dict default: None Accepted format: { \"stagingLocaion\": \"/gk_snap\", \"forceCleanup\": True, \"port\": \"5595\", \"libDirectory\": \"/opt/PostgreSQL/9.6/lib\", \"isInstanceSelected\": True, \"reservationPeriodS\": 3600, \"user\": \"postgres\", \"binaryDirectory\": \"/opt/PostgreSQL/9.6/bin\" } media_agent (str)  media agent name default: None table_level_restore (bool)  boolean to specify if the restore operation is table level default: False staging_path (str)  staging path location for table level restore default: None no_of_streams (int)  number of streams to be used by volume level restore default: None volume_level_restore (bool)  volume level restore flag default: False redirect_enabled (bool)  boolean to specify if redirect restore is enabled default: False redirect_path (str)  Path specified in advanced restore options in order to perform redirect restore default: None revert (bool)  boolean to specify whether to do a hardware revert in restore default: False Returns: object  Job containing restore details",
"func":1
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.log_backup_storage_policy",
"url":190,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.postgressubclient.PostgresSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.saporaclesubclient",
"url":210,
"doc":"File for operating on a SAP Oracle iDa Subclient SAPOracleSubclient is the only class defined in this file. SAPOracleSubclient: Derived class from Subclient Base class, representing a SAPOracle subclient, and to perform operations on that subclient SAPOracleSubclient: __init__  Constructor for the class data_sp()  Getter for getting data storage policy _get_subclient_properties()  gets the subclient related properties of SAP Oracle subclient. _get_subclient_properties_json()  gets the subclient related properties of SAP Oracle subclient."
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient",
"url":210,
"doc":"Derived class from Subclient Base class, representing a SAP oracle iDa subclient, and to perform operations on that subclient. Constructor for the class Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient"
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.data_sp",
"url":210,
"doc":"Getter for data storage policy Returns: string - string representing data storage policy"
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.sapBackupMode",
"url":210,
"doc":"Getter for sap backup mode Returns: string - string representing sapBackupMode sapBackupMode 0 means Online Db"
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.sapBackupDevice",
"url":210,
"doc":"Getter for sapBackupDevice Returns: string - string representing sapBackupDevice sapBackupDevice 1 means util_file device"
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.backup",
"url":171,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup default: False incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup default: BEFORE_SYNTH Returns: object - instance of the Job class for this backup job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.saporaclesubclient.SAPOracleSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient",
"url":211,
"doc":"File for operating on a Sharepoint Subclient SharepointSuperSubclient: Derived class from Subclient Base class, containing common methods for both Sharepoint v1 and v2 subclients. SharepointSuperSubclient: backup()  Runs a backup job for the subclient of the level specified. _get_subclient_properties()  gets the subclient related properties of the Sharepoint subclient. _json_out_of_place_destination_option()  setter for the SharePoint Online out of place restore option in restore json SharepointSubclient: Derived class from SharepointSuperSubclient Base class, representing a sharepoint subclient, and to perform operations on that subclient SharepointSubclient: _get_subclient_properties_json()  gets all the subclient related properties of the Sharepoint subclient. _process_restore_response  processes response received for the restore request. _restore_request_json  returns the JSON request to pass to the API as per the options. sharepoint_subclient_prop()  initializes additional properties of this subclient. content()  sets the content of the subclient. restore()  restores the databases specified in the input paths list. run_manual_discovery()  runs the manual disocvery for specified backupset browse_for_content()  returns the user association content associate_site_collections_and_webs() associates the specified site collections/webs restore_in_place()  runs a in-place restore job on the specified Sharepoint pseudo client SharepointV1Subclient: Derived class from SharepointSuperSubclient Base class, representing a sharepoint v1 subclient, and to perform operations on that subclient SharepointV1Subclient: discover_sharepoint_sites()  Checks whether SP content i.e, sites/webs are available _get_subclient_properties_json()  gets all the subclient related properties of the Sharepoint subclient. content()  sets the content of the subclient. restore_in_place()  runs a in-place restore job on the specified Sharepoint pseudo client"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient",
"url":211,
"doc":"Base class consisting of all the common properties and operations for a Subclient Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.backup",
"url":211,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup collect_metadata (bool)  Collect Meta data for the backup advanced_options (dict)  advanced backup options to be included while making the request Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSuperSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient",
"url":211,
"doc":"Derived class from Subclient Base class, representing a Sharepoint subclient, and to perform operations on that subclient. Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.sharepoint_subclient_prop",
"url":211,
"doc":"getter for sql server subclient properties"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.content",
"url":211,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.restore",
"url":211,
"doc":"Restores the Sharepoint content specified in the input paths list. Args: content_to_restore (list): Content to restore. database_client (str): Name of Sharepoint SQL server back-end client. spsetup_list (dict): Dictionary of the Sharepoint setup configuration. overwrite (bool): Unconditional overwrite files during restore. Defaults to True. to_time (str): Restore to time. Defaults to None. Returns: object - instance of the Job class for this restore job Raises: SDKException: if content_to_restore is not a list if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.run_manual_discovery",
"url":211,
"doc":"Runs the manual discovery of backupset Raises: SDKException: if failed to initialize job if response is empty if response is not success if the method is called by SharePoint On-Premise Instance",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.configure_group_for_backup",
"url":211,
"doc":"Configures group for backup Args: discovery_type (int)  type of discovery for content All Web Sites - 9 All Groups And Teams Sites - 10 All Project Online Sites - 11 association_group_name(str)  type of association Example: All Web Sites, All Groups And Teams Sites, All Project Online Sites plan_id (int)  id of office 365 plan Raises: SDKException: if response is empty if response is not success if the method is called by SharePoint On-Premise Instance",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.update_auto_association_group_properties",
"url":211,
"doc":"Associates the content for backup based on provided group Args: discovery_type (int)  type of discovery for content All Web Sites - 9 All Groups And Teams Sites - 10 All Project Online Sites - 11 association_group_name(str)  type of association Example: All Web Sites, All Groups And Teams Sites, All Project Online Sites account_status (int)  type of operation to be performed enable - 0 remove - 1 disable - 2 plan_id (int)  id of office 365 plan Raises: SDKException: if response is empty if response is not success if the method is called by SharePoint On-Premise Instance",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.browse_for_content",
"url":211,
"doc":"Returns the SP content i.e. sites/web information that is discovered in auto discovery phase Args: discovery_type (int)  type of discovery for content For all Associated Web/Sites = 6 For all Non-Associated Web/Sites = 7 Returns: site_dict (dict)  dictionary of sites properties no_of_records (int)  no of records Raises: SDKException: if response is empty if response is not success if the method is called by SharePoint On-Premise Instance",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.update_sites_association_properties",
"url":211,
"doc":"Updates the association properties of site Args: site_user_accounts_list (list)  list of user accounts of all sites It has all information of sites/webs operation (int)  type of operation to be performed Example: 1 - Associate 2 - Enable 3 - Disable 4 - Remove plan_id (int)  id of office 365 plan Raises: SDKException: if response is empty if response is not success if the method is called by SharePoint On-Premise Instance",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.restore_in_place",
"url":211,
"doc":"Runs a in-place restore job on the specified Sharepoint pseudo client This is used by Sharepoint V2 pseudo client Kwargs: paths (list)  list of sites or webs to be restored Example: [ \"MB\\https: cvdevtenant.sharepoint.com/sites/TestSite\\Contents\\Shared Documents\", \"MB\\https: cvdevtenant.sharepoint.com/sites/TestSite\\Contents\\Test Automation List\" ] Returns: Job object Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if the method is called by SharePoint On-Premise Instance",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.out_of_place_restore",
"url":211,
"doc":"Restores the SharePoint list/libraries specified in the input paths list to the different site Args: paths (list)  list of paths of SharePoint list/libraries to restore destination_path (str)  path where the SharePoint Site where list/libraries needs to be restored overwrite (bool)  unconditional overwrite files during restore default: True Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success if the method is called by SharePoint On-Premise Instance",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.disk_restore",
"url":211,
"doc":"Restores the sharepoint libraries/list specified in the input paths list to the same location. value: paths (list)  list of paths of lists/libraries to restore destination_client  client where the lists/libraries needs to be restored destination_path  path where the lists/libraries needs to be restored disk_restore_type  type of disk restore unconditional_overwrite (bool)  unconditional overwrite files during restore default: True in_place (bool)  in place restore set to false by default default: False Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success if the method is called by SharePoint On-Premise Instance",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.process_index_retention_rules",
"url":211,
"doc":"Makes API call to process index retention rules Args: index_server_client_id (int)  client id of index server Raises: SDKException: if response is empty if response is not success if the method is called by SharePoint On-Premise Instance",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.backup",
"url":211,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup collect_metadata (bool)  Collect Meta data for the backup advanced_options (dict)  advanced backup options to be included while making the request Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient",
"url":211,
"doc":"Derived class from Subclient Base class, representing a Sharepoint v1 subclient, and to perform operations on that subclient. Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.discover_sharepoint_sites",
"url":211,
"doc":"Checks whether SP content i.e, sites/webs are available Args: paths (list)  list of paths of SharePoint sites to be checked",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.content",
"url":211,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.restore_in_place",
"url":211,
"doc":"Runs a in-place restore job on the specified Sharepoint pseudo client This is used by Sharepoint V2 pseudo client Kwargs: paths (list)  list of sites or webs to be restored Example: [ \"MB\\https: cvdevtenant.sharepoint.com/sites/TestSite\\Contents\\Shared Documents\", \"MB\\https: cvdevtenant.sharepoint.com/sites/TestSite\\Contents\\Test Automation List\" ] Returns: Job object Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if the method is called by SharePoint On-Premise Instance",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.out_of_place_restore",
"url":211,
"doc":"Restores the SharePoint list/libraries specified in the input paths list to the different site Args: paths (list)  list of paths of SharePoint list/libraries to restore destination_path (str)  path where the SharePoint Site where list/libraries needs to be restored overwrite (bool)  unconditional overwrite files during restore default: True Returns: object - instance of the Job class for this restore job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.backup",
"url":211,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup collect_metadata (bool)  Collect Meta data for the backup advanced_options (dict)  advanced backup options to be included while making the request Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.sharepointsubclient.SharepointV1Subclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.splunksubclient",
"url":212,
"doc":"Module for operating with splunk subclient SplunkSubClient is the only class defined in this file SplunkSubClient: Derived class from BigDataAppsSubclient Base class, representing splunk subclient, and to perform operations on that subclient SplunkSubclient:        = splunk_restore()  performs a restore job by taking index name as the argument subclient_content()  sets backup content at subclient level"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient",
"url":212,
"doc":"Derived class from BigDataAppsSubclient, representing splunk subclient, and to perform operations on that subclient Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.restore_in_place",
"url":212,
"doc":"Performs a restore job on the splunk subclient Args: index_list (list)  list containing the indexes to be restored Example: [\"index1\",index2\"] copy_precedence (int)  the copy precedence value Returns: job_obj (obj)  job object associated with the restore job",
"func":1
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.subclient_content",
"url":212,
"doc":"Returns the appropriate content associated with the subclient Returns: index_list (list)  list of subclient content"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.set_data_access_nodes",
"url":175,
"doc":"Sets the Data Access Nodes for the distributed apps subclient. Args : data_access_nodes (list) : Sets the list of client nodes passed as data access node for this distributed apps subclient Raise SDK Exception : If unable to set data access nodes property of the subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.content",
"url":176,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.filter_content",
"url":176,
"doc":"Treats the subclient filter content as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.exception_content",
"url":176,
"doc":"Treats the subclient exception content as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.scan_type",
"url":176,
"doc":"Gets the appropriate scan type for this Subclient Returns: int 1 - Recursive Scan 2 - Optimized Scan 3 - Change Journal Scan"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.trueup_option",
"url":176,
"doc":"Gets the value of TrueUp Option Returns: True - if trueup is enabled on the subclient False - if trueup is not enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.run_backup_copy",
"url":176,
"doc":"Runs the backup copy from Commcell for the given subclient Args: None Returns: object - instance of the Job class for this backup copy job Raises: SDKException: if backup copy job failed if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.backup_retention",
"url":176,
"doc":"return if backup retention is enabled or not Returns: True - if backup_retention is enabled for the subclient False - if backup_rentention is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.block_level_backup_option",
"url":176,
"doc":"Gets the block level option Returns: true - if blocklevel is enabled on the subclient false - if blocklevel is not enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.enable_dc_content_indexing",
"url":176,
"doc":"Creates the JSON with the specified dataclassification plan to pass to API to update file system Subclient Args: dcplan_name (String)  DC plan name",
"func":1
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.create_file_level_index_option",
"url":176,
"doc":"Gets the value of Metadata collection Option Returns: true - if metadata collection is enabled on the subclient false - if metadata collection is not enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.backup_retention_days",
"url":176,
"doc":"return number of days for backup retention Returns: (int)"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.system_state_option",
"url":176,
"doc":"Checks whether the system state option is enabled Returns: True - if system state property is enabled for the subclient False - if system state property is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.onetouch_option",
"url":176,
"doc":"Checks whether the onetouch option is enabled Returns: True - if system state property is enabled for the subclient False - if system state property is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.onetouch_server",
"url":176,
"doc":"Returns: Onetouch Server Name"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.onetouch_server_directory",
"url":176,
"doc":"Returns the onetouch server directory"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.trueup_days",
"url":176,
"doc":"Gets the trueup after n days value for this Subclient Returns: int"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.archiver_retention",
"url":176,
"doc":"return the value of archiver retention or modified time retention Returns: True - if archiver or modified time retention is enabled for the subclient False - if archiver or modified time retention is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.archiver_retention_days",
"url":176,
"doc":"return number of days for archiver or modified time retention Return: (int)"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.disk_cleanup",
"url":176,
"doc":"return value of disk cleanup of the subclient Returns: True - if disk Cleanup is enabled for the subclient False - if disk Cleanup is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.disk_cleanup_rules",
"url":176,
"doc":"return disk cleanup rules for this FileSystem Subclient Return: (dict)  disk clean up rules"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.backup_only_archiving_candidate",
"url":176,
"doc":"To get the value of backup only archiving candidate Returns: True - if backup only archiving candidate is enabled for the subclient False - if backup only archiving candidate is not enabled for the subclient"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.file_version",
"url":176,
"doc":"Returns: (dict)  file version mode"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.generate_signature_on_ibmi",
"url":176,
"doc":"Gets the value of generate signature on ibmi option for IBMi subclient. Returns: False - if signature generation on IBMi is enabled on the subclient True - if signature generation on IBMi is not enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.backup_using_multiple_drives",
"url":176,
"doc":"Gets the value of VTL multiple drives on ibmi option for IBMi subclient. Returns: False - if multiple drives is not enabled. True - if multiple drives is enabled."
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.pending_record_changes",
"url":176,
"doc":"Gets the value of pending record changes option for IBMi subclient. Returns: False - if multiple drives is not enabled. True - if multiple drives is enabled."
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.other_pending_changes",
"url":176,
"doc":"Gets the value of other pending changes for IBMi subclient. Returns: False - if multiple drives is not enabled. True - if multiple drives is enabled."
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.object_level_backup",
"url":176,
"doc":"Gets the value of object level backup option for IBMi subclient. Returns: True - if object level backup is enabled on the subclient False - if object level backup is not enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.global_filter_status",
"url":176,
"doc":"Returns the status whether the global filters are included in configuration"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.enable_synclib",
"url":176,
"doc":"Return the save while active options for an IBMi subclient. Returns: (dict)  Dictionary of synclib options"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.software_compression",
"url":176,
"doc":"Returns the software compression status for this subclient. Returns: int 1 - On Client 2 - On Media Agent 3 - Use Storage Policy Settings 4 - Off"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.use_vss",
"url":176,
"doc":"Returns the value of the Use VSS options for Windows FS subclients. Returns: dict Dictionary contains the keys 'useVSS', 'vssOptions' and 'useVssForAllFilesOptions'. useVSS: True - ENABLED False - DISABLED vssOptions: 1 - For all files 2 - For locked files only useVssForAllFilesOptions: 1 - Fail the job 2 - Continue and reset access time 3 - Continue and do not reset access time"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.find_all_versions",
"url":176,
"doc":"Searches the content of a Subclient. Args: Dictionary of browse options: Example: find_all_versions({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) (OR) Keyword argument of browse options: Example: find_all_versions( path='c:\\hello.txt', show_deleted=True, to_time='2016-04-31 12:00:00' ) Refer self._default_browse_options for all the supported options Returns: dict - dictionary of the specified file with list of all the file versions and additional metadata retrieved from browse",
"func":1
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.backup",
"url":176,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full default: Incremental incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup default: False incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup default: BEFORE_SYNTH on_demand_input (str)  input directive file location for on demand subclient only applicable in case of on demand subclient default: None advanced_options (dict)  advanced backup options to be included while making the request default: None options: directive_file : path to the directive file adhoc_backup : if set triggers the adhoc backup job adhoc_backup_contents : sets the contents for adhoc backup inline_backup_copy : to run backup copy immediately(inline) skip_catalog : skip catalog for intellisnap operation start_new_media : enables the option to start new media for the job media_agent_name : to run backup via this media agent impersonate_gui : sets the initiatedFrom property to GUI if True common_backup_options (dict)  advanced job options to be included while making request default: None options: job_description : job description to be set. enable_number_of_retries : enables/disables the property, number of retrys. values: True/False number_of_retries : total number of retries to be set. enable_total_running_time : enables/disables the property, toal running time. values: True/False total_running_time : total run time to be set in (secs) kill_running_job_when_total_running_time_expires : enables/disables the property. values: True/False start_in_suspended_state : enables/disables the property. values: True/False use_default_priority : enables/disables the property. values: True/False priority : three digit number to be set. default: 166 schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.restore_out_of_place",
"url":176,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to retore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to retore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password : Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore is_vlr_restore : sets if the restore job is to be triggered as vlr validate_only : To validate data backed up for restore instant_clone_options : Options for FS clone found on Command Center, the value must be a dictionary containing the following key value pairs. reservation_time (int)  The amount of time, specified in seconds, that the mounted snapshot needs to be reserved for before it is cleaned up. This is an OPTIONAL key. Default : 3600 clone_mount_path (str)  The path to which the snapshot needs to be mounted. This is NOT an optional key. post_clone_script (str)  The script that will run post clone. This is an OPTIONAL key. clone_cleanup_script (str)  The script that will run after clean up. This is an OPTIONAL key. no_of_streams (int)  Number of streams to be used for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.enable_content_indexing",
"url":176,
"doc":"Enables Content indexing and add the policy associations",
"func":1
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.disable_content_indexing",
"url":176,
"doc":"Disables Content indexing and disassociate the CI policy",
"func":1
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.catalog_acl",
"url":176,
"doc":"Gets the catalog acl option Returns: true - if catalog acl is enbaled on the subclient false - if catalog acl disabled on the subclient"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.index_server",
"url":176,
"doc":"Returns the index server client set for the subclient. None if no Index Server is set"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.index_pruning_type",
"url":176,
"doc":"Treats the subclient pruning type as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.index_pruning_days_retention",
"url":176,
"doc":"Returns number of days to be maintained in index by index pruning for the subclient"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.index_pruning_cycles_retention",
"url":176,
"doc":"Returns number of cycles to be maintained in index by index pruning for the subclient"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.ibmi_dr_config",
"url":176,
"doc":"Return the ibmi dr configuration Returns: (dict)  Dictionary of DR parameters"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.backup_savf_file_data",
"url":176,
"doc":"Return the ibmi savf file data configuration Returns: (bool)  Is savf file data going to be backed up"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.backup_spool_file_data",
"url":176,
"doc":"Gets the value of spool file data on ibmi option for IBMi subclient. Returns: False - if spool file data on IBMi is disabled on the subclient True - if spool file data on IBMi is enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.backup_queue_data",
"url":176,
"doc":"Gets the value of queue data data on ibmi option for IBMi subclient. Returns: False - if queue data on IBMi is disabled on the subclient True - if queue data on IBMi is enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.backup_private_authorities",
"url":176,
"doc":"Gets the value of private authorities on ibmi option for IBMi subclient. Returns: False - if PVTAUT on IBMi is disabled on the subclient True - if PVTAUT on IBMi is enabled on the subclient"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.target_release",
"url":176,
"doc":"Gets the value of target and release on ibmi option for IBMi subclient. Returns: (str) - Return the target and release string value"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.save_access_path",
"url":176,
"doc":"Gets the value of save access path on ibmi option for IBMi subclient. Returns: (str) - Return the save access path string value"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.update_history",
"url":176,
"doc":"Gets the value of update history property on ibmi option for IBMi subclient. Returns: (str) - Return the string value of update history property"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.ibmi_compression",
"url":176,
"doc":"Gets the value of IBMi compression property on ibmi option for IBMi subclient. Returns: (str) - Return the string value of IBMi compression property"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.save_while_active_option",
"url":176,
"doc":"Return the save while active options for an IBMi subclient. Returns: (dict)  Dictionary of save while active options"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.pre_post_commands",
"url":176,
"doc":"Return the prep_post commands set for a subclient Returns: (dict)  All the pre/post commands"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.backup_nodes",
"url":176,
"doc":"Gets the backup nodes for FS Agent under Network Share Clients."
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.network_share_auto_mount",
"url":176,
"doc":"Returns the value of enableNetworkShareAutoMount, if true, the content will be auto-mounted during backup and auto-mounted during in-place restores."
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.impersonate_user",
"url":176,
"doc":"Returns the username ONLY and applicable to Windows FS subclients only."
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.splunksubclient.SplunkSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.sqlsubclient",
"url":213,
"doc":"File for operating on a SQL Server Subclient SQLServerSubclient is the only class defined in this file. SQLServerSubclient: Derived class from Subclient Base class, representing a sql server subclient, and to perform operations on that subclient SQLServerSubclient: _get_subclient_properties()  gets the subclient related properties of SQL subclient. _get_subclient_properties_json()  gets all the subclient related properties of SQL subclient. content()  sets the content of the subclient. log_backup_storage_policy()  updates the log backup storage policy for this subclient. backup()  run a backup job for the subclient. update_content()  add, delete, overwrite the sql server subclient contents. blocklevel_backup_option  setter for block level backup option on SQL subclient"
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient",
"url":213,
"doc":"Derived class from Subclient Base class, representing a sql server subclient, and to perform operations on that subclient. Initialise the Subclient object. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default: None Returns: object - instance of the Subclient class"
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.content",
"url":213,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Args: subclient_properties (dict)  dictionary contatining the properties of subclient Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.browse",
"url":213,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565"
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.browse_in_time",
"url":213,
"doc":""
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.find",
"url":213,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565"
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.restore_in_place",
"url":213,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success"
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.restore_out_of_place",
"url":213,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success"
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.backup",
"url":213,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Transaction_Log / Differential default: Differential data_options (list)  List of options to be enabled on backup The accepted string values are:  start_log_backup_after_successfull_backup  copy_only  allow_diff_backup_on_read_only  partial_sql_backup  tail_log_backup  use_sql_compression  checksum  continue_after_error default: [] schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.mssql_subclient_prop",
"url":213,
"doc":"getter for sql server subclient properties"
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.update_content",
"url":213,
"doc":"Updates the sql server subclient contents with supplied content list. Args: subclient_content (list)  list of the content to add to the subclient action (int)  action to perform on subclient 1: OVERWRITE, 2: ADD, 3: DELETE Returns: list - list of the appropriate JSON to send to the POST Subclient API",
"func":1
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.blocklevel_backup_option",
"url":213,
"doc":"returns True if block level backup is enabled else returns false Returns: bool - boolean value based on blocklevel enable status True if block level is enabled False if block level is not enabled"
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.log_backup_storage_policy",
"url":190,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.sqlsubclient.SQLServerSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.sybasesubclient",
"url":214,
"doc":"Main File for performing Sybase Subclient Operations SybaseSubclient is the only class defined in this file. SybaseSubclient : Derived class from DatabaseSubclient Base class, representing an Sybase subclient, and to perform operations on that subclient SybaseSubclient: __init__()  initialise object of sybase subclient object associated with the specified instance _get_subclient_properties  get the all subclient related properties of this subclient _sybase_backup_request_json  Returns the JSON request to pass to the API as per the options selected by the user is_snapenabled()  Check if intellisnap has been enabled in the subclient and sets it accordingly snap_engine()  updates snap_engine for sybase subclient snap_proxy()  updates proxy name from sybase snap operation use_dump_based_backup_copy()  updates the use of dump based method for backup copy dump_based_backup_copy_option()  updates subtype of dump based operation configured_instance()  updates configured instance name for dump based backup copy type 1 auxiliary_sybase_server()  updates custom instance properties for dump based backup copy type 2 content()  update the content of the sybase subclient backup()  Run a backup job for the subclient"
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient",
"url":214,
"doc":"Base class consisting of all the common properties and operations for a Sybase Subclient Initialize Sybase Subclient Object Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  name of the subclient subclient_id (str)  id of the subclient default : None Returns : (object) - instance of the Sybase Subclient class"
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.is_snapenabled",
"url":214,
"doc":"Getter to check whether the subclient has snap enabled Returns: (bool) - boolean value based on snap status at subclient level True - returns Truee if snap is enabled on the subclient False - returns False if snap is not enabled at subclient level"
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.snap_engine",
"url":214,
"doc":"Getter to fetch snap_engine Returns: (str) - name of snap engine at subclient level"
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.snap_proxy",
"url":214,
"doc":"Getter to snap_proxy if set any Returns: (str)  name of proxy client used for intellisnap operation"
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.use_dump_based_backup_copy",
"url":214,
"doc":"Getter to status of dumpbased backup copy Returns: (bool) - checks if dump based backup copy is enabled or not"
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.dump_based_backup_copy_option",
"url":214,
"doc":"Getter to fetch dumpbased backup copy option : 1(configured instance), 2(custom new instance) Returns: (int) - returns 1 or 2 based type of sybase instance configured"
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.configured_instance",
"url":214,
"doc":"Getter to fetch configured instance name if dump based backup copy option is 2 Returns: (str) - string of configured instance if dump based backup option is 1 Raises: SDK Exception if dump based backup copy not enabled if dump based copy option is not 1"
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.auxiliary_sybase_server",
"url":214,
"doc":"Getter to fetch custom instance properties if dump based copy option is 2 Returns: (dict) - dict of four properties for custom instance Raises: SDK Exception if dump based backup copy not enabled if dump based copy option is not 2"
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.content",
"url":214,
"doc":"Treats the subclient content as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.backup",
"url":214,
"doc":"Performs backup on sybase subclient Args: backup_level (str)  Level of backup. full|incremental|differential default: full do_not_truncate_log (bool)  Sybase truncate log option for incremental backup default : False sybase_skip_full_after_logbkp (bool)  Sybase backup option for incremental default : False create_backup_copy_immediately (bool)  Sybase snap job needs this backup copy operation default : False backup_copy_type (int)  backup copy job to be launched based on below two options default : 2, possible values : 1 (USING_STORAGE_POLICY_RULE), 2( USING_LATEST_CYCLE) directive_file (str)  input file for ondemand backup containing database list default : None Returns: (object) - instance of Job class Raises: SDKException: if backup level is incorrect if response is empty if response does not succeed",
"func":1
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.sybasesubclient.SybaseSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.virtualserver",
"url":215,
"doc":"Initialize VirtualServer Subclients for the SDK."
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud",
"url":216,
"doc":"File for operating on a Virtual Server AlibabaCloud Subclient. AlibabaCloudVirtualServerSubclient is the only class defined in this file. AlibabaCloudVirtualServerSubclient: Derived class from VirtualServerSubClient Base class, representing a AlibabaCloud Subclient, and to perform operations on that Subclient AlibabaCloudVirtualServerSubclient: full_vm_restore_out_of_place()  restores the VM specified in to the specified client, at the specified destination location"
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient",
"url":216,
"doc":"Derived class from VirtualServerSubclient Base class. This represents a AlibabaCloud virtual server subclient, and can perform restore operations on only that subclient. Initialize the Instance object for the given Virtual Server instance. Args: backupset_object (object)  instance of the backupset class subclient_name (str)  subclient name subclient_id (int)  subclient id"
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.full_vm_restore_out_of_place",
"url":216,
"doc":"Restores the FULL Virtual machine specified in the input list to the provided vcenter client along with the ESX and the datastores. If the provided client name is none then it restores the Full Virtual Machine to the source client and corresponding ESX and datastore. Args: vm_to_restore (list)  list of all VMs to restore destination_client (str)  name of the pseudo client where VM should be restored proxy_client (str)  the proxy to be used for restore new_name (str)  new name to be given to the restored VM availability_zone (str)  the availability zone to which the instances has to be restored. Note: You can restore the instances only to the same availability zone as the proxy resides instance_type (str)  the shape / size of the instance network (str)  the network to which the restore instance has to be attached security_groups (list)  the security groups to which the restored instances need to be attached power_on (bool)  power on the restored VM default: True overwrite (bool)  overwrite the existing VM default: True copy_precedence (int)  copy precedence to restored from default: 0 restore_option (dict)  dictionary with all the advanced restore options.  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_out_of_place eg: v2_details (dict)  details for v2 subclient eg: check clients.vmclient.VMClient._child_job_subclient_details Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.disk_pattern",
"url":217,
"doc":"stores the disk pattern of all hypervisors"
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.content",
"url":217,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.subclient_proxy",
"url":217,
"doc":"Gets the List of proxies at the Subclient Returns: list (list) : Proxies at the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.instance_proxy",
"url":217,
"doc":"Gets the proxy at instance level Returns: string (string) : Proxy at instane"
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.vm_filter",
"url":217,
"doc":"Gets the appropriate filter from the Subclient relevant to the user. Returns: list - list of filter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.vm_diskfilter",
"url":217,
"doc":"Gets the appropriate Diskfilter from the Subclient relevant to the user. Returns: list - list of Diskfilter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.metadata",
"url":217,
"doc":"Get if collect files/metadata value for given subclient. Returns status as True/False (string) Default: False for subclient which doesnt have the property"
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.live_sync",
"url":217,
"doc":"Returns the instance of the VSALiveSync class"
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.cbtvalue",
"url":217,
"doc":"Get CBT value for given subclient. Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.update_properties",
"url":217,
"doc":"child method to add any specific attributes for vsa Args: properties_dict (dict): dict of all propterties of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.browse",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False vm_disk_browse (bool)  browse virtual machine files e.g.; .vmdk files, etc. only applicable when browsing content inside a guest virtual machine default: False vm_files_browse (bool)  browse files and folders default: True operation (str)  Type of operation, browser of find copy_precedence (int)  The copy precedence to do the operation from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.parse_nics_xml",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: input_xml :  nics info xml per vm to parse the nics name and label Returns: nic_list:  list of all Nics for a VM Raise: SDKException: if input parameter is not proper",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.get_nics_from_browse",
"url":217,
"doc":"Browses the vm to get the nics info xml, gets the nics info using the parse_nics_xml method and prepares the dict for nics json Args: copy_precedence (int)  The copy precedence to do browse from Returns: dict:  dict with key as vm_name and the value as the nics info for that vm",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.browse_in_time",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\' returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True vm_disk_browse (bool)  browse the VM disks or not default: False from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.disk_level_browse",
"url":217,
"doc":"Browses the Disks of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  Restore index or not. default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.guest_files_browse",
"url":217,
"doc":"Browses the Files and Folders inside a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.guest_file_restore",
"url":217,
"doc":"perform Guest file restore of the provided path Args: options (dict)  dictionary of guest file restores options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.vm_files_browse",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False operation (str)  The type of operation to perform (browse/find) copy_precedence (int)  The copy precedence to do browse from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.vm_files_browse_in_time",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.set_advanced_vm_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM to restore restore_option: restore options that need to be set for advanced restore option power_on - power on the VM after restore add_to_failover - Register the VM to Failover Cluster datastore - Datastore where the VM needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.set_advanced_attach_disk_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM where disks will be restored restore_option: restore options that need to be set for advanced restore option datastore - Datastore where the disks needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.amazon_defaults",
"url":217,
"doc":"set all the VMconversion changes need to be performed specfic to Amazon Args: vm_to_restore (str) : content of destination subclient object restore_option (dict) : dictionary with all VM restore options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.backup",
"url":217,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup collect_metadata (bool)  Collect Meta data for the backup advanced_options (dict)  advanced backup options to be included while making the request options: create_backup_copy_immediately  Run Backup copy just after snap backup backup_copy_type  Backup Copy level using storage policy or subclient rule schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.preview_content",
"url":217,
"doc":"Preview the subclient and get the content Returns: list - List of the vms as the subclient content",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.quiesce_file_system",
"url":217,
"doc":"Gets the quiesce value set for the vsa subclient Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.alibaba_cloud.AlibabaCloudVirtualServerSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services",
"url":218,
"doc":"File for operating on a Virtual Server Amazon AWS Subclient. AmazonVirtualServerSubclient is the only class defined in this file. AmazonVirtualServerSubclient: Derived class from VirtualServerSubClient Base class,representing a AWS Subclient, and to perform operations on that Subclient AmazonVirtualServerSubclient: __init__( backupset_object, subclient_name, subclient_id)  initialize object of vmware subclient class, associated with the VirtualServer subclient full_vm_restore_in_place()  restores the VM specified by the user to the same location full_vm_restore_out_of_place()  restores the VM specified to the provided Amazon AWS psuedoclient vcenter via vcenter_client"
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient",
"url":218,
"doc":"Derived class from VirtualServerSubclient Base class. This represents an Amazon AWS virtual server subclient, and can perform restore operations on only that subclient. Initialize the Instance object for the given Virtual Server instance. Args class_object (backupset_object, subclient_name, subclient_id)  instance of the backupset class, subclient name, subclient id"
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.disk_pattern",
"url":218,
"doc":"stores the disk pattern of all hypervisors"
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.full_vm_restore_in_place",
"url":218,
"doc":"Restores the FULL Virtual machine specified in the input list to the location same as the actual location of the VM in VCenter. Args: vm_to_restore (list)  provide the VM name to restore default: None proxy_client (str)  proxy client to be used for restore default: proxy added in subclient is_aws_proxy (str)  boolean value whether proxy resides in AWS or not default: True amazon_bucket (str)  Amazon bucket (required when non-AWS proxy is used) overwrite (bool)  overwrite the existing VM default: True power_on (bool)  power on the restored VM default: True copy_precedence (int)  copy precedence value default: 0  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_in_place eg: v2_details (dict)  details for v2 subclient eg: check clients.vmclient.VMClient._child_job_subclient_details Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.full_vm_restore_out_of_place",
"url":218,
"doc":"Restores the FULL Virtual machine specified in the input list to the provided virtualization client along with the zone and instance type. If the provided client name is none then it restores the Full Virtual Machine to the source client and corresponding zone and instance type. Args: vm_to_restore (str)  provide the VM name to restore default: None vm_display_name (str)  provide the new display name for the restored VM default: None proxy_client (str)  proxy client to be used for restore default: proxy added in subclient is_aws_proxy (str)  boolean value whether proxy resides in AWS or not default: True amazon_bucket (str)  Amazon bucket (required when non-AWS proxy is used) amazon_options (dict)  dict containing configuration options for restored VM. Permissible keys are below availability_zone ami instance_type iam_role termination_protection overwrite (bool)  overwrite the existing VM default: True power_on (bool)  power on the restored VM default: True copy_precedence (int)  copy precedence value default: 0  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_out_of_place eg: v2_details (dict)  details for v2 subclient eg: check clients.vmclient.VMClient._child_job_subclient_details Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.attach_disk_restore",
"url":218,
"doc":"Restores the Attach Disk restore with specified in the input list to the provided instance. Args: vm_to_restore (str)  provide the source vm name destination_vm (str)  provide the destination VM name to restore disk_prefix (str)  provide the new display name for the restored disk default: None disk_name (str)  provide the new display name for the source disk default: None proxy_client (str)  proxy client to be used for restore default: proxy added in subclient destination_vm_guid (str)  instance id of the vm default:None media_agent (str)  media agent to be used browse and restore amazon_options (dict)  dict containing configuration options for restored VM. Permissible keys are below availability_zone ami instance_type overwrite (bool)  overwrite the existing VM default: True copy_precedence (int)  copy precedence value default: 0 Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.full_vm_conversion_azurerm",
"url":218,
"doc":"This converts the Hyperv VM to AzureRM Args: vm_to_restore (dict): dict containing the VM name(s) to restore as keys and the new VM name(s) as their values. Input empty string for default VM name for restored VM. default: {} azure_client (str): name of the AzureRM client where the VM should be restored. resource_group (str): destination Resource group in the AzureRM storage_account (str): storage account where the restored VM should be located in AzureRM overwrite (bool): overwrite the existing VM default: True power_on (bool): power on the restored VM default: True instance_size (str): Instance Size of restored VM public_ip (bool): If True, creates the Public IP of restored VM restore_as_managed (bool): If True, restore as Managed VM in Azure copy_precedence (int): copy precedence value default: 0 proxy_client (str): destination proxy client networkDisplayName(str): destination network display name networkrsg (str): destination network display name's security group destsubid (str): destination subscription id subnetId (str): destination subet id Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.content",
"url":217,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.subclient_proxy",
"url":217,
"doc":"Gets the List of proxies at the Subclient Returns: list (list) : Proxies at the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.instance_proxy",
"url":217,
"doc":"Gets the proxy at instance level Returns: string (string) : Proxy at instane"
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.vm_filter",
"url":217,
"doc":"Gets the appropriate filter from the Subclient relevant to the user. Returns: list - list of filter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.vm_diskfilter",
"url":217,
"doc":"Gets the appropriate Diskfilter from the Subclient relevant to the user. Returns: list - list of Diskfilter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.metadata",
"url":217,
"doc":"Get if collect files/metadata value for given subclient. Returns status as True/False (string) Default: False for subclient which doesnt have the property"
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.live_sync",
"url":217,
"doc":"Returns the instance of the VSALiveSync class"
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.cbtvalue",
"url":217,
"doc":"Get CBT value for given subclient. Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.update_properties",
"url":217,
"doc":"child method to add any specific attributes for vsa Args: properties_dict (dict): dict of all propterties of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.browse",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False vm_disk_browse (bool)  browse virtual machine files e.g.; .vmdk files, etc. only applicable when browsing content inside a guest virtual machine default: False vm_files_browse (bool)  browse files and folders default: True operation (str)  Type of operation, browser of find copy_precedence (int)  The copy precedence to do the operation from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.parse_nics_xml",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: input_xml :  nics info xml per vm to parse the nics name and label Returns: nic_list:  list of all Nics for a VM Raise: SDKException: if input parameter is not proper",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.get_nics_from_browse",
"url":217,
"doc":"Browses the vm to get the nics info xml, gets the nics info using the parse_nics_xml method and prepares the dict for nics json Args: copy_precedence (int)  The copy precedence to do browse from Returns: dict:  dict with key as vm_name and the value as the nics info for that vm",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.browse_in_time",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\' returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True vm_disk_browse (bool)  browse the VM disks or not default: False from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.disk_level_browse",
"url":217,
"doc":"Browses the Disks of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  Restore index or not. default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.guest_files_browse",
"url":217,
"doc":"Browses the Files and Folders inside a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.guest_file_restore",
"url":217,
"doc":"perform Guest file restore of the provided path Args: options (dict)  dictionary of guest file restores options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.vm_files_browse",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False operation (str)  The type of operation to perform (browse/find) copy_precedence (int)  The copy precedence to do browse from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.vm_files_browse_in_time",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.set_advanced_vm_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM to restore restore_option: restore options that need to be set for advanced restore option power_on - power on the VM after restore add_to_failover - Register the VM to Failover Cluster datastore - Datastore where the VM needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.set_advanced_attach_disk_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM where disks will be restored restore_option: restore options that need to be set for advanced restore option datastore - Datastore where the disks needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.amazon_defaults",
"url":217,
"doc":"set all the VMconversion changes need to be performed specfic to Amazon Args: vm_to_restore (str) : content of destination subclient object restore_option (dict) : dictionary with all VM restore options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.backup",
"url":217,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup collect_metadata (bool)  Collect Meta data for the backup advanced_options (dict)  advanced backup options to be included while making the request options: create_backup_copy_immediately  Run Backup copy just after snap backup backup_copy_type  Backup Copy level using storage policy or subclient rule schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.preview_content",
"url":217,
"doc":"Preview the subclient and get the content Returns: list - List of the vms as the subclient content",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.quiesce_file_system",
"url":217,
"doc":"Gets the quiesce value set for the vsa subclient Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.amazon_web_services.AmazonVirtualServerSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure",
"url":219,
"doc":"File for operating on a Virtual Server Azure Subclient. AzureSubclient is the only class defined in this file. AzureSubclient: Derived class from VirtualServerSubClient Base class, representing a Azure Subclient, and to perform operations on that Subclient AzureSubclient: full_vm_restore_out_of_place()  restores the VM specified in to the specified client, at the specified destination location full_vm_restore_in_place()  restores the VM specified by the user to the same location"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient",
"url":219,
"doc":"Derived class from VirtualServerSubclient Base class, representing a Azure virtual server subclient,and to perform operations on that subclient. Initialize the Instance object for the given Virtual Server instance. Args: backupset_object (object)  instance of the backupset class subclient_name (str)  subclient name subclient_id (int)  subclient id"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.full_vm_restore_out_of_place",
"url":219,
"doc":"Restores the FULL Virtual machine specified in the input list to the client, at the specified destination location. Args: cloud_service (str)  provide the cloud service storage_account (str)  provide the storage account vm_to_restore (list)  provide the list of VM name(s) to restore overwrite default:False (bool)  overwrite the existing VM poweron default:False (bool)  power on the restored VM restore_option (dict)  complete dictionary with all advanced optio default: {}  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_out_of_place eg: v2_details (dict)  details for v2 subclient eg: check clients.vmclient.VMClient._child_job_subclient_details Returns: object - instance of the Job class for this restore job Raises: SDKException: if destination_path is not a string if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.full_vm_restore_in_place",
"url":219,
"doc":"Restores the FULL Virtual machine specified in the input list to the client, to the location same as source . Args: vm_to_restore (list)  provide the list of VM name(s) to restore overwrite default:true (bool)  overwrite the existing VM power_on (bool)  power on the restored VM default: True copy_precedence (int)  copy precedence value default: 0  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_in_place eg: v2_details (dict)  details for v2 subclient eg: check clients.vmclient.VMClient._child_job_subclient_details Returns: object - instance of the Job class for this restore job Raises: SDKException: if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.disk_pattern",
"url":217,
"doc":"stores the disk pattern of all hypervisors"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.content",
"url":217,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.subclient_proxy",
"url":217,
"doc":"Gets the List of proxies at the Subclient Returns: list (list) : Proxies at the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.instance_proxy",
"url":217,
"doc":"Gets the proxy at instance level Returns: string (string) : Proxy at instane"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.vm_filter",
"url":217,
"doc":"Gets the appropriate filter from the Subclient relevant to the user. Returns: list - list of filter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.vm_diskfilter",
"url":217,
"doc":"Gets the appropriate Diskfilter from the Subclient relevant to the user. Returns: list - list of Diskfilter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.metadata",
"url":217,
"doc":"Get if collect files/metadata value for given subclient. Returns status as True/False (string) Default: False for subclient which doesnt have the property"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.live_sync",
"url":217,
"doc":"Returns the instance of the VSALiveSync class"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.cbtvalue",
"url":217,
"doc":"Get CBT value for given subclient. Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.update_properties",
"url":217,
"doc":"child method to add any specific attributes for vsa Args: properties_dict (dict): dict of all propterties of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.browse",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False vm_disk_browse (bool)  browse virtual machine files e.g.; .vmdk files, etc. only applicable when browsing content inside a guest virtual machine default: False vm_files_browse (bool)  browse files and folders default: True operation (str)  Type of operation, browser of find copy_precedence (int)  The copy precedence to do the operation from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.parse_nics_xml",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: input_xml :  nics info xml per vm to parse the nics name and label Returns: nic_list:  list of all Nics for a VM Raise: SDKException: if input parameter is not proper",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.get_nics_from_browse",
"url":217,
"doc":"Browses the vm to get the nics info xml, gets the nics info using the parse_nics_xml method and prepares the dict for nics json Args: copy_precedence (int)  The copy precedence to do browse from Returns: dict:  dict with key as vm_name and the value as the nics info for that vm",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.browse_in_time",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\' returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True vm_disk_browse (bool)  browse the VM disks or not default: False from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.disk_level_browse",
"url":217,
"doc":"Browses the Disks of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  Restore index or not. default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.guest_files_browse",
"url":217,
"doc":"Browses the Files and Folders inside a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.guest_file_restore",
"url":217,
"doc":"perform Guest file restore of the provided path Args: options (dict)  dictionary of guest file restores options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.vm_files_browse",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False operation (str)  The type of operation to perform (browse/find) copy_precedence (int)  The copy precedence to do browse from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.vm_files_browse_in_time",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.set_advanced_vm_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM to restore restore_option: restore options that need to be set for advanced restore option power_on - power on the VM after restore add_to_failover - Register the VM to Failover Cluster datastore - Datastore where the VM needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.set_advanced_attach_disk_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM where disks will be restored restore_option: restore options that need to be set for advanced restore option datastore - Datastore where the disks needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.amazon_defaults",
"url":217,
"doc":"set all the VMconversion changes need to be performed specfic to Amazon Args: vm_to_restore (str) : content of destination subclient object restore_option (dict) : dictionary with all VM restore options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.backup",
"url":217,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup collect_metadata (bool)  Collect Meta data for the backup advanced_options (dict)  advanced backup options to be included while making the request options: create_backup_copy_immediately  Run Backup copy just after snap backup backup_copy_type  Backup Copy level using storage policy or subclient rule schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.preview_content",
"url":217,
"doc":"Preview the subclient and get the content Returns: list - List of the vms as the subclient content",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.quiesce_file_system",
"url":217,
"doc":"Gets the quiesce value set for the vsa subclient Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure.AzureSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager",
"url":220,
"doc":"File for operating on a Virtual Server AzureRM Subclient. AzureRMSubclient is the only class defined in this file. AzureRMSubclient: Derived class from VirtualServerSubClient Base class, representing a AzureRM Subclient, and to perform operations on that Subclient AzureRMSubclient: full_vm_restore_out_of_place()  restores the VM specified in to the specified client, at the specified destination location full_vm_restore_in_place()  restores the VM specified by the user to the same location full_vm_conversion_azurestack()  converts azure vm to azurestack full_vm_conversion_amazon()  converts azure vm to amazon full_vm_conversion_hyperv()  converts azure vm to hyperv full_vm_conversion_vmware()  converts azure vm to vmware"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient",
"url":220,
"doc":"Derived class from VirtualServerSubclient Base class, representing a AzureRM virtual server subclient,and to perform operations on that subclient. Initialize the Instance object for the given Virtual Server instance. Args class_object (backupset_object, subclient_name, subclient_id)  instance of the backupset class, subclient name, subclient id"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.full_vm_restore_out_of_place",
"url":220,
"doc":"Restores the FULL Virtual machine specified in the input list to the client, at the specified destination location. Args: vm_to_restore (list)  provide the list of VM name(s) to restore resource_group (str)  provide the resource group to restore storage_account (str)  provide the storage account to restore proxy_client (str)  provide the proxy client to restore restore_new_name (str)  provide the new restore name instance_size (str)  provide the instance size of the restore VM createPublicIP default:True (bool)  creates the Public IP of the new VM restoreAsManagedVM default:False (bool)  new VM will be restored as unmanaged VM overwrite default:False (bool)  overwrite the existing VM poweron default:False (bool)  power on the restored VM restore_option (dict)  complete dictionary with all advanced optio default: {} destination_client (str)  destination client name subnet_id (str)  subnet id to which vm must be connected  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_out_of_place eg: v2_details (dict)  details for v2 subclient eg: check clients.vmclient.VMClient._child_job_subclient_details Returns: object - instance of the Job class for this restore job Raises: SDKException: if destination_path is not a string if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.full_vm_restore_in_place",
"url":220,
"doc":"Restores the FULL Virtual machine specified in the input list to the client, to the location same as source . Args: vm_to_restore (list)  provide the list of VM name(s) to restore createPublicIP default:True (bool)  creates the Public IP of the new VM restoreAsManagedVM default:False (bool)  new VM will be restored as unmanaged VM overwrite default:true (bool)  overwrite the existing VM poweron default:true (bool)  power on the restored VM  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_in_place eg: v2_details (dict)  details for v2 subclient eg: check clients.vmclient.VMClient._child_job_subclient_details Returns: object - instance of the Job class for this restore job Raises: SDKException: if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.full_vm_conversion_azurestack",
"url":220,
"doc":"This converts the AzureRM to Azurestack Args: vm_to_restore (list): provide the list of VM name(s) to restore azure_client (str): name of the AzureRM client where the VM should be restored. resource_group (str): destination Resource group in the AzureRM storage_account (str): storage account where the restored VM should be located in AzureRM overwrite (bool): overwrite the existing VM default: True power_on (bool): power on the restored VM default: True instance_size (str): Instance Size of restored VM public_ip (bool): If True, creates the Public IP of restored VM restore_as_managed (bool): If True, restore as Managed VM in Azure copy_precedence (int): copy precedence value default: 0 proxy_client (str): destination proxy client Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.full_vm_conversion_amazon",
"url":220,
"doc":"This converts the AzureRM to Amazon Args: vm_to_restore (list): provide the list of VM name(s) to restore amazon_client (str): name of the Amazon client where the VM should be restored. overwrite (bool): overwrite the existing VM default: True power_on (bool): power on the restored VM default: True copy_precedence (int): copy precedence value default: 0 proxy_client (str): destination proxy client is_aws_proxy (str): boolean value whether proxy resides in AWS or not default: True amazon_bucket (str) : Amazon bucket (required when non-AWS proxy is used) Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.full_vm_conversion_hyperv",
"url":220,
"doc":"This converts the AzureRM to Hyper-v VM Args: hyperv_client(str): name of the hyper-V client where the VM should restored. vm_to_restore(dict): dict containing the VM name(s) to restore as keys and the new VM name(s) as their values. Input empty string for default VM name for restored VM. default: {} DestinationPath (str): DestinationPath in the Hyper-V client proxy_client(str): destination proxy client overwrite (bool): overwrite the existing VM default: True power_on (bool): power on the restored VM default: True copy_precedence (int): copy precedence value default: 0 Destination_network (str): Destination network in the Hyper-V client Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.full_vm_conversion_vmware",
"url":220,
"doc":"This converts the azure VM to VMware Args: vcenter_client (str)  name of the vcenter client where the VM should be restored. destination_os_name (base string)- os of source VM vm_to_restore (dict)  dict containing the VM name(s) to restore as keys and the new VM name(s) as their values. Input empty string for default VM name for restored VM. default: {} esx_host (str)  destination esx host restores to the source VM esx if this value is not specified datastore (str)  datastore where the restored VM should be located restores to the source VM datastore if this value is not specified overwrite (bool)  overwrite the existing VM default: True power_on (bool)  power on the restored VM default: True copy_precedence (int)  copy precedence value default: 0 disk_option (str)  disk provisioning for the restored vm Options for input are: 'Original', 'Thick Lazy Zero', 'Thin', 'Thick Eager Zero' default: Original transport_mode (str)  transport mode to be used for the restore. Options for input are: 'Auto', 'SAN', 'Hot Add', 'NBD', 'NBD SSL' default: Auto proxy_client (str)  destination proxy client destination_network (str) destiantion network to which VM has to be connected Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.disk_pattern",
"url":217,
"doc":"stores the disk pattern of all hypervisors"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.content",
"url":217,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.subclient_proxy",
"url":217,
"doc":"Gets the List of proxies at the Subclient Returns: list (list) : Proxies at the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.instance_proxy",
"url":217,
"doc":"Gets the proxy at instance level Returns: string (string) : Proxy at instane"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.vm_filter",
"url":217,
"doc":"Gets the appropriate filter from the Subclient relevant to the user. Returns: list - list of filter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.vm_diskfilter",
"url":217,
"doc":"Gets the appropriate Diskfilter from the Subclient relevant to the user. Returns: list - list of Diskfilter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.metadata",
"url":217,
"doc":"Get if collect files/metadata value for given subclient. Returns status as True/False (string) Default: False for subclient which doesnt have the property"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.live_sync",
"url":217,
"doc":"Returns the instance of the VSALiveSync class"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.cbtvalue",
"url":217,
"doc":"Get CBT value for given subclient. Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.update_properties",
"url":217,
"doc":"child method to add any specific attributes for vsa Args: properties_dict (dict): dict of all propterties of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.browse",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False vm_disk_browse (bool)  browse virtual machine files e.g.; .vmdk files, etc. only applicable when browsing content inside a guest virtual machine default: False vm_files_browse (bool)  browse files and folders default: True operation (str)  Type of operation, browser of find copy_precedence (int)  The copy precedence to do the operation from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.parse_nics_xml",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: input_xml :  nics info xml per vm to parse the nics name and label Returns: nic_list:  list of all Nics for a VM Raise: SDKException: if input parameter is not proper",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.get_nics_from_browse",
"url":217,
"doc":"Browses the vm to get the nics info xml, gets the nics info using the parse_nics_xml method and prepares the dict for nics json Args: copy_precedence (int)  The copy precedence to do browse from Returns: dict:  dict with key as vm_name and the value as the nics info for that vm",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.browse_in_time",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\' returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True vm_disk_browse (bool)  browse the VM disks or not default: False from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.disk_level_browse",
"url":217,
"doc":"Browses the Disks of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  Restore index or not. default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.guest_files_browse",
"url":217,
"doc":"Browses the Files and Folders inside a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.guest_file_restore",
"url":217,
"doc":"perform Guest file restore of the provided path Args: options (dict)  dictionary of guest file restores options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.vm_files_browse",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False operation (str)  The type of operation to perform (browse/find) copy_precedence (int)  The copy precedence to do browse from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.vm_files_browse_in_time",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.set_advanced_vm_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM to restore restore_option: restore options that need to be set for advanced restore option power_on - power on the VM after restore add_to_failover - Register the VM to Failover Cluster datastore - Datastore where the VM needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.set_advanced_attach_disk_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM where disks will be restored restore_option: restore options that need to be set for advanced restore option datastore - Datastore where the disks needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.amazon_defaults",
"url":217,
"doc":"set all the VMconversion changes need to be performed specfic to Amazon Args: vm_to_restore (str) : content of destination subclient object restore_option (dict) : dictionary with all VM restore options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.backup",
"url":217,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup collect_metadata (bool)  Collect Meta data for the backup advanced_options (dict)  advanced backup options to be included while making the request options: create_backup_copy_immediately  Run Backup copy just after snap backup backup_copy_type  Backup Copy level using storage policy or subclient rule schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.preview_content",
"url":217,
"doc":"Preview the subclient and get the content Returns: list - List of the vms as the subclient content",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.quiesce_file_system",
"url":217,
"doc":"Gets the quiesce value set for the vsa subclient Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_resource_manager.AzureRMSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack",
"url":221,
"doc":"File for operating on a Virtual Server AzureStack Subclient. AzureStackSubclient is the only class defined in this file. AzureStackSubclient: Derived class from VirtualServerSubClient Base class, representing a AzureStack Subclient, and to perform operations on that Subclient AzureStackSubclient: full_vm_restore_out_of_place()  restores the VM specified in to the specified client, at the specified destination location full_vm_restore_in_place()  restores the VM specified by the user to the same location"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient",
"url":221,
"doc":"Derived class from VirtualServerSubclient Base class, representing a AzureStack virtual server subclient,and to perform operations on that subclient. Initialize the Instance object for the given Virtual Server instance. Args class_object (backupset_object, subclient_name, subclient_id)  instance of the backupset class, subclient name, subclient id"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.full_vm_restore_out_of_place",
"url":221,
"doc":"Restores the FULL Virtual machine specified in the input list to the client, at the specified destination location. Args: vm_to_restore (list)  provide the list of VM name(s) to restore resource_group (str)  provide the resource group to restore storage_account (str)  provide the storage account to restore proxy_client (str)  provide the proxy client to restore restore_new_name (str)  provide the new restore name instance_size (str)  provide the instance size of the restore VM createPublicIP default:True (bool)  creates the Public IP of the new VM restoreAsManagedVM default:False (bool)  new VM will be restored as unmanaged VM overwrite default:False (bool)  overwrite the existing VM poweron default:False (bool)  power on the restored VM restore_option (dict)  complete dictionary with all advanced optio default: {}  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_out_of_place eg: v2_details (dict)  details for v2 subclient eg: check clients.vmclient.VMClient._child_job_subclient_details Returns: object - instance of the Job class for this restore job Raises: SDKException: if destination_path is not a string if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.full_vm_restore_in_place",
"url":221,
"doc":"Restores the FULL Virtual machine specified in the input list to the client, to the location same as source . Args: vm_to_restore (list)  provide the of list VM name(s) to restore createPublicIP default:True (bool)  creates the Public IP of the new VM restoreAsManagedVM default:False (bool)  new VM will be restored as unmanaged VM overwrite default:true (bool)  overwrite the existing VM poweron default:true (bool)  power on the restored VM Returns: object - instance of the Job class for this restore job Raises: SDKException: if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.disk_pattern",
"url":217,
"doc":"stores the disk pattern of all hypervisors"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.content",
"url":217,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.subclient_proxy",
"url":217,
"doc":"Gets the List of proxies at the Subclient Returns: list (list) : Proxies at the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.instance_proxy",
"url":217,
"doc":"Gets the proxy at instance level Returns: string (string) : Proxy at instane"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.vm_filter",
"url":217,
"doc":"Gets the appropriate filter from the Subclient relevant to the user. Returns: list - list of filter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.vm_diskfilter",
"url":217,
"doc":"Gets the appropriate Diskfilter from the Subclient relevant to the user. Returns: list - list of Diskfilter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.metadata",
"url":217,
"doc":"Get if collect files/metadata value for given subclient. Returns status as True/False (string) Default: False for subclient which doesnt have the property"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.live_sync",
"url":217,
"doc":"Returns the instance of the VSALiveSync class"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.cbtvalue",
"url":217,
"doc":"Get CBT value for given subclient. Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.update_properties",
"url":217,
"doc":"child method to add any specific attributes for vsa Args: properties_dict (dict): dict of all propterties of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.browse",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False vm_disk_browse (bool)  browse virtual machine files e.g.; .vmdk files, etc. only applicable when browsing content inside a guest virtual machine default: False vm_files_browse (bool)  browse files and folders default: True operation (str)  Type of operation, browser of find copy_precedence (int)  The copy precedence to do the operation from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.parse_nics_xml",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: input_xml :  nics info xml per vm to parse the nics name and label Returns: nic_list:  list of all Nics for a VM Raise: SDKException: if input parameter is not proper",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.get_nics_from_browse",
"url":217,
"doc":"Browses the vm to get the nics info xml, gets the nics info using the parse_nics_xml method and prepares the dict for nics json Args: copy_precedence (int)  The copy precedence to do browse from Returns: dict:  dict with key as vm_name and the value as the nics info for that vm",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.browse_in_time",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\' returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True vm_disk_browse (bool)  browse the VM disks or not default: False from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.disk_level_browse",
"url":217,
"doc":"Browses the Disks of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  Restore index or not. default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.guest_files_browse",
"url":217,
"doc":"Browses the Files and Folders inside a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.guest_file_restore",
"url":217,
"doc":"perform Guest file restore of the provided path Args: options (dict)  dictionary of guest file restores options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.vm_files_browse",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False operation (str)  The type of operation to perform (browse/find) copy_precedence (int)  The copy precedence to do browse from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.vm_files_browse_in_time",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.set_advanced_vm_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM to restore restore_option: restore options that need to be set for advanced restore option power_on - power on the VM after restore add_to_failover - Register the VM to Failover Cluster datastore - Datastore where the VM needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.set_advanced_attach_disk_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM where disks will be restored restore_option: restore options that need to be set for advanced restore option datastore - Datastore where the disks needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.amazon_defaults",
"url":217,
"doc":"set all the VMconversion changes need to be performed specfic to Amazon Args: vm_to_restore (str) : content of destination subclient object restore_option (dict) : dictionary with all VM restore options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.backup",
"url":217,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup collect_metadata (bool)  Collect Meta data for the backup advanced_options (dict)  advanced backup options to be included while making the request options: create_backup_copy_immediately  Run Backup copy just after snap backup backup_copy_type  Backup Copy level using storage policy or subclient rule schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.preview_content",
"url":217,
"doc":"Preview the subclient and get the content Returns: list - List of the vms as the subclient content",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.quiesce_file_system",
"url":217,
"doc":"Gets the quiesce value set for the vsa subclient Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.azure_stack.AzureStackSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute",
"url":222,
"doc":"File for operating on a Virtual Server FusionCompute Subclient. FusionComputeVirtualServerSubclient is the only class defined in this file. FusionComputeVirtualServerSubclient: Derived class from VirtualServerSubClient Base class, representing a FusionCompute Subclient, and to perform operations on that Subclient FusionComputeVirtualServerSubclient: __init__(,backupset_object, subclient_name, subclient_id) initialize object of FusionCompute subclient object associated with the VirtualServer subclient full_vm_restore_out_of_place()  restores the VM specified in to the specified client, at the specified destination location full_vm_restore_in_place()  restores the VM specified by the user to the same location"
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient",
"url":222,
"doc":"Derived class from VirtualServerSubclient Base class. This represents a Fusion Compute virtual server subclient, and can perform restore operations on only that subclient. Initialize the Instance object for the given Virtual Server instance. Args class_object (backupset_object, subclient_name, subclient_id)  instance of the backupset class, subclient name, subclient id"
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.full_vm_restore_in_place",
"url":222,
"doc":"Restores the FULL Virtual machine specified in the input list to the location same as the actual location of the VM in VCenter. Args: vm_to_restore (list)  provide the VM name to restore default: None overwrite (bool)  overwrite the existing VM default: True power_on (bool)  power on the restored VM default: True copy_precedence (int)  copy precedence value default: 0 proxy_client (str)  proxy client to be used for restore default: proxy added in subclient  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_out_of_place eg: v2_details (dict)  details for v2 subclient eg: check clients.vmclient.VMClient._child_job_subclient_details Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.full_vm_restore_out_of_place",
"url":222,
"doc":"Restores the FULL Virtual machine specified in the input list to the provided vcenter client along with the ESX and the datastores. If the provided client name is none then it restores the Full Virtual Machine to the source client and corresponding ESX and datastore. Args: vm_to_restore (list)  provide the VM name to restore default: None destination_client (str)  name of the Pseudo client where the VM should be restored. new_name (str)  new name to be given to the restored VM host (str)  destination cluster or host restores to the source VM esx if this value is not specified datastore (str)  datastore where the restored VM should be located restores to the source VM datastore if this value is not specified overwrite (bool)  overwrite the existing VM default: True power_on (bool)  power on the restored VM default: True copy_precedence (int)  copy precedence value default: 0 disk_provisioning (str)  disk provisioning for the restored vm default: 0 which is equivalent to Original proxy_client (str)  proxy client to be used for restore default: proxy added in subclient  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_out_of_place eg: v2_details (dict)  details for v2 subclient eg: check clients.vmclient.VMClient._child_job_subclient_details Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.disk_pattern",
"url":217,
"doc":"stores the disk pattern of all hypervisors"
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.content",
"url":217,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.subclient_proxy",
"url":217,
"doc":"Gets the List of proxies at the Subclient Returns: list (list) : Proxies at the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.instance_proxy",
"url":217,
"doc":"Gets the proxy at instance level Returns: string (string) : Proxy at instane"
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.vm_filter",
"url":217,
"doc":"Gets the appropriate filter from the Subclient relevant to the user. Returns: list - list of filter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.vm_diskfilter",
"url":217,
"doc":"Gets the appropriate Diskfilter from the Subclient relevant to the user. Returns: list - list of Diskfilter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.metadata",
"url":217,
"doc":"Get if collect files/metadata value for given subclient. Returns status as True/False (string) Default: False for subclient which doesnt have the property"
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.live_sync",
"url":217,
"doc":"Returns the instance of the VSALiveSync class"
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.cbtvalue",
"url":217,
"doc":"Get CBT value for given subclient. Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.update_properties",
"url":217,
"doc":"child method to add any specific attributes for vsa Args: properties_dict (dict): dict of all propterties of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.browse",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False vm_disk_browse (bool)  browse virtual machine files e.g.; .vmdk files, etc. only applicable when browsing content inside a guest virtual machine default: False vm_files_browse (bool)  browse files and folders default: True operation (str)  Type of operation, browser of find copy_precedence (int)  The copy precedence to do the operation from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.parse_nics_xml",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: input_xml :  nics info xml per vm to parse the nics name and label Returns: nic_list:  list of all Nics for a VM Raise: SDKException: if input parameter is not proper",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.get_nics_from_browse",
"url":217,
"doc":"Browses the vm to get the nics info xml, gets the nics info using the parse_nics_xml method and prepares the dict for nics json Args: copy_precedence (int)  The copy precedence to do browse from Returns: dict:  dict with key as vm_name and the value as the nics info for that vm",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.browse_in_time",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\' returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True vm_disk_browse (bool)  browse the VM disks or not default: False from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.disk_level_browse",
"url":217,
"doc":"Browses the Disks of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  Restore index or not. default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.guest_files_browse",
"url":217,
"doc":"Browses the Files and Folders inside a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.guest_file_restore",
"url":217,
"doc":"perform Guest file restore of the provided path Args: options (dict)  dictionary of guest file restores options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.vm_files_browse",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False operation (str)  The type of operation to perform (browse/find) copy_precedence (int)  The copy precedence to do browse from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.vm_files_browse_in_time",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.set_advanced_vm_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM to restore restore_option: restore options that need to be set for advanced restore option power_on - power on the VM after restore add_to_failover - Register the VM to Failover Cluster datastore - Datastore where the VM needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.set_advanced_attach_disk_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM where disks will be restored restore_option: restore options that need to be set for advanced restore option datastore - Datastore where the disks needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.amazon_defaults",
"url":217,
"doc":"set all the VMconversion changes need to be performed specfic to Amazon Args: vm_to_restore (str) : content of destination subclient object restore_option (dict) : dictionary with all VM restore options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.backup",
"url":217,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup collect_metadata (bool)  Collect Meta data for the backup advanced_options (dict)  advanced backup options to be included while making the request options: create_backup_copy_immediately  Run Backup copy just after snap backup backup_copy_type  Backup Copy level using storage policy or subclient rule schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.preview_content",
"url":217,
"doc":"Preview the subclient and get the content Returns: list - List of the vms as the subclient content",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.quiesce_file_system",
"url":217,
"doc":"Gets the quiesce value set for the vsa subclient Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.fusioncompute.FusionComputeVirtualServerSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform",
"url":223,
"doc":"File for operating on a Virtual Server Googlecloud Subclient. GooglecloudVirtualServerSubclient is the only class defined in this file. GooglecloudVirtualServerSubclient: Derived class from VirtualServerSubClient Base class, representing a FusionCompute Subclient, and to perform operations on that Subclient GooglecloudVirtualServerSubclient: __init__(,backupset_object, subclient_name, subclient_id) initialize object of googlecloud subclient object associated with the VirtualServer subclient full_vm_restore_out_of_place()  restores the VM specified in to the specified client, at the specified destination location full_vm_restore_in_place()  restores the VM specified by the user to the same location"
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient",
"url":223,
"doc":"Derived class from VirtualServerSubclient Base class. This represents a Google cloud virtual server subclient, and can perform restore operations on only that subclient. Initialize the Instance object for the given Virtual Server instance. Args class_object (backupset_object, subclient_name, subclient_id)  instance of the backupset class, subclient name, subclient id"
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.full_vm_restore_in_place",
"url":223,
"doc":"Restores the FULL Virtual machine specified in the input list to the location same as the actual location of the VM in VCenter. Args: vm_to_restore (list)  provide the list of VM name to restore default: None overwrite (bool)  overwrite the existing VM default: True power_on (bool)  power on the restored VM default: True copy_precedence (int)  copy precedence value default: 0 proxy_client (str)  proxy client to be used for restore default: proxy added in subclient  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_in_place eg: v2_details (dict)  details for v2 subclient eg: check clients.vmclient.VMClient._child_job_subclient_details Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.full_vm_restore_out_of_place",
"url":223,
"doc":"Restores the FULL Virtual machine specified in the input list to the client, at the specified destination location. Args: vm_to_restore (list): provide the list of VM name to restore default: None proxy_client (str): proxy client to be used for restore default: proxy added in subclient new_name (str): new name to be given to the restored VM overwrite (bool): overwrite the existing VM default: True power_on (bool): power on the restored VM default: True copy_precedence (int)  copy precedence value default: 0  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_out_of_place eg: v2_details (dict)  details for v2 subclient eg: check clients.vmclient.VMClient._child_job_subclient_details destination_network (string)  Name of the destination network networks_nic (string)  Link for the destination network subnetwork_nic (string)  Link for the destination subnetwork Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.disk_pattern",
"url":217,
"doc":"stores the disk pattern of all hypervisors"
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.content",
"url":217,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.subclient_proxy",
"url":217,
"doc":"Gets the List of proxies at the Subclient Returns: list (list) : Proxies at the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.instance_proxy",
"url":217,
"doc":"Gets the proxy at instance level Returns: string (string) : Proxy at instane"
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.vm_filter",
"url":217,
"doc":"Gets the appropriate filter from the Subclient relevant to the user. Returns: list - list of filter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.vm_diskfilter",
"url":217,
"doc":"Gets the appropriate Diskfilter from the Subclient relevant to the user. Returns: list - list of Diskfilter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.metadata",
"url":217,
"doc":"Get if collect files/metadata value for given subclient. Returns status as True/False (string) Default: False for subclient which doesnt have the property"
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.live_sync",
"url":217,
"doc":"Returns the instance of the VSALiveSync class"
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.cbtvalue",
"url":217,
"doc":"Get CBT value for given subclient. Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.update_properties",
"url":217,
"doc":"child method to add any specific attributes for vsa Args: properties_dict (dict): dict of all propterties of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.browse",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False vm_disk_browse (bool)  browse virtual machine files e.g.; .vmdk files, etc. only applicable when browsing content inside a guest virtual machine default: False vm_files_browse (bool)  browse files and folders default: True operation (str)  Type of operation, browser of find copy_precedence (int)  The copy precedence to do the operation from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.parse_nics_xml",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: input_xml :  nics info xml per vm to parse the nics name and label Returns: nic_list:  list of all Nics for a VM Raise: SDKException: if input parameter is not proper",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.get_nics_from_browse",
"url":217,
"doc":"Browses the vm to get the nics info xml, gets the nics info using the parse_nics_xml method and prepares the dict for nics json Args: copy_precedence (int)  The copy precedence to do browse from Returns: dict:  dict with key as vm_name and the value as the nics info for that vm",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.browse_in_time",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\' returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True vm_disk_browse (bool)  browse the VM disks or not default: False from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.disk_level_browse",
"url":217,
"doc":"Browses the Disks of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  Restore index or not. default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.guest_files_browse",
"url":217,
"doc":"Browses the Files and Folders inside a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.guest_file_restore",
"url":217,
"doc":"perform Guest file restore of the provided path Args: options (dict)  dictionary of guest file restores options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.vm_files_browse",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False operation (str)  The type of operation to perform (browse/find) copy_precedence (int)  The copy precedence to do browse from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.vm_files_browse_in_time",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.set_advanced_vm_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM to restore restore_option: restore options that need to be set for advanced restore option power_on - power on the VM after restore add_to_failover - Register the VM to Failover Cluster datastore - Datastore where the VM needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.set_advanced_attach_disk_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM where disks will be restored restore_option: restore options that need to be set for advanced restore option datastore - Datastore where the disks needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.amazon_defaults",
"url":217,
"doc":"set all the VMconversion changes need to be performed specfic to Amazon Args: vm_to_restore (str) : content of destination subclient object restore_option (dict) : dictionary with all VM restore options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.backup",
"url":217,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup collect_metadata (bool)  Collect Meta data for the backup advanced_options (dict)  advanced backup options to be included while making the request options: create_backup_copy_immediately  Run Backup copy just after snap backup backup_copy_type  Backup Copy level using storage policy or subclient rule schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.preview_content",
"url":217,
"doc":"Preview the subclient and get the content Returns: list - List of the vms as the subclient content",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.quiesce_file_system",
"url":217,
"doc":"Gets the quiesce value set for the vsa subclient Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.google_cloud_platform.GooglecloudVirtualServerSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv",
"url":224,
"doc":"File for operating on a Virtual Server Hyper-V Subclient. HyperVVirtualServerSubclient is the only class defined in this file. HyperVVirtualServerSubclient: Derived class from VirtualServerSubClient Base class, representing a Hyper-V Subclient, and to perform operations on that Subclient HypervSubclient: __init__(,backupset_object, subclient_name, subclient_id)  initialize object of hyper-v subclient object associated with the VirtualServer subclient disk_restore()  Perform Disk Restore on Hyper-V Subclient full_vm_restore_out_of_place()  restores the VM specified in to the specified client, at the specified destination location full_vm_restore_in_place()  restores the VM specified by the user to the same location"
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient",
"url":224,
"doc":"Derived class from VirtualServerSubclient Base class, representing a Hyper-V virtual server subclient,and to perform operations on that subclient. Initialize the Instance object for the given Virtual Server instance. Args class_object (backupset_object, subclient_name, subclient_id)  instance of the backupset class, subclient name, subclient id"
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.disk_pattern",
"url":224,
"doc":"stores the disk pattern of all hypervisors"
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.disk_restore",
"url":224,
"doc":"Restores the disk specified in the input paths list to the same location Args: vm_name (str)  VM from which disk is to be restored proxy_client (str)  Destination client to whihc disk is to be restored client (str)  name of the client to restore disk destinationpath (str)  path where the disk needs to be restored copy_precedence (int)  SP copy precedence from which browse has to be performed disk_Name (str)  name of the disk which has to be restored convert_to (str)  to convert the disk to the specified format default: None. media_agent (str)  MA needs to use for disk browse default :Storage policy MA snap_proxy (str)  proxy need to be used for disk restores from snap default :proxy in instance or subclient Returns: object - instance of the Job class for this restore job Raises: SDKException: if destinationpath is not str if client is not str or object if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.full_vm_restore_out_of_place",
"url":224,
"doc":"Restores the FULL Virtual machine specified in the input list to the client, at the specified destination location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client vm_to_restore (list)  provide the list of VM name(s) to restore overwrite default:False (bool)  overwrite the existing VM poweron default:False (bool)  power on the restored VM network (str)  Network interface card to be used add_to_failover default:False (bool)  Add the Restored VM to Failover Cluster restore_option (dict)  complete dictionary with all advanced optio default: {} snap_proxy (strig)  Snap proxy to be used for restore media_agent (string)  Media Agent to be used for Browse  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_out_of_place eg: v2_details (dict)  details for v2 subclient eg: check clients.vmclient.VMClient._child_job_subclient_details value: preserve_level (int) - set the preserve level in restore unconditional_overwrite (bool) - unconditionally overwrite the disk in the restore path destination_path (str) - path where the disk needs to be restored destination_client (str) - Hyperv Host Client Name where VM needs to be restored destination_vendor (int) - vendor id of the Hypervisor destination_disktype (str) - type of disk needs to be restored like VHDX,VHD,VMDK source_item (str) - GUID of VM from which disk needs to be restored eg:\\5F9FA60C-0A89-4BD9-9D02-C5ACB42745EA copy_precedence_applicable (str) - True if needs copy_precedence to be honoured else False copy_precedence (int) - the copy id from which browse and restore needs to be performed power_on (bool) - power on the VM after restore add_to_failover (bool)- Register the VM to Failover Cluster datastore (str) - Datastore where the VM needs to be restored disks (list of dict) (list) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid (str)- GUID of the VM needs to be restored new_name (str)- New name for the VM to be restored esx_host (str)- esx_host or client name where it need to be restored name (str)- name of the VM to be restored Returns: object - instance of the Job class for this restore job Raises: SDKException: if destination_path is not a string if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.full_vm_restore_in_place",
"url":224,
"doc":"Restores the FULL Virtual machine specified in the input list to the client, to the location same as source . Args: vm_to_restore (list)  provide the list of VM name(s) to restore overwrite default:true (bool)  overwrite the existing VM poweron default:true (bool)  power on the restored VM add_to_failover default:False (bool)  Add the Restored VM to Failover Cluster snap_proxy (str)  proxy need to be used for disk restores from snap default :proxy in instance or subclient  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_out_of_place eg: v2_details (dict)  details for v2 subclient eg: check clients.vmclient.VMClient._child_job_subclient_details Returns: object - instance of the Job class for this restore job Raises: SDKException: if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.full_vm_conversion_vmware",
"url":224,
"doc":"This converts the Hyperv VM to VMware Args: vm_to_restore (dict)  dict containing the VM name(s) to restore as keys and the new VM name(s) as their values. Input empty string for default VM name for restored VM. default: {} vcenter_client (str)  name of the vcenter client where the VM should be restored. esx_host (str)  destination esx host restores to the source VM esx if this value is not specified datastore (str)  datastore where the restored VM should be located restores to the source VM datastore if this value is not specified overwrite (bool)  overwrite the existing VM default: True power_on (bool)  power on the restored VM default: True copy_precedence (int)  copy precedence value default: 0 disk_option (str)  disk provisioning for the restored vm Options for input are: 'Original', 'Thick Lazy Zero', 'Thin', 'Thick Eager Zero' default: Original transport_mode (str)  transport mode to be used for the restore. Options for input are: 'Auto', 'SAN', 'Hot Add', 'NBD', 'NBD SSL' default: Auto proxy_client (str)  destination proxy client destination_network (str) destiantion network to which VM has to be connected destiantion_os (base string)- os of source VM Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.full_vm_conversion_azurerm",
"url":224,
"doc":"This converts the Hyperv VM to AzureRM Args: vm_to_restore (dict): dict containing the VM name(s) to restore as keys and the new VM name(s) as their values. Input empty string for default VM name for restored VM. default: {} azure_client (str): name of the AzureRM client where the VM should be restored. resource_group (str): destination Resource group in the AzureRM storage_account (str): storage account where the restored VM should be located in AzureRM overwrite (bool): overwrite the existing VM default: True power_on (bool): power on the restored VM default: True instance_size (str): Instance Size of restored VM public_ip (bool): If True, creates the Public IP of restored VM restore_as_managed (bool): If True, restore as Managed VM in Azure copy_precedence (int): copy precedence value default: 0 proxy_client (str): destination proxy client networkDisplayName(str): destination network display name networkrsg (str): destination network display name's security group destsubid (str): destination subscription id subnetId (str): destination subet id Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.content",
"url":217,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.subclient_proxy",
"url":217,
"doc":"Gets the List of proxies at the Subclient Returns: list (list) : Proxies at the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.instance_proxy",
"url":217,
"doc":"Gets the proxy at instance level Returns: string (string) : Proxy at instane"
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.vm_filter",
"url":217,
"doc":"Gets the appropriate filter from the Subclient relevant to the user. Returns: list - list of filter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.vm_diskfilter",
"url":217,
"doc":"Gets the appropriate Diskfilter from the Subclient relevant to the user. Returns: list - list of Diskfilter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.metadata",
"url":217,
"doc":"Get if collect files/metadata value for given subclient. Returns status as True/False (string) Default: False for subclient which doesnt have the property"
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.live_sync",
"url":217,
"doc":"Returns the instance of the VSALiveSync class"
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.cbtvalue",
"url":217,
"doc":"Get CBT value for given subclient. Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.update_properties",
"url":217,
"doc":"child method to add any specific attributes for vsa Args: properties_dict (dict): dict of all propterties of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.browse",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False vm_disk_browse (bool)  browse virtual machine files e.g.; .vmdk files, etc. only applicable when browsing content inside a guest virtual machine default: False vm_files_browse (bool)  browse files and folders default: True operation (str)  Type of operation, browser of find copy_precedence (int)  The copy precedence to do the operation from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.parse_nics_xml",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: input_xml :  nics info xml per vm to parse the nics name and label Returns: nic_list:  list of all Nics for a VM Raise: SDKException: if input parameter is not proper",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.get_nics_from_browse",
"url":217,
"doc":"Browses the vm to get the nics info xml, gets the nics info using the parse_nics_xml method and prepares the dict for nics json Args: copy_precedence (int)  The copy precedence to do browse from Returns: dict:  dict with key as vm_name and the value as the nics info for that vm",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.browse_in_time",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\' returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True vm_disk_browse (bool)  browse the VM disks or not default: False from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.disk_level_browse",
"url":217,
"doc":"Browses the Disks of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  Restore index or not. default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.guest_files_browse",
"url":217,
"doc":"Browses the Files and Folders inside a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.guest_file_restore",
"url":217,
"doc":"perform Guest file restore of the provided path Args: options (dict)  dictionary of guest file restores options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.vm_files_browse",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False operation (str)  The type of operation to perform (browse/find) copy_precedence (int)  The copy precedence to do browse from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.vm_files_browse_in_time",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.set_advanced_vm_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM to restore restore_option: restore options that need to be set for advanced restore option power_on - power on the VM after restore add_to_failover - Register the VM to Failover Cluster datastore - Datastore where the VM needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.set_advanced_attach_disk_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM where disks will be restored restore_option: restore options that need to be set for advanced restore option datastore - Datastore where the disks needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.amazon_defaults",
"url":217,
"doc":"set all the VMconversion changes need to be performed specfic to Amazon Args: vm_to_restore (str) : content of destination subclient object restore_option (dict) : dictionary with all VM restore options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.backup",
"url":217,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup collect_metadata (bool)  Collect Meta data for the backup advanced_options (dict)  advanced backup options to be included while making the request options: create_backup_copy_immediately  Run Backup copy just after snap backup backup_copy_type  Backup Copy level using storage policy or subclient rule schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.preview_content",
"url":217,
"doc":"Preview the subclient and get the content Returns: list - List of the vms as the subclient content",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.quiesce_file_system",
"url":217,
"doc":"Gets the quiesce value set for the vsa subclient Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.hyperv.HyperVVirtualServerSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes",
"url":225,
"doc":"File for operating on a Virtual Server Kubernetes Subclient. KubernetesVirtualServerSubclient and ApplicationGroups are the only class defined in this file. Class: KubernetesVirtualServerSubclient: Derived class from VirtualServerSubClient Base class,representing a Kubernetes Subclient, and to perform operations on that Subclient KubernetesVirtualServerSubclient: __init__( backupset_object, subclient_name, subclient_id)  initialize object of Kubernetes subclient class, associated with the VirtualServer subclient full_vm_restore_in_place()  restores the pod specified by the user to the same location full_vm_restore_out_of_place()  restores the pod specified to the provided Kubernetes psuedoclient _prepare_kubernetes_restore_json()  Restore json prep method for kubernetes _json_restore_volumeRstOption()  Restores json for volumeRstOptions set_advanced_vm_restore_options()  Advanced VM restore options _json_restore_virtualServerRstOption()  json for VirtualServerRst options for Kubernetes. disk_restore()  Function to restore disk. enable_intelli_snap()  Enables Intellisnap on subclient guest_file_restore()  Restore the files and folders to file system destionation or to target PVC guest_files_browse()  Browse files in a application at any point in time namespace_restore_in_place()  Perform a namespace level restore in-place namespace_restore_out_of_place() Perform a namespace level restore out-of-place Class: ApplicationGroups: Derived class from Subclients Base class,representing a Kubernetes ApplicationGroups, and to perform operations on that ApplicationGroups ApplicationGroups: __init__(class_object)  initialize object of Kubernetes subclient class, associated with the VirtualServer subclient browse()  Browse cluster for namespace, applications, volumes, or labels get_children_node()  Construct the json object for content and filter create_application_group()  creates application group"
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient",
"url":225,
"doc":"Derived class from VirtualServerSubclient Base class. This represents a Kubernetes virtual server subclient, and can perform restore operations on only that subclient. Initialize the Instance object for the given Virtual Server instance. Args class_object (backupset_object, subclient_name, subclient_id)  instance of the backupset class, subclient name, subclient id"
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.full_app_restore_out_of_place",
"url":225,
"doc":"Restores the FULL Application specified in the input list to the provided Kubernetes client at the specified namespace with storage class. If the provided client name is none then it restores the Full Application to the source Kubernetes client and corresponding namespace and storage class. Args: apps_to_restore (list)  List of Applications that is to be restored restored_app_name (dict)  Dictionary mapping new name of Applications kubernetes_client (str)  Name of the Kubernetes client where the Application should be restored Restores to the source Kubernetes client if this value is not specified storage_class (str)  Storage class for the PVC to be restored with. Uses source storage class if not specified. restore_namespace (str)  Target namespace where Applications are to be restored overwrite (bool)  overwrite the existing Applications if exists default: True copy_precedence (int)  copy precedence value default: 0 proxy_client (str)  destination proxy client Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.set_advanced_vm_restore_options",
"url":225,
"doc":"set the advanced restore options for all vm in restore param vm_to_restore - Name of the Application to restore restore_option - restore options that need to be set for advanced restore option power_on - power on the Application after restore add_to_failover - Register the Application to Failover Cluster datastore - Datastore where the Application needs to be restored disks (list of dict) - list with dict for each disk in Application eg: [{ name:\"pvc-1\" datastore:\"storageclass-1\" } { name:\"pvc-2\" datastore:\"storageclass-2\" } ] guid - GUID of the Application needs to be restored new_name - New name for the Application to be restored esx_host - client name where it need to be restored name - name of the Application to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.full_app_restore_in_place",
"url":225,
"doc":"Restores the FULL Application specified in the input list to the location same as the actual location of the Application in Kubernetes cluster. Args: apps_to_restore (list)  List of applications to restore overwrite (bool)  overwrite the existing Applications if exists default: True copy_precedence (int)  copy precedence value default: 0 proxy_client (str)  proxy client to be used for restore default: proxy added in application group/cluster Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.disk_restore",
"url":225,
"doc":"Restores the disk specified in the input paths list to the same location Args: application_name (str)  Name of the Application added in subclient content whose disk is selected for restore destination_path (str)  Staging (destination) path to restore the disk. disk_name (list)  name of the disk which has to be restored (only yaml files permitted - enter full name of the disk) default: None proxy_client (str)  Destination proxy client to be used default: None Kwargs: Allows parameters to modify disk restore  copy_precedence (int)  SP copy precedence from which browse has to media_agent (str)  MA needs to use for disk browse default :Storage policy MA snap_proxy (str)  proxy need to be used for disk restores from snap default :proxy in instance or subclient disk_extension (str)  Extension of disk file (Default: '.yaml') Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not passed in proper expected format if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.enable_intelli_snap",
"url":225,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name proxy_options (str)  to set proxy for Kubernetes snapshot_engine_id (int)  Snapshot engine id Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.guest_file_restore",
"url":225,
"doc":"perform Guest file restore of the provided path Args: application_name_name (str)  Name of the source application destination_path (str)  Path at the destination to restore at volume_level_restore (str)  Flag to denote volume_level_restore Accepted values - 6 for restore to PVC 7 for FS Destination restore disk_name (str)  Name of the source PVC proxy_client (str)  Access node for restore restore_list (str)  List of files or folders to restore. Contains Full path of files or folders relative to PVC mount point. Eg. if /tmp is the mount point with files or folder /tmp/folder1/file1, restore list should have format 'folder1/file1' restore_pvc_guid (str)  strGUID of the target PVC Kwargs: copy_precedence (int)  To set copy precedence for restore disk_extension (str)  Extention of the disk unconditional_overwrite (int)  To set unconditional overwrite for restore show_deleted_files (bool)  Whether to show deleted files in browse in_place (bool)  If restore job is inplace Raises: SDK Exception if -inputs are not of correct type as per definition -invalid volume_level_restore passed",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.guest_files_browse",
"url":225,
"doc":"Browses the Files and Folders inside a Virtual Machine in the time range specified. Args: application_path (str)  folder path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.namespace_restore_out_of_place",
"url":225,
"doc":"Perform a namespace-level restore out-of-place Args: namespace_to_restore (list)  List of namespaces to restore target_namespace_name (dict)  Target namespace name to perform restore at Eg. {'namespace1': 'namespace1-rst'} target_cluster_name (str)  Name of the target cluster to restore at storage_class_map (dict)  Mapping of storage classes for transformation Eg. {'rook-ceph-block' : 'azurefile'} overwrite (bool)  Overwrite the existing namespace Default: true copy_precedence (int)  Copy preceedence value proxy_client (str)  Name of the proxy client to launch restore Default : None (Automatic) Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.namespace_restore_in_place",
"url":225,
"doc":"Perform a namespace-level restore in-place Args: namespace_to_restore (list)  List of namespaces to restore overwrite (bool)  Overwrite the existing namespace Default: true copy_precedence (int)  Copy preceedence value proxy_client (str)  Name of the proxy client to launch restore Default : None (Automatic) Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.disk_pattern",
"url":217,
"doc":"stores the disk pattern of all hypervisors"
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.content",
"url":217,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.subclient_proxy",
"url":217,
"doc":"Gets the List of proxies at the Subclient Returns: list (list) : Proxies at the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.instance_proxy",
"url":217,
"doc":"Gets the proxy at instance level Returns: string (string) : Proxy at instane"
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.vm_filter",
"url":217,
"doc":"Gets the appropriate filter from the Subclient relevant to the user. Returns: list - list of filter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.vm_diskfilter",
"url":217,
"doc":"Gets the appropriate Diskfilter from the Subclient relevant to the user. Returns: list - list of Diskfilter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.metadata",
"url":217,
"doc":"Get if collect files/metadata value for given subclient. Returns status as True/False (string) Default: False for subclient which doesnt have the property"
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.live_sync",
"url":217,
"doc":"Returns the instance of the VSALiveSync class"
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.cbtvalue",
"url":217,
"doc":"Get CBT value for given subclient. Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.update_properties",
"url":217,
"doc":"child method to add any specific attributes for vsa Args: properties_dict (dict): dict of all propterties of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.browse",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False vm_disk_browse (bool)  browse virtual machine files e.g.; .vmdk files, etc. only applicable when browsing content inside a guest virtual machine default: False vm_files_browse (bool)  browse files and folders default: True operation (str)  Type of operation, browser of find copy_precedence (int)  The copy precedence to do the operation from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.parse_nics_xml",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: input_xml :  nics info xml per vm to parse the nics name and label Returns: nic_list:  list of all Nics for a VM Raise: SDKException: if input parameter is not proper",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.get_nics_from_browse",
"url":217,
"doc":"Browses the vm to get the nics info xml, gets the nics info using the parse_nics_xml method and prepares the dict for nics json Args: copy_precedence (int)  The copy precedence to do browse from Returns: dict:  dict with key as vm_name and the value as the nics info for that vm",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.browse_in_time",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\' returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True vm_disk_browse (bool)  browse the VM disks or not default: False from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.disk_level_browse",
"url":217,
"doc":"Browses the Disks of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  Restore index or not. default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.vm_files_browse",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False operation (str)  The type of operation to perform (browse/find) copy_precedence (int)  The copy precedence to do browse from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.vm_files_browse_in_time",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.set_advanced_attach_disk_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM where disks will be restored restore_option: restore options that need to be set for advanced restore option datastore - Datastore where the disks needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.amazon_defaults",
"url":217,
"doc":"set all the VMconversion changes need to be performed specfic to Amazon Args: vm_to_restore (str) : content of destination subclient object restore_option (dict) : dictionary with all VM restore options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.backup",
"url":217,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup collect_metadata (bool)  Collect Meta data for the backup advanced_options (dict)  advanced backup options to be included while making the request options: create_backup_copy_immediately  Run Backup copy just after snap backup backup_copy_type  Backup Copy level using storage policy or subclient rule schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.preview_content",
"url":217,
"doc":"Preview the subclient and get the content Returns: list - List of the vms as the subclient content",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.quiesce_file_system",
"url":217,
"doc":"Gets the quiesce value set for the vsa subclient Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.KubernetesVirtualServerSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.ApplicationGroups",
"url":225,
"doc":"Class to create Kubernetes Application groups Derived from Subclients class Args: class_object of Backupset class Initialize the Subclients object for the given backupset. Args: class_object (object)  instance of the Agent / Instance / Backupset class Returns: object - instance of the Subclients class Raises: SDKException: if class object is not an instance of Agent / Instance / Backupset"
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.ApplicationGroups.get_children_node",
"url":225,
"doc":"Construct and return the json object for content Args: content (list)  Content to parse and construct json object Check create_application_group for usage.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.ApplicationGroups.browse",
"url":225,
"doc":"Browse cluster content Args: browse_type (str)  Browse type to perform Accepted values - Namespaces, Appilcations, Volumes, Labels namespace (str)  Namespace to browse in",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.ApplicationGroups.create_application_group",
"url":225,
"doc":"Create application / Kubernetes Subclient. Args: client_id (str)  Client id content (list)  Subclient content. Format 'ContentType:BrowseType:namespace/app' Should be a list of strings with above format. Valid ContentType - Application, Selector. If not specified, default is 'Application' Valid BrowseType for Application ContentType - Applications, Volumes, Labels If not specified, default is 'Applications' Valid BrowseType for Selector ContentType - Application, Applications, Volumes, Namespaces If not specified, default is 'Namespaces' Examples - 1. ns001  Format : namespace 2. ns001/app001  Format : namespace/app 3. Volumes:ns001/pvc001  Format : BrowseType:namespace/app 4. Selector:Namespaces:app=demo -n ns004  Format : ContentType:BrowseType:namespace 5. ['Application:Volumes:nsvol/vol001', 'nsvol02/app1']  . plan_name (str)  Plan name filter (list)  filter for subclient content. See 'content' for format and examples subclient_name (str)  Subclient name you want to create Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.ApplicationGroups.all_subclients",
"url":171,
"doc":"Returns dict of all the subclients configured on this backupset Retruns: dict - consists of all subclients in the backupset { \"subclient1_name\": { \"id\": subclient1_id, \"backupset\": backupset }, \"subclient2_name\": { \"id\": subclient2_id, \"backupset\": backupset } }"
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.ApplicationGroups.has_subclient",
"url":171,
"doc":"Checks if a subclient exists in the commcell with the input subclient name. Args: subclient_name (str)  name of the subclient Returns: bool - boolean output whether the subclient exists in the backupset or not Raises: SDKException: if type of the subclient name argument is not string",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.ApplicationGroups.add",
"url":171,
"doc":"Adds a new subclient to the backupset. Args: subclient_name (str)  name of the new subclient to add storage_policy (str)  name of the storage policy to be associated with the subclient default: None subclient_type (str)  type of subclient for sql server default: None Valid Values are: - DATABASE - FILE_FILEGROUP description (str)  description for the subclient (optional) default:  advanced_options (dict)  dict of additional options needed to create subclient with additional properties default : None Example: { ondemand_subclient : True } pre_scan_cmd (str)  path to the batch file/shell script file to run before each backup of the subclient Returns: object - instance of the Subclient class Raises: SDKException: if subclient name argument is not of type string if storage policy argument is not of type string if description argument is not of type string if failed to create subclient if response is empty if response is not success if subclient already exists with the given name",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.ApplicationGroups.add_oracle_logical_dump_subclient",
"url":171,
"doc":"Method to add subclient for oracle logical dump. This method add two type of subclient full mode and schema mode. For full mode full_mode should be true and schema_value should be none and for schema mode full_mode should be false and schema_value should be list of values.Rest of thing should be same for both. Args: subclient_name (Str)  subclient name for logical dump storage_policy (Str)  Storage policy for subclient dump_dir (Str)  dump directory for subclient user_name (Str)  username for oracle database domain_name (Str)  domainname for oracle database password (Str)  password for oracle database (should be in encrypted and decrypted form) full_mode (bool)  if ture then subclient for full mode otherwise schema mode schema_value (list)  schema value for schema mode subclient default: None Return: object - instance of the Subclient class Raises: SDKException: if subclient name argument is not of type string if storage policy argument is not of type string if subclient name already present if storage policy does not exist",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.ApplicationGroups.add_postgresql_subclient",
"url":171,
"doc":"Adds a new postgresql subclient to the backupset. Args: subclient_name (str)  name of the new subclient to add storage_policy (str)  name of the storage policy to be associated with the subclient contents (list)  database list to be added as subclient content no_of_streams (int)  No of backup streams to be used default: 1 collect_object_list (bool)  Boolean flag to determine if collect object list needs to be enabled for subclient or not default: False Returns: object - instance of the Subclient class Raises: SDKException: if subclient name argument is not of type string if storage policy argument is not of type string if conetnts argument is not of type list if contents is empty list if failed to create subclient if response is empty if response is not success if subclient already exists with the given name",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.ApplicationGroups.add_mysql_subclient",
"url":171,
"doc":"Adds a new mysql subclient to the instance. Args: subclient_name (str)  name of the new subclient to add storage_policy (str)  name of the storage policy to be associated with the subclient contents (list)  database list to be added as subclient content kwargs (dict)  dict of keyword arguments as follows no_of_backup_streams (int)  No of backup streams to be used default: 1 no_of_log_backup_streams (int)  No of Transaction log backup streams default: 1 full_instance_xtrabackup (bool)  True if XtraBackup is selected for subclient default: False Returns: object - instance of the Subclient class Raises: SDKException: if subclient name argument is not of type string if storage policy argument is not of type string if conetnts argument is not of type list if contents is empty list if failed to create subclient if response is empty if response is not success if subclient already exists with the given name",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.ApplicationGroups.add_virtual_server_subclient",
"url":171,
"doc":"Adds a new virtual server subclient to the backupset. Args: subclient_name (str)  Name of the subclient to be created subclient_content (list)  Content to be added to the subclient Example 1: [{ 'equal_value': True, 'allOrAnyChildren': True, 'id':  , 'path':  , 'display_name': 'sample1', 'type': VSAObjects.VMName }] Example 2: [{ 'allOrAnyChildren': False, 'content': [{ 'equal_value': True, 'allOrAnyChildren': True, 'display_name': 'sample1', 'type': VSAObjects.VMName }, { 'equal_value': True, 'allOrAnyChildren': True, 'display_name': 'sample2', 'type': VSAObjects.VMName } ] }, { 'allOrAnyChildren': True, 'content': [{ 'equal_value': True, 'allOrAnyChildren': True, 'display_name': 'sample3', 'type': VSAObjects.RESOURCE_POOL }, { 'equal_value': True, 'allOrAnyChildren': True, 'id': 'sample4', 'display_name': 'sample4', 'type': VSAObjects.SERVER } ] } ]  Note Use VSAObjects Enum present in constants.py to pass value to type kwargs (dict)  dict of keyword arguments as follows plan_name (str)  Plan to be associated with the subclient storage_policy (str)  Storage policy to be associated with the subclient description (str)  Description for the subclient default:  Returns: object - instance of the Subclient class Raises: SDKException: if subclient name argument is not of type string if storage policy argument is not of type string if description argument is not of type string if failed to create subclient if response is empty if response is not success if subclient already exists with the given name",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.ApplicationGroups.add_onedrive_subclient",
"url":171,
"doc":"Adds a new subclient to the backupset. Args: subclient_name (str)  name of the new subclient to add server_plan (str)  name of the server plan to be associated with the subclient Returns: object - instance of the Subclient class Raises: SDKException: if subclient name argument is not of type string if server plan argument is not of type string if description argument is not of type string if failed to create subclient if response is empty if response is not success if subclient already exists with the given name if server plan donot exists with the given name",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.ApplicationGroups.get",
"url":171,
"doc":"Returns a subclient object of the specified backupset name. Args: subclient_name (str)  name of the subclient Returns: object - instance of the Subclient class for the given subclient name Raises: SDKException: if type of the subclient name argument is not string if no subclient exists with the given name",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.ApplicationGroups.delete",
"url":171,
"doc":"Deletes the subclient specified by the subclient_name from the backupset. Args: subclient_name (str)  name of the subclient to remove from the backupset Raises: SDKException: if type of the subclient name argument is not string if failed to delete subclient if response is empty if response is not success if no subclient exists with the given name",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.ApplicationGroups.refresh",
"url":171,
"doc":"Refresh the subclients associated with the Backupset / Instance.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.kubernetes.ApplicationGroups.default_subclient",
"url":171,
"doc":"Returns the name of the default subclient for the selected Agent and Backupset."
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync",
"url":226,
"doc":""
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.amazon_live_sync",
"url":227,
"doc":"File for configuring and monitoring live sync on the amazon subclient. AmazonLiveSync is the only class defined in this file. AmazonLiveSync: Class for configuring and monitoring Amazon subclient live sync AmazonLiveSync: configure_live_sync()  To configure live sync from supplied parameters"
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.amazon_live_sync.AmazonLiveSync",
"url":227,
"doc":"Class for configuring and monitoring Amazon live sync operations Initializing instance of the VsaLiveSync class Args: subclient_object (obj)  Instance of Subclient class"
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.amazon_live_sync.AmazonLiveSync.configure_live_sync",
"url":227,
"doc":"To configure live Args: schedule_name (str)  Name of the Live sync schedule to be created destination_client (str)  Client Name where VM needs to be restored proxy_client (str)  Name of the proxy client to be used copy_precedence (int)  Copy id from which restore needs to be performed default: 0 power_on (bool)  To validate destination VM power on and off default: True unconditional_overwrite (bool)  To overwrite VM and disk in destination default: False vm_to_restore (list)  VM's to be restored restored_vm_name (str)  Name used for the VM when restored restore_option (dict)  Restore options dictionary with advanced options networkdisplayname (str)  Network Display name which has used for destination VM region (str)  region of the destination vm datacenter (str)  esx host securityGroups (dict)  security groups to associate with replicated vm network (dict)  network, subnet to associate with replicated vm pattern_dict (dict)  Dictionary to generate the live sync schedule Sample: for after_job_completes : { \"freq_type\": 'after_job_completes', \"active_start_date\": date_in_%m/%d/%y (str), \"active_start_time\": time_in_%H/%S (str), \"repeat_days\": days_to_repeat (int) } for daily: { \"freq_type\": 'daily', \"active_start_time\": time_in_%H/%S (str), \"repeat_days\": days_to_repeat (int) } for weekly: { \"freq_type\": 'weekly', \"active_start_time\": time_in_%H/%S (str), \"repeat_weeks\": weeks_to_repeat (int) \"weekdays\": list of weekdays ['Monday','Tuesday'] } for monthly: { \"freq_type\": 'monthly', \"active_start_time\": time_in_%H/%S (str), \"repeat_months\": weeks_to_repeat (int) \"on_day\": Day to run schedule (int) } for yearly: { \"active_start_time\": time_in_%H/%S (str), \"on_month\": month to run schedule (str) January, February . \"on_day\": Day to run schedule (int) } Returns: object - instance of the Schedule class for this Live sync :param restored_vm_name: :param vm_to_restore: :param pattern_dict: :param unconditional_overwrite: :param power_on: :param copy_precedence: :param proxy_client: :param networkdisplayname: :param destination_client: :param schedule_name: :param security_groups:",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.amazon_live_sync.AmazonLiveSync.live_sync_pairs",
"url":75,
"doc":"Returns the dictionary of all the live sync pairs and their info Returns: dict  consists of all the live sync pairs in the subclient { \"live_sync_pair1_name\": { \"id\": live_sync_pair1_id }, \"live_sync_pair2_name\": { \"id\": live_sync_pair2_id }, }"
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.amazon_live_sync.AmazonLiveSync.get",
"url":75,
"doc":"Returns a LiveSyncPairs object for the given live sync name Args: live_sync_name (str)  Name of the live sync Returns: object - Instance of the LiveSyncPairs class for the given live sync name Raises: SDKException: if type of the live sync name argument is not string",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.amazon_live_sync.AmazonLiveSync.has_live_sync_pair",
"url":75,
"doc":"Checks if a live sync pair exists with the given name Args: live_sync_name (str)  Name of the live sync Returns: bool - boolean output whether the live sync pair exists in the subclient or not Raises: SDKException: if type of the live sync name argument is not string",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.amazon_live_sync.AmazonLiveSync.refresh",
"url":75,
"doc":"Refresh the live sync pairs associated with the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.azure_live_sync",
"url":228,
"doc":"File for configuring and monitoring live sync on the AzureRM subclient. AzureLiveSync is the only class defined in this file. AzureLiveSync: Class for configuring and monitoring Hyper-V subclient live sync AzureLiveSync: generate_restore_options_json()  To generate the restore options json for Hyper-V live sync"
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.azure_live_sync.AzureLiveSync",
"url":228,
"doc":"Class for configuring and monitoring Hyper-V live sync operations Initializing instance of the VsaLiveSync class Args: subclient_object (obj)  Instance of Subclient class"
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.azure_live_sync.AzureLiveSync.configure_live_sync",
"url":228,
"doc":"To configure live Args: schedule_name (str)  Name of the Live sync schedule to be created destination_client (str)  Client Name where VM needs to be restored proxy_client (str)  Name of the proxy client to be used copy_precedence (int)  Copy id from which restore needs to be performed default: 0 vm_to_restore (list)  VM's to be restored power_on (bool)  To validate destination VM power on and off default: True unconditional_overwrite (bool)  To overwrite VM and disk in destination resource_group (str)  Destination Resource Group storage_account (str)  storage account to be used for destiantion VM restored_vm_name (str)  Name used for the VM when restored createpublicip (bool)  To create public IP in destination vm datacenter (str)  region of the destionation VM restoreasmanagedvm (bool)  To Restore VM as a maganed VM networkdisplayname (str)  Network Display name which has used for destination VM networkrsg (str)  Resource group of the Network to be used by destination VM restore_option (dict)  Restore options dictionary with advanced options pattern_dict (dict)  Dictionary to generate the live sync schedule instancesize (str)  instance size of destination vm destsubid (str)  subscription id destination client region (str)  region of the destination VM restored_vm_name (str)  Name used for the VM when restored Sample: for after_job_completes : { \"freq_type\": 'after_job_completes', \"active_start_date\": date_in_%m/%d/%y (str), \"active_start_time\": time_in_%H/%S (str), \"repeat_days\": days_to_repeat (int) } for daily: { \"freq_type\": 'daily', \"active_start_time\": time_in_%H/%S (str), \"repeat_days\": days_to_repeat (int) } for weekly: { \"freq_type\": 'weekly', \"active_start_time\": time_in_%H/%S (str), \"repeat_weeks\": weeks_to_repeat (int) \"weekdays\": list of weekdays ['Monday','Tuesday'] } for monthly: { \"freq_type\": 'monthly', \"active_start_time\": time_in_%H/%S (str), \"repeat_months\": weeks_to_repeat (int) \"on_day\": Day to run schedule (int) } for yearly: { \"active_start_time\": time_in_%H/%S (str), \"on_month\": month to run schedule (str) January, Febuary . \"on_day\": Day to run schedule (int) } Returns: object - instance of the Schedule class for this Live sync",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.azure_live_sync.AzureLiveSync.live_sync_pairs",
"url":75,
"doc":"Returns the dictionary of all the live sync pairs and their info Returns: dict  consists of all the live sync pairs in the subclient { \"live_sync_pair1_name\": { \"id\": live_sync_pair1_id }, \"live_sync_pair2_name\": { \"id\": live_sync_pair2_id }, }"
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.azure_live_sync.AzureLiveSync.get",
"url":75,
"doc":"Returns a LiveSyncPairs object for the given live sync name Args: live_sync_name (str)  Name of the live sync Returns: object - Instance of the LiveSyncPairs class for the given live sync name Raises: SDKException: if type of the live sync name argument is not string",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.azure_live_sync.AzureLiveSync.has_live_sync_pair",
"url":75,
"doc":"Checks if a live sync pair exists with the given name Args: live_sync_name (str)  Name of the live sync Returns: bool - boolean output whether the live sync pair exists in the subclient or not Raises: SDKException: if type of the live sync name argument is not string",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.azure_live_sync.AzureLiveSync.refresh",
"url":75,
"doc":"Refresh the live sync pairs associated with the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.hyperv_live_sync",
"url":229,
"doc":"File for configuring and monitoring live sync on the Hyper-V subclient. HyperVLiveSync is the only class defined in this file. HyperVLiveSync: Class for configuring and monitoring Hyper-V subclient live sync HyperVLiveSync: generate_restore_options_json()  To generate the restore options json for Hyper-V live sync"
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.hyperv_live_sync.HyperVLiveSync",
"url":229,
"doc":"Class for configuring and monitoring Hyper-V live sync operations Initializing instance of the VsaLiveSync class Args: subclient_object (obj)  Instance of Subclient class"
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.hyperv_live_sync.HyperVLiveSync.configure_live_sync",
"url":229,
"doc":"To configure live Args: schedule_name (str)  Name of the Live sync schedule to be created destination_client (str)  Hyperv Host Client Name where VM needs to be restored proxy_client (str)  Name of the proxy client to be used copy_precedence (int)  Copy id from which restore needs to be performed default: 0 vm_to_restore (list)  VM's to be restored destination_path (str)  Full path of the restore location on client destination_network (str)  Network card name on the destination machine power_on (bool)  To validate destination VM power on and off default: True overwrite (bool)  To overwrite VM and VHDs in destination path default: False distribute_vm_workload (int)  Virtual machines to be used per job restored_vm_name (str)  Name used for the VM when restored restore_option (dict)  Restore options dictionary with advanced options pattern_dict (dict)  Dictionary to generate the live sync schedule Sample: for after_job_completes : { \"freq_type\": 'after_job_completes', \"active_start_date\": date_in_%m/%d/%y (str), \"active_start_time\": time_in_%H/%S (str), \"repeat_days\": days_to_repeat (int) } for daily: { \"freq_type\": 'daily', \"active_start_time\": time_in_%H/%S (str), \"repeat_days\": days_to_repeat (int) } for weekly: { \"freq_type\": 'weekly', \"active_start_time\": time_in_%H/%S (str), \"repeat_weeks\": weeks_to_repeat (int) \"weekdays\": list of weekdays ['Monday','Tuesday'] } for monthly: { \"freq_type\": 'monthly', \"active_start_time\": time_in_%H/%S (str), \"repeat_months\": weeks_to_repeat (int) \"on_day\": Day to run schedule (int) } for yearly: { \"active_start_time\": time_in_%H/%S (str), \"on_month\": month to run schedule (str) January, Febuary . \"on_day\": Day to run schedule (int) } Returns: object - instance of the Schedule class for this Live sync",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.hyperv_live_sync.HyperVLiveSync.live_sync_pairs",
"url":75,
"doc":"Returns the dictionary of all the live sync pairs and their info Returns: dict  consists of all the live sync pairs in the subclient { \"live_sync_pair1_name\": { \"id\": live_sync_pair1_id }, \"live_sync_pair2_name\": { \"id\": live_sync_pair2_id }, }"
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.hyperv_live_sync.HyperVLiveSync.get",
"url":75,
"doc":"Returns a LiveSyncPairs object for the given live sync name Args: live_sync_name (str)  Name of the live sync Returns: object - Instance of the LiveSyncPairs class for the given live sync name Raises: SDKException: if type of the live sync name argument is not string",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.hyperv_live_sync.HyperVLiveSync.has_live_sync_pair",
"url":75,
"doc":"Checks if a live sync pair exists with the given name Args: live_sync_name (str)  Name of the live sync Returns: bool - boolean output whether the live sync pair exists in the subclient or not Raises: SDKException: if type of the live sync name argument is not string",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.hyperv_live_sync.HyperVLiveSync.refresh",
"url":75,
"doc":"Refresh the live sync pairs associated with the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vmware_live_sync",
"url":230,
"doc":"File for configuring and monitoring live sync on the VMW subclient. VMWareLiveSync is the only class defined in this file. VMWareLiveSync: Class for configuring and monitoring VMWare subclient live sync VMWareLiveSync: configure_live_sync()  To configure live sync from supplied parameters"
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vmware_live_sync.VMWareLiveSync",
"url":230,
"doc":"Class for configuring and monitoring VMWare live sync operations Initializing instance of the VsaLiveSync class Args: subclient_object (obj)  Instance of Subclient class"
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vmware_live_sync.VMWareLiveSync.configure_live_sync",
"url":230,
"doc":"To configure live Args: schedule_name (str)  Name of the Live sync schedule to be created destination_client (str)  VMWare Host Client Name where VM needs to be restored proxy_client (str)  Name of the proxy client to be used copy_precedence (int)  Copy id from which restore needs to be performed default: 0 vm_to_restore (list)  VM's to be restored destination_network (str)  Network card name on the destination machine power_on (bool)  To validate destination VM power on and off default: True overwrite (bool)  To overwrite VM and VHDs in destination path default: False distribute_vm_workload (int)  Virtual machines to be used per job datastore (str)  Datastore to restore the VM restored_vm_name (str)  Name used for the VM when restored restore_option (dict)  Restore options dictionary with advanced options pattern_dict (dict)  Dictionary to generate the live sync schedule Sample: for after_job_completes : { \"freq_type\": 'after_job_completes', \"active_start_date\": date_in_%m/%d/%y (str), \"active_start_time\": time_in_%H/%S (str), \"repeat_days\": days_to_repeat (int) } for daily: { \"freq_type\": 'daily', \"active_start_time\": time_in_%H/%S (str), \"repeat_days\": days_to_repeat (int) } for weekly: { \"freq_type\": 'weekly', \"active_start_time\": time_in_%H/%S (str), \"repeat_weeks\": weeks_to_repeat (int) \"weekdays\": list of weekdays ['Monday','Tuesday'] } for monthly: { \"freq_type\": 'monthly', \"active_start_time\": time_in_%H/%S (str), \"repeat_months\": weeks_to_repeat (int) \"on_day\": Day to run schedule (int) } for yearly: { \"active_start_time\": time_in_%H/%S (str), \"on_month\": month to run schedule (str) January, Febuary . \"on_day\": Day to run schedule (int) } Returns: object - instance of the Schedule class for this Live sync",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vmware_live_sync.VMWareLiveSync.live_sync_pairs",
"url":75,
"doc":"Returns the dictionary of all the live sync pairs and their info Returns: dict  consists of all the live sync pairs in the subclient { \"live_sync_pair1_name\": { \"id\": live_sync_pair1_id }, \"live_sync_pair2_name\": { \"id\": live_sync_pair2_id }, }"
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vmware_live_sync.VMWareLiveSync.get",
"url":75,
"doc":"Returns a LiveSyncPairs object for the given live sync name Args: live_sync_name (str)  Name of the live sync Returns: object - Instance of the LiveSyncPairs class for the given live sync name Raises: SDKException: if type of the live sync name argument is not string",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vmware_live_sync.VMWareLiveSync.has_live_sync_pair",
"url":75,
"doc":"Checks if a live sync pair exists with the given name Args: live_sync_name (str)  Name of the live sync Returns: bool - boolean output whether the live sync pair exists in the subclient or not Raises: SDKException: if type of the live sync name argument is not string",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vmware_live_sync.VMWareLiveSync.refresh",
"url":75,
"doc":"Refresh the live sync pairs associated with the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync",
"url":75,
"doc":"File for configuring and monitoring live sync on the VSA subclient. VsaLiveSync, LiveSyncPairs and LiveSyncVMPair are the 3 classes defined in this file. VsaLiveSync: Class for configuring virtual server agent live sync LiveSyncPairs: Class for all live sync pairs under a subclient LiveSyncVMPair: Class for monitoring and configuring a Live sync VM pair VsaLiveSync:       __init__(subclient_object)  Initializing instance of the VsaLiveSync class __str__()  Returns all the Live sync pairs associated with the subclient __repr__()  Returns the string to represent the instance of the VsaLiveSync class _get_live_sync_pairs()  Gets all the live sync pairs associated with the subclient _live_sync_subtask_json()  Returns subtask JSON for live sync _configure_live_sync()  To configure live sync get()  Returns a LiveSyncPairs object for the given live sync name has_live_sync_pair()  Checks if a live sync pair exists with the given name refresh()  Refresh the live sync pairs associated with the subclient VsaLiveSync Attributes:            -  live_sync_pairs  Returns the dictionary of all the live sync pairs and their info LiveSyncPairs:       = __init__(subclient_object)  Initializing instance of the LiveSyncPairs class __str__()  Returns all the Live sync VM pairs associated with this live sync __repr__()  Returns the string to represent the instance of the LiveSyncPairs class _get_live_sync_id()  Gets the live sync pair id associated with this subclient _get_live_sync_vm_pairs()  Gets the live sync VM pairs associated with the Live sync pair get()  Returns a LiveSyncVMPair object for the given live sync VM pair name has_vm_pair()  Checks if a live sync VM pair exists with the given name refresh()  Refreshes the properties of the live sync LiveSyncPairs Attributes:             -  vm_pairs  Returns the dictionary of all the live sync VM pairs and their info  live_sync_id  Returns the ID of the live sync pair  live_sync_name  Returns the name of the live sync pair LiveSyncVMPair:        = __init__()  Initializing instance of the LiveSyncVMPair class __repr__()  Returns the string to represent the instance of the LiveSyncVMPair class _get_vm_pair_id()  Gets the VM pair id associated with the LiveSyncPair _get_vm_pair_properties()  Gets the live sync properties for this VM pair LiveSyncVMPair Attributes:               vm_pair_id  Returns the live sync VM pair ID  vm_pair_name  Returns the live sync VM pair name  replication_guid  Returns the replication guid of the live sync pair  source_vm  Returns the name of the source virtual machine  destination_vm  Returns the name of the destination virtual machine  destination_client  Returns the destination client of the Live sync VM pair  destination_proxy  Returns the destination proxy of the Live sync VM pair  destination_instance  Returns the destination instance of the Live sync VM pair  status  Returns the status of the live sync pair  last_synced_backup_job  Returns the last synced backup job ID  latest_replication_job  Returns the latest replication job ID  last_replication_job  Returns the last replication job ID  reverse_replication_schedule_id  Returns the ID of the reverse replication schedule  replication_group_name  Returns the name of the replication group associated"
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.VsaLiveSync",
"url":75,
"doc":"Class for configuring and monitoring virtual server live sync operations Initializing instance of the VsaLiveSync class Args: subclient_object (obj)  Instance of Subclient class"
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.VsaLiveSync.live_sync_pairs",
"url":75,
"doc":"Returns the dictionary of all the live sync pairs and their info Returns: dict  consists of all the live sync pairs in the subclient { \"live_sync_pair1_name\": { \"id\": live_sync_pair1_id }, \"live_sync_pair2_name\": { \"id\": live_sync_pair2_id }, }"
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.VsaLiveSync.get",
"url":75,
"doc":"Returns a LiveSyncPairs object for the given live sync name Args: live_sync_name (str)  Name of the live sync Returns: object - Instance of the LiveSyncPairs class for the given live sync name Raises: SDKException: if type of the live sync name argument is not string",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.VsaLiveSync.has_live_sync_pair",
"url":75,
"doc":"Checks if a live sync pair exists with the given name Args: live_sync_name (str)  Name of the live sync Returns: bool - boolean output whether the live sync pair exists in the subclient or not Raises: SDKException: if type of the live sync name argument is not string",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.VsaLiveSync.refresh",
"url":75,
"doc":"Refresh the live sync pairs associated with the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncPairs",
"url":75,
"doc":"Class for all live sync pairs under a subclient Initializing instance of the LiveSyncPairs class Args: subclient_object (obj)  Instance of Subclient class live_sync_name (str)  Name of the Live sync live_sync_id (str)  Task ID of the live sync"
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncPairs.vm_pairs",
"url":75,
"doc":"Returns the dictionary of all the live sync vm pairs and their info Returns: dict  consists of all the live sync vm pairs for the Live sync pair { \"vm_pair1_name\": { \"id\": vm_pair1_id }, \"vm_pair2_name\": { \"id\": vm_pair2_id }, }"
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncPairs.get",
"url":75,
"doc":"Returns the LiveSyncVMPair object assoicated with the subclient Args: vm_pair_name (str)  Name of the vm pair Returns: object - Instance of the LiveSyncVMPair class for the given vm pair name Raises: SDKException: if type of the vm pair name argument is not string",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncPairs.has_vm_pair",
"url":75,
"doc":"Checks if a live sync pair exists with the given name Args: vm_pair_name (str)  Name of the vm pair Returns: bool - boolean output whether the vm pair is there in the live sync pair or not Raises: SDKException: if type of the live sync name argument is not string",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncPairs.live_sync_id",
"url":75,
"doc":"Treats the live sync id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncPairs.live_sync_name",
"url":75,
"doc":"Treats the live sync name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncPairs.refresh",
"url":75,
"doc":"Refreshes the VM pairs associated with the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncVMPair",
"url":75,
"doc":"Class for monitoring a live sync VM pair Initializing instance of the LiveSyncPair class Args: live_sync_pair_object (obj)  Instance of LiveSyncPairs class vm_pair_name (str)  Name of the vm pair vm_pair_id (str)  ID of the live sync VM pair"
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncVMPair.task_id",
"url":75,
"doc":"Returns: (int) The ID of the replication schedule task"
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncVMPair.vm_pair_id",
"url":75,
"doc":"Treats the live sync id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncVMPair.vm_pair_name",
"url":75,
"doc":"Treats the live sync name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncVMPair.replication_guid",
"url":75,
"doc":"Treats the replication guid as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncVMPair.source_vm",
"url":75,
"doc":"Treats the source VM as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncVMPair.source_vm_guid",
"url":75,
"doc":"Returns (str): The GUID of the source VM"
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncVMPair.destination_vm",
"url":75,
"doc":"Treats the destination VM as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncVMPair.destination_vm_guid",
"url":75,
"doc":"Returns (str): The GUID of the destination VM"
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncVMPair.destination_client",
"url":75,
"doc":"Treats the destination VM as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncVMPair.destination_proxy",
"url":75,
"doc":"Treats the destination VM as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncVMPair.destination_instance",
"url":75,
"doc":"Treats the destination instance as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncVMPair.status",
"url":75,
"doc":"Treats the status as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncVMPair.failover_status",
"url":75,
"doc":"Treats the failover_status as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncVMPair.last_synced_backup_job",
"url":75,
"doc":"Treats the synced backup job as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncVMPair.last_replication_job",
"url":75,
"doc":"Returns (int): the last replication job that has been run for the Live sync VM pair"
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncVMPair.latest_replication_job",
"url":75,
"doc":"Returns (int): the latest successful replication job for the Live sync VM pair"
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncVMPair.failover_job_id",
"url":75,
"doc":"Returns (int): the job ID of the failover job"
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncVMPair.reverse_replication_schedule_id",
"url":75,
"doc":"Returns (int): The schedule ID of the reverse replication schedule"
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncVMPair.replication_group_name",
"url":75,
"doc":"Returns (str): The name of the replication group associated to the VM pair Note: This also removes the CV prefix for new replication groups"
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncVMPair.is_warm_sync_pair",
"url":75,
"doc":"Returns (bool): Warm Sync enabled/disabled"
},
{
"ref":"cvpysdk.subclients.virtualserver.livesync.vsa_live_sync.LiveSyncVMPair.refresh",
"url":75,
"doc":"Refreshes the properties of the live sync",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null",
"url":231,
"doc":""
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient",
"url":231,
"doc":"Derived class from Subclient Base class, representing a virtual server subclient, and to perform operations on that subclient. Initialize the Instance object for the given Virtual Server instance. Args: backupset_object (object)  instance of the backupset class subclient_name (str)  subclient name subclient_id (int)  subclient id"
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.disk_pattern",
"url":217,
"doc":"stores the disk pattern of all hypervisors"
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.content",
"url":217,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.subclient_proxy",
"url":217,
"doc":"Gets the List of proxies at the Subclient Returns: list (list) : Proxies at the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.instance_proxy",
"url":217,
"doc":"Gets the proxy at instance level Returns: string (string) : Proxy at instane"
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.vm_filter",
"url":217,
"doc":"Gets the appropriate filter from the Subclient relevant to the user. Returns: list - list of filter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.vm_diskfilter",
"url":217,
"doc":"Gets the appropriate Diskfilter from the Subclient relevant to the user. Returns: list - list of Diskfilter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.metadata",
"url":217,
"doc":"Get if collect files/metadata value for given subclient. Returns status as True/False (string) Default: False for subclient which doesnt have the property"
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.live_sync",
"url":217,
"doc":"Returns the instance of the VSALiveSync class"
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.cbtvalue",
"url":217,
"doc":"Get CBT value for given subclient. Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.update_properties",
"url":217,
"doc":"child method to add any specific attributes for vsa Args: properties_dict (dict): dict of all propterties of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.browse",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False vm_disk_browse (bool)  browse virtual machine files e.g.; .vmdk files, etc. only applicable when browsing content inside a guest virtual machine default: False vm_files_browse (bool)  browse files and folders default: True operation (str)  Type of operation, browser of find copy_precedence (int)  The copy precedence to do the operation from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.parse_nics_xml",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: input_xml :  nics info xml per vm to parse the nics name and label Returns: nic_list:  list of all Nics for a VM Raise: SDKException: if input parameter is not proper",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.get_nics_from_browse",
"url":217,
"doc":"Browses the vm to get the nics info xml, gets the nics info using the parse_nics_xml method and prepares the dict for nics json Args: copy_precedence (int)  The copy precedence to do browse from Returns: dict:  dict with key as vm_name and the value as the nics info for that vm",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.browse_in_time",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\' returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True vm_disk_browse (bool)  browse the VM disks or not default: False from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.disk_level_browse",
"url":217,
"doc":"Browses the Disks of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  Restore index or not. default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.guest_files_browse",
"url":217,
"doc":"Browses the Files and Folders inside a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.guest_file_restore",
"url":217,
"doc":"perform Guest file restore of the provided path Args: options (dict)  dictionary of guest file restores options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.vm_files_browse",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False operation (str)  The type of operation to perform (browse/find) copy_precedence (int)  The copy precedence to do browse from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.vm_files_browse_in_time",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.set_advanced_vm_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM to restore restore_option: restore options that need to be set for advanced restore option power_on - power on the VM after restore add_to_failover - Register the VM to Failover Cluster datastore - Datastore where the VM needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.set_advanced_attach_disk_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM where disks will be restored restore_option: restore options that need to be set for advanced restore option datastore - Datastore where the disks needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.amazon_defaults",
"url":217,
"doc":"set all the VMconversion changes need to be performed specfic to Amazon Args: vm_to_restore (str) : content of destination subclient object restore_option (dict) : dictionary with all VM restore options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.backup",
"url":217,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup collect_metadata (bool)  Collect Meta data for the backup advanced_options (dict)  advanced backup options to be included while making the request options: create_backup_copy_immediately  Run Backup copy just after snap backup backup_copy_type  Backup Copy level using storage policy or subclient rule schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.preview_content",
"url":217,
"doc":"Preview the subclient and get the content Returns: list - List of the vms as the subclient content",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.quiesce_file_system",
"url":217,
"doc":"Gets the quiesce value set for the vsa subclient Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.null.NullSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv",
"url":232,
"doc":"File for operating on a Virtual Server Nutanix AHV Subclient. nutanixsubclient is the only class defined in this file. nutanixsubclient: Derived class from VirtualServerSubClient Base class, representing a nutanix AHV Subclient, and to perform operations on that Subclient nutanixsubclient: full_vm_restore_out_of_place()  restores the VM specified in to the specified client, at the specified destination location full_vm_restore_in_place()  restores the VM specified by the user to the same location"
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient",
"url":232,
"doc":"Derived class from VirtualServerSubclient Base class, representing a nutanix virtual server subclient,and to perform operations on that subclient. Initialize the Instance object for the given Virtual Server instance. Args class_object (backupset_object, subclient_name, subclient_id)  instance of the backupset class, subclient name, subclient id"
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.full_vm_restore_out_of_place",
"url":232,
"doc":"Restores the FULL Virtual machine specified in the input list to the client, at the specified destination location. Args: vm_to_restore (list)  provide the VM name to restore host (str)  ESX host for Vm to restore container (str)  provide the storage account to restore proxy_client (str)  provide the proxy client to restore restore_new_name (str)  provide the new restore name overwrite (bool)  overwrite the existing VM default: True power_on (bool)  power on the restored VM default: True copy_precedence (int)  copy precedence value default: 0 restore_option (dict)  complete dictionary with all advanced option vcenter_client (str)  name of the vcenter client where the VM should be restored default: {}  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_out_of_place eg: v2_details (dict)  details for v2 subclient eg: check clients.vmclient.VMClient._child_job_subclient_details Returns: object - instance of the Job class for this restore job Raises: SDKException: if destination_path is not a string if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.full_vm_restore_in_place",
"url":232,
"doc":"Restores the FULL Virtual machine specified in the input list to the client, to the location same as source . Args: vm_to_restore (list)  provide the VM name to restore overwrite (bool)  overwrite the existing VM default: True power_on (bool)  power on the restored VM default: True copy_precedence (int)  storage policy copy precedence from which browse has to be performed  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_in_place eg: v2_details (dict)  details for v2 subclient eg: check clients.vmclient.VMClient._child_job_subclient_details Returns: object - instance of the Job class for this restore job Raises: SDKException: if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.full_vm_conversion_vmware",
"url":232,
"doc":"Conversion from AHV VM to VMware Args: vcenter_client (str)  name of the vcenter client where the VM should be restored. destination_os_name (base string)- os of source VM vm_to_restore (dict)  dict containing the VM name(s) to restore as keys and the new VM name(s) as their values. Input empty string for default VM name for restored VM. default: {} esx_host (str)  destination esx host restores to the source VM esx if this value is not specified datastore (str)  datastore where the restored VM should be located restores to the source VM datastore if this value is not specified overwrite (bool)  overwrite the existing VM default: True power_on (bool)  power on the restored VM default: True copy_precedence (int)  copy precedence value default: 0 disk_option (str)  disk provisioning for the restored vm Options for input are: 'Original', 'Thick Lazy Zero', 'Thin', 'Thick Eager Zero' default: Original transport_mode (str)  transport mode to be used for the restore. Options for input are: 'Auto', 'SAN', 'Hot Add', 'NBD', 'NBD SSL' default: Auto proxy_client (str)  destination proxy client destination_network (str) destiantion network to which VM has to be connected Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.disk_pattern",
"url":217,
"doc":"stores the disk pattern of all hypervisors"
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.content",
"url":217,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.subclient_proxy",
"url":217,
"doc":"Gets the List of proxies at the Subclient Returns: list (list) : Proxies at the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.instance_proxy",
"url":217,
"doc":"Gets the proxy at instance level Returns: string (string) : Proxy at instane"
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.vm_filter",
"url":217,
"doc":"Gets the appropriate filter from the Subclient relevant to the user. Returns: list - list of filter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.vm_diskfilter",
"url":217,
"doc":"Gets the appropriate Diskfilter from the Subclient relevant to the user. Returns: list - list of Diskfilter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.metadata",
"url":217,
"doc":"Get if collect files/metadata value for given subclient. Returns status as True/False (string) Default: False for subclient which doesnt have the property"
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.live_sync",
"url":217,
"doc":"Returns the instance of the VSALiveSync class"
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.cbtvalue",
"url":217,
"doc":"Get CBT value for given subclient. Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.update_properties",
"url":217,
"doc":"child method to add any specific attributes for vsa Args: properties_dict (dict): dict of all propterties of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.browse",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False vm_disk_browse (bool)  browse virtual machine files e.g.; .vmdk files, etc. only applicable when browsing content inside a guest virtual machine default: False vm_files_browse (bool)  browse files and folders default: True operation (str)  Type of operation, browser of find copy_precedence (int)  The copy precedence to do the operation from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.parse_nics_xml",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: input_xml :  nics info xml per vm to parse the nics name and label Returns: nic_list:  list of all Nics for a VM Raise: SDKException: if input parameter is not proper",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.get_nics_from_browse",
"url":217,
"doc":"Browses the vm to get the nics info xml, gets the nics info using the parse_nics_xml method and prepares the dict for nics json Args: copy_precedence (int)  The copy precedence to do browse from Returns: dict:  dict with key as vm_name and the value as the nics info for that vm",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.browse_in_time",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\' returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True vm_disk_browse (bool)  browse the VM disks or not default: False from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.disk_level_browse",
"url":217,
"doc":"Browses the Disks of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  Restore index or not. default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.guest_files_browse",
"url":217,
"doc":"Browses the Files and Folders inside a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.guest_file_restore",
"url":217,
"doc":"perform Guest file restore of the provided path Args: options (dict)  dictionary of guest file restores options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.vm_files_browse",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False operation (str)  The type of operation to perform (browse/find) copy_precedence (int)  The copy precedence to do browse from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.vm_files_browse_in_time",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.set_advanced_vm_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM to restore restore_option: restore options that need to be set for advanced restore option power_on - power on the VM after restore add_to_failover - Register the VM to Failover Cluster datastore - Datastore where the VM needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.set_advanced_attach_disk_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM where disks will be restored restore_option: restore options that need to be set for advanced restore option datastore - Datastore where the disks needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.amazon_defaults",
"url":217,
"doc":"set all the VMconversion changes need to be performed specfic to Amazon Args: vm_to_restore (str) : content of destination subclient object restore_option (dict) : dictionary with all VM restore options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.backup",
"url":217,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup collect_metadata (bool)  Collect Meta data for the backup advanced_options (dict)  advanced backup options to be included while making the request options: create_backup_copy_immediately  Run Backup copy just after snap backup backup_copy_type  Backup Copy level using storage policy or subclient rule schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.preview_content",
"url":217,
"doc":"Preview the subclient and get the content Returns: list - List of the vms as the subclient content",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.quiesce_file_system",
"url":217,
"doc":"Gets the quiesce value set for the vsa subclient Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.nutanix_ahv.nutanixsubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack",
"url":233,
"doc":"File for operating on a Virtual Server OpenStack Subclient. OpenStackVirtualServerSubclient is the only class defined in this file. OpenStackVirtualServerSubclient: Derived class from VirtualServerSubClient Base class,representing a OpenStack Subclient, and to perform operations on that Subclient OpenStackVirtualServerSubclient: __init__( backupset_object, subclient_name, subclient_id)  initialize object of openstack subclient class, associated with the VirtualServer subclient full_vm_restore_in_place()  restores the VM specified by the user to the same location full_vm_restore_out_of_place()  restores the VM specified to the provided Openstack project or tenant"
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient",
"url":233,
"doc":"Derived class from VirtualServerSubclient Base class. This represents a OpenStack virtual server subclient, and can perform restore operations on only that subclient. Initialize the Instance object for the given Virtual Server instance. Args class_object (backupset_object, subclient_name, subclient_id)  instance of the backupset class, subclient name, subclient id"
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.full_vm_restore_in_place",
"url":233,
"doc":"Restores the FULL Virtual machine specified in the input list to the location same as the actual location of the VM in VCenter. Args: vm_to_restore (list)  provide the VM name to restore default: None overwrite (bool)  overwrite the existing VM default: True power_on (bool)  power on the restored VM default: True copy_precedence (int)  copy precedence value default: 0 proxy_client (str)  proxy client to be used for restore default: proxy added in subclient  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_in_place eg: v2_details (dict)  details for v2 subclient eg: check clients.vmclient.VMClient._child_job_subclient_details Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.full_vm_restore_out_of_place",
"url":233,
"doc":"Restores the FULL Virtual machine specified in the input list to the provided vcenter client along with the ESX and the datastores. If the provided client name is none then it restores the Full Virtual Machine to the source client and corresponding ESX and datastore. Args: vm_to_restore (str)  VM that is to be restored restored_vm_name (str)  new name of vm. If nothing is passed, 'delete' is appended to the original vm name vcenter_client (str)  name of the vcenter client where the VM should be restored. esx_host (str)  destination esx host. Restores to the source VM esx if this value is not specified datastore (str)  datastore where the restored VM should be located. Restores to the source VM datastore if this value is not specified overwrite (bool)  overwrite the existing VM default: True power_on (bool)  power on the restored VM default: True copy_precedence (int)  copy precedence value default: 0 proxy_client (str)  destination proxy client source_ip (str)  IP of the source VM destination_ip (str)  IP of the destination VM  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_out_of_place eg: v2_details (dict)  details for v2 subclient eg: check clients.vmclient.VMClient._child_job_subclient_details Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.disk_restore",
"url":233,
"doc":"Restores the disk specified in the input paths list to the same location Args: vm_name (str)  Name of the VM added in subclient content whose disk is selected for restore destination_path (str)  Staging (destination) path to restore the disk. disk_name (list)  name of the disk which has to be restored (cinder volumes will be restores - enter full name of the disk) default: None proxy_client (str)  Destination proxy client to be used default: None copy_precedence (int)  SP copy precedence from which browse has to be performed convert_to (str)  disk format for the restored disk (applicable only when the vmdk disk is selected for restore). Allowed values are \"VHDX\" or \"VHD\" default: None media_agent (str)  MA needs to use for disk browse default :Storage policy MA snap_proxy (str)  proxy need to be used for disk restores from snap default :proxy in instance or subclient Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not passed in proper expected format if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.attach_disk_restore",
"url":233,
"doc":"Attaches the Disks to the provided vm Args: vm_name (str)  Name of the VM added in subclient content whose disk is selected for restore vcenter (dict)  Dictinoary of vcenter, username and creds esx (str)  Esx host where the vm resides datastore (string)  Datastore where disks will be restoed to default: None proxy_client (str)  Destination proxy client to be used default: None copy_precedence (int)  SP copy precedence from which browse has to be performed media_agent (str)  MA needs to use for disk browse default :Storage policy MA snap_proxy (str)  proxy need to be used for disk restores from snap default :proxy in instance or subclient disk_name (str)  Prefix of the disk name to be attached defaul: None Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not passed in proper expected format if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.disk_pattern",
"url":217,
"doc":"stores the disk pattern of all hypervisors"
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.content",
"url":217,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.subclient_proxy",
"url":217,
"doc":"Gets the List of proxies at the Subclient Returns: list (list) : Proxies at the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.instance_proxy",
"url":217,
"doc":"Gets the proxy at instance level Returns: string (string) : Proxy at instane"
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.vm_filter",
"url":217,
"doc":"Gets the appropriate filter from the Subclient relevant to the user. Returns: list - list of filter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.vm_diskfilter",
"url":217,
"doc":"Gets the appropriate Diskfilter from the Subclient relevant to the user. Returns: list - list of Diskfilter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.metadata",
"url":217,
"doc":"Get if collect files/metadata value for given subclient. Returns status as True/False (string) Default: False for subclient which doesnt have the property"
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.live_sync",
"url":217,
"doc":"Returns the instance of the VSALiveSync class"
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.cbtvalue",
"url":217,
"doc":"Get CBT value for given subclient. Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.update_properties",
"url":217,
"doc":"child method to add any specific attributes for vsa Args: properties_dict (dict): dict of all propterties of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.browse",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False vm_disk_browse (bool)  browse virtual machine files e.g.; .vmdk files, etc. only applicable when browsing content inside a guest virtual machine default: False vm_files_browse (bool)  browse files and folders default: True operation (str)  Type of operation, browser of find copy_precedence (int)  The copy precedence to do the operation from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.parse_nics_xml",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: input_xml :  nics info xml per vm to parse the nics name and label Returns: nic_list:  list of all Nics for a VM Raise: SDKException: if input parameter is not proper",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.get_nics_from_browse",
"url":217,
"doc":"Browses the vm to get the nics info xml, gets the nics info using the parse_nics_xml method and prepares the dict for nics json Args: copy_precedence (int)  The copy precedence to do browse from Returns: dict:  dict with key as vm_name and the value as the nics info for that vm",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.browse_in_time",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\' returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True vm_disk_browse (bool)  browse the VM disks or not default: False from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.disk_level_browse",
"url":217,
"doc":"Browses the Disks of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  Restore index or not. default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.guest_files_browse",
"url":217,
"doc":"Browses the Files and Folders inside a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.guest_file_restore",
"url":217,
"doc":"perform Guest file restore of the provided path Args: options (dict)  dictionary of guest file restores options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.vm_files_browse",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False operation (str)  The type of operation to perform (browse/find) copy_precedence (int)  The copy precedence to do browse from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.vm_files_browse_in_time",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.set_advanced_vm_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM to restore restore_option: restore options that need to be set for advanced restore option power_on - power on the VM after restore add_to_failover - Register the VM to Failover Cluster datastore - Datastore where the VM needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.set_advanced_attach_disk_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM where disks will be restored restore_option: restore options that need to be set for advanced restore option datastore - Datastore where the disks needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.amazon_defaults",
"url":217,
"doc":"set all the VMconversion changes need to be performed specfic to Amazon Args: vm_to_restore (str) : content of destination subclient object restore_option (dict) : dictionary with all VM restore options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.backup",
"url":217,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup collect_metadata (bool)  Collect Meta data for the backup advanced_options (dict)  advanced backup options to be included while making the request options: create_backup_copy_immediately  Run Backup copy just after snap backup backup_copy_type  Backup Copy level using storage policy or subclient rule schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.preview_content",
"url":217,
"doc":"Preview the subclient and get the content Returns: list - List of the vms as the subclient content",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.quiesce_file_system",
"url":217,
"doc":"Gets the quiesce value set for the vsa subclient Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.openstack.OpenStackVirtualServerSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm",
"url":234,
"doc":"File for operating on a Virtual Server OracleVM. OracleVMVirtualServerSubclient is the only class defined in this file. OracleVMVirtualServerSubclient: Derived class from VirtualServerSubClient Base class, representing a OracleVM Subclient, and to perform operations on that Subclient OracleVMVirtualServerSubclient: __init__(,backupset_object, subclient_name, subclient_id) initialize object of FusionCompute subclient object associated with the VirtualServer subclient full_vm_restore_out_of_place()  restores the VM specified in to the specified client, at the specified destination location full_vm_restore_in_place()  restores the VM specified by the user to the same location"
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient",
"url":234,
"doc":"Derived class from VirtualServerSubclient Base class. This represents a OracleVM virtual server subclient, and can perform restore operations on only that subclient. Initialize the Instance object for the given Virtual Server instance. Args class_object (backupset_object, subclient_name, subclient_id)  instance of the backupset class, subclient name, subclient id"
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.full_vm_restore_in_place",
"url":234,
"doc":"Restores the FULL Virtual machine specified in the input list to the location same as the actual location of the VM in VCenter. Args: vm_to_restore (list)  provide the VM name to restore default: None destination_client (str)  proxy client to be used for restore default: proxy added in subclient overwrite (bool)  overwrite the existing VM default: True power_on (bool)  power on the restored VM default: True disk_option (str)  disk provisioning for the restored vm default: 0 which is equivalent to Original transport_mode (str)  transport mode that need to be used copy_precedence (int)  copy precedence value default: 0  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_in_place eg: v2_details (dict)  details for v2 subclient eg: check clients.vmclient.VMClient._child_job_subclient_details Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.full_vm_restore_out_of_place",
"url":234,
"doc":"Restores the FULL Virtual machine specified in the input list to the provided vcenter client along with the ESX and the datastores. If the provided client name is none then it restores the Full Virtual Machine to the source client and corresponding ESX and datastore. Args: vm_to_restore (string)  provide the VM name to restore {\"name_of_vm_to_restore\": \"new_name_of_restored_vm\"} default: {} restored_vm_name (string)  name of the new VM that should restored. disk_name_prefix (string)  new name for the disks while restoring the VM virtualization_client (str)  name of the Oracle virtualization client that needs to be restored destination_client (str)  name of the proxy that should be used during restore repository (str)  datastore where the restored VM should be located restores to the source VM datastore if this value is not specified overwrite (bool)  overwrite the existing VM default: True power_on (bool)  power on the restored VM default: True server (str)  destination cluster or host restores to the source VM esx if this value is not specified copy_precedence (int)  copy precedence value default: 0 disk_provisioning (str)  disk provisioning for the restored vm default: 0 which is equivalent to Original  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_out_of_place eg: v2_details (dict)  details for v2 subclient eg: check clients.vmclient.VMClient._child_job_subclient_details Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.disk_pattern",
"url":217,
"doc":"stores the disk pattern of all hypervisors"
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.content",
"url":217,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.subclient_proxy",
"url":217,
"doc":"Gets the List of proxies at the Subclient Returns: list (list) : Proxies at the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.instance_proxy",
"url":217,
"doc":"Gets the proxy at instance level Returns: string (string) : Proxy at instane"
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.vm_filter",
"url":217,
"doc":"Gets the appropriate filter from the Subclient relevant to the user. Returns: list - list of filter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.vm_diskfilter",
"url":217,
"doc":"Gets the appropriate Diskfilter from the Subclient relevant to the user. Returns: list - list of Diskfilter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.metadata",
"url":217,
"doc":"Get if collect files/metadata value for given subclient. Returns status as True/False (string) Default: False for subclient which doesnt have the property"
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.live_sync",
"url":217,
"doc":"Returns the instance of the VSALiveSync class"
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.cbtvalue",
"url":217,
"doc":"Get CBT value for given subclient. Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.update_properties",
"url":217,
"doc":"child method to add any specific attributes for vsa Args: properties_dict (dict): dict of all propterties of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.browse",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False vm_disk_browse (bool)  browse virtual machine files e.g.; .vmdk files, etc. only applicable when browsing content inside a guest virtual machine default: False vm_files_browse (bool)  browse files and folders default: True operation (str)  Type of operation, browser of find copy_precedence (int)  The copy precedence to do the operation from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.parse_nics_xml",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: input_xml :  nics info xml per vm to parse the nics name and label Returns: nic_list:  list of all Nics for a VM Raise: SDKException: if input parameter is not proper",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.get_nics_from_browse",
"url":217,
"doc":"Browses the vm to get the nics info xml, gets the nics info using the parse_nics_xml method and prepares the dict for nics json Args: copy_precedence (int)  The copy precedence to do browse from Returns: dict:  dict with key as vm_name and the value as the nics info for that vm",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.browse_in_time",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\' returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True vm_disk_browse (bool)  browse the VM disks or not default: False from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.disk_level_browse",
"url":217,
"doc":"Browses the Disks of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  Restore index or not. default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.guest_files_browse",
"url":217,
"doc":"Browses the Files and Folders inside a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.guest_file_restore",
"url":217,
"doc":"perform Guest file restore of the provided path Args: options (dict)  dictionary of guest file restores options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.vm_files_browse",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False operation (str)  The type of operation to perform (browse/find) copy_precedence (int)  The copy precedence to do browse from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.vm_files_browse_in_time",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.set_advanced_vm_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM to restore restore_option: restore options that need to be set for advanced restore option power_on - power on the VM after restore add_to_failover - Register the VM to Failover Cluster datastore - Datastore where the VM needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.set_advanced_attach_disk_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM where disks will be restored restore_option: restore options that need to be set for advanced restore option datastore - Datastore where the disks needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.amazon_defaults",
"url":217,
"doc":"set all the VMconversion changes need to be performed specfic to Amazon Args: vm_to_restore (str) : content of destination subclient object restore_option (dict) : dictionary with all VM restore options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.backup",
"url":217,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup collect_metadata (bool)  Collect Meta data for the backup advanced_options (dict)  advanced backup options to be included while making the request options: create_backup_copy_immediately  Run Backup copy just after snap backup backup_copy_type  Backup Copy level using storage policy or subclient rule schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.preview_content",
"url":217,
"doc":"Preview the subclient and get the content Returns: list - List of the vms as the subclient content",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.quiesce_file_system",
"url":217,
"doc":"Gets the quiesce value set for the vsa subclient Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.oraclevm.OracleVMVirtualServerSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud",
"url":235,
"doc":"File for operating on a Virtual Server OracleCloud Subclient. OracleCloudeVirtualServerSubclient is the only class defined in this file. OracleCloudVirtualServerSubclient: Derived class from VirtualServerSubClient Base class, representing a OracleCloud Subclient, and to perform operations on that Subclient OracleCloudVirtualServerSubclient: full_vm_restore_out_of_place()  restores the VM specified in to the specified client, at the specified destination location"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient",
"url":235,
"doc":"Derived class from VirtualServerSubclient Base class. This represents a OracleCloud virtual server subclient, and can perform restore operations on only that subclient. Initialize the Instance object for the given Virtual Server instance. Args: backupset_object (object)  instance of the backupset class subclient_name (str)  subclient name subclient_id (int)  subclient id"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.full_vm_restore_out_of_place",
"url":235,
"doc":"Restores the FULL Virtual machine specified in the input list to the provided vcenter client along with the ESX and the datastores. If the provided client name is none then it restores the Full Virtual Machine to the source client and corresponding ESX and datastore. Args: vm_to_restore (list)  list of all VMs to restore destination_client (str)  name of the pseudo client where VM should be restored proxy_client (str)  the proxy to be used for restore new_name (str)  new name to be given to the restored VM host (str)  destination host or cluster; restores to the source VM ESX if this value is not specified power_on (bool)  power on the restored VM default: True copy_precedence (int)  copy precedence to restored from default: 0 restore_option (dict)  dictionary with all the advanced restore options.  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_out_of_place eg: v2_details (dict)  details for v2 subclient eg: check clients.vmclient.VMClient._child_job_subclient_details Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.disk_pattern",
"url":217,
"doc":"stores the disk pattern of all hypervisors"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.content",
"url":217,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.subclient_proxy",
"url":217,
"doc":"Gets the List of proxies at the Subclient Returns: list (list) : Proxies at the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.instance_proxy",
"url":217,
"doc":"Gets the proxy at instance level Returns: string (string) : Proxy at instane"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.vm_filter",
"url":217,
"doc":"Gets the appropriate filter from the Subclient relevant to the user. Returns: list - list of filter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.vm_diskfilter",
"url":217,
"doc":"Gets the appropriate Diskfilter from the Subclient relevant to the user. Returns: list - list of Diskfilter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.metadata",
"url":217,
"doc":"Get if collect files/metadata value for given subclient. Returns status as True/False (string) Default: False for subclient which doesnt have the property"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.live_sync",
"url":217,
"doc":"Returns the instance of the VSALiveSync class"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.cbtvalue",
"url":217,
"doc":"Get CBT value for given subclient. Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.update_properties",
"url":217,
"doc":"child method to add any specific attributes for vsa Args: properties_dict (dict): dict of all propterties of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.browse",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False vm_disk_browse (bool)  browse virtual machine files e.g.; .vmdk files, etc. only applicable when browsing content inside a guest virtual machine default: False vm_files_browse (bool)  browse files and folders default: True operation (str)  Type of operation, browser of find copy_precedence (int)  The copy precedence to do the operation from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.parse_nics_xml",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: input_xml :  nics info xml per vm to parse the nics name and label Returns: nic_list:  list of all Nics for a VM Raise: SDKException: if input parameter is not proper",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.get_nics_from_browse",
"url":217,
"doc":"Browses the vm to get the nics info xml, gets the nics info using the parse_nics_xml method and prepares the dict for nics json Args: copy_precedence (int)  The copy precedence to do browse from Returns: dict:  dict with key as vm_name and the value as the nics info for that vm",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.browse_in_time",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\' returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True vm_disk_browse (bool)  browse the VM disks or not default: False from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.disk_level_browse",
"url":217,
"doc":"Browses the Disks of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  Restore index or not. default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.guest_files_browse",
"url":217,
"doc":"Browses the Files and Folders inside a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.guest_file_restore",
"url":217,
"doc":"perform Guest file restore of the provided path Args: options (dict)  dictionary of guest file restores options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.vm_files_browse",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False operation (str)  The type of operation to perform (browse/find) copy_precedence (int)  The copy precedence to do browse from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.vm_files_browse_in_time",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.set_advanced_vm_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM to restore restore_option: restore options that need to be set for advanced restore option power_on - power on the VM after restore add_to_failover - Register the VM to Failover Cluster datastore - Datastore where the VM needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.set_advanced_attach_disk_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM where disks will be restored restore_option: restore options that need to be set for advanced restore option datastore - Datastore where the disks needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.amazon_defaults",
"url":217,
"doc":"set all the VMconversion changes need to be performed specfic to Amazon Args: vm_to_restore (str) : content of destination subclient object restore_option (dict) : dictionary with all VM restore options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.backup",
"url":217,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup collect_metadata (bool)  Collect Meta data for the backup advanced_options (dict)  advanced backup options to be included while making the request options: create_backup_copy_immediately  Run Backup copy just after snap backup backup_copy_type  Backup Copy level using storage policy or subclient rule schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.preview_content",
"url":217,
"doc":"Preview the subclient and get the content Returns: list - List of the vms as the subclient content",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.quiesce_file_system",
"url":217,
"doc":"Gets the quiesce value set for the vsa subclient Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud.OracleCloudVirtualServerSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure",
"url":236,
"doc":"File for operating on a Virtual Server OracleCloud Subclient. OracleCloudeVirtualServerSubclient is the only class defined in this file. OracleCloudVirtualServerSubclient: Derived class from VirtualServerSubClient Base class, representing a OracleCloud Subclient, and to perform operations on that Subclient OracleCloudVirtualServerSubclient: full_vm_restore_out_of_place()  restores the VM specified in to the specified client, at the specified destination location full_vm_restore_in_place()  restores the VM specified in to the source client,"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient",
"url":236,
"doc":"Derived class from VirtualServerSubclient Base class. This represents a OracleCloud virtual server subclient, and can perform restore operations on only that subclient. Initialize the Instance object for the given Virtual Server instance. Args class_object (backupset_object, subclient_name, subclient_id)  instance of the backupset class, subclient name, subclient id"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.full_vm_restore_out_of_place",
"url":236,
"doc":"Restores the FULL Virtual machine specified in the input list to the provided vcenter client along with the ESX and the datastores. If the provided client name is none then it restores the Full Virtual Machine to the source client and corresponding ESX and datastore. Args: vm_to_restore (list)  list of all VMs to restore destination_client (str)  name of the pseudo client where VM should be restored proxy_client (str)  the proxy to be used for restore new_name (str)  new name to be given to the restored VM power_on (bool)  power on the restored VM default: True copy_precedence (int)  copy precedence to restored from default: 0 restore_option (dict)  dictionary with all the advanced restore options.  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_out_of_place eg: v2_details (dict)  details for v2 subclient eg: check clients.vmclient.VMClient._child_job_subclient_details Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.full_vm_restore_in_place",
"url":236,
"doc":"Restores the FULL Virtual machine specified in the input list to the client, to the location same as source . Args: vm_to_restore (list)  provide the VM name to restore overwrite default:true (bool)  overwrite the existing VM proxy_client (str)  the proxy to be used for restore power_on default:true (bool)  power on the restored VM  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_out_of_place eg: v2_details (dict)  details for v2 subclient eg: check clients.vmclient.VMClient._child_job_subclient_details Returns: object - instance of the Job class for this restore job Raises: SDKException: if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.set_advanced_vm_restore_options",
"url":236,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM to restore restore_option: restore options that need to be set for advanced restore option",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.disk_pattern",
"url":217,
"doc":"stores the disk pattern of all hypervisors"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.content",
"url":217,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.subclient_proxy",
"url":217,
"doc":"Gets the List of proxies at the Subclient Returns: list (list) : Proxies at the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.instance_proxy",
"url":217,
"doc":"Gets the proxy at instance level Returns: string (string) : Proxy at instane"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.vm_filter",
"url":217,
"doc":"Gets the appropriate filter from the Subclient relevant to the user. Returns: list - list of filter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.vm_diskfilter",
"url":217,
"doc":"Gets the appropriate Diskfilter from the Subclient relevant to the user. Returns: list - list of Diskfilter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.metadata",
"url":217,
"doc":"Get if collect files/metadata value for given subclient. Returns status as True/False (string) Default: False for subclient which doesnt have the property"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.live_sync",
"url":217,
"doc":"Returns the instance of the VSALiveSync class"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.cbtvalue",
"url":217,
"doc":"Get CBT value for given subclient. Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.update_properties",
"url":217,
"doc":"child method to add any specific attributes for vsa Args: properties_dict (dict): dict of all propterties of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.browse",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False vm_disk_browse (bool)  browse virtual machine files e.g.; .vmdk files, etc. only applicable when browsing content inside a guest virtual machine default: False vm_files_browse (bool)  browse files and folders default: True operation (str)  Type of operation, browser of find copy_precedence (int)  The copy precedence to do the operation from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.parse_nics_xml",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: input_xml :  nics info xml per vm to parse the nics name and label Returns: nic_list:  list of all Nics for a VM Raise: SDKException: if input parameter is not proper",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.get_nics_from_browse",
"url":217,
"doc":"Browses the vm to get the nics info xml, gets the nics info using the parse_nics_xml method and prepares the dict for nics json Args: copy_precedence (int)  The copy precedence to do browse from Returns: dict:  dict with key as vm_name and the value as the nics info for that vm",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.browse_in_time",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\' returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True vm_disk_browse (bool)  browse the VM disks or not default: False from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.disk_level_browse",
"url":217,
"doc":"Browses the Disks of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  Restore index or not. default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.guest_files_browse",
"url":217,
"doc":"Browses the Files and Folders inside a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.guest_file_restore",
"url":217,
"doc":"perform Guest file restore of the provided path Args: options (dict)  dictionary of guest file restores options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.vm_files_browse",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False operation (str)  The type of operation to perform (browse/find) copy_precedence (int)  The copy precedence to do browse from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.vm_files_browse_in_time",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.set_advanced_attach_disk_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM where disks will be restored restore_option: restore options that need to be set for advanced restore option datastore - Datastore where the disks needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.amazon_defaults",
"url":217,
"doc":"set all the VMconversion changes need to be performed specfic to Amazon Args: vm_to_restore (str) : content of destination subclient object restore_option (dict) : dictionary with all VM restore options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.backup",
"url":217,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup collect_metadata (bool)  Collect Meta data for the backup advanced_options (dict)  advanced backup options to be included while making the request options: create_backup_copy_immediately  Run Backup copy just after snap backup backup_copy_type  Backup Copy level using storage policy or subclient rule schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.preview_content",
"url":217,
"doc":"Preview the subclient and get the content Returns: list - List of the vms as the subclient content",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.quiesce_file_system",
"url":217,
"doc":"Gets the quiesce value set for the vsa subclient Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.oracle_cloud_infrastructure.OCIVirtualServerSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift",
"url":237,
"doc":"File for operating on a Virtual Server OpenShift Subclient. OpenshiftSubclient is the only class defined in this file. OpenshiftSubclient: Derived class from VirtualServerSubClient Base class, representing a Openshift Subclient, and to perform operations on that Subclient OpenshiftSubclient: full_vm_restore_in_place()  restores the VM specified by the user to the same location full_vm_restore_out_of_place()  restores the VM specified in to the specified client, at the specified destination location"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient",
"url":237,
"doc":"Derived class from VirtualServerSubclient Base class. This represents a OpenShift virtual server subclient, and can perform restore operations on only that subclient. Initialize the Instance object for the given Virtual Server instance. Args class_object (backupset_object, subclient_name, subclient_id)  instance of the backupset class, subclient name, subclient id"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.disk_pattern",
"url":217,
"doc":"stores the disk pattern of all hypervisors"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.content",
"url":217,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.subclient_proxy",
"url":217,
"doc":"Gets the List of proxies at the Subclient Returns: list (list) : Proxies at the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.instance_proxy",
"url":217,
"doc":"Gets the proxy at instance level Returns: string (string) : Proxy at instane"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.vm_filter",
"url":217,
"doc":"Gets the appropriate filter from the Subclient relevant to the user. Returns: list - list of filter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.vm_diskfilter",
"url":217,
"doc":"Gets the appropriate Diskfilter from the Subclient relevant to the user. Returns: list - list of Diskfilter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.metadata",
"url":217,
"doc":"Get if collect files/metadata value for given subclient. Returns status as True/False (string) Default: False for subclient which doesnt have the property"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.live_sync",
"url":217,
"doc":"Returns the instance of the VSALiveSync class"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.cbtvalue",
"url":217,
"doc":"Get CBT value for given subclient. Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.update_properties",
"url":217,
"doc":"child method to add any specific attributes for vsa Args: properties_dict (dict): dict of all propterties of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.browse",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False vm_disk_browse (bool)  browse virtual machine files e.g.; .vmdk files, etc. only applicable when browsing content inside a guest virtual machine default: False vm_files_browse (bool)  browse files and folders default: True operation (str)  Type of operation, browser of find copy_precedence (int)  The copy precedence to do the operation from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.parse_nics_xml",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: input_xml :  nics info xml per vm to parse the nics name and label Returns: nic_list:  list of all Nics for a VM Raise: SDKException: if input parameter is not proper",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.get_nics_from_browse",
"url":217,
"doc":"Browses the vm to get the nics info xml, gets the nics info using the parse_nics_xml method and prepares the dict for nics json Args: copy_precedence (int)  The copy precedence to do browse from Returns: dict:  dict with key as vm_name and the value as the nics info for that vm",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.browse_in_time",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\' returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True vm_disk_browse (bool)  browse the VM disks or not default: False from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.disk_level_browse",
"url":217,
"doc":"Browses the Disks of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  Restore index or not. default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.guest_files_browse",
"url":217,
"doc":"Browses the Files and Folders inside a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.guest_file_restore",
"url":217,
"doc":"perform Guest file restore of the provided path Args: options (dict)  dictionary of guest file restores options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.vm_files_browse",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False operation (str)  The type of operation to perform (browse/find) copy_precedence (int)  The copy precedence to do browse from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.vm_files_browse_in_time",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.set_advanced_vm_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM to restore restore_option: restore options that need to be set for advanced restore option power_on - power on the VM after restore add_to_failover - Register the VM to Failover Cluster datastore - Datastore where the VM needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.set_advanced_attach_disk_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM where disks will be restored restore_option: restore options that need to be set for advanced restore option datastore - Datastore where the disks needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.amazon_defaults",
"url":217,
"doc":"set all the VMconversion changes need to be performed specfic to Amazon Args: vm_to_restore (str) : content of destination subclient object restore_option (dict) : dictionary with all VM restore options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.backup",
"url":217,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup collect_metadata (bool)  Collect Meta data for the backup advanced_options (dict)  advanced backup options to be included while making the request options: create_backup_copy_immediately  Run Backup copy just after snap backup backup_copy_type  Backup Copy level using storage policy or subclient rule schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.preview_content",
"url":217,
"doc":"Preview the subclient and get the content Returns: list - List of the vms as the subclient content",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.quiesce_file_system",
"url":217,
"doc":"Gets the quiesce value set for the vsa subclient Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_openshift.OpenshiftSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization",
"url":238,
"doc":"File for operating on a Virtual Server VMWare Subclient. VMWareVirtualServerSubclient is the only class defined in this file. VMWareVirtualServerSubclient: Derived class from VirtualServerSubClient Base class,representing a VMware Subclient, and to perform operations on that Subclient VMWareVirtualServerSubclient: __init__( backupset_object, subclient_name, subclient_id)  initialize object of vmware subclient class, associated with the VirtualServer subclient full_vm_restore_in_place()  restores the VM specified by the user to the same location full_vm_restore_out_of_place()  restores the VM specified to the provided VMware psuedoclient vcenter via vcenter_client"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient",
"url":238,
"doc":"Derived class from VirtualServerSubclient Base class. This represents a VMWare virtual server subclient, and can perform restore operations on only that subclient. Initialize the Instance object for the given Virtual Server instance. Args class_object (backupset_object, subclient_name, subclient_id)  instance of the backupset class, subclient name, subclient id"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.full_vm_restore_in_place",
"url":238,
"doc":"Restores the FULL Virtual machine specified in the input list to the location same as the actual location of the VM in VCenter. Args: vm_to_restore (list)  provide the VM name to restore default: None overwrite (bool)  overwrite the existing VM default: True power_on (bool)  power on the restored VM default: True copy_precedence (int)  copy precedence value default: 0 disk_option (str)  disk provisioning for the restored vm Options for input are: 'Original', 'Thick Lazy Zero', 'Thin', 'Thick Eager Zero' default: Original proxy_client (str)  proxy client to be used for restore default: proxy added in subclient  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_in_place eg: v2_details (dict)  details for v2 subclient eg: check clients.vmclient.VMClient._child_job_subclient_details Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.full_vm_restore_out_of_place",
"url":238,
"doc":"Restores the FULL Virtual machine specified in the input list to the provided vcenter client along with the ESX and the datastores. If the provided client name is none then it restores the Full Virtual Machine to the source client and corresponding ESX and datastore. Args: vm_to_restore (str)  VM that is to be restored restored_vm_name (str)  new name of vm. If nothing is passed, 'delete' is appended to the original vm name destination_client (str)  name of the RHEV client where the VM should be restored. cluster (str)  destination cluster host. Restores to the source VM cluster if this value is not specified storage (str)  datastore where the restored VM should be located. Restores to the source VM datastore if this value is not specified overwrite (bool)  overwrite the existing VM default: True power_on (bool)  power on the restored VM default: True copy_precedence (int)  copy precedence value default: 0 disk_option (str)  disk provisioning for the restored vm Options for input are: 'Original', 'Thick Lazy Zero', 'Thin', 'Thick Eager Zero' default: 'Original' proxy_client (str)  destination proxy client  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_out_of_place eg: v2_details (dict)  details for v2 subclient eg: check clients.vmclient.VMClient._child_job_subclient_details Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.disk_pattern",
"url":217,
"doc":"stores the disk pattern of all hypervisors"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.content",
"url":217,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.subclient_proxy",
"url":217,
"doc":"Gets the List of proxies at the Subclient Returns: list (list) : Proxies at the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.instance_proxy",
"url":217,
"doc":"Gets the proxy at instance level Returns: string (string) : Proxy at instane"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.vm_filter",
"url":217,
"doc":"Gets the appropriate filter from the Subclient relevant to the user. Returns: list - list of filter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.vm_diskfilter",
"url":217,
"doc":"Gets the appropriate Diskfilter from the Subclient relevant to the user. Returns: list - list of Diskfilter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.metadata",
"url":217,
"doc":"Get if collect files/metadata value for given subclient. Returns status as True/False (string) Default: False for subclient which doesnt have the property"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.live_sync",
"url":217,
"doc":"Returns the instance of the VSALiveSync class"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.cbtvalue",
"url":217,
"doc":"Get CBT value for given subclient. Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.update_properties",
"url":217,
"doc":"child method to add any specific attributes for vsa Args: properties_dict (dict): dict of all propterties of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.browse",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False vm_disk_browse (bool)  browse virtual machine files e.g.; .vmdk files, etc. only applicable when browsing content inside a guest virtual machine default: False vm_files_browse (bool)  browse files and folders default: True operation (str)  Type of operation, browser of find copy_precedence (int)  The copy precedence to do the operation from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.parse_nics_xml",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: input_xml :  nics info xml per vm to parse the nics name and label Returns: nic_list:  list of all Nics for a VM Raise: SDKException: if input parameter is not proper",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.get_nics_from_browse",
"url":217,
"doc":"Browses the vm to get the nics info xml, gets the nics info using the parse_nics_xml method and prepares the dict for nics json Args: copy_precedence (int)  The copy precedence to do browse from Returns: dict:  dict with key as vm_name and the value as the nics info for that vm",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.browse_in_time",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\' returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True vm_disk_browse (bool)  browse the VM disks or not default: False from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.disk_level_browse",
"url":217,
"doc":"Browses the Disks of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  Restore index or not. default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.guest_files_browse",
"url":217,
"doc":"Browses the Files and Folders inside a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.guest_file_restore",
"url":217,
"doc":"perform Guest file restore of the provided path Args: options (dict)  dictionary of guest file restores options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.vm_files_browse",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False operation (str)  The type of operation to perform (browse/find) copy_precedence (int)  The copy precedence to do browse from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.vm_files_browse_in_time",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.set_advanced_vm_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM to restore restore_option: restore options that need to be set for advanced restore option power_on - power on the VM after restore add_to_failover - Register the VM to Failover Cluster datastore - Datastore where the VM needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.set_advanced_attach_disk_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM where disks will be restored restore_option: restore options that need to be set for advanced restore option datastore - Datastore where the disks needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.amazon_defaults",
"url":217,
"doc":"set all the VMconversion changes need to be performed specfic to Amazon Args: vm_to_restore (str) : content of destination subclient object restore_option (dict) : dictionary with all VM restore options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.backup",
"url":217,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup collect_metadata (bool)  Collect Meta data for the backup advanced_options (dict)  advanced backup options to be included while making the request options: create_backup_copy_immediately  Run Backup copy just after snap backup backup_copy_type  Backup Copy level using storage policy or subclient rule schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.preview_content",
"url":217,
"doc":"Preview the subclient and get the content Returns: list - List of the vms as the subclient content",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.quiesce_file_system",
"url":217,
"doc":"Gets the quiesce value set for the vsa subclient Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.red_hat_virtualization.RhevVirtualServerSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director",
"url":239,
"doc":"File for operating on a Virtual Server Vcloud Subclient. VcloudVirtualServerSubclient is the only class defined in this file. VcloudVirtualServerSubclient: Derived class from VirtualServerSubClient Base class,representing a Vcloud Subclient, and to perform operations on that Subclient VcloudVirtualServerSubclient: __init__( backupset_object, subclient_name, subclient_id)  initialize object of Vcloud subclient class, associated with the VirtualServer subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient",
"url":239,
"doc":"Derived class from VirtualServerSubclient Base class. This represents a Vcloud virtual server subclient, and can perform restore operations on only that subclient. Initialize the Instance object for the given Virtual Server instance. Args class_object (backupset_object, subclient_name, subclient_id)  instance of the backupset class, subclient name, subclient id"
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.disk_pattern",
"url":217,
"doc":"stores the disk pattern of all hypervisors"
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.content",
"url":217,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.subclient_proxy",
"url":217,
"doc":"Gets the List of proxies at the Subclient Returns: list (list) : Proxies at the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.instance_proxy",
"url":217,
"doc":"Gets the proxy at instance level Returns: string (string) : Proxy at instane"
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.vm_filter",
"url":217,
"doc":"Gets the appropriate filter from the Subclient relevant to the user. Returns: list - list of filter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.vm_diskfilter",
"url":217,
"doc":"Gets the appropriate Diskfilter from the Subclient relevant to the user. Returns: list - list of Diskfilter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.metadata",
"url":217,
"doc":"Get if collect files/metadata value for given subclient. Returns status as True/False (string) Default: False for subclient which doesnt have the property"
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.live_sync",
"url":217,
"doc":"Returns the instance of the VSALiveSync class"
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.cbtvalue",
"url":217,
"doc":"Get CBT value for given subclient. Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.update_properties",
"url":217,
"doc":"child method to add any specific attributes for vsa Args: properties_dict (dict): dict of all propterties of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.browse",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False vm_disk_browse (bool)  browse virtual machine files e.g.; .vmdk files, etc. only applicable when browsing content inside a guest virtual machine default: False vm_files_browse (bool)  browse files and folders default: True operation (str)  Type of operation, browser of find copy_precedence (int)  The copy precedence to do the operation from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.parse_nics_xml",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: input_xml :  nics info xml per vm to parse the nics name and label Returns: nic_list:  list of all Nics for a VM Raise: SDKException: if input parameter is not proper",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.get_nics_from_browse",
"url":217,
"doc":"Browses the vm to get the nics info xml, gets the nics info using the parse_nics_xml method and prepares the dict for nics json Args: copy_precedence (int)  The copy precedence to do browse from Returns: dict:  dict with key as vm_name and the value as the nics info for that vm",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.browse_in_time",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\' returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True vm_disk_browse (bool)  browse the VM disks or not default: False from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.disk_level_browse",
"url":217,
"doc":"Browses the Disks of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  Restore index or not. default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.guest_files_browse",
"url":217,
"doc":"Browses the Files and Folders inside a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.guest_file_restore",
"url":217,
"doc":"perform Guest file restore of the provided path Args: options (dict)  dictionary of guest file restores options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.vm_files_browse",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False operation (str)  The type of operation to perform (browse/find) copy_precedence (int)  The copy precedence to do browse from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.vm_files_browse_in_time",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.set_advanced_vm_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM to restore restore_option: restore options that need to be set for advanced restore option power_on - power on the VM after restore add_to_failover - Register the VM to Failover Cluster datastore - Datastore where the VM needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.set_advanced_attach_disk_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM where disks will be restored restore_option: restore options that need to be set for advanced restore option datastore - Datastore where the disks needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.amazon_defaults",
"url":217,
"doc":"set all the VMconversion changes need to be performed specfic to Amazon Args: vm_to_restore (str) : content of destination subclient object restore_option (dict) : dictionary with all VM restore options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.backup",
"url":217,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup collect_metadata (bool)  Collect Meta data for the backup advanced_options (dict)  advanced backup options to be included while making the request options: create_backup_copy_immediately  Run Backup copy just after snap backup backup_copy_type  Backup Copy level using storage policy or subclient rule schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.preview_content",
"url":217,
"doc":"Preview the subclient and get the content Returns: list - List of the vms as the subclient content",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.quiesce_file_system",
"url":217,
"doc":"Gets the quiesce value set for the vsa subclient Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.vcloud_director.VcloudVirtualServerSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware",
"url":240,
"doc":"File for operating on a Virtual Server VMWare Subclient. VMWareVirtualServerSubclient is the only class defined in this file. VMWareVirtualServerSubclient: Derived class from VirtualServerSubClient Base class,representing a VMware Subclient, and to perform operations on that Subclient VMWareVirtualServerSubclient: __init__( backupset_object, subclient_name, subclient_id)  initialize object of vmware subclient class, associated with the VirtualServer subclient full_vm_restore_in_place()  restores the VM specified by the user to the same location full_vm_restore_out_of_place()  restores the VM specified to the provided VMware psuedoclient vcenter via vcenter_client"
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient",
"url":240,
"doc":"Derived class from VirtualServerSubclient Base class. This represents a VMWare virtual server subclient, and can perform restore operations on only that subclient. Initialize the Instance object for the given Virtual Server instance. Args class_object (backupset_object, subclient_name, subclient_id)  instance of the backupset class, subclient name, subclient id"
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.add_revert_option",
"url":240,
"doc":"Add revert in restore json Args: request_json (dict) : restore dict revert (bool) : revert option Returns: request_json (dict) : restore dict",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.full_vm_restore_in_place",
"url":240,
"doc":"Restores the FULL Virtual machine specified in the input list to the location same as the actual location of the VM in VCenter. Args: vm_to_restore (list)  provide the VM name to restore default: None overwrite (bool)  overwrite the existing VM default: True power_on (bool)  power on the restored VM default: True copy_precedence (int)  copy precedence value default: 0 disk_option (str)  disk provisioning for the restored vm Options for input are: 'Original', 'Thick Lazy Zero', 'Thin', 'Thick Eager Zero' default: Original transport_mode (str)  transport mode to be used for the restore. Options for input are: 'Auto', 'SAN',  Hot Add', NBD', 'NBD SSL' default: Auto proxy_client (str)  proxy client to be used for restore default: proxy added in subclient to_time (int)  End time to select the job for restore default: None  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_in_place eg: media_agent (str)  media agent v2_details (dict)  details for v2 subclient eg: check clients.vmclient.VMClient._child_job_subclient_details revert (bool)  Revert option Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.full_vm_restore_out_of_place",
"url":240,
"doc":"Restores the FULL Virtual machine specified in the input list to the provided vcenter client along with the ESX and the datastores. If the provided client name is none then it restores the Full Virtual Machine to the source client and corresponding ESX and datastore. Args: vm_to_restore (str)  VM that is to be restored restored_vm_name (str)  new name of vm. If nothing is passed, 'del' is appended to the original vm name vcenter_client (str)  name of the vcenter client where the VM should be restored. esx_host (str)  destination esx host. Restores to the source VM esx if this value is not specified datastore (str)  datastore where the restored VM should be located. Restores to the source VM datastore if this value is not specified overwrite (bool)  overwrite the existing VM default: True power_on (bool)  power on the restored VM default: True copy_precedence (int)  copy precedence value default: 0 disk_option (str)  disk provisioning for the restored vm Options for input are: 'Original', 'Thick Lazy Zero', 'Thin', 'Thick Eager Zero' default: 'Original' transport_mode (str)  transport mode to be used for the restore. Options for input are: 'Auto', 'SAN', 'Hot Add', 'NBD', 'NBD SSL' default: Auto proxy_client (str)  destination proxy client to_time (Int)  End time to select the job for restore default: None  kwargs : Arbitrary keyword arguments Properties as of full_vm_restore_out_of_place eg: source_ip (str)  IP of the source VM destination_ip (str)  IP of the destination VM destComputerName (str)  Hostname of the restored vm source_subnet (str)  subnet of the source vm source_gateway (str)  gateway of the source vm destination_subnet (str)  subnet of the restored vm destination_gateway (str)  gateway of the restored vm media_agent (str)  media agent for restore restore_option (dict)  complete dictionary with all advanced options default: {} v2_details (dict)  details for v2 jobs eg: check clients.vmclient.VMClient._child_job_subclient_details revert (bool)  Revert option Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.disk_restore",
"url":240,
"doc":"Restores the disk specified in the input paths list to the same location Args: vm_name (str)  Name of the VM added in subclient content whose disk is selected for restore destination_path (str)  Staging (destination) path to restore the disk. disk_name (list)  name of the disk which has to be restored (only vmdk files permitted - enter full name of the disk) default: None proxy_client (str)  Destination proxy client to be used default: None copy_precedence (int)  SP copy precedence from which browse has to be performed convert_to (str)  disk format for the restored disk (applicable only when the vmdk disk is selected for restore). Allowed values are \"VHDX\" or \"VHD\" default: None media_agent (str)  MA needs to use for disk browse default :Storage policy MA snap_proxy (str)  proxy need to be used for disk restores from snap default :proxy in instance or subclient Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not passed in proper expected format if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.attach_disk_restore",
"url":240,
"doc":"Attaches the Disks to the provided vm Args: vm_name (str)  Name of the VM added in subclient content whose disk is selected for restore vcenter (dict)  Dictinoary of vcenter, username and creds esx (str)  Esx host where the vm resides datastore (string)  Datastore where disks will be restoed to default: None proxy_client (str)  Destination proxy client to be used default: None copy_precedence (int)  SP copy precedence from which browse has to be performed media_agent (str)  MA needs to use for disk browse default :Storage policy MA snap_proxy (str)  proxy need to be used for disk restores from snap default :proxy in instance or subclient disk_name (str)  Prefix of the disk name to be attached defaul: None Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not passed in proper expected format if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.full_vm_conversion_azurerm",
"url":240,
"doc":"This converts the Hyperv VM to AzureRM Args: vm_to_restore (dict): dict containing the VM name(s) to restore as keys and the new VM name(s) as their values. Input empty string for default VM name for restored VM. default: {} azure_client (str): name of the AzureRM client where the VM should be restored. resource_group (str): destination Resource group in the AzureRM storage_account (str): storage account where the restored VM should be located in AzureRM overwrite (bool): overwrite the existing VM default: True power_on (bool): power on the restored VM default: True instance_size (str): Instance Size of restored VM public_ip (bool): If True, creates the Public IP of restored VM restore_as_managed (bool): If True, restore as Managed VM in Azure copy_precedence (int): copy precedence value default: 0 proxy_client (str): destination proxy client networkDisplayName(str): destination network display name networkrsg (str): destination network display name's security group destsubid (str): destination subscription id subnetId (str): destination subet id Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.full_vm_conversion_hyperv",
"url":240,
"doc":"This converts the AzureRM to Hyper-v VM Args: hyperv_client(str): name of the hyper-V client where the VM should restored. vm_to_restore(dict): dict containing the VM name(s) to restore as keys and the new VM name(s) as their values. Input empty string for default VM name for restored VM. default: {} DestinationPath (str): DestinationPath in the Hyper-V client proxy_client(str): destination proxy client overwrite (bool): overwrite the existing VM default: True power_on (bool): power on the restored VM default: True copy_precedence (int): copy precedence value default: 0 Destination_network (str): Destination network in the Hyper-V client Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.create_blr_replication_pair",
"url":240,
"doc":"Args: target (VirtualMachinePolicy): an instance of VirtualMachinePolicy which is the target vms (List) : List of VMs to be replicated plan_name (str) : Name of the plan rpstore (str) : Name of the RPStore. default : None. If name of the RPStore is given, granular mode is chosen else Live mode granular_options(dict) : Dict which contains granular recovery options Example: { \"ccrpInterval\": 300, \"acrpInterval\": 0, \"maxRpInterval\": 21600, \"rpMergeDelay\": 172800, \"rpRetention\": 604800, \"maxRpStoreOfflineTime\": 0, \"useOffPeakSchedule\": 0, }",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.full_vm_conversion_googlecloud",
"url":240,
"doc":"This converts the VMware to Google Cloud Args: vm_to_restore (list): provide the VM names to restore google_cloud_client (str): name of the Google Cloud client where the VM should be restored. esx_host (str): Zone of the restored VM in Google Cloud vmSize (str): vmSize of the restoed VM overwrite (bool): overwrite the existing VM default: True power_on (bool): power on the restored VM default: True vcenter_client (str)  name of the vcenter client where the VM should be restored. copy_precedence (int): copy precedence value default: 0 proxy_client (str): destination proxy client esx_server (str): Name of the destination virtualization Client nics (str): Network Configurations of the VM datacenter (str): Project ID of the restored VM projectId (str): project ID where the new VM has to be created Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.disk_pattern",
"url":217,
"doc":"stores the disk pattern of all hypervisors"
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.content",
"url":217,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.subclient_proxy",
"url":217,
"doc":"Gets the List of proxies at the Subclient Returns: list (list) : Proxies at the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.instance_proxy",
"url":217,
"doc":"Gets the proxy at instance level Returns: string (string) : Proxy at instane"
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.vm_filter",
"url":217,
"doc":"Gets the appropriate filter from the Subclient relevant to the user. Returns: list - list of filter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.vm_diskfilter",
"url":217,
"doc":"Gets the appropriate Diskfilter from the Subclient relevant to the user. Returns: list - list of Diskfilter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.metadata",
"url":217,
"doc":"Get if collect files/metadata value for given subclient. Returns status as True/False (string) Default: False for subclient which doesnt have the property"
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.live_sync",
"url":217,
"doc":"Returns the instance of the VSALiveSync class"
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.cbtvalue",
"url":217,
"doc":"Get CBT value for given subclient. Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.update_properties",
"url":217,
"doc":"child method to add any specific attributes for vsa Args: properties_dict (dict): dict of all propterties of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.browse",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False vm_disk_browse (bool)  browse virtual machine files e.g.; .vmdk files, etc. only applicable when browsing content inside a guest virtual machine default: False vm_files_browse (bool)  browse files and folders default: True operation (str)  Type of operation, browser of find copy_precedence (int)  The copy precedence to do the operation from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.parse_nics_xml",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: input_xml :  nics info xml per vm to parse the nics name and label Returns: nic_list:  list of all Nics for a VM Raise: SDKException: if input parameter is not proper",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.get_nics_from_browse",
"url":217,
"doc":"Browses the vm to get the nics info xml, gets the nics info using the parse_nics_xml method and prepares the dict for nics json Args: copy_precedence (int)  The copy precedence to do browse from Returns: dict:  dict with key as vm_name and the value as the nics info for that vm",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.browse_in_time",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\' returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True vm_disk_browse (bool)  browse the VM disks or not default: False from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.disk_level_browse",
"url":217,
"doc":"Browses the Disks of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  Restore index or not. default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.guest_files_browse",
"url":217,
"doc":"Browses the Files and Folders inside a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.guest_file_restore",
"url":217,
"doc":"perform Guest file restore of the provided path Args: options (dict)  dictionary of guest file restores options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.vm_files_browse",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False operation (str)  The type of operation to perform (browse/find) copy_precedence (int)  The copy precedence to do browse from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.vm_files_browse_in_time",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.set_advanced_vm_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM to restore restore_option: restore options that need to be set for advanced restore option power_on - power on the VM after restore add_to_failover - Register the VM to Failover Cluster datastore - Datastore where the VM needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.set_advanced_attach_disk_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM where disks will be restored restore_option: restore options that need to be set for advanced restore option datastore - Datastore where the disks needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.amazon_defaults",
"url":217,
"doc":"set all the VMconversion changes need to be performed specfic to Amazon Args: vm_to_restore (str) : content of destination subclient object restore_option (dict) : dictionary with all VM restore options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.backup",
"url":217,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup collect_metadata (bool)  Collect Meta data for the backup advanced_options (dict)  advanced backup options to be included while making the request options: create_backup_copy_immediately  Run Backup copy just after snap backup backup_copy_type  Backup Copy level using storage policy or subclient rule schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.preview_content",
"url":217,
"doc":"Preview the subclient and get the content Returns: list - List of the vms as the subclient content",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.quiesce_file_system",
"url":217,
"doc":"Gets the quiesce value set for the vsa subclient Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.vmware.VMWareVirtualServerSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.virtualserver.xen",
"url":241,
"doc":"File for operating on a Virtual Server FusionCompute Subclient. XenSubclient is the only class defined in this file. XenSubclient: Derived class from VirtualServerSubClient Base class, representing a FusionCompute Subclient, and to perform operations on that Subclient XenSubclient: __init__(,backupset_object, subclient_name, subclient_id) initialize object of FusionCompute subclient object associated with the VirtualServer subclient full_vm_restore_out_of_place()  restores the VM specified in to the specified client, at the specified destination location full_vm_restore_in_place()  restores the VM specified by the user to the same location"
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen",
"url":241,
"doc":"Derived class from VirtualServerSubclient Base class. This represents a Fusion Compute virtual server subclient, and can perform restore operations on only that subclient. Initialize the Instance object for the given Virtual Server instance. Args class_object (backupset_object, subclient_name, subclient_id)  instance of the backupset class, subclient name, subclient id"
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.full_vm_restore_in_place",
"url":241,
"doc":"Restores the FULL Virtual machine specified in the input list to the location same as the actual location of the VM in VCenter. Args: vm_to_restore (list)  provide the VM name to restore default: None overwrite (bool)  overwrite the existing VM default: True power_on (bool)  power on the restored VM default: True proxy_client (str)  proxy client to be used for restore default: proxy added in subclient copy_precedence (int)  copy precedence value default: 0 Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.full_vm_restore_out_of_place",
"url":241,
"doc":"Restores the FULL Virtual machine specified in the input list to the provided vcenter client along with the ESX and the datastores. If the provided client name is none then it restores the Full Virtual Machine to the source client and corresponding ESX and datastore. Args: vm_to_restore (list)  provide the VM name to restore default: None destination_client (str)  name of the Pseudo client where the VM should be restored. new_name (str)  new name to be given to the restored VM xen_server (str)  destination cluster or host restores to the source VM esx if this value is not specified storage (str)  datastore where the restored VM should be located restores to the source VM datastore if this value is not specified overwrite (bool)  overwrite the existing VM default: True power_on (bool)  power on the restored VM default: True copy_precedence (int)  copy precedence value default: 0 proxy_client (str)  proxy client to be used for restore default: proxy added in subclient Returns: object - instance of the Job class for this restore job Raises: SDKException: if inputs are not of correct type as per definition if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.disk_pattern",
"url":217,
"doc":"stores the disk pattern of all hypervisors"
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.content",
"url":217,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.subclient_proxy",
"url":217,
"doc":"Gets the List of proxies at the Subclient Returns: list (list) : Proxies at the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.instance_proxy",
"url":217,
"doc":"Gets the proxy at instance level Returns: string (string) : Proxy at instane"
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.vm_filter",
"url":217,
"doc":"Gets the appropriate filter from the Subclient relevant to the user. Returns: list - list of filter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.vm_diskfilter",
"url":217,
"doc":"Gets the appropriate Diskfilter from the Subclient relevant to the user. Returns: list - list of Diskfilter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.metadata",
"url":217,
"doc":"Get if collect files/metadata value for given subclient. Returns status as True/False (string) Default: False for subclient which doesnt have the property"
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.live_sync",
"url":217,
"doc":"Returns the instance of the VSALiveSync class"
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.cbtvalue",
"url":217,
"doc":"Get CBT value for given subclient. Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.update_properties",
"url":217,
"doc":"child method to add any specific attributes for vsa Args: properties_dict (dict): dict of all propterties of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.browse",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False vm_disk_browse (bool)  browse virtual machine files e.g.; .vmdk files, etc. only applicable when browsing content inside a guest virtual machine default: False vm_files_browse (bool)  browse files and folders default: True operation (str)  Type of operation, browser of find copy_precedence (int)  The copy precedence to do the operation from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.parse_nics_xml",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: input_xml :  nics info xml per vm to parse the nics name and label Returns: nic_list:  list of all Nics for a VM Raise: SDKException: if input parameter is not proper",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.get_nics_from_browse",
"url":217,
"doc":"Browses the vm to get the nics info xml, gets the nics info using the parse_nics_xml method and prepares the dict for nics json Args: copy_precedence (int)  The copy precedence to do browse from Returns: dict:  dict with key as vm_name and the value as the nics info for that vm",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.browse_in_time",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\' returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True vm_disk_browse (bool)  browse the VM disks or not default: False from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.disk_level_browse",
"url":217,
"doc":"Browses the Disks of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  Restore index or not. default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.guest_files_browse",
"url":217,
"doc":"Browses the Files and Folders inside a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.guest_file_restore",
"url":217,
"doc":"perform Guest file restore of the provided path Args: options (dict)  dictionary of guest file restores options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.vm_files_browse",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False operation (str)  The type of operation to perform (browse/find) copy_precedence (int)  The copy precedence to do browse from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.vm_files_browse_in_time",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.set_advanced_vm_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM to restore restore_option: restore options that need to be set for advanced restore option power_on - power on the VM after restore add_to_failover - Register the VM to Failover Cluster datastore - Datastore where the VM needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.set_advanced_attach_disk_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM where disks will be restored restore_option: restore options that need to be set for advanced restore option datastore - Datastore where the disks needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.amazon_defaults",
"url":217,
"doc":"set all the VMconversion changes need to be performed specfic to Amazon Args: vm_to_restore (str) : content of destination subclient object restore_option (dict) : dictionary with all VM restore options",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.backup",
"url":217,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup collect_metadata (bool)  Collect Meta data for the backup advanced_options (dict)  advanced backup options to be included while making the request options: create_backup_copy_immediately  Run Backup copy just after snap backup backup_copy_type  Backup Copy level using storage policy or subclient rule schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.preview_content",
"url":217,
"doc":"Preview the subclient and get the content Returns: list - List of the vms as the subclient content",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.quiesce_file_system",
"url":217,
"doc":"Gets the quiesce value set for the vsa subclient Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.virtualserver.xen.Xen.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.vminstancesubclient",
"url":242,
"doc":"File for operating on a Virtual Server VMInstance Subclient. VMInstanceSubclient is the only class defined in this file. VMInstanceSubclient: Derived class from Subclient Base class,representing a VMInstance Subclien VMInstanceSubclient: __init__( backupset_object, subclient_name, subclient_id)  initialize object of vminstance subclient class, associated with the VirtualServer subclient backup()  run a backup job for the subclient"
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient",
"url":242,
"doc":"Derived class from Subclient Base class. This represents a VMInstance virtual server subclient Initialize the Instance object for the given Virtual Server instance. Args: backupset_object (object)  instance of the Backupset class subclient_name (str)  subclient name subclient_id (int)  subclient id"
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.parent_client",
"url":242,
"doc":"Returns parent client object Returns: object - Parent client object"
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.parent_agent",
"url":242,
"doc":"Returns parent agent object Returns: object - Parent agent object"
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.parent_instance",
"url":242,
"doc":"Returns parent instance object Returns: object - Parent instance object"
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.parent_backupset",
"url":242,
"doc":"Returns parent backupset object Returns: object - Parent backupset object"
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.parent_subclient",
"url":242,
"doc":"Returns parent subclient object Returns: object - Parent subclient object"
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.vm_guid",
"url":242,
"doc":"Returns vm guid Returns: str - vm guid of the client"
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.backup",
"url":242,
"doc":"Runs a backup job for the vm subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.quiesce_file_system",
"url":242,
"doc":"Gets the quiesce value set for the vsa subclient Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.vm_diskfilter",
"url":242,
"doc":"Gets the appropriate Diskfilter from the VM instance subclient relevant to the user. Returns: list - list of Diskfilter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.vm_settings",
"url":242,
"doc":"Gets the VM Instance Subclient settings Returns: (Dict) VM Subclient settings"
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.include_vm_group_disk_filters",
"url":242,
"doc":"Gets the value set for the option - Include VM Group disk filters Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.update_properties",
"url":171,
"doc":"Updates the subclient properties Args: properties_dict (dict)  subclient property dict which is to be updated Returns: None Raises: SDKException: if failed to add if response is empty if response code is not as expected  Note self.properties can be used to get a deep copy of all the properties, modify the properties which you need to change and use the update_properties method to set the properties",
"func":1
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.browse",
"url":171,
"doc":"Browses the content of the Subclient. Args: Dictionary of browse options: Example: browse({ 'path': 'c: hello', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-21 12:00:00' }) Kwargs: Keyword argument of browse options: Example: browse( path='c:\\hello', show_deleted=True, from_time='2014-04-20 12:00:00', to_time='2016-04-21 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options.  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.vminstancesubclient.VMInstanceSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.subclients.vssubclient",
"url":217,
"doc":"File for operating on a Virtual Server Subclient. VirualServerSubclient is the only class defined in this file. VirtualServerSubclient: Derived class from the Subclient Base class, representing a virtual server subclient, and to perform operations on that subclient VirtualServerSubclient: __get_subclient_properties()  gets the subclient related properties of VSA subclient. _get_subclient_properties_json()  gets all the subclient related properties of VSA subclient. _get_vm_ids_and_names_dict()  creates and returns 2 dictionaries, along with the vm path _parse_vm_path()  parses the path provided by user, and replaces the VM Display Name with the VM ID _json_restore_virtualServerRstOption  setter for Virtualserver property in restore _json_restore_diskLevelVMRestoreOption  setter for diskLevel restore property in restore _json_restore_advancedRestoreOptions  setter for advanced restore property in restore _json_restore_volumeRstOption  setter for Volume restore property in restore _json_vcenter_instance  setter for vcenter instance json in restore _json_nics_advancedRestoreOptions  Setter for nics list for advanced restore option json _process_vsa_browse_response()  processes the browse response received from server,and replaces the vm id with the vm name _process_restore_request()  processes the Restore Request and replaces the VM display name with their ID before passing to the API _get_disk_Extension()  Gets the Extension of disk provided _get_conversion_disk_Type()  For source Disk gets the Disk that can be converted to and set its destination Vendor _prepare_filelevel_restore_json()  internal Method can be used by subclasses for file level restore Json _prepare_disk_restore_json  internal Method can be used by subclasses for disk level restore Json _check_folder_in_browse  Internal Method to check folder is in browse from subclient browse()  gets the content of the backup for this subclient at the vm path specified parse_nics_xml()  gets the list of nics for a VM get_nics_from_browse()  Browses the vm to get the nics info xml, gets the nics info using the parse_nics_xml method and prepares the dict for nics json disk_level_browse()  browses the Disks of a Virtual Machine guest_files_browse()  browses the Files and Folders inside a Virtual Machine vm_files_browse()  browses the Files and Folders of a Virtual Machine vm_files_browse_in_time()  browses the Files and Folders of a Virtual Machine in the time range specified restore_out_of_place()  restores the VM Guest Files specified in the paths list to the client, at the specified destionation location full_vm_restore_in_place()  restores the VM specified by the user to the same location _full_vm_restore_update_json_for_v2  modifies the restore json as per v2 subclient details and returns it backup()  run a backup job for the subclient _advanced_backup_options()  sets the advanced backup options update_properties()  child method to add vsa specific properties to update properties To add a new Virtual Subclient, create a class in a new module under virtualserver sub package The new module which is created has to named in the following manner: 1. Name the module with the name of the Virtual Server without special characters 2.Spaces alone must be replaced with underscores('_') For eg: The Virtual Server 'Red Hat Virtualization' is named as 'red_hat_virtualization.py' The Virtual Server 'Hyper-V' is named as 'hyperv.py'"
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient",
"url":217,
"doc":"Derived class from Subclient Base class, representing a virtual server subclient, and to perform operations on that subclient. Initialize the Instance object for the given Virtual Server instance. Args: backupset_object (object)  instance of the backupset class subclient_name (str)  subclient name subclient_id (int)  subclient id"
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.disk_pattern",
"url":217,
"doc":"stores the disk pattern of all hypervisors"
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.content",
"url":217,
"doc":"Gets the appropriate content from the Subclient relevant to the user. Returns: list - list of content associated with the subclient"
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.subclient_proxy",
"url":217,
"doc":"Gets the List of proxies at the Subclient Returns: list (list) : Proxies at the subclient"
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.instance_proxy",
"url":217,
"doc":"Gets the proxy at instance level Returns: string (string) : Proxy at instane"
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.vm_filter",
"url":217,
"doc":"Gets the appropriate filter from the Subclient relevant to the user. Returns: list - list of filter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.vm_diskfilter",
"url":217,
"doc":"Gets the appropriate Diskfilter from the Subclient relevant to the user. Returns: list - list of Diskfilter associated with the subclient"
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.metadata",
"url":217,
"doc":"Get if collect files/metadata value for given subclient. Returns status as True/False (string) Default: False for subclient which doesnt have the property"
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.live_sync",
"url":217,
"doc":"Returns the instance of the VSALiveSync class"
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.cbtvalue",
"url":217,
"doc":"Get CBT value for given subclient. Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.update_properties",
"url":217,
"doc":"child method to add any specific attributes for vsa Args: properties_dict (dict): dict of all propterties of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.browse",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False vm_disk_browse (bool)  browse virtual machine files e.g.; .vmdk files, etc. only applicable when browsing content inside a guest virtual machine default: False vm_files_browse (bool)  browse files and folders default: True operation (str)  Type of operation, browser of find copy_precedence (int)  The copy precedence to do the operation from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.parse_nics_xml",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified. Args: input_xml :  nics info xml per vm to parse the nics name and label Returns: nic_list:  list of all Nics for a VM Raise: SDKException: if input parameter is not proper",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.get_nics_from_browse",
"url":217,
"doc":"Browses the vm to get the nics info xml, gets the nics info using the parse_nics_xml method and prepares the dict for nics json Args: copy_precedence (int)  The copy precedence to do browse from Returns: dict:  dict with key as vm_name and the value as the nics info for that vm",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.browse_in_time",
"url":217,
"doc":"Gets the content of the backup for this subclient at the path specified in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\' returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True vm_disk_browse (bool)  browse the VM disks or not default: False from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.disk_level_browse",
"url":217,
"doc":"Browses the Disks of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  Restore index or not. default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.guest_files_browse",
"url":217,
"doc":"Browses the Files and Folders inside a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 copy_precedence (int)  copy precedence to be used for browsing media_agent (str)  Browse MA via with Browse has to happen. It can be MA different than Storage Policy MA Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.guest_file_restore",
"url":217,
"doc":"perform Guest file restore of the provided path Args: options (dict)  dictionary of guest file restores options",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.vm_files_browse",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine. Args: vm_path (str)  vm path to get the contents of default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False operation (str)  The type of operation to perform (browse/find) copy_precedence (int)  The copy precedence to do browse from Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.vm_files_browse_in_time",
"url":217,
"doc":"Browses the Files and Folders of a Virtual Machine in the time range specified. Args: vm_path (str)  folder path to get the contents default: '\\'; returns the root of the Backup content show_deleted_files (bool)  include deleted files in the content or not default: False restore_index (bool)  restore index if it is not cached default: True from_date (int)  date to get the contents after format: dd/MM/YYYY gets contents from 01/01/1970 if not specified default: 0 to_date (int)  date to get the contents before format: dd/MM/YYYY gets contents till current day if not specified default: 0 Returns: list - list of all folders or files with their full paths inside the input path dict - path along with the details like name, file/folder, size, modification time Raises: SDKException: if from date value is incorrect if to date value is incorrect if to date is less than from date if failed to browse content if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.set_advanced_vm_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM to restore restore_option: restore options that need to be set for advanced restore option power_on - power on the VM after restore add_to_failover - Register the VM to Failover Cluster datastore - Datastore where the VM needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.set_advanced_attach_disk_restore_options",
"url":217,
"doc":"set the advanced restore options for all vm in restore :param vm_to_restore : Name of the VM where disks will be restored restore_option: restore options that need to be set for advanced restore option datastore - Datastore where the disks needs to be restored disks (list of dict) - list with dict for each disk in VM eg: [{ name:\"disk1.vmdk\" datastore:\"local\" } { name:\"disk2.vmdk\" datastore:\"local1\" } ] guid - GUID of the VM needs to be restored new_name - New name for the VM to be restored esx_host - esx_host or client name where it need to be restored name - name of the VM to be restored",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.amazon_defaults",
"url":217,
"doc":"set all the VMconversion changes need to be performed specfic to Amazon Args: vm_to_restore (str) : content of destination subclient object restore_option (dict) : dictionary with all VM restore options",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.backup",
"url":217,
"doc":"Runs a backup job for the subclient of the level specified. Args: backup_level (str)  level of backup the user wish to run Full / Incremental / Differential / Synthetic_full incremental_backup (bool)  run incremental backup only applicable in case of Synthetic_full backup incremental_level (str)  run incremental backup before/after synthetic full BEFORE_SYNTH / AFTER_SYNTH only applicable in case of Synthetic_full backup collect_metadata (bool)  Collect Meta data for the backup advanced_options (dict)  advanced backup options to be included while making the request options: create_backup_copy_immediately  Run Backup copy just after snap backup backup_copy_type  Backup Copy level using storage policy or subclient rule schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons Returns: object - instance of the Job class for this backup job if its an immediate Job instance of the Schedule class for the backup job if its a scheduled Job Raises: SDKException: if backup level specified is not correct if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.preview_content",
"url":217,
"doc":"Preview the subclient and get the content Returns: list - List of the vms as the subclient content",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.quiesce_file_system",
"url":217,
"doc":"Gets the quiesce value set for the vsa subclient Returns: (Boolean) True/False"
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.properties",
"url":171,
"doc":"Returns the subclient properties"
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.display_name",
"url":171,
"doc":"Returns the Subclient display name"
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.subclient_guid",
"url":171,
"doc":"Returns the SubclientGUID"
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.subclient_id",
"url":171,
"doc":"Treats the subclient id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.subclient_name",
"url":171,
"doc":"Treats the subclient name as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.last_backup_time",
"url":171,
"doc":"Treats the last backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.next_backup_time",
"url":171,
"doc":"Treats the next backup time as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.is_backup_enabled",
"url":171,
"doc":"Treats the is backup enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.is_intelli_snap_enabled",
"url":171,
"doc":"Treats the is intelli snap enabled as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.is_blocklevel_backup_enabled",
"url":171,
"doc":"returns True if block level backup is enabled else returns false"
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.snapshot_engine_name",
"url":171,
"doc":"returns snapshot engine name associated with the subclient"
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.is_trueup_enabled",
"url":171,
"doc":"Treats the True up enabled as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.is_on_demand_subclient",
"url":171,
"doc":"Treats the on demand subclient as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.description",
"url":171,
"doc":"Treats the subclient description as a property of the Subclient class."
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.storage_policy",
"url":171,
"doc":"Treats the subclient storage policy as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.storage_ma",
"url":171,
"doc":"Treats the subclient storage ma as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.storage_ma_id",
"url":171,
"doc":"Treats the subclient storage ma id as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.data_readers",
"url":171,
"doc":"Treats the data readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.allow_multiple_readers",
"url":171,
"doc":"Treats the allow multiple readers as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.read_buffer_size",
"url":171,
"doc":"Treats the read buffer size as a read-only attribute."
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.is_default_subclient",
"url":171,
"doc":"Returns True if the subclient is default subclient else returns False"
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.enable_backup",
"url":171,
"doc":"Enables Backup for the subclient. Raises: SDKException: if failed to enable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.enable_trueup",
"url":171,
"doc":"Setter for the TrueUp Option for a Subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.enable_trueup_days",
"url":171,
"doc":"Setter for the TrueUp Option with reconcile after x days",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.enable_backup_at_time",
"url":171,
"doc":"Disables Backup if not already disabled, and enables at the time specified. Args: enable_time (str)  UTC time to enable the backup at, in 24 Hour format format: YYYY-MM-DD HH:mm:ss  Note In case of linux CommServer provide time in GMT timezone Raises: SDKException: if time value entered is less than the current time if time value entered is not of correct format if failed to enable backup if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.disable_backup",
"url":171,
"doc":"Disables Backup for the subclient. Raises: SDKException: if failed to disable backup of subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.exclude_from_sla",
"url":171,
"doc":"Exclude subclient from SLA. Raises: SDKException: if failed to exclude the subclient from SLA",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.enable_intelli_snap",
"url":171,
"doc":"Enables Intelli Snap for the subclient. Args: snap_engine_name (str)  Snap Engine Name Raises: SDKException: if failed to enable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.disable_intelli_snap",
"url":171,
"doc":"Disables Intelli Snap for the subclient. Raises: SDKException: if failed to disable intelli snap for subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.set_proxy_for_snap",
"url":171,
"doc":"method to set Use proxy option for intellisnap subclient Args: proxy_name(str)  Name of the proxy to be used",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.unset_proxy_for_snap",
"url":171,
"doc":"method to unset Use proxy option for intellisnap subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.get_ma_associated_storagepolicy",
"url":171,
"doc":"Get Media agents associated with storage policy Raise Exception: if unable to get MA names",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.find",
"url":171,
"doc":"Searches a file/folder in the backed up content of the subclient, and returns all the files matching the filters given. Args: Dictionary of browse options: Example: find({ 'file_name': ' .txt', 'show_deleted': True, 'from_time': '2014-04-20 12:00:00', 'to_time': '2016-04-31 12:00:00' }) Kwargs: Keyword argument of browse options: Example: find( file_name=' .txt', show_deleted=True, 'from_time': '2014-04-20 12:00:00', to_time='2016-04-31 12:00:00' ) Returns: (list, dict) list - List of only the file, folder paths from the browse response dict - Dictionary of all the paths with additional metadata retrieved from browse operation Refer  default_browse_options _ for all the supported options. Additional options supported: file_name (str)  Find files with name file_size_gt (int)  Find files with size greater than size file_size_lt (int)  Find files with size lesser than size file_size_et (int)  Find files with size equal to size  _default_browse_options: https: github.com/CommvaultEngg/cvpysdk/blob/master/cvpysdk/backupset.py L565",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.list_media",
"url":171,
"doc":"List media required to browse and restore backed up data from the subclient Args: Dictionary of options: Example: list_media({ 'path': 'c:\\hello', 'show_deleted': True, 'from_time': '2020-04-20 12:00:00', 'to_time': '2021-04-19 12:00:00' }) Kwargs: Keyword argument of options: Example: list_media( path='c:\\hello', show_deleted=True, from_time='2020-04-20 12:00:00', to_time='2021-04-19 12:00:00' ) Note: Refer  _default_browse_options in backupset.py for all the supported options. Returns: (List, Dict) - List - List of all the media required for the given options Dict - Total size of the media Raises: SDKException: if failed to list media for content if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.restore_in_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the same location. Args: paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.restore_out_of_place",
"url":171,
"doc":"Restores the files/folders specified in the input paths list to the input client, at the specified destionation location. Args: client (str/object)  either the name of the client or the instance of the Client destination_path (str)  full path of the restore location on client paths (list)  list of full paths of files/folders to restore overwrite (bool)  unconditional overwrite files during restore default: True restore_data_and_acl (bool)  restore data and ACL files default: True copy_precedence (int)  copy precedence value of storage policy copy default: None from_time (str)  time to restore the contents after format: YYYY-MM-DD HH:MM:SS default: None to_time (str)  time to restore the contents before format: YYYY-MM-DD HH:MM:SS default: None fs_options (dict)  dictionary that includes all advanced options options: preserve_level : preserve level option to set in restore proxy_client : proxy that needed to be used for restore impersonate_user : Impersonate user options for restore impersonate_password: Impersonate password option for restore in base64 encoded form all_versions : if set to True restores all the versions of the specified file versions : list of version numbers to be backed up media_agent : Media Agent need to be used for Browse and restore validate_only : To validate data backed up for restore schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons schedule_pattern (dict)  scheduling options to be included for the task Please refer schedules.schedulePattern.createSchedule() doc for the types of Jsons proxy_client (str)  Proxy client used during FS under NAS operations advanced_options (dict)  Advanced restore options Options: job_description (str)  Restore job description timezone (str)  Timezone to be used for restore  Note make use of TIMEZONES dict in constants.py to pass timezone Returns: object - instance of the Job class for this restore job if its an immediate Job instance of the Schedule class for this restore job if its a scheduled Job Raises: SDKException: if client is not a string or Client instance if destination_path is not a string if paths is not a list if failed to initialize job if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.set_backup_nodes",
"url":171,
"doc":"Sets the the backup nodes for NFS share subclient. Args: data_access_nodes (list)  the list of data access nodes to be set as backup nodes for NFS share subclient Returns: None - if the operation is successful Raises: SDKException: if unable to update the backup nodes for the subclient",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.find_latest_job",
"url":171,
"doc":"Finds the latest job for the subclient which includes current running job also. Args: include_active (bool)  to indicate if active jobs should be included default: True include_finished (bool)  to indicate if finished jobs should be included default: True lookup_time (int)  get jobs executed within the number of hours default: 1 Hour job_filter (str)  to specify type of job default: 'Backup,SYNTHFULL' for multiple filters, give the values  comma(,) separated List of Possible Values: Backup Restore AUXCOPY WORKFLOW etc http: documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job.htm to get the complete list of filters available Returns: object - instance of the Job class for the latest job Raises: SDKException: if any error occurred while finding the latest job.",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.refresh",
"url":171,
"doc":"Refresh the properties of the Subclient.",
"func":1
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.software_compression",
"url":171,
"doc":"Returns the value of Software Compression settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.network_agent",
"url":171,
"doc":"Returns the value of network agents setting on the Subclient."
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.encryption_flag",
"url":171,
"doc":"Returns the value of encryption flag settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.deduplication_options",
"url":171,
"doc":"Returns the value of deduplication options settings on the Subclient."
},
{
"ref":"cvpysdk.subclients.vssubclient.VirtualServerSubclient.plan",
"url":171,
"doc":"Returns the name of the plan associated with the subclient. Returns None if no plan is associated"
},
{
"ref":"cvpysdk.system",
"url":243,
"doc":"Main file for performing system related operations on Commcell. System is the only class defined in this file System: Class for performing system related operations on the commcell System:    = __init__(commcell_object)  initialise object of System class set_gui_timeout()  To set GUI timeout value in minutes"
},
{
"ref":"cvpysdk.system.System",
"url":243,
"doc":"Class for performing system related operations in the commcell Initialize the System class Args: commcell_object (object)  instance of the Commcell class"
},
{
"ref":"cvpysdk.system.System.set_gui_timeout",
"url":243,
"doc":"Sets GUI timeout value in minutes Args: value (str)  GUI timeout value in minutes  Note setting value to 0 will disable GUI connections to timeout",
"func":1
},
{
"ref":"cvpysdk.virtualmachinepolicies",
"url":244,
"doc":"Main file for performing virtual machine policy related operations on the Commcell. VirtualMachinePolicies: Class for representing all the Virtual Machine Policies associated with the Commcell VirtualMachinePolicy: Class for representing a single Virtual Machine Policy. Contains method definitions for common methods among all VM Policies LiveMountPolicy: Class for representing a single Live Mount Policy associated with the Commcell; inherits VirtualMachinePolicy VirtualMachinePolicies: __init__(commcell_object)  initialize the VirtualMachinePolicies instance for the Commcell __str__()  returns all the Virtual Machine policies associated with the Commcell __repr__()  returns a string for the instance of the VirtualMachinePolicies class _get_vm_policies()  gets all the Virtual Machine policies of the Commcell _set_vclient_and_vcenter_names()  sets the virtualization client name; if a vclient name is passed, checks against the available virtualization clients, otherwise sets the first one in the lists the vclient _prepare_add_vmpolicy_json_default (vm_policy_options)  sets values for creating the add policy json that are common across all vm policies _get_data_center_json (vm_policy_options)  sets values for creating the datacenter json value in the add policy json _set_data_center(vm_policy_options)  sets the datacenter name if provided by user, or sets the alphabetically lowest one in the vcenter as default _get_esx_servers_json (vm_policy_options)  sets values for creating the esxServers value in the add policy json _get_esx_server_list(_datacenter)  returns list of esx servers in the datacenter _get_data_stores_json (vm_policy_options)  sets values for creating the datastore value in the add policy json _get_datastores_list(_esxservers)  returns list of datastores for all the esx servers that are specified _clone_vm_policy(vm_policy_json)  private method to clone a vm policy from VirtualMachinePolicy object _prepare_add_vmpolicy_json_livemount (vm_policy_options)  sets values for creating the add policy json that are specific for creating Live Mount policy _security_associations_json (vm_policy_options)  sets values for creating the security associations value in the add policy json _network_names_json (vm_policy_options)  sets values for creating the network names value in the add policy json _media_agent_json(vm_policy_options)  sets values for creating the media agent json value in the add policy json (only for Live Mount policy) _entity_json(vm_policy_options)  sets values for creating the entity json value in the add policy json has_policy(vm_policy_name)  checks if a Virtual Machine policy exists with the given name in a particular instance get(vm_policy_name)  returns a VirtualMachinePolicy object of the specified virtual machine policy name add(vm_policy_name, vm_policy_type, vclient_name, vm_policy_options)  adds a new Virtual Machine policy to the VirtualMachinePolicies instance,and returns an object of corresponding vm_policy_type delete(vm_policy_name)  removes the specified Virtual Machine policy from the Commcell refresh()  refresh the virtual machine policies VirtualMachinePolicy: __new__( cls, commcell_object, vm_policy_name, vm_policy_type_id, vm_policy_id=None)  decides which instance object needs to be created __init__(commcell_object, vm_policy_name, vm_policy_type, VMPolicy_id, vm_policy_details)  initialize the instance of VirtualMachinePolicy class for a specific virtual machine policy of the Commcell __repr__()  returns a string representation of the VirtualMachinePolicy instance _get_vm_policy_id()  gets the id of the vm policy _get_vm_policy_properties()  returns the policy properties _update_vm_policy()  updates the vm policy using a PUT request with the updated properties json. disable(vm_policy_name)  disables the specified policy, if enabled enable(vm_policy_name)  enables the specified policy, if disabled clone(desired_vm_policy_name)  copies properties of the vm policy instance and creates a new VM Policy with the specified name properties()  returns the properties of the vm policy as a dictionary refresh()  refresh the virtual machine policy properties LiveMountPolicy: __init__(commcell_object, vm_policy_name, vm_policy_type, VMPolicy_id, vm_policy_details)  initialize the instance of LiveMountPolicy class for a specific virtual machine policy of the Commcell __repr__()  returns a string representation of the LiveMountPolicy instance _set_mounted_vm_name(live_mount_options)  sets the vm name for the live mounted vm _prepare_live_mount_json(live_mount_options)  sets values for creating the add policy json __associations_json(live_mount_options)  sets the associations value for the live mount job json _task_json(live_mount_options)  sets the task value for the live mount job json _subtask_json(live_mount_options)  sets the subTask value for the live mount job json _one_touch_response_json(live_mount_options)  sets the oneTouchResponse value for the live mount job json _hwconfig_json(live_mount_options)  sets the hwConfig value for the live mount job json _netconfig_json(live_mount_options)  sets the netConfig value for the live mount job json _vm_entity_json(live_mount_options)  sets the vmEntity value for the live mount job json _vm_info_json(live_mount_options)  Sets the vmInfo value for the live mount job json _is_hidden_client(self, client_name)  checks if specified client is a hidden client for the Commcell instance _validate_live_mount(self, client_name)  check if the specified vm has a backup for live mount view_active_mounts()  shows all active mounts for the specified Live Mount Policy instance live_mount(vm_name, live_mount_options=None)  run Live Mount for this Live Mount policy instance"
},
{
"ref":"cvpysdk.virtualmachinepolicies.VirtualMachinePolicies",
"url":244,
"doc":"Class for representing all the Virtual Machine Policies associated with the Commcell. Initialize object of the VirtualMachinePolicies class. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the VirtualMachinePolicies class"
},
{
"ref":"cvpysdk.virtualmachinepolicies.VirtualMachinePolicies.has_policy",
"url":244,
"doc":"Checks if a Virtual Machine policy exists with the given name Args: policy_name (str)  name of the vm policy Returns: bool - boolean output whether the vm policy exists in the commcell or not Raises: SDKException: if type of the vm policy name argument is not string",
"func":1
},
{
"ref":"cvpysdk.virtualmachinepolicies.VirtualMachinePolicies.get",
"url":244,
"doc":"Returns a VirtualMachinePolicy object of the specified virtual machine policy name. Args: vm_policy_name (str)  name of the virtual machine policy Returns: object - instance of the VirtualMachinePolicy class for the given policy name Raises: SDKException: if type of the virtual machine policy name argument is not string if no virtual machine policy exists with the given name",
"func":1
},
{
"ref":"cvpysdk.virtualmachinepolicies.VirtualMachinePolicies.add",
"url":244,
"doc":"Adds a new Virtual Machine Policy to the Commcell. Args: vm_policy_name (str)  name of the new virtual machine policy to add to the Commcell instance vm_policy_type (str)  type of virtual machine policy to be added [\"Live Mount\", \"Clone From Template\", \"Restore From Backup\"] vclient_name (str)  the name of the virtualization client under which vm policy is to be added vm_policy_options (dict)  optional dictionary passed by user to create a vm policy. Allowed key-value pairs and input types are given below default: None \"allDataStoresSelected\" (Boolean) : if all data stores are to be selected; matters only if migrateVMs is set to True, \"daysRetainUntil\" (int) : how many days to retain backup until, \"migrateVMs\" (Boolean) : migrate to datastore after expiry (only for LiveMount), \"senderEmailId\" (str) : email id of sender, \"minutesRetainUntil\" (int) : how many days to retain backup until \"notifyToEmailIds\" (str) : email id's to notify to; multiple emails separated by a comma \"quotaType\" (int) : number of vm's/live mounts/labs per user, \"maxVMQuota\" (int) : maximum number of VM quota, \"namingPattern\" (str) : naming patter, \"description\" (str) : description of vm policy, \"enabled\" (Boolean) : whether vm policy is enabled or not, \"allowRenewals\" (Boolean) : whether to allow renewals or not, \"disableSuccessEmail\" (Boolean) : send email on succesful creation of vm policy, \"allESXServersSelected\" (Boolean) : select all esx servers in the vcenter, \"dataCenterName\" (str) : data center name for vm policy, \"dataStores\" list(str) : list of data store names, \"esxServers\" list(str) : list of esx server names, \"users\" list(str) : list of users (user-names) to add to vm policy, \"userGroups\" list(str) : list of usergroups (usergroup-names) to add to vm policy, \"networkNames\" list(str) : list of network names,             only for Live Mount             \"mediaAgent\" (str) : media agent name for Live Mount, \"performAutoMigration\" (Boolean) : automatic migration of vm Returns: object  object of the corresponding virtual machine policy type Raises: SDKException: if type of the vm policy name argument is not string if type of the vcenter name argument is not string if type of virtualization client name argument is not string or None if policy type is not one of the virtual machine policy types as defined if the type of vm_policy_options is not dict or None if vm policy already exists with the given name (case insensitive) if failed to create vm policy if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.virtualmachinepolicies.VirtualMachinePolicies.delete",
"url":244,
"doc":"Deletes the specified virtual machine policy from the commcell. Args: vm_policy_name (str)  name of the virtual machine policy to delete Raises: SDKException: if type of the virtual machine policy name argument is not string if failed to delete virtual machine policy if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.virtualmachinepolicies.VirtualMachinePolicies.refresh",
"url":244,
"doc":"Refresh the Virtual Machine policies.",
"func":1
},
{
"ref":"cvpysdk.virtualmachinepolicies.VirtualMachinePolicy",
"url":244,
"doc":"Class for representing a single Virtual Machine Policy. Contains method definitions for common operations among all VM Policies Initialize object of the VirtualMachinePolicy class. Args: commcell_object (object)  instance of the Commcell class vm_policy_name (str)  name of the vm policy to be created vm_policy_type_id (int)  type of policy (integer code for vm policy) vm_policy_id (int)  vm policy id if available (optional) Returns: object  instance of the VirtualMachinePolicy class"
},
{
"ref":"cvpysdk.virtualmachinepolicies.VirtualMachinePolicy.vm_policy_name",
"url":244,
"doc":"Treats the virtual machine policy name as a read-only attribute."
},
{
"ref":"cvpysdk.virtualmachinepolicies.VirtualMachinePolicy.vm_policy_id",
"url":244,
"doc":"Treats the virtual machine policy id as a read-only attribute."
},
{
"ref":"cvpysdk.virtualmachinepolicies.VirtualMachinePolicy.vm_policy_type_id",
"url":244,
"doc":"Treats the virtual machine policy type id as a read-only attribute."
},
{
"ref":"cvpysdk.virtualmachinepolicies.VirtualMachinePolicy.disable",
"url":244,
"doc":"Disables a virtual machine policy if it is enabled. Raises: SDKException: if vm policy is already disabled",
"func":1
},
{
"ref":"cvpysdk.virtualmachinepolicies.VirtualMachinePolicy.enable",
"url":244,
"doc":"Enables a virtual machine policy if it is disabled. Raises: SDKException: if vm policy is already enabled",
"func":1
},
{
"ref":"cvpysdk.virtualmachinepolicies.VirtualMachinePolicy.clone",
"url":244,
"doc":"copies properties of the particular VM Policy and creates a new VM Policy with the specified name Args: desired_vm_policy_name (str)  name of the policy that is going to be created Returns: object  object of the Virtual Machine Policy Raises: SDKException: if type of the desired vm policy name argument is not string if a vm policy already exists by the desired vm policy name",
"func":1
},
{
"ref":"cvpysdk.virtualmachinepolicies.VirtualMachinePolicy.properties",
"url":244,
"doc":"Returns the virtual machine properties",
"func":1
},
{
"ref":"cvpysdk.virtualmachinepolicies.VirtualMachinePolicy.refresh",
"url":244,
"doc":"Refresh the Virtual Machine policy properties.",
"func":1
},
{
"ref":"cvpysdk.virtualmachinepolicies.LiveMountPolicy",
"url":244,
"doc":"Derived class from VirtualMachinePolicy base class for representing a single Live Mount Policy. Contains method definitions for operations specific for Live Mount and also runnning Live Mount job Initialize object of the LiveMountPolicy class. Args: commcell_object (object)  instance of the Commcell class vm_policy_name (str)  name of the Live Mount policy vm_policy_type_id (int)  policy type id vm_policy_id (int)  id of the Live Mount policy, if available Returns: object  instance of the LiveMountPolicy class"
},
{
"ref":"cvpysdk.virtualmachinepolicies.LiveMountPolicy.view_active_mounts",
"url":244,
"doc":"View active mounts for this Live Mount policy instance Returns: response.json()['virtualMachines'] (list)  list of dictionary containing information about the vm's that are currently mounted using this ive mount policy Raises: SDKException: if no response is found if response is not a success",
"func":1
},
{
"ref":"cvpysdk.virtualmachinepolicies.LiveMountPolicy.live_mount",
"url":244,
"doc":"Run Live Mount for this Live Mount policy instance Args: client_vm_name (str)  client vm name for which live mount is to be run live_mount_options: (dict)  list of optional parameters for each live mount job. Allowed key-value pairs and input types are given below default : None 'vmName' (str) : name of the new vm that will be mounted 'copyPrecedence' (int) : number for the storage policy copy to use Default value is zero (copy with highest precedence is used) 'pointInTime' (dict) : to select live mount from point in time, provide a dict with following key-value pairs \"timeValue\" (str) : date and time in below format \"yyyy-mm-dd hh:mm:ss\". \"2018-06-18 16:09:00\", for example. \"TimeZoneName\" (str) : time zone value in given format (MS Windows time zone options). \"(UTC-05:00) Eastern Time (US & Canada)\" } Raises: SDKException: if the vm name passed is not string if the vm name passed does not exist if a vm is not backed up if the destination vm name (if provided) is not a string if a vm with the destination vm name already exists (if provided) Returns: live_mount_job (object)  Job object for the corresponding live mount job",
"func":1
},
{
"ref":"cvpysdk.virtualmachinepolicies.LiveMountPolicy.live_mounted_vm_name",
"url":244,
"doc":"Treats the live mounted vm name as a read-only attribute."
},
{
"ref":"cvpysdk.virtualmachinepolicies.LiveMountPolicy.vm_policy_name",
"url":244,
"doc":"Treats the virtual machine policy name as a read-only attribute."
},
{
"ref":"cvpysdk.virtualmachinepolicies.LiveMountPolicy.vm_policy_id",
"url":244,
"doc":"Treats the virtual machine policy id as a read-only attribute."
},
{
"ref":"cvpysdk.virtualmachinepolicies.LiveMountPolicy.vm_policy_type_id",
"url":244,
"doc":"Treats the virtual machine policy type id as a read-only attribute."
},
{
"ref":"cvpysdk.virtualmachinepolicies.LiveMountPolicy.disable",
"url":244,
"doc":"Disables a virtual machine policy if it is enabled. Raises: SDKException: if vm policy is already disabled",
"func":1
},
{
"ref":"cvpysdk.virtualmachinepolicies.LiveMountPolicy.enable",
"url":244,
"doc":"Enables a virtual machine policy if it is disabled. Raises: SDKException: if vm policy is already enabled",
"func":1
},
{
"ref":"cvpysdk.virtualmachinepolicies.LiveMountPolicy.clone",
"url":244,
"doc":"copies properties of the particular VM Policy and creates a new VM Policy with the specified name Args: desired_vm_policy_name (str)  name of the policy that is going to be created Returns: object  object of the Virtual Machine Policy Raises: SDKException: if type of the desired vm policy name argument is not string if a vm policy already exists by the desired vm policy name",
"func":1
},
{
"ref":"cvpysdk.virtualmachinepolicies.LiveMountPolicy.properties",
"url":244,
"doc":"Returns the virtual machine properties",
"func":1
},
{
"ref":"cvpysdk.virtualmachinepolicies.LiveMountPolicy.refresh",
"url":244,
"doc":"Refresh the Virtual Machine policy properties.",
"func":1
},
{
"ref":"cvpysdk.workflow",
"url":245,
"doc":"File for performing Workflow related operations on Commcell. WorkFlows and WorkFlow are the two classes defined in this file. WorkFlows: Class for representing all the workflows associated with the commcell Workflow: Class for a single workflow of the commcell WorkFlows: __init__(commcell_object)  initialize instance of the WorkFlow class __str__()  returns all the workflows associated with the commcell __repr__()  returns all the workflows deployed in the commcell __len__()  returns the number of workflows associated with the Commcell __getitem__()  returns the name of the workflow for the given WF ID or the details for the given workflow name _get_workflows()  gets all the workflows deployed on the commcell _get_activities()  gets all the workflow activities deployed on the commcell has_workflow(workflow_name)  checks if the workflow exists with given name or not has_activity(activity_name)  checks if the workflow activity exists with given name or not import_workflow(workflow_xml)  imports a workflow to the Commcell import_activity(activity_xml)  imports a workflow activity to the Commcell download_workflow_from_store()  downloads given workflow from the cloud.commvault.com get()  returns the instance of a specific workflow on commcell delete_workflow()  deletes a workflow from the commcell refresh()  refresh the workflows added to the Commcell refresh_activities()  refresh the workflow activities added to the commcell get_interaction_properties()  Returns a workflow interaction properties to the user submit_initeraction()  Submits a given interaction with specified action all_interactions()  Returns all interactive interactions for workflows on commcell @Property all_workflows  returns all workflows on Commcell all_activities  returns all activities on Commcell Workflow: @Private Modules _read_inputs()  gets the values for a workflow input _get_workflow_id()  Get Workflow id _read_inputs()  Gets the values from the user for a workflow input. _set_workflow_properties()  Sets Workflow properties _get_workflow_properties()  Get workflow properties _get_workflow_definition()  Get workflow definition properties @Class Modules set_workflow_configuration()  Set workflow configuration enable()  Enables the workflow disable()  Disables the workflow deploy_workflow()  Deploys a workflow to the Commcell execute_workflow()  Executes a workflow and returns the job instance export_workflow()  Exports a workflow and returns the workflow xml path clone_workflow()  Clones the workflow schedule_workflow()  Creates a schedule for the workflow _process_workflow_schedule_response  processes the response received schedule creation request refresh()  Refreshes the workflow properties @Property workflow_name  Returns workflow name workflow_id  Returns workflow id workflow_description  Returns workflow description"
},
{
"ref":"cvpysdk.workflow.WorkFlows",
"url":245,
"doc":"Class for representing all workflows associated with the commcell. Initialize the WorkFlow class instance for performing workflow related operations. Args: commcell_object (object)  instance of the Commcell class Returns: object - instance of the WorkFlow class"
},
{
"ref":"cvpysdk.workflow.WorkFlows.has_workflow",
"url":245,
"doc":"Checks if a workflow exists in the commcell with the input workflow name. Args: workflow_name (str)  name of the workflow Returns: bool - boolean output whether the workflow exists in the commcell or not Raises: SDKException: if type of the workflow name argument is not string",
"func":1
},
{
"ref":"cvpysdk.workflow.WorkFlows.has_activity",
"url":245,
"doc":"Checks if a workflow activity exists in the commcell with the input activity name. Args: activity_name (str)  name of the activity Returns: bool - boolean output whether the workflow activity exists in the commcell or not Raises: SDKException: if type of the workflow activity name argument is not string",
"func":1
},
{
"ref":"cvpysdk.workflow.WorkFlows.import_workflow",
"url":245,
"doc":"Imports a workflow to the Commcell. Args: workflow_xml (str)  path of the workflow xml file / XML contents checks whether the given value is a local file, and reads its contents otherwise, uses the value given as the body for the POST request Returns: None Raises: SDKException: if type of the workflow xml argument is not string if workflow xml is not a valid xml / a valid file path if HTTP Status Code is not SUCCESS / importing workflow failed",
"func":1
},
{
"ref":"cvpysdk.workflow.WorkFlows.import_activity",
"url":245,
"doc":"Imports a workflow activity to the Commcell. Args: activity_xml (str)  path of the workflow activity xml file / XMl contents. Checks whether the given value is a local file, and reads its contents otherwise, uses the value given as the body for the POST request Returns: None Raises: SDKException: if type of the workflow activity xml argument is not string if workflow activity xml is not a valid xml / a valid file path if HTTP Status Code is not SUCCESS / importing workflow failed",
"func":1
},
{
"ref":"cvpysdk.workflow.WorkFlows.download_workflow_from_store",
"url":245,
"doc":"Downloads workflow from Software Store. Args: workflow_name (str)  name of the workflow to download download_location (str)  location to download the workflow at cloud_username (str)  username for the cloud account cloud_password (str)  password for the above username Returns: str - full path of the workflow XML Raises: SDKException: if type of the workflow name argument is not string if HTTP Status Code is not SUCCESS / download workflow failed",
"func":1
},
{
"ref":"cvpysdk.workflow.WorkFlows.get",
"url":245,
"doc":"Returns a workflow object if workflow name matches specified name We check if specified name matches any of the existing workflow names. Args: workflow_name (str)  name of the workflow kwargs (dict)  Optional arguments. Available kwargs Options: get_properties (bool)  Fetches workflow properties based on value passed Returns: object - instance of the Workflow class for the given workflow name Raises: SDKException: if type of the workflow name argument is not string if no workflow exists with the given name",
"func":1
},
{
"ref":"cvpysdk.workflow.WorkFlows.delete_workflow",
"url":245,
"doc":"Deletes a workflow from the Commcell. Args: workflow_name (str)  name of the workflow to remove Raises: SDKException: if type of the workflow name argument is not string if HTTP Status Code is not SUCCESS / importing workflow failed",
"func":1
},
{
"ref":"cvpysdk.workflow.WorkFlows.refresh",
"url":245,
"doc":"Refresh the list of workflows deployed on the Commcell.",
"func":1
},
{
"ref":"cvpysdk.workflow.WorkFlows.refresh_activities",
"url":245,
"doc":"Refresh the list of workflow activities deployed on the Commcell.",
"func":1
},
{
"ref":"cvpysdk.workflow.WorkFlows.get_interaction_properties",
"url":245,
"doc":"Returns a workflow interaction properties to the user Args: interaction_id (int)  Workflow interaction id workflow_job_id (int)  Workflow job id Returns: dictionary - Workflow interaction id properties Raises: SDKException: - if response is empty",
"func":1
},
{
"ref":"cvpysdk.workflow.WorkFlows.submit_interaction",
"url":245,
"doc":"Submits a given interaction with specified action Args: interaction (dict)  Interaction dictionary e.g: { \"interactionId\": 3871, \"created\": 1547524940, \"subject\": \"Delete Backupset [ -> -> ] requested by [ 11111_Automation_45_651 ]\", \"activityName\": \"Get Authorization\", \"flags\": 1, \"description\":  , \"sessionId\": \"a38b32dc-f505-45c5-9d61-3eaee226b50c\", \"processStepId\": 648993, \"jobId\": 2804488, \"status\": 0, \"workflow\": { \"workflowName\": \"GetAndProcessAuthorization\", \"workflowId\": 2095 }, \"commCell\": { \"commCellName\": \"WIN-K2DCEJR56MG\", \"commCellId\": 2 }, \"client\": { \"clientId\": 2, \"clientName\": \"WIN-K2DCEJR56MG\" }, \"user\": { \"userName\": \"11111_Automation_01-14-2019_23_01_45_651\", \"userId\": 1418 } } input_xml (str)  Input XML string for completing the interaction. e.g : This is very specific to the user input interaction. Construct the input XML based on workflow being executed and send to this module. action (str)  Interaction action This is very specific to workflow being executed and the expected options for the given interaction Raises: Exception: Failed to submit workflow interaction request",
"func":1
},
{
"ref":"cvpysdk.workflow.WorkFlows.all_interactions",
"url":245,
"doc":"Returns all interactive interactions for workflows on commcell Args: None Raises: SDKException: if response is empty if there are no interactions",
"func":1
},
{
"ref":"cvpysdk.workflow.WorkFlows.all_workflows",
"url":245,
"doc":"Returns the dictionary consisting of all the workflows and their info."
},
{
"ref":"cvpysdk.workflow.WorkFlows.all_activities",
"url":245,
"doc":"Treats the activities as a read-only attribute."
},
{
"ref":"cvpysdk.workflow.WorkFlow",
"url":245,
"doc":"Class for representing a workflow on a commcell. Initialize the WorkFlow class instance for performing workflow related operations. Args: commcell_object (object)  instance of the Commcell class workflow_name (str)  Name of the workflow workflow_id (str)  id of the workflow default: None kwargs (dict)  Optional arguments. Available kwargs Options: get_properties (bool)  Fetches workflow properties based on value passed Returns: object - instance of the WorkFlow class"
},
{
"ref":"cvpysdk.workflow.WorkFlow.set_workflow_configuration",
"url":245,
"doc":"Set Workflow configuration Args: config_xml (xml) : Configuration inputs for the workflow's properties->configuration tab Raises: SDKException: if HTTP Status Code is not SUCCESS / Setting workflow set_workflow_configuration failed",
"func":1
},
{
"ref":"cvpysdk.workflow.WorkFlow.enable",
"url":245,
"doc":"Enable Worklfow Raises: SDKException: if HTTP Status Code is not SUCCESS / Enabling workflow fails",
"func":1
},
{
"ref":"cvpysdk.workflow.WorkFlow.disable",
"url":245,
"doc":"Disable Worklfow Raises: SDKException: if HTTP Status Code is not SUCCESS / Disabling workflow fails",
"func":1
},
{
"ref":"cvpysdk.workflow.WorkFlow.deploy_workflow",
"url":245,
"doc":"Deploys a workflow on the Commcell. Args: workflow_engine (str)  name of the client to deploy the workflow on default: None workflow_xml (str)  path of the workflow xml file / XMl contents checks whether the given value is a local file, and reads its contents otherwise, uses the value given as the body for the POST request default: None Returns: None Raises: SDKException: if type of the workflow name argument is not string if workflow xml argument is given and is not of type string if no workflow exists with the given name if workflow xml is given and is not a valid xml / a valid file path if failed to deploy workflow if response is empty if response is not success",
"func":1
},
{
"ref":"cvpysdk.workflow.WorkFlow.execute_workflow",
"url":245,
"doc":"Executes the workflow with the workflow name given as input, and returns its job id. Args: workflow_inputs (dict)  dictionary consisting of inputs for the workflow if inputs are not given, user will be prompted for inputs on the command line default: None inputs dict format: { 'input1_name': 'input1_value', 'input2_name': 'input2_value' } e.g.: for executing the Demo_CheckReadiness workflow, inputs dict would be: { \"ClientGroupName\": \"client_group_value\" } hidden (bool)  Is the workflow hidden ? True/False Returns:  tuple - ( dict ,  str  /  dict  /  object )  dict - returns the outputs dictionary received in the response of the API  str / dict / object str - when workflow is executed in API mode when no job id was returned / job ID or error code is 0 dict - complete response received from the server when the response did not had any expected values object - instance of the Job class for this workflow job object of the Job class is mainly returned when the Workflow being executed has User Sessions, OR the workflow is executed in JOB mode Raises: SDKException: if type of the workflow name argument is not string if failed to execute workflow if response is empty if response is not success if no workflow exists with the given name",
"func":1
},
{
"ref":"cvpysdk.workflow.WorkFlow.export_workflow",
"url":245,
"doc":"Exports the workflow to the directory location specified by the user. Args: export_location (str)  Directory where the workflow would be exported default: None Returns: str - absolute path of the exported workflow xml file Raises: SDKException: if export_location does not exist if no workflow exists with the given name if response is empty if response is not success if failed to write to export file",
"func":1
},
{
"ref":"cvpysdk.workflow.WorkFlow.clone_workflow",
"url":245,
"doc":"Clones the workflow Args: clone_workflow_name (str) : name for the new workflow(clone) Raises: SDKException: if response is not status If cloning workflow operation fails",
"func":1
},
{
"ref":"cvpysdk.workflow.WorkFlow.schedule_workflow",
"url":245,
"doc":"Creates a schedule for a workflow Args: schedule_pattern(dict)  Please refer SchedulePattern.create_schedule in schedules.py for the types of pattern to be sent eg: { \"schedule_name: 'schedule1', \"freq_type\": 'daily', \"active_start_time\": time_in_%H/%S (str), \"repeat_days\": days_to_repeat (int) } workflow_inputs(dict)  dictionary consisting of inputs for the workflow if inputs are not given, user will be prompted for inputs on the command line default: None inputs dict format: { 'input1_name': 'input1_value', 'input2_name': 'input2_value' } e.g.: for executing the Demo_CheckReadiness workflow, inputs dict would be: { \"ClientGroupName\": \"client_group_value\" } Returns: Object : An instance of the Schedule class for the schedule created",
"func":1
},
{
"ref":"cvpysdk.workflow.WorkFlow.refresh",
"url":245,
"doc":"Refreshes the properties of the workflow.",
"func":1
},
{
"ref":"cvpysdk.workflow.WorkFlow.workflow_name",
"url":245,
"doc":"Treats the workflow name as a read-only attribute."
},
{
"ref":"cvpysdk.workflow.WorkFlow.workflow_id",
"url":245,
"doc":"Treats the workflow id as a read-only attribute."
},
{
"ref":"cvpysdk.workflow.WorkFlow.version",
"url":245,
"doc":"Treats the workflow version as a property of the Workflow class."
},
{
"ref":"cvpysdk.workflow.WorkFlow.revision",
"url":245,
"doc":"Treats the workflow revision as a property of the Workflow class."
},
{
"ref":"cvpysdk.workflow.WorkFlow.flags",
"url":245,
"doc":"Treats the workflow flags as a property of the Workflow class."
},
{
"ref":"cvpysdk.workflow.WorkFlow.description",
"url":245,
"doc":"Treats the workflow description as a property of the Workflow class."
}
]